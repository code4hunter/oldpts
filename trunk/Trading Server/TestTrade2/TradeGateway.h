// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `TradeGateway.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __E__pts2_trunk_TradeGateway_SqjsApi_TradeGateway_h__
#define __E__pts2_trunk_TradeGateway_SqjsApi_TradeGateway_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/Properties.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace TradeGateway
{

class SessionReceiver;

class TradeApiSession;

class SessionManager;

}

}

namespace TradeGateway
{

class SessionReceiver;
bool operator==(const SessionReceiver&, const SessionReceiver&);
bool operator<(const SessionReceiver&, const SessionReceiver&);

class TradeApiSession;
bool operator==(const TradeApiSession&, const TradeApiSession&);
bool operator<(const TradeApiSession&, const TradeApiSession&);

class SessionManager;
bool operator==(const SessionManager&, const SessionManager&);
bool operator<(const SessionManager&, const SessionManager&);

}

namespace IceInternal
{

::Ice::Object* upCast(::TradeGateway::SessionReceiver*);
::IceProxy::Ice::Object* upCast(::IceProxy::TradeGateway::SessionReceiver*);

::Ice::Object* upCast(::TradeGateway::TradeApiSession*);
::IceProxy::Ice::Object* upCast(::IceProxy::TradeGateway::TradeApiSession*);

::Ice::Object* upCast(::TradeGateway::SessionManager*);
::IceProxy::Ice::Object* upCast(::IceProxy::TradeGateway::SessionManager*);

}

namespace TradeGateway
{

typedef ::IceInternal::Handle< ::TradeGateway::SessionReceiver> SessionReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TradeGateway::SessionReceiver> SessionReceiverPrx;

void __read(::IceInternal::BasicStream*, SessionReceiverPrx&);
void __patch__SessionReceiverPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::TradeGateway::TradeApiSession> TradeApiSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TradeGateway::TradeApiSession> TradeApiSessionPrx;

void __read(::IceInternal::BasicStream*, TradeApiSessionPrx&);
void __patch__TradeApiSessionPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::TradeGateway::SessionManager> SessionManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TradeGateway::SessionManager> SessionManagerPrx;

void __read(::IceInternal::BasicStream*, SessionManagerPrx&);
void __patch__SessionManagerPtr(void*, ::Ice::ObjectPtr&);

}

namespace TradeGateway
{

class OperationFailedException : public ::Ice::UserException
{
public:

    OperationFailedException() {}
    explicit OperationFailedException(const ::std::string&);
    virtual ~OperationFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::std::string reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static OperationFailedException __OperationFailedException_init;

enum MessageType
{
    Information,
    Error,
    Warning
};

void __write(::IceInternal::BasicStream*, MessageType);
void __read(::IceInternal::BasicStream*, MessageType&);

struct MessageInfo
{
    ::TradeGateway::MessageType type;
    ::std::string name;
    ::std::string value;

    bool operator==(const MessageInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const MessageInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const MessageInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const MessageInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const MessageInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const MessageInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::MessageInfo> MessageInfoSeq;
void __writeMessageInfoSeq(::IceInternal::BasicStream*, const ::TradeGateway::MessageInfo*, const ::TradeGateway::MessageInfo*);
void __readMessageInfoSeq(::IceInternal::BasicStream*, MessageInfoSeq&);

struct AssetInfo
{
    ::std::string accountId;
    ::Ice::Double initial;
    ::Ice::Double balance;
    ::Ice::Double equity;
    ::Ice::Double available;
    ::Ice::Double frozenMargin;
    ::Ice::PropertyDict extra;

    bool operator==(const AssetInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(accountId != __rhs.accountId)
        {
            return false;
        }
        if(initial != __rhs.initial)
        {
            return false;
        }
        if(balance != __rhs.balance)
        {
            return false;
        }
        if(equity != __rhs.equity)
        {
            return false;
        }
        if(available != __rhs.available)
        {
            return false;
        }
        if(frozenMargin != __rhs.frozenMargin)
        {
            return false;
        }
        if(extra != __rhs.extra)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AssetInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(accountId < __rhs.accountId)
        {
            return true;
        }
        else if(__rhs.accountId < accountId)
        {
            return false;
        }
        if(initial < __rhs.initial)
        {
            return true;
        }
        else if(__rhs.initial < initial)
        {
            return false;
        }
        if(balance < __rhs.balance)
        {
            return true;
        }
        else if(__rhs.balance < balance)
        {
            return false;
        }
        if(equity < __rhs.equity)
        {
            return true;
        }
        else if(__rhs.equity < equity)
        {
            return false;
        }
        if(available < __rhs.available)
        {
            return true;
        }
        else if(__rhs.available < available)
        {
            return false;
        }
        if(frozenMargin < __rhs.frozenMargin)
        {
            return true;
        }
        else if(__rhs.frozenMargin < frozenMargin)
        {
            return false;
        }
        if(extra < __rhs.extra)
        {
            return true;
        }
        else if(__rhs.extra < extra)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AssetInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AssetInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AssetInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AssetInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::AssetInfo> AssetInfoSeq;
void __writeAssetInfoSeq(::IceInternal::BasicStream*, const ::TradeGateway::AssetInfo*, const ::TradeGateway::AssetInfo*);
void __readAssetInfoSeq(::IceInternal::BasicStream*, AssetInfoSeq&);

enum MarketIdSource
{
    SSE,
    SZSE,
    SHFE,
    DCE,
    CZCE,
    CFFEX,
    HKEX,
    MktUnknow
};

void __write(::IceInternal::BasicStream*, MarketIdSource);
void __read(::IceInternal::BasicStream*, MarketIdSource&);

struct InstrumentId
{
    ::std::string securityID;
    ::TradeGateway::MarketIdSource securityIDSource;

    bool operator==(const InstrumentId& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(securityID != __rhs.securityID)
        {
            return false;
        }
        if(securityIDSource != __rhs.securityIDSource)
        {
            return false;
        }
        return true;
    }

    bool operator<(const InstrumentId& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(securityID < __rhs.securityID)
        {
            return true;
        }
        else if(__rhs.securityID < securityID)
        {
            return false;
        }
        if(securityIDSource < __rhs.securityIDSource)
        {
            return true;
        }
        else if(__rhs.securityIDSource < securityIDSource)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const InstrumentId& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const InstrumentId& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const InstrumentId& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const InstrumentId& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

enum Side
{
    Buy,
    Sell,
    Subscribe,
    Redeem,
    Lend,
    Borrow,
    SideUnknow
};

void __write(::IceInternal::BasicStream*, Side);
void __read(::IceInternal::BasicStream*, Side&);

enum PositionEffect
{
    Open,
    Close,
    CloseToday,
    PosEftUnknow
};

void __write(::IceInternal::BasicStream*, PositionEffect);
void __read(::IceInternal::BasicStream*, PositionEffect&);

enum OrdType
{
    Market,
    Limit,
    LimitOrBetter,
    OrdTypeUnknow
};

void __write(::IceInternal::BasicStream*, OrdType);
void __read(::IceInternal::BasicStream*, OrdType&);

struct Order
{
    ::std::string accountId;
    ::TradeGateway::InstrumentId inst;
    ::TradeGateway::Side s;
    ::TradeGateway::PositionEffect posEfct;
    ::TradeGateway::OrdType type;
    ::Ice::Double lmtPrice;
    ::Ice::Int ordQty;
    ::std::string ordId;
    ::Ice::Int date;
    ::Ice::Int time;
    ::Ice::PropertyDict extra;

    bool operator==(const Order& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(accountId != __rhs.accountId)
        {
            return false;
        }
        if(inst != __rhs.inst)
        {
            return false;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        if(posEfct != __rhs.posEfct)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(lmtPrice != __rhs.lmtPrice)
        {
            return false;
        }
        if(ordQty != __rhs.ordQty)
        {
            return false;
        }
        if(ordId != __rhs.ordId)
        {
            return false;
        }
        if(date != __rhs.date)
        {
            return false;
        }
        if(time != __rhs.time)
        {
            return false;
        }
        if(extra != __rhs.extra)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Order& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(accountId < __rhs.accountId)
        {
            return true;
        }
        else if(__rhs.accountId < accountId)
        {
            return false;
        }
        if(inst < __rhs.inst)
        {
            return true;
        }
        else if(__rhs.inst < inst)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        if(posEfct < __rhs.posEfct)
        {
            return true;
        }
        else if(__rhs.posEfct < posEfct)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(lmtPrice < __rhs.lmtPrice)
        {
            return true;
        }
        else if(__rhs.lmtPrice < lmtPrice)
        {
            return false;
        }
        if(ordQty < __rhs.ordQty)
        {
            return true;
        }
        else if(__rhs.ordQty < ordQty)
        {
            return false;
        }
        if(ordId < __rhs.ordId)
        {
            return true;
        }
        else if(__rhs.ordId < ordId)
        {
            return false;
        }
        if(date < __rhs.date)
        {
            return true;
        }
        else if(__rhs.date < date)
        {
            return false;
        }
        if(time < __rhs.time)
        {
            return true;
        }
        else if(__rhs.time < time)
        {
            return false;
        }
        if(extra < __rhs.extra)
        {
            return true;
        }
        else if(__rhs.extra < extra)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Order& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Order& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Order& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Order& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::Order> OrderSeq;
void __writeOrderSeq(::IceInternal::BasicStream*, const ::TradeGateway::Order*, const ::TradeGateway::Order*);
void __readOrderSeq(::IceInternal::BasicStream*, OrderSeq&);

enum OrderStatus
{
    New,
    PendingNew,
    Working,
    PendingCancel,
    Filled,
    DoneForDay,
    Canceled,
    Stopped,
    Rejected,
    OrdStatusUnknow
};

void __write(::IceInternal::BasicStream*, OrderStatus);
void __read(::IceInternal::BasicStream*, OrderStatus&);

struct OrderReport
{
    ::TradeGateway::Order base;
    ::TradeGateway::OrderStatus ordStatus;
    ::Ice::Int cumQty;
    ::Ice::Double avgPx;
    ::Ice::Int leavesQty;
    ::std::string text;
    ::std::string seq;
    ::Ice::PropertyDict extra;

    bool operator==(const OrderReport& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(base != __rhs.base)
        {
            return false;
        }
        if(ordStatus != __rhs.ordStatus)
        {
            return false;
        }
        if(cumQty != __rhs.cumQty)
        {
            return false;
        }
        if(avgPx != __rhs.avgPx)
        {
            return false;
        }
        if(leavesQty != __rhs.leavesQty)
        {
            return false;
        }
        if(text != __rhs.text)
        {
            return false;
        }
        if(seq != __rhs.seq)
        {
            return false;
        }
        if(extra != __rhs.extra)
        {
            return false;
        }
        return true;
    }

    bool operator<(const OrderReport& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(base < __rhs.base)
        {
            return true;
        }
        else if(__rhs.base < base)
        {
            return false;
        }
        if(ordStatus < __rhs.ordStatus)
        {
            return true;
        }
        else if(__rhs.ordStatus < ordStatus)
        {
            return false;
        }
        if(cumQty < __rhs.cumQty)
        {
            return true;
        }
        else if(__rhs.cumQty < cumQty)
        {
            return false;
        }
        if(avgPx < __rhs.avgPx)
        {
            return true;
        }
        else if(__rhs.avgPx < avgPx)
        {
            return false;
        }
        if(leavesQty < __rhs.leavesQty)
        {
            return true;
        }
        else if(__rhs.leavesQty < leavesQty)
        {
            return false;
        }
        if(text < __rhs.text)
        {
            return true;
        }
        else if(__rhs.text < text)
        {
            return false;
        }
        if(seq < __rhs.seq)
        {
            return true;
        }
        else if(__rhs.seq < seq)
        {
            return false;
        }
        if(extra < __rhs.extra)
        {
            return true;
        }
        else if(__rhs.extra < extra)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const OrderReport& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const OrderReport& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const OrderReport& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const OrderReport& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::OrderReport> OrderReportSeq;
void __writeOrderReportSeq(::IceInternal::BasicStream*, const ::TradeGateway::OrderReport*, const ::TradeGateway::OrderReport*);
void __readOrderReportSeq(::IceInternal::BasicStream*, OrderReportSeq&);

enum ExecType
{
    EtCanceled,
    EtRejected,
    EtStopped,
    EtTrade,
    ExecTypeUnknow
};

void __write(::IceInternal::BasicStream*, ExecType);
void __read(::IceInternal::BasicStream*, ExecType&);

struct ExecutionReport
{
    ::std::string accountId;
    ::std::string ordId;
    ::std::string execId;
    ::TradeGateway::ExecType type;
    ::std::string ordRejReason;
    ::Ice::Long lastQty;
    ::Ice::Double lastPx;
    ::Ice::Int tradeDate;
    ::Ice::Int transactTime;
    ::std::string seq;
    ::Ice::PropertyDict extra;

    bool operator==(const ExecutionReport& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(accountId != __rhs.accountId)
        {
            return false;
        }
        if(ordId != __rhs.ordId)
        {
            return false;
        }
        if(execId != __rhs.execId)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(ordRejReason != __rhs.ordRejReason)
        {
            return false;
        }
        if(lastQty != __rhs.lastQty)
        {
            return false;
        }
        if(lastPx != __rhs.lastPx)
        {
            return false;
        }
        if(tradeDate != __rhs.tradeDate)
        {
            return false;
        }
        if(transactTime != __rhs.transactTime)
        {
            return false;
        }
        if(seq != __rhs.seq)
        {
            return false;
        }
        if(extra != __rhs.extra)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ExecutionReport& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(accountId < __rhs.accountId)
        {
            return true;
        }
        else if(__rhs.accountId < accountId)
        {
            return false;
        }
        if(ordId < __rhs.ordId)
        {
            return true;
        }
        else if(__rhs.ordId < ordId)
        {
            return false;
        }
        if(execId < __rhs.execId)
        {
            return true;
        }
        else if(__rhs.execId < execId)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(ordRejReason < __rhs.ordRejReason)
        {
            return true;
        }
        else if(__rhs.ordRejReason < ordRejReason)
        {
            return false;
        }
        if(lastQty < __rhs.lastQty)
        {
            return true;
        }
        else if(__rhs.lastQty < lastQty)
        {
            return false;
        }
        if(lastPx < __rhs.lastPx)
        {
            return true;
        }
        else if(__rhs.lastPx < lastPx)
        {
            return false;
        }
        if(tradeDate < __rhs.tradeDate)
        {
            return true;
        }
        else if(__rhs.tradeDate < tradeDate)
        {
            return false;
        }
        if(transactTime < __rhs.transactTime)
        {
            return true;
        }
        else if(__rhs.transactTime < transactTime)
        {
            return false;
        }
        if(seq < __rhs.seq)
        {
            return true;
        }
        else if(__rhs.seq < seq)
        {
            return false;
        }
        if(extra < __rhs.extra)
        {
            return true;
        }
        else if(__rhs.extra < extra)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ExecutionReport& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ExecutionReport& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ExecutionReport& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ExecutionReport& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::ExecutionReport> ExecutionReportSeq;
void __writeExecutionReportSeq(::IceInternal::BasicStream*, const ::TradeGateway::ExecutionReport*, const ::TradeGateway::ExecutionReport*);
void __readExecutionReportSeq(::IceInternal::BasicStream*, ExecutionReportSeq&);

enum PositionDirection
{
    DirectionLong,
    DirectionShort,
    PosDirectionUnknow
};

void __write(::IceInternal::BasicStream*, PositionDirection);
void __read(::IceInternal::BasicStream*, PositionDirection&);

struct VolumePrice
{
    ::Ice::Long volume;
    ::Ice::Long frozenVolume;
    ::Ice::Double price;

    bool operator==(const VolumePrice& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(volume != __rhs.volume)
        {
            return false;
        }
        if(frozenVolume != __rhs.frozenVolume)
        {
            return false;
        }
        if(price != __rhs.price)
        {
            return false;
        }
        return true;
    }

    bool operator<(const VolumePrice& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(volume < __rhs.volume)
        {
            return true;
        }
        else if(__rhs.volume < volume)
        {
            return false;
        }
        if(frozenVolume < __rhs.frozenVolume)
        {
            return true;
        }
        else if(__rhs.frozenVolume < frozenVolume)
        {
            return false;
        }
        if(price < __rhs.price)
        {
            return true;
        }
        else if(__rhs.price < price)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const VolumePrice& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const VolumePrice& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const VolumePrice& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const VolumePrice& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct PositionInfo
{
    ::std::string accountId;
    ::TradeGateway::InstrumentId inst;
    ::TradeGateway::PositionDirection direction;
    ::TradeGateway::VolumePrice previous;
    ::TradeGateway::VolumePrice today;
    ::TradeGateway::VolumePrice forETF;
    ::Ice::Double margin;
    ::Ice::Double currPrice;
    ::Ice::PropertyDict extra;

    bool operator==(const PositionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(accountId != __rhs.accountId)
        {
            return false;
        }
        if(inst != __rhs.inst)
        {
            return false;
        }
        if(direction != __rhs.direction)
        {
            return false;
        }
        if(previous != __rhs.previous)
        {
            return false;
        }
        if(today != __rhs.today)
        {
            return false;
        }
        if(forETF != __rhs.forETF)
        {
            return false;
        }
        if(margin != __rhs.margin)
        {
            return false;
        }
        if(currPrice != __rhs.currPrice)
        {
            return false;
        }
        if(extra != __rhs.extra)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PositionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(accountId < __rhs.accountId)
        {
            return true;
        }
        else if(__rhs.accountId < accountId)
        {
            return false;
        }
        if(inst < __rhs.inst)
        {
            return true;
        }
        else if(__rhs.inst < inst)
        {
            return false;
        }
        if(direction < __rhs.direction)
        {
            return true;
        }
        else if(__rhs.direction < direction)
        {
            return false;
        }
        if(previous < __rhs.previous)
        {
            return true;
        }
        else if(__rhs.previous < previous)
        {
            return false;
        }
        if(today < __rhs.today)
        {
            return true;
        }
        else if(__rhs.today < today)
        {
            return false;
        }
        if(forETF < __rhs.forETF)
        {
            return true;
        }
        else if(__rhs.forETF < forETF)
        {
            return false;
        }
        if(margin < __rhs.margin)
        {
            return true;
        }
        else if(__rhs.margin < margin)
        {
            return false;
        }
        if(currPrice < __rhs.currPrice)
        {
            return true;
        }
        else if(__rhs.currPrice < currPrice)
        {
            return false;
        }
        if(extra < __rhs.extra)
        {
            return true;
        }
        else if(__rhs.extra < extra)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PositionInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PositionInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PositionInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PositionInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::TradeGateway::PositionInfo> PositionInfoSeq;
void __writePositionInfoSeq(::IceInternal::BasicStream*, const ::TradeGateway::PositionInfo*, const ::TradeGateway::PositionInfo*);
void __readPositionInfoSeq(::IceInternal::BasicStream*, PositionInfoSeq&);

enum ResumeType
{
    Restart,
    Resume,
    Quick
};

void __write(::IceInternal::BasicStream*, ResumeType);
void __read(::IceInternal::BasicStream*, ResumeType&);

}

namespace TradeGateway
{

class AMI_SessionReceiver_onExecutionReport : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::TradeGateway::AMI_SessionReceiver_onExecutionReport> AMI_SessionReceiver_onExecutionReportPtr;

class AMI_SessionReceiver_onMessage : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::TradeGateway::AMI_SessionReceiver_onMessage> AMI_SessionReceiver_onMessagePtr;

}

namespace TradeGateway
{

class Callback_SessionReceiver_onExecutionReport_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionReceiver_onExecutionReport_Base> Callback_SessionReceiver_onExecutionReportPtr;

class Callback_SessionReceiver_onMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionReceiver_onMessage_Base> Callback_SessionReceiver_onMessagePtr;

class Callback_TradeApiSession_registerCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_registerCallback_Base> Callback_TradeApiSession_registerCallbackPtr;

class Callback_TradeApiSession_unregisterCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_unregisterCallback_Base> Callback_TradeApiSession_unregisterCallbackPtr;

class Callback_TradeApiSession_startSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_startSession_Base> Callback_TradeApiSession_startSessionPtr;

class Callback_TradeApiSession_stopSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_stopSession_Base> Callback_TradeApiSession_stopSessionPtr;

class Callback_TradeApiSession_login_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_login_Base> Callback_TradeApiSession_loginPtr;

class Callback_TradeApiSession_logout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_logout_Base> Callback_TradeApiSession_logoutPtr;

class Callback_TradeApiSession_NewOrderSingle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_NewOrderSingle_Base> Callback_TradeApiSession_NewOrderSinglePtr;

class Callback_TradeApiSession_cancelOrderSingle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_cancelOrderSingle_Base> Callback_TradeApiSession_cancelOrderSinglePtr;

class Callback_TradeApiSession_NewOrders_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_NewOrders_Base> Callback_TradeApiSession_NewOrdersPtr;

class Callback_TradeApiSession_cancelOrders_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_cancelOrders_Base> Callback_TradeApiSession_cancelOrdersPtr;

class Callback_TradeApiSession_QryOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_QryOrder_Base> Callback_TradeApiSession_QryOrderPtr;

class Callback_TradeApiSession_QryTrade_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_QryTrade_Base> Callback_TradeApiSession_QryTradePtr;

class Callback_TradeApiSession_QryAsset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_QryAsset_Base> Callback_TradeApiSession_QryAssetPtr;

class Callback_TradeApiSession_QryPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_QryPosition_Base> Callback_TradeApiSession_QryPositionPtr;

class Callback_TradeApiSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TradeApiSession_destroy_Base> Callback_TradeApiSession_destroyPtr;

class Callback_SessionManager_createSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionManager_createSession_Base> Callback_SessionManager_createSessionPtr;

class Callback_SessionManager_freeSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionManager_freeSession_Base> Callback_SessionManager_freeSessionPtr;

}

namespace IceProxy
{

namespace TradeGateway
{

class SessionReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report)
    {
        onExecutionReport(report, 0);
    }
    void onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::Ice::Context& __ctx)
    {
        onExecutionReport(report, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report)
    {
        return begin_onExecutionReport(report, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::Ice::Context& __ctx)
    {
        return begin_onExecutionReport(report, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onExecutionReport(report, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onExecutionReport(report, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::TradeGateway::Callback_SessionReceiver_onExecutionReportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onExecutionReport(report, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq& report, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_SessionReceiver_onExecutionReportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onExecutionReport(report, &__ctx, __del, __cookie);
    }

    void end_onExecutionReport(const ::Ice::AsyncResultPtr&);
    
private:

    void onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool onExecutionReport_async(const ::TradeGateway::AMI_SessionReceiver_onExecutionReportPtr&, const ::TradeGateway::ExecutionReportSeq&);
    bool onExecutionReport_async(const ::TradeGateway::AMI_SessionReceiver_onExecutionReportPtr&, const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context&);

    void onMessage(const ::TradeGateway::MessageInfoSeq& msg)
    {
        onMessage(msg, 0);
    }
    void onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::Ice::Context& __ctx)
    {
        onMessage(msg, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg)
    {
        return begin_onMessage(msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::Ice::Context& __ctx)
    {
        return begin_onMessage(msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onMessage(msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onMessage(msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::TradeGateway::Callback_SessionReceiver_onMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onMessage(msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq& msg, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_SessionReceiver_onMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onMessage(msg, &__ctx, __del, __cookie);
    }

    void end_onMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool onMessage_async(const ::TradeGateway::AMI_SessionReceiver_onMessagePtr&, const ::TradeGateway::MessageInfoSeq&);
    bool onMessage_async(const ::TradeGateway::AMI_SessionReceiver_onMessagePtr&, const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionReceiver> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionReceiver*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SessionReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TradeApiSession : virtual public ::IceProxy::Ice::Object
{
public:

    void registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type)
    {
        registerCallback(proxy, type, 0);
    }
    void registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::Ice::Context& __ctx)
    {
        registerCallback(proxy, type, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type)
    {
        return begin_registerCallback(proxy, type, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::Ice::Context& __ctx)
    {
        return begin_registerCallback(proxy, type, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerCallback(proxy, type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerCallback(proxy, type, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::TradeGateway::Callback_TradeApiSession_registerCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerCallback(proxy, type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx& proxy, ::TradeGateway::ResumeType type, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_registerCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerCallback(proxy, type, &__ctx, __del, __cookie);
    }

    void end_registerCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unregisterCallback()
    {
        unregisterCallback(0);
    }
    void unregisterCallback(const ::Ice::Context& __ctx)
    {
        unregisterCallback(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback()
    {
        return begin_unregisterCallback(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::Ice::Context& __ctx)
    {
        return begin_unregisterCallback(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterCallback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterCallback(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::TradeGateway::Callback_TradeApiSession_unregisterCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterCallback(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_unregisterCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unregisterCallback(&__ctx, __del, __cookie);
    }

    void end_unregisterCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void unregisterCallback(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unregisterCallback(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params)
    {
        startSession(frontAddress, params, 0);
    }
    void startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx)
    {
        startSession(frontAddress, params, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params)
    {
        return begin_startSession(frontAddress, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx)
    {
        return begin_startSession(frontAddress, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSession(frontAddress, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSession(frontAddress, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::TradeGateway::Callback_TradeApiSession_startSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSession(frontAddress, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSession(const ::std::string& frontAddress, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_startSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSession(frontAddress, params, &__ctx, __del, __cookie);
    }

    void end_startSession(const ::Ice::AsyncResultPtr&);
    
private:

    void startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopSession()
    {
        stopSession(0);
    }
    void stopSession(const ::Ice::Context& __ctx)
    {
        stopSession(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_stopSession()
    {
        return begin_stopSession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopSession(const ::Ice::Context& __ctx)
    {
        return begin_stopSession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopSession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSession(const ::TradeGateway::Callback_TradeApiSession_stopSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopSession(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_stopSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopSession(&__ctx, __del, __cookie);
    }

    void end_stopSession(const ::Ice::AsyncResultPtr&);
    
private:

    void stopSession(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopSession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params)
    {
        login(accName, accPassword, params, 0);
    }
    void login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx)
    {
        login(accName, accPassword, params, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params)
    {
        return begin_login(accName, accPassword, params, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx)
    {
        return begin_login(accName, accPassword, params, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(accName, accPassword, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(accName, accPassword, params, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::TradeGateway::Callback_TradeApiSession_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(accName, accPassword, params, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& accName, const ::std::string& accPassword, const ::Ice::PropertyDict& params, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(accName, accPassword, params, &__ctx, __del, __cookie);
    }

    void end_login(const ::Ice::AsyncResultPtr&);
    
private:

    void login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void logout()
    {
        logout(0);
    }
    void logout(const ::Ice::Context& __ctx)
    {
        logout(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_logout()
    {
        return begin_logout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& __ctx)
    {
        return begin_logout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::TradeGateway::Callback_TradeApiSession_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(&__ctx, __del, __cookie);
    }

    void end_logout(const ::Ice::AsyncResultPtr&);
    
private:

    void logout(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_logout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string NewOrderSingle(const ::TradeGateway::Order& ord)
    {
        return NewOrderSingle(ord, 0);
    }
    ::std::string NewOrderSingle(const ::TradeGateway::Order& ord, const ::Ice::Context& __ctx)
    {
        return NewOrderSingle(ord, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord)
    {
        return begin_NewOrderSingle(ord, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord, const ::Ice::Context& __ctx)
    {
        return begin_NewOrderSingle(ord, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrderSingle(ord, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrderSingle(ord, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord, const ::TradeGateway::Callback_TradeApiSession_NewOrderSinglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrderSingle(ord, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order& ord, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_NewOrderSinglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrderSingle(ord, &__ctx, __del, __cookie);
    }

    ::std::string end_NewOrderSingle(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancelOrderSingle(const ::std::string& orderId)
    {
        cancelOrderSingle(orderId, 0);
    }
    void cancelOrderSingle(const ::std::string& orderId, const ::Ice::Context& __ctx)
    {
        cancelOrderSingle(orderId, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId)
    {
        return begin_cancelOrderSingle(orderId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId, const ::Ice::Context& __ctx)
    {
        return begin_cancelOrderSingle(orderId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrderSingle(orderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrderSingle(orderId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId, const ::TradeGateway::Callback_TradeApiSession_cancelOrderSinglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrderSingle(orderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string& orderId, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_cancelOrderSinglePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrderSingle(orderId, &__ctx, __del, __cookie);
    }

    void end_cancelOrderSingle(const ::Ice::AsyncResultPtr&);
    
private:

    void cancelOrderSingle(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancelOrderSingle(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq& ords)
    {
        return NewOrders(ords, 0);
    }
    ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq& ords, const ::Ice::Context& __ctx)
    {
        return NewOrders(ords, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords)
    {
        return begin_NewOrders(ords, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords, const ::Ice::Context& __ctx)
    {
        return begin_NewOrders(ords, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrders(ords, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrders(ords, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords, const ::TradeGateway::Callback_TradeApiSession_NewOrdersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrders(ords, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq& ords, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_NewOrdersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NewOrders(ords, &__ctx, __del, __cookie);
    }

    ::Ice::StringSeq end_NewOrders(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancelOrders(const ::Ice::StringSeq& orderId)
    {
        cancelOrders(orderId, 0);
    }
    void cancelOrders(const ::Ice::StringSeq& orderId, const ::Ice::Context& __ctx)
    {
        cancelOrders(orderId, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId)
    {
        return begin_cancelOrders(orderId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId, const ::Ice::Context& __ctx)
    {
        return begin_cancelOrders(orderId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrders(orderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrders(orderId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId, const ::TradeGateway::Callback_TradeApiSession_cancelOrdersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrders(orderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq& orderId, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_cancelOrdersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelOrders(orderId, &__ctx, __del, __cookie);
    }

    void end_cancelOrders(const ::Ice::AsyncResultPtr&);
    
private:

    void cancelOrders(const ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancelOrders(const ::Ice::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TradeGateway::OrderReportSeq QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn)
    {
        return QryOrder(ordid, positionString, maxReturn, 0);
    }
    ::TradeGateway::OrderReportSeq QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx)
    {
        return QryOrder(ordid, positionString, maxReturn, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::TradeGateway::Callback_TradeApiSession_QryOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_QryOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryOrder(ordid, positionString, maxReturn, &__ctx, __del, __cookie);
    }

    ::TradeGateway::OrderReportSeq end_QryOrder(const ::Ice::AsyncResultPtr&);
    
private:

    ::TradeGateway::OrderReportSeq QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn)
    {
        return QryTrade(ordid, positionString, maxReturn, 0);
    }
    ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx)
    {
        return QryTrade(ordid, positionString, maxReturn, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::TradeGateway::Callback_TradeApiSession_QryTradePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string& ordid, const ::std::string& positionString, ::Ice::Int maxReturn, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_QryTradePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryTrade(ordid, positionString, maxReturn, &__ctx, __del, __cookie);
    }

    ::TradeGateway::ExecutionReportSeq end_QryTrade(const ::Ice::AsyncResultPtr&);
    
private:

    ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TradeGateway::AssetInfoSeq QryAsset()
    {
        return QryAsset(0);
    }
    ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Context& __ctx)
    {
        return QryAsset(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_QryAsset()
    {
        return begin_QryAsset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryAsset(const ::Ice::Context& __ctx)
    {
        return begin_QryAsset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryAsset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryAsset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryAsset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryAsset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryAsset(const ::TradeGateway::Callback_TradeApiSession_QryAssetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryAsset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryAsset(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_QryAssetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryAsset(&__ctx, __del, __cookie);
    }

    ::TradeGateway::AssetInfoSeq end_QryAsset(const ::Ice::AsyncResultPtr&);
    
private:

    ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QryAsset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TradeGateway::PositionInfoSeq QryPosition()
    {
        return QryPosition(0);
    }
    ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Context& __ctx)
    {
        return QryPosition(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_QryPosition()
    {
        return begin_QryPosition(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryPosition(const ::Ice::Context& __ctx)
    {
        return begin_QryPosition(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QryPosition(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryPosition(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryPosition(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryPosition(const ::TradeGateway::Callback_TradeApiSession_QryPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QryPosition(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_QryPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QryPosition(&__ctx, __del, __cookie);
    }

    ::TradeGateway::PositionInfoSeq end_QryPosition(const ::Ice::AsyncResultPtr&);
    
private:

    ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QryPosition(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::TradeGateway::Callback_TradeApiSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_TradeApiSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<TradeApiSession> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<TradeApiSession*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<TradeApiSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SessionManager : virtual public ::IceProxy::Ice::Object
{
public:

    ::TradeGateway::TradeApiSessionPrx createSession()
    {
        return createSession(0);
    }
    ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Context& __ctx)
    {
        return createSession(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_createSession()
    {
        return begin_createSession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::Ice::Context& __ctx)
    {
        return begin_createSession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::TradeGateway::Callback_SessionManager_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::Ice::Context& __ctx, const ::TradeGateway::Callback_SessionManager_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(&__ctx, __del, __cookie);
    }

    ::TradeGateway::TradeApiSessionPrx end_createSession(const ::Ice::AsyncResultPtr&);
    
private:

    ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createSession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession)
    {
        freeSession(oldSession, 0);
    }
    void freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::Ice::Context& __ctx)
    {
        freeSession(oldSession, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession)
    {
        return begin_freeSession(oldSession, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::Ice::Context& __ctx)
    {
        return begin_freeSession(oldSession, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_freeSession(oldSession, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_freeSession(oldSession, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::TradeGateway::Callback_SessionManager_freeSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_freeSession(oldSession, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx& oldSession, const ::Ice::Context& __ctx, const ::TradeGateway::Callback_SessionManager_freeSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_freeSession(oldSession, &__ctx, __del, __cookie);
    }

    void end_freeSession(const ::Ice::AsyncResultPtr&);
    
private:

    void freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SessionManager> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SessionManager*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace TradeGateway
{

class SessionReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context*) = 0;

    virtual void onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context*) = 0;
};

class TradeApiSession : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Context*) = 0;

    virtual void unregisterCallback(const ::Ice::Context*) = 0;

    virtual void startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*) = 0;

    virtual void stopSession(const ::Ice::Context*) = 0;

    virtual void login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*) = 0;

    virtual void logout(const ::Ice::Context*) = 0;

    virtual ::std::string NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Context*) = 0;

    virtual void cancelOrderSingle(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Context*) = 0;

    virtual void cancelOrders(const ::Ice::StringSeq&, const ::Ice::Context*) = 0;

    virtual ::TradeGateway::OrderReportSeq QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Context*) = 0;

    virtual ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Context*) = 0;

    virtual void destroy(const ::Ice::Context*) = 0;
};

class SessionManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Context*) = 0;

    virtual void freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace TradeGateway
{

class SessionReceiver : virtual public ::IceDelegate::TradeGateway::SessionReceiver,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context*);

    virtual void onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context*);
};

class TradeApiSession : virtual public ::IceDelegate::TradeGateway::TradeApiSession,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Context*);

    virtual void unregisterCallback(const ::Ice::Context*);

    virtual void startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);

    virtual void stopSession(const ::Ice::Context*);

    virtual void login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);

    virtual void logout(const ::Ice::Context*);

    virtual ::std::string NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Context*);

    virtual void cancelOrderSingle(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Context*);

    virtual void cancelOrders(const ::Ice::StringSeq&, const ::Ice::Context*);

    virtual ::TradeGateway::OrderReportSeq QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Context*);

    virtual ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Context*);

    virtual void destroy(const ::Ice::Context*);
};

class SessionManager : virtual public ::IceDelegate::TradeGateway::SessionManager,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Context*);

    virtual void freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace TradeGateway
{

class SessionReceiver : virtual public ::IceDelegate::TradeGateway::SessionReceiver,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Context*);

    virtual void onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Context*);
};

class TradeApiSession : virtual public ::IceDelegate::TradeGateway::TradeApiSession,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Context*);

    virtual void unregisterCallback(const ::Ice::Context*);

    virtual void startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);

    virtual void stopSession(const ::Ice::Context*);

    virtual void login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Context*);

    virtual void logout(const ::Ice::Context*);

    virtual ::std::string NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Context*);

    virtual void cancelOrderSingle(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Context*);

    virtual void cancelOrders(const ::Ice::StringSeq&, const ::Ice::Context*);

    virtual ::TradeGateway::OrderReportSeq QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Context*);

    virtual ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Context*);

    virtual void destroy(const ::Ice::Context*);
};

class SessionManager : virtual public ::IceDelegate::TradeGateway::SessionManager,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Context*);

    virtual void freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Context*);
};

}

}

namespace TradeGateway
{

class SessionReceiver : virtual public ::Ice::Object
{
public:

    typedef SessionReceiverPrx ProxyType;
    typedef SessionReceiverPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void onExecutionReport(const ::TradeGateway::ExecutionReportSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onExecutionReport(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onMessage(const ::TradeGateway::MessageInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SessionReceiver& l, const SessionReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionReceiver& l, const SessionReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TradeApiSession : virtual public ::Ice::Object
{
public:

    typedef TradeApiSessionPrx ProxyType;
    typedef TradeApiSessionPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void registerCallback(const ::TradeGateway::SessionReceiverPrx&, ::TradeGateway::ResumeType, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unregisterCallback(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unregisterCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startSession(const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopSession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void login(const ::std::string&, const ::std::string&, const ::Ice::PropertyDict&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void logout(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___logout(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string NewOrderSingle(const ::TradeGateway::Order&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___NewOrderSingle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancelOrderSingle(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancelOrderSingle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::StringSeq NewOrders(const ::TradeGateway::OrderSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___NewOrders(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancelOrders(const ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancelOrders(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TradeGateway::OrderReportSeq QryOrder(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QryOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TradeGateway::ExecutionReportSeq QryTrade(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QryTrade(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TradeGateway::AssetInfoSeq QryAsset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QryAsset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TradeGateway::PositionInfoSeq QryPosition(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QryPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const TradeApiSession& l, const TradeApiSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TradeApiSession& l, const TradeApiSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SessionManager : virtual public ::Ice::Object
{
public:

    typedef SessionManagerPrx ProxyType;
    typedef SessionManagerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::TradeGateway::TradeApiSessionPrx createSession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void freeSession(const ::TradeGateway::TradeApiSessionPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___freeSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SessionManager& l, const SessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionManager& l, const SessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace TradeGateway
{

template<class T>
class CallbackNC_SessionReceiver_onExecutionReport : public Callback_SessionReceiver_onExecutionReport_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SessionReceiver_onExecutionReport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onExecutionReport<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onExecutionReport<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onExecutionReport<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onExecutionReport<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionReceiver_onExecutionReport : public Callback_SessionReceiver_onExecutionReport_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SessionReceiver_onExecutionReport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onExecutionReport<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onExecutionReport<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onExecutionReport<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onExecutionReportPtr
newCallback_SessionReceiver_onExecutionReport(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onExecutionReport<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SessionReceiver_onMessage : public Callback_SessionReceiver_onMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SessionReceiver_onMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionReceiver_onMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionReceiver_onMessage : public Callback_SessionReceiver_onMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SessionReceiver_onMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionReceiver_onMessagePtr
newCallback_SessionReceiver_onMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionReceiver_onMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_registerCallback : public Callback_TradeApiSession_registerCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_registerCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_registerCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_registerCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_registerCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_registerCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_registerCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_registerCallback : public Callback_TradeApiSession_registerCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_registerCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_registerCallback(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_registerCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_registerCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_registerCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_registerCallbackPtr
newCallback_TradeApiSession_registerCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_registerCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_unregisterCallback : public Callback_TradeApiSession_unregisterCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_unregisterCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_unregisterCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_unregisterCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_unregisterCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_unregisterCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_unregisterCallback : public Callback_TradeApiSession_unregisterCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_unregisterCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_unregisterCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_unregisterCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_unregisterCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_unregisterCallbackPtr
newCallback_TradeApiSession_unregisterCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_unregisterCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_startSession : public Callback_TradeApiSession_startSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_startSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_startSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_startSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_startSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_startSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_startSession : public Callback_TradeApiSession_startSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_startSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_startSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_startSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_startSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_startSessionPtr
newCallback_TradeApiSession_startSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_startSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_stopSession : public Callback_TradeApiSession_stopSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_stopSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_stopSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_stopSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_stopSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_stopSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_stopSession : public Callback_TradeApiSession_stopSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_stopSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_stopSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_stopSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_stopSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_stopSessionPtr
newCallback_TradeApiSession_stopSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_stopSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_login : public Callback_TradeApiSession_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_login<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_login<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_login : public Callback_TradeApiSession_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_login<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_loginPtr
newCallback_TradeApiSession_login(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_login<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_logout : public Callback_TradeApiSession_logout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_logout<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_logout<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_logout : public Callback_TradeApiSession_logout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_logoutPtr
newCallback_TradeApiSession_logout(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_NewOrderSingle : public Callback_TradeApiSession_NewOrderSingle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TradeApiSession_NewOrderSingle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_NewOrderSingle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_NewOrderSinglePtr
newCallback_TradeApiSession_NewOrderSingle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_NewOrderSingle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_NewOrderSinglePtr
newCallback_TradeApiSession_NewOrderSingle(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_NewOrderSingle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_NewOrderSingle : public Callback_TradeApiSession_NewOrderSingle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TradeApiSession_NewOrderSingle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_NewOrderSingle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_NewOrderSinglePtr
newCallback_TradeApiSession_NewOrderSingle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_NewOrderSingle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_NewOrderSinglePtr
newCallback_TradeApiSession_NewOrderSingle(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_NewOrderSingle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_cancelOrderSingle : public Callback_TradeApiSession_cancelOrderSingle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_cancelOrderSingle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelOrderSingle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrderSingle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrderSingle<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrderSingle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrderSingle<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_cancelOrderSingle : public Callback_TradeApiSession_cancelOrderSingle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_cancelOrderSingle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelOrderSingle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrderSingle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrderSingle<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrderSingle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrderSinglePtr
newCallback_TradeApiSession_cancelOrderSingle(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrderSingle<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_NewOrders : public Callback_TradeApiSession_NewOrders_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::StringSeq&);

    CallbackNC_TradeApiSession_NewOrders(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_NewOrders(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_NewOrdersPtr
newCallback_TradeApiSession_NewOrders(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_NewOrders<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_NewOrdersPtr
newCallback_TradeApiSession_NewOrders(T* instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_NewOrders<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_NewOrders : public Callback_TradeApiSession_NewOrders_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::StringSeq&, const CT&);

    Callback_TradeApiSession_NewOrders(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_NewOrders(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_NewOrdersPtr
newCallback_TradeApiSession_NewOrders(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_NewOrders<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_NewOrdersPtr
newCallback_TradeApiSession_NewOrders(T* instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_NewOrders<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_cancelOrders : public Callback_TradeApiSession_cancelOrders_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_cancelOrders(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelOrders(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrders<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrders<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrders<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_cancelOrders<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_cancelOrders : public Callback_TradeApiSession_cancelOrders_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_cancelOrders(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancelOrders(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrders<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrders<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrders<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_cancelOrdersPtr
newCallback_TradeApiSession_cancelOrders(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_cancelOrders<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_QryOrder : public Callback_TradeApiSession_QryOrder_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TradeGateway::OrderReportSeq&);

    CallbackNC_TradeApiSession_QryOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::OrderReportSeq __ret;
        try
        {
            __ret = __proxy->end_QryOrder(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_QryOrderPtr
newCallback_TradeApiSession_QryOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::OrderReportSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_QryOrderPtr
newCallback_TradeApiSession_QryOrder(T* instance, void (T::*cb)(const ::TradeGateway::OrderReportSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryOrder<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_QryOrder : public Callback_TradeApiSession_QryOrder_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TradeGateway::OrderReportSeq&, const CT&);

    Callback_TradeApiSession_QryOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::OrderReportSeq __ret;
        try
        {
            __ret = __proxy->end_QryOrder(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_QryOrderPtr
newCallback_TradeApiSession_QryOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::OrderReportSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_QryOrderPtr
newCallback_TradeApiSession_QryOrder(T* instance, void (T::*cb)(const ::TradeGateway::OrderReportSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_QryTrade : public Callback_TradeApiSession_QryTrade_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TradeGateway::ExecutionReportSeq&);

    CallbackNC_TradeApiSession_QryTrade(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::ExecutionReportSeq __ret;
        try
        {
            __ret = __proxy->end_QryTrade(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_QryTradePtr
newCallback_TradeApiSession_QryTrade(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::ExecutionReportSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryTrade<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_QryTradePtr
newCallback_TradeApiSession_QryTrade(T* instance, void (T::*cb)(const ::TradeGateway::ExecutionReportSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryTrade<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_QryTrade : public Callback_TradeApiSession_QryTrade_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TradeGateway::ExecutionReportSeq&, const CT&);

    Callback_TradeApiSession_QryTrade(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::ExecutionReportSeq __ret;
        try
        {
            __ret = __proxy->end_QryTrade(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_QryTradePtr
newCallback_TradeApiSession_QryTrade(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::ExecutionReportSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryTrade<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_QryTradePtr
newCallback_TradeApiSession_QryTrade(T* instance, void (T::*cb)(const ::TradeGateway::ExecutionReportSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryTrade<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_QryAsset : public Callback_TradeApiSession_QryAsset_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TradeGateway::AssetInfoSeq&);

    CallbackNC_TradeApiSession_QryAsset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::AssetInfoSeq __ret;
        try
        {
            __ret = __proxy->end_QryAsset(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_QryAssetPtr
newCallback_TradeApiSession_QryAsset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::AssetInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryAsset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_QryAssetPtr
newCallback_TradeApiSession_QryAsset(T* instance, void (T::*cb)(const ::TradeGateway::AssetInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryAsset<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_QryAsset : public Callback_TradeApiSession_QryAsset_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TradeGateway::AssetInfoSeq&, const CT&);

    Callback_TradeApiSession_QryAsset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::AssetInfoSeq __ret;
        try
        {
            __ret = __proxy->end_QryAsset(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_QryAssetPtr
newCallback_TradeApiSession_QryAsset(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::AssetInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryAsset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_QryAssetPtr
newCallback_TradeApiSession_QryAsset(T* instance, void (T::*cb)(const ::TradeGateway::AssetInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryAsset<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_QryPosition : public Callback_TradeApiSession_QryPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TradeGateway::PositionInfoSeq&);

    CallbackNC_TradeApiSession_QryPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::PositionInfoSeq __ret;
        try
        {
            __ret = __proxy->end_QryPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_TradeApiSession_QryPositionPtr
newCallback_TradeApiSession_QryPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::PositionInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_QryPositionPtr
newCallback_TradeApiSession_QryPosition(T* instance, void (T::*cb)(const ::TradeGateway::PositionInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_QryPosition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_QryPosition : public Callback_TradeApiSession_QryPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TradeGateway::PositionInfoSeq&, const CT&);

    Callback_TradeApiSession_QryPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::TradeApiSessionPrx __proxy = ::TradeGateway::TradeApiSessionPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::PositionInfoSeq __ret;
        try
        {
            __ret = __proxy->end_QryPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TradeApiSession_QryPositionPtr
newCallback_TradeApiSession_QryPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::PositionInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_QryPositionPtr
newCallback_TradeApiSession_QryPosition(T* instance, void (T::*cb)(const ::TradeGateway::PositionInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_QryPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TradeApiSession_destroy : public Callback_TradeApiSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TradeApiSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TradeApiSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TradeApiSession_destroy : public Callback_TradeApiSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TradeApiSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TradeApiSession_destroyPtr
newCallback_TradeApiSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TradeApiSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SessionManager_createSession : public Callback_SessionManager_createSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TradeGateway::TradeApiSessionPrx&);

    CallbackNC_SessionManager_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::SessionManagerPrx __proxy = ::TradeGateway::SessionManagerPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::TradeApiSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SessionManager_createSessionPtr
newCallback_SessionManager_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::TradeApiSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_createSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionManager_createSessionPtr
newCallback_SessionManager_createSession(T* instance, void (T::*cb)(const ::TradeGateway::TradeApiSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_createSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionManager_createSession : public Callback_SessionManager_createSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TradeGateway::TradeApiSessionPrx&, const CT&);

    Callback_SessionManager_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TradeGateway::SessionManagerPrx __proxy = ::TradeGateway::SessionManagerPrx::uncheckedCast(__result->getProxy());
        ::TradeGateway::TradeApiSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionManager_createSessionPtr
newCallback_SessionManager_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TradeGateway::TradeApiSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionManager_createSessionPtr
newCallback_SessionManager_createSession(T* instance, void (T::*cb)(const ::TradeGateway::TradeApiSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionManager_freeSession : public Callback_SessionManager_freeSession_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SessionManager_freeSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_freeSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_freeSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_freeSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_freeSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionManager_freeSession : public Callback_SessionManager_freeSession_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SessionManager_freeSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_freeSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_freeSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_freeSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionManager_freeSessionPtr
newCallback_SessionManager_freeSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_freeSession<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
