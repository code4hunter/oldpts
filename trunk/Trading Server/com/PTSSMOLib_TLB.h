// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 2008-3-31 17:01:17 from Type Library described below.

// ************************************************************************  //
// Type Lib: G:\PTS2_BIN\Exchange\PTSSMO.dll (1)
// LIBID: {6DAE4C78-D739-4F07-BAAC-64533A3E42E7}
// LCID: 0
// Helpfile: 
// HelpString: PTSSMO 1.0 类型库
// DepndLst: 
//   (1) v2.0 stdole, (K:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   PTSSMOLib_TLBH
#define   PTSSMOLib_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Ptssmolib_tlb
{

// *********************************************************************//
// HelpString: PTSSMO 1.0 类型库
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PTSSMOLib;
extern __declspec (package) const GUID IID_IOrder;
extern __declspec (package) const GUID CLSID_Order;
extern __declspec (package) const GUID GUID_TcOrderStatus;
extern __declspec (package) const GUID GUID_TcOrderType;
extern __declspec (package) const GUID GUID_TcNonTradingOrderType;
extern __declspec (package) const GUID GUID_TcOrderSide;
extern __declspec (package) const GUID GUID_TcTimeInForce;
extern __declspec (package) const GUID GUID_TcCreditTrading;
extern __declspec (package) const GUID GUID_TcOrderRestriction;
extern __declspec (package) const GUID GUID_TcPositionEffect;
extern __declspec (package) const GUID GUID_TcQuantityCondition;
extern __declspec (package) const GUID IID_IObjectList;
extern __declspec (package) const GUID IID_IOrders;
extern __declspec (package) const GUID CLSID_Orders;
extern __declspec (package) const GUID GUID_TcOrderCommitMode;
extern __declspec (package) const GUID IID_IExecutionReport;
extern __declspec (package) const GUID CLSID_ExecutionReport;
extern __declspec (package) const GUID GUID_TcMessageType;
extern __declspec (package) const GUID IID_IObjectBase;
extern __declspec (package) const GUID IID_INameObjectBase;
extern __declspec (package) const GUID IID_IInstrument;
extern __declspec (package) const GUID IID_IAlterable;
extern __declspec (package) const GUID GUID_TcObjectState;
extern __declspec (package) const GUID GUID_TcObjectType;
extern __declspec (package) const GUID GUID_TcInstrumentType;
extern __declspec (package) const GUID GUID_TcInstrumentSubType;
extern __declspec (package) const GUID GUID_TcCurrencyType;
extern __declspec (package) const GUID GUID_TcInstrumentStatus;
extern __declspec (package) const GUID IID_IInstrumentDetail;
extern __declspec (package) const GUID GUID_TcOrderLotLimitType;
extern __declspec (package) const GUID GUID_TcFinancingIndicate;
extern __declspec (package) const GUID IID_IQuote;
extern __declspec (package) const GUID IID_IDroppable;
extern __declspec (package) const GUID CLSID_Instrument;
extern __declspec (package) const GUID IID_IAccount;
extern __declspec (package) const GUID IID_IRenamable;
extern __declspec (package) const GUID GUID_TcAccountType;
extern __declspec (package) const GUID GUID_TcAccountStatus;
extern __declspec (package) const GUID IID_IObjectCollectionBase;
extern __declspec (package) const GUID IID_IExtendedProperties;
extern __declspec (package) const GUID IID_IExtendedProperty;
extern __declspec (package) const GUID GUID_TcPositionDirection;
extern __declspec (package) const GUID GUID_TcPositionType;
extern __declspec (package) const GUID IID_IAccountDetail;
extern __declspec (package) const GUID IID_IPosition;
extern __declspec (package) const GUID IID_IPositionQtys;
extern __declspec (package) const GUID IID_IPositionQty;
extern __declspec (package) const GUID IID_IPositions;
extern __declspec (package) const GUID IID_IObjectPermission;
extern __declspec (package) const GUID CLSID_Account;
extern __declspec (package) const GUID GUID_TcPrivilegeType;
extern __declspec (package) const GUID CLSID_Positions;
extern __declspec (package) const GUID CLSID_Position;
extern __declspec (package) const GUID IID_IFutureDetail;
extern __declspec (package) const GUID CLSID_FutureDetail;
extern __declspec (package) const GUID GUID_TcDeliveryStyle;
extern __declspec (package) const GUID IID_IFundDetail;
extern __declspec (package) const GUID CLSID_FundDetail;
extern __declspec (package) const GUID IID_IFundMember;
extern __declspec (package) const GUID GUID_TcCashReplaceFlag;
extern __declspec (package) const GUID IID_IFundMembers;
extern __declspec (package) const GUID IID_IOptionDetail;
extern __declspec (package) const GUID CLSID_OptionDetail;
extern __declspec (package) const GUID GUID_TcOptionType;
extern __declspec (package) const GUID GUID_TcExerciseStyle;
extern __declspec (package) const GUID IID_IWarrantDetail;
extern __declspec (package) const GUID CLSID_WarrantDetail;
extern __declspec (package) const GUID GUID_TcWarrantType;
extern __declspec (package) const GUID IID_ICustomer;
extern __declspec (package) const GUID CLSID_Customer;
extern __declspec (package) const GUID IID_IExchangeAccounts;
extern __declspec (package) const GUID IID_IExchangeAccount;
extern __declspec (package) const GUID GUID_TcExchangeAccountType;
extern __declspec (package) const GUID GUID_TcExchangeAccountStatus;
extern __declspec (package) const GUID IID_IBrokerAccounts;
extern __declspec (package) const GUID IID_IBrokerAccount;
extern __declspec (package) const GUID IID_IMiscFees;
extern __declspec (package) const GUID IID_IMiscFee;
extern __declspec (package) const GUID GUID_TcMiscFeeType;
extern __declspec (package) const GUID GUID_TcBusinessType;
extern __declspec (package) const GUID IID_IAccounts;
extern __declspec (package) const GUID IID_ICustomerDetail;
extern __declspec (package) const GUID GUID_TcGenderType;
extern __declspec (package) const GUID GUID_TcIdentifiedCardType;
extern __declspec (package) const GUID GUID_TcPhoneNumberType;
extern __declspec (package) const GUID GUID_TcAddressType;
extern __declspec (package) const GUID IID_IPostalAddress;
extern __declspec (package) const GUID IID_ICustomers;
extern __declspec (package) const GUID CLSID_Customers;
extern __declspec (package) const GUID IID_ITask;
extern __declspec (package) const GUID CLSID_Task;
extern __declspec (package) const GUID GUID_TcTaskStatus;
extern __declspec (package) const GUID GUID_TcTaskOpenMode;
extern __declspec (package) const GUID IID_IHedges;
extern __declspec (package) const GUID IID_IHedge;
extern __declspec (package) const GUID GUID_TcHedgeStatus;
extern __declspec (package) const GUID IID_ITasks;
extern __declspec (package) const GUID CLSID_Tasks;
extern __declspec (package) const GUID CLSID_Hedge;
extern __declspec (package) const GUID CLSID_Hedges;
extern __declspec (package) const GUID IID_ITradeCoreSvc;
extern __declspec (package) const GUID IID_ITradeCoreSvc2;
extern __declspec (package) const GUID IID_IEventTopics;
extern __declspec (package) const GUID IID_IEventTopic;
extern __declspec (package) const GUID GUID_TcEventTopicType;
extern __declspec (package) const GUID IID_IEventPublisher;
extern __declspec (package) const GUID IID_ISubscriber;
extern __declspec (package) const GUID GUID_TcSubscribeStatus;
extern __declspec (package) const GUID IID_IExchanges;
extern __declspec (package) const GUID IID_IExchange;
extern __declspec (package) const GUID GUID_TcExchangeStatus;
extern __declspec (package) const GUID IID_IInstruments;
extern __declspec (package) const GUID IID_IQuotes;
extern __declspec (package) const GUID IID_ICharts;
extern __declspec (package) const GUID IID_IChart;
extern __declspec (package) const GUID IID_IChartDataSet;
extern __declspec (package) const GUID IID_IRoles;
extern __declspec (package) const GUID IID_IRole;
extern __declspec (package) const GUID IID_INameList;
extern __declspec (package) const GUID IID_IUsers;
extern __declspec (package) const GUID IID_IUser;
extern __declspec (package) const GUID GUID_TcUserType;
extern __declspec (package) const GUID GUID_TcObjectSortType;
extern __declspec (package) const GUID IID_IProject;
extern __declspec (package) const GUID GUID_TcProjectStatus;
extern __declspec (package) const GUID IID_IPTSSession;
extern __declspec (package) const GUID GUID_TcLoginType;
extern __declspec (package) const GUID CLSID_TradeCoreSvc;
extern __declspec (package) const GUID IID_INewStockSet;
extern __declspec (package) const GUID IID_INotTradingStockSet;
extern __declspec (package) const GUID CLSID_Accounts;
extern __declspec (package) const GUID CLSID_Quote;
extern __declspec (package) const GUID CLSID_EventTopic;
extern __declspec (package) const GUID CLSID_EventTopics;
extern __declspec (package) const GUID CLSID_Quotes;
extern __declspec (package) const GUID IID_IQuoteDetail;
extern __declspec (package) const GUID CLSID_QuoteDetail;
extern __declspec (package) const GUID CLSID_FundMember;
extern __declspec (package) const GUID CLSID_FundMembers;
extern __declspec (package) const GUID DIID__ISubscriberEvents;
extern __declspec (package) const GUID IID_ISubscriber2;
extern __declspec (package) const GUID CLSID_Subscriber;
extern __declspec (package) const GUID IID_IExchange2;
extern __declspec (package) const GUID CLSID_Exchange;
extern __declspec (package) const GUID IID_IQuoteDataSet;
extern __declspec (package) const GUID CLSID_Exchanges;
extern __declspec (package) const GUID CLSID_InstrumentDetail;
extern __declspec (package) const GUID CLSID_PositionQtys;
extern __declspec (package) const GUID CLSID_PositionQty;
extern __declspec (package) const GUID IID_IQueryCondition;
extern __declspec (package) const GUID CLSID_QueryCondition;
extern __declspec (package) const GUID GUID_TcOperatorType;
extern __declspec (package) const GUID IID_IQueryConditions;
extern __declspec (package) const GUID CLSID_QueryConditions;
extern __declspec (package) const GUID CLSID_AccountDetail;
extern __declspec (package) const GUID CLSID_Instruments;
extern __declspec (package) const GUID CLSID_CustomerDetail;
extern __declspec (package) const GUID CLSID_ExchangeAccount;
extern __declspec (package) const GUID CLSID_ExchangeAccounts;
extern __declspec (package) const GUID CLSID_User;
extern __declspec (package) const GUID CLSID_Users;
extern __declspec (package) const GUID CLSID_NameList;
extern __declspec (package) const GUID CLSID_ObjectList;
extern __declspec (package) const GUID IID_IPermission;
extern __declspec (package) const GUID CLSID_Permission;
extern __declspec (package) const GUID GUID_TcPrincipalType;
extern __declspec (package) const GUID GUID_TcPermissionState;
extern __declspec (package) const GUID CLSID_Role;
extern __declspec (package) const GUID CLSID_Roles;
extern __declspec (package) const GUID IID_IServers;
extern __declspec (package) const GUID CLSID_Servers;
extern __declspec (package) const GUID IID_IServer;
extern __declspec (package) const GUID GUID_TcServerStatus;
extern __declspec (package) const GUID IID_IBrokers;
extern __declspec (package) const GUID IID_IBroker;
extern __declspec (package) const GUID IID_IPortfolios;
extern __declspec (package) const GUID IID_IPortfolio;
extern __declspec (package) const GUID IID_IPortfolioItemSet;
extern __declspec (package) const GUID GUID_TcCollectDataType;
extern __declspec (package) const GUID CLSID_Server;
extern __declspec (package) const GUID CLSID_EventPublisher;
extern __declspec (package) const GUID CLSID_Portfolio;
extern __declspec (package) const GUID CLSID_Portfolios;
extern __declspec (package) const GUID IID_IDictionary;
extern __declspec (package) const GUID CLSID_Dictionary;
extern __declspec (package) const GUID CLSID_MiscFee;
extern __declspec (package) const GUID DIID__IBrokerEvents;
extern __declspec (package) const GUID CLSID_Broker;
extern __declspec (package) const GUID CLSID_Brokers;
extern __declspec (package) const GUID CLSID_BrokerAccount;
extern __declspec (package) const GUID CLSID_BrokerAccounts;
extern __declspec (package) const GUID CLSID_ChartDataSet;
extern __declspec (package) const GUID CLSID_Chart;
extern __declspec (package) const GUID CLSID_Charts;
extern __declspec (package) const GUID CLSID_ExtendedProperty;
extern __declspec (package) const GUID CLSID_ExtendedProperties;
extern __declspec (package) const GUID CLSID_PostalAddress;
extern __declspec (package) const GUID IID_IQuoteTickData;
extern __declspec (package) const GUID CLSID_QuoteTickData;
extern __declspec (package) const GUID CLSID_MiscFees;
extern __declspec (package) const GUID IID_IOrderReport;
extern __declspec (package) const GUID CLSID_OrderReport;
extern __declspec (package) const GUID CLSID_QuoteDataSet;
extern __declspec (package) const GUID IID_IObjectPermissionInfo;
extern __declspec (package) const GUID CLSID_ObjectPermissionInfo;
extern __declspec (package) const GUID CLSID_Project;
extern __declspec (package) const GUID IID_IProjects;
extern __declspec (package) const GUID CLSID_Projects;
extern __declspec (package) const GUID CLSID_PortfolioItemSet;
extern __declspec (package) const GUID IID_IOrder2;
extern __declspec (package) const GUID CLSID_Order2;
extern __declspec (package) const GUID CLSID_NewStockSet;
extern __declspec (package) const GUID CLSID_NotTradingStockSet;
extern __declspec (package) const GUID IID_IAuthInfo;
extern __declspec (package) const GUID CLSID_AuthInfo;
extern __declspec (package) const GUID IID_IPTSManager;
extern __declspec (package) const GUID CLSID_PTSManager;
extern __declspec (package) const GUID DIID__IPTSSessionEvents;
extern __declspec (package) const GUID CLSID_PTSSession;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TcOrderStatus;
enum      TcOrderType;
enum      TcNonTradingOrderType;
enum      TcOrderSide;
enum      TcTimeInForce;
enum      TcCreditTrading;
enum      TcOrderRestriction;
enum      TcPositionEffect;
enum      TcQuantityCondition;
enum      TcOrderCommitMode;
enum      TcMessageType;
enum      TcObjectState;
enum      TcObjectType;
enum      TcInstrumentType;
enum      TcInstrumentSubType;
enum      TcCurrencyType;
enum      TcInstrumentStatus;
enum      TcOrderLotLimitType;
enum      TcFinancingIndicate;
enum      TcAccountType;
enum      TcAccountStatus;
enum      TcPositionDirection;
enum      TcPositionType;
enum      TcPrivilegeType;
enum      TcDeliveryStyle;
enum      TcCashReplaceFlag;
enum      TcOptionType;
enum      TcExerciseStyle;
enum      TcWarrantType;
enum      TcExchangeAccountType;
enum      TcExchangeAccountStatus;
enum      TcMiscFeeType;
enum      TcBusinessType;
enum      TcGenderType;
enum      TcIdentifiedCardType;
enum      TcPhoneNumberType;
enum      TcAddressType;
enum      TcTaskStatus;
enum      TcTaskOpenMode;
enum      TcHedgeStatus;
enum      TcEventTopicType;
enum      TcSubscribeStatus;
enum      TcExchangeStatus;
enum      TcUserType;
enum      TcObjectSortType;
enum      TcProjectStatus;
enum      TcLoginType;
enum      TcOperatorType;
enum      TcPrincipalType;
enum      TcPermissionState;
enum      TcServerStatus;
enum      TcCollectDataType;
interface DECLSPEC_UUID("{787035B1-4164-4933-99E7-A88257F65AF0}") IOrder;
typedef TComInterface<IOrder, &IID_IOrder> IOrderPtr;

interface DECLSPEC_UUID("{6115E5B1-7E3D-4116-B3DF-DE153CB9278A}") IObjectList;
typedef TComInterface<IObjectList, &IID_IObjectList> IObjectListPtr;

interface DECLSPEC_UUID("{3669D4E3-2E08-4840-8311-91B952C43182}") IOrders;
typedef TComInterface<IOrders, &IID_IOrders> IOrdersPtr;

interface DECLSPEC_UUID("{93E4BC77-26AF-4DB3-86A8-FBEAED97802C}") IExecutionReport;
typedef TComInterface<IExecutionReport, &IID_IExecutionReport> IExecutionReportPtr;

interface DECLSPEC_UUID("{91E6AC95-A60B-4CB3-A177-4B6A39E99EC5}") IObjectBase;
typedef TComInterface<IObjectBase, &IID_IObjectBase> IObjectBasePtr;

interface DECLSPEC_UUID("{64A49DC7-630D-4ACC-8103-5BA643AC3F72}") INameObjectBase;
typedef TComInterface<INameObjectBase, &IID_INameObjectBase> INameObjectBasePtr;

interface DECLSPEC_UUID("{A2ACE41D-DFE2-42E6-8A21-F3077455DACB}") IInstrument;
typedef TComInterface<IInstrument, &IID_IInstrument> IInstrumentPtr;

interface DECLSPEC_UUID("{729089CB-BC7E-4F49-8881-1C6270257FE1}") IAlterable;
typedef TComInterface<IAlterable, &IID_IAlterable> IAlterablePtr;

interface DECLSPEC_UUID("{37627738-EA0B-4857-A389-0A02868BE825}") IInstrumentDetail;
typedef TComInterface<IInstrumentDetail, &IID_IInstrumentDetail> IInstrumentDetailPtr;

interface DECLSPEC_UUID("{75FB79D8-4BD7-476C-92BA-789FC673AA9B}") IQuote;
typedef TComInterface<IQuote, &IID_IQuote> IQuotePtr;

interface DECLSPEC_UUID("{E54008FC-5C59-4F4F-8849-2CB2EEB60101}") IDroppable;
typedef TComInterface<IDroppable, &IID_IDroppable> IDroppablePtr;

interface DECLSPEC_UUID("{DE4CE813-5AD2-4915-B831-65FA3B40FE2B}") IAccount;
typedef TComInterface<IAccount, &IID_IAccount> IAccountPtr;

interface DECLSPEC_UUID("{B5FD7832-C964-4441-8E22-7A420D1E2A3D}") IRenamable;
typedef TComInterface<IRenamable, &IID_IRenamable> IRenamablePtr;

interface DECLSPEC_UUID("{060B063E-85DA-4EBE-9A8D-30AD7C2437BE}") IObjectCollectionBase;
typedef TComInterface<IObjectCollectionBase, &IID_IObjectCollectionBase> IObjectCollectionBasePtr;

interface DECLSPEC_UUID("{D0003CB5-0751-4480-833D-5DB3F380D4E2}") IExtendedProperties;
typedef TComInterface<IExtendedProperties, &IID_IExtendedProperties> IExtendedPropertiesPtr;

interface DECLSPEC_UUID("{C23AC92B-D9DA-43B4-AC24-04F1517F55D2}") IExtendedProperty;
typedef TComInterface<IExtendedProperty, &IID_IExtendedProperty> IExtendedPropertyPtr;

interface DECLSPEC_UUID("{D2EC8E61-48C3-4C8E-A0C8-1035A7C81CBF}") IAccountDetail;
typedef TComInterface<IAccountDetail, &IID_IAccountDetail> IAccountDetailPtr;

interface DECLSPEC_UUID("{6505206C-C307-47AC-A54B-7847A8F0D791}") IPosition;
typedef TComInterface<IPosition, &IID_IPosition> IPositionPtr;

interface DECLSPEC_UUID("{6EDA0A35-9565-493F-9C35-A8DD67DF3A4F}") IPositionQtys;
typedef TComInterface<IPositionQtys, &IID_IPositionQtys> IPositionQtysPtr;

interface DECLSPEC_UUID("{6EA20B86-1C3A-4CC7-A2FA-AEDE6A8A558B}") IPositionQty;
typedef TComInterface<IPositionQty, &IID_IPositionQty> IPositionQtyPtr;

interface DECLSPEC_UUID("{86769964-1C01-447B-B025-E844BCB42C48}") IPositions;
typedef TComInterface<IPositions, &IID_IPositions> IPositionsPtr;

interface DECLSPEC_UUID("{38669BFB-21BF-4FFC-BFB3-26A9A70A02BC}") IObjectPermission;
typedef TComInterface<IObjectPermission, &IID_IObjectPermission> IObjectPermissionPtr;

interface DECLSPEC_UUID("{59A40B13-1DA3-41F7-BE52-2B4F62E2A393}") IFutureDetail;
typedef TComInterface<IFutureDetail, &IID_IFutureDetail> IFutureDetailPtr;

interface DECLSPEC_UUID("{9374C88C-99EB-463E-869C-60F1A5F1D3AD}") IFundDetail;
typedef TComInterface<IFundDetail, &IID_IFundDetail> IFundDetailPtr;

interface DECLSPEC_UUID("{490175F2-5CF2-41B9-BF31-9F9D0A99C0B6}") IFundMember;
typedef TComInterface<IFundMember, &IID_IFundMember> IFundMemberPtr;

interface DECLSPEC_UUID("{0B921350-7518-4F0D-BD8F-9866FF54EF99}") IFundMembers;
typedef TComInterface<IFundMembers, &IID_IFundMembers> IFundMembersPtr;

interface DECLSPEC_UUID("{BCD8BC2D-A7EE-4242-8A43-5AFEB778099F}") IOptionDetail;
typedef TComInterface<IOptionDetail, &IID_IOptionDetail> IOptionDetailPtr;

interface DECLSPEC_UUID("{3007FB97-9481-414F-BEDD-8408BD85CF0D}") IWarrantDetail;
typedef TComInterface<IWarrantDetail, &IID_IWarrantDetail> IWarrantDetailPtr;

interface DECLSPEC_UUID("{6B457138-0D6B-4BF1-951A-18CB86093855}") ICustomer;
typedef TComInterface<ICustomer, &IID_ICustomer> ICustomerPtr;

interface DECLSPEC_UUID("{94E79ADE-2C31-492C-97F3-6E987D38FDD3}") IExchangeAccounts;
typedef TComInterface<IExchangeAccounts, &IID_IExchangeAccounts> IExchangeAccountsPtr;

interface DECLSPEC_UUID("{CBF526B8-6CCF-4D98-B562-C78DF25E9807}") IExchangeAccount;
typedef TComInterface<IExchangeAccount, &IID_IExchangeAccount> IExchangeAccountPtr;

interface DECLSPEC_UUID("{76ED517D-70F7-4548-860D-E3661E063616}") IBrokerAccounts;
typedef TComInterface<IBrokerAccounts, &IID_IBrokerAccounts> IBrokerAccountsPtr;

interface DECLSPEC_UUID("{2EFF1224-3127-4C55-9D4E-A8394734A421}") IBrokerAccount;
typedef TComInterface<IBrokerAccount, &IID_IBrokerAccount> IBrokerAccountPtr;

interface DECLSPEC_UUID("{82D3574A-FAB0-4037-8DF7-C9357131839C}") IMiscFees;
typedef TComInterface<IMiscFees, &IID_IMiscFees> IMiscFeesPtr;

interface DECLSPEC_UUID("{6778946F-1874-4747-A246-DE3DFA9826E5}") IMiscFee;
typedef TComInterface<IMiscFee, &IID_IMiscFee> IMiscFeePtr;

interface DECLSPEC_UUID("{2E132D92-431E-4D45-8FEA-3B51357C8E0D}") IAccounts;
typedef TComInterface<IAccounts, &IID_IAccounts> IAccountsPtr;

interface DECLSPEC_UUID("{2214C787-5A58-4C98-B298-019191BA0EC9}") ICustomerDetail;
typedef TComInterface<ICustomerDetail, &IID_ICustomerDetail> ICustomerDetailPtr;

interface DECLSPEC_UUID("{EBC81E1B-A963-44C2-B710-E9510524A0AA}") IPostalAddress;
typedef TComInterface<IPostalAddress, &IID_IPostalAddress> IPostalAddressPtr;

interface DECLSPEC_UUID("{319F2830-9A48-4B6C-BB07-C83BEF91A06F}") ICustomers;
typedef TComInterface<ICustomers, &IID_ICustomers> ICustomersPtr;

interface DECLSPEC_UUID("{730A7110-5812-4CFC-899E-72A875B78552}") ITask;
typedef TComInterface<ITask, &IID_ITask> ITaskPtr;

interface DECLSPEC_UUID("{2C70EAC5-AE26-4BBD-95F2-B516AF28F9BC}") IHedges;
typedef TComInterface<IHedges, &IID_IHedges> IHedgesPtr;

interface DECLSPEC_UUID("{5DCB97F4-E99F-4629-97EF-371566CC4C45}") IHedge;
typedef TComInterface<IHedge, &IID_IHedge> IHedgePtr;

interface DECLSPEC_UUID("{64856AF0-84F6-42D4-A2F8-4E05B9B545CE}") ITasks;
typedef TComInterface<ITasks, &IID_ITasks> ITasksPtr;

interface DECLSPEC_UUID("{31E87ABB-7FA1-41B9-B53E-B0A76C0A3028}") ITradeCoreSvc;
typedef TComInterface<ITradeCoreSvc, &IID_ITradeCoreSvc> ITradeCoreSvcPtr;

interface DECLSPEC_UUID("{AC2D6E0E-7F89-4CD3-8A9B-3CEEEC668EE2}") ITradeCoreSvc2;
typedef TComInterface<ITradeCoreSvc2, &IID_ITradeCoreSvc2> ITradeCoreSvc2Ptr;

interface DECLSPEC_UUID("{15D74C5B-AF5E-4DE2-86A4-DAC7A0F1B013}") IEventTopics;
typedef TComInterface<IEventTopics, &IID_IEventTopics> IEventTopicsPtr;

interface DECLSPEC_UUID("{9B7B1EC5-1278-4BD7-8687-6D74712F4A28}") IEventTopic;
typedef TComInterface<IEventTopic, &IID_IEventTopic> IEventTopicPtr;

interface DECLSPEC_UUID("{2833B8CC-4560-42BE-826F-E940BC186FAF}") IEventPublisher;
typedef TComInterface<IEventPublisher, &IID_IEventPublisher> IEventPublisherPtr;

interface DECLSPEC_UUID("{DFC4DDEC-16E5-4850-A50D-E1231C3CD077}") ISubscriber;
typedef TComInterface<ISubscriber, &IID_ISubscriber> ISubscriberPtr;

interface DECLSPEC_UUID("{AE30AF8B-C1B1-4FEF-ADB2-0C466298BCEA}") IExchanges;
typedef TComInterface<IExchanges, &IID_IExchanges> IExchangesPtr;

interface DECLSPEC_UUID("{6ED6CC68-10E3-4A9C-AC55-73C3FCF781B8}") IExchange;
typedef TComInterface<IExchange, &IID_IExchange> IExchangePtr;

interface DECLSPEC_UUID("{5E18E14F-C1A6-48FA-8A6D-8C28929F83BC}") IInstruments;
typedef TComInterface<IInstruments, &IID_IInstruments> IInstrumentsPtr;

interface DECLSPEC_UUID("{B153FD3B-7DCA-4C6C-8597-ED851F190A30}") IQuotes;
typedef TComInterface<IQuotes, &IID_IQuotes> IQuotesPtr;

interface DECLSPEC_UUID("{219BD7C5-FD75-493F-9EA5-A4415F617FC7}") ICharts;
typedef TComInterface<ICharts, &IID_ICharts> IChartsPtr;

interface DECLSPEC_UUID("{43ACB6F1-5D0D-4457-AB14-7FC808143C35}") IChart;
typedef TComInterface<IChart, &IID_IChart> IChartPtr;

interface DECLSPEC_UUID("{19746063-A291-4F96-8FCD-4D33A8DC9741}") IChartDataSet;
typedef TComInterface<IChartDataSet, &IID_IChartDataSet> IChartDataSetPtr;

interface DECLSPEC_UUID("{6F2F6D70-D913-478E-B2CF-2ED9D45C85A7}") IRoles;
typedef TComInterface<IRoles, &IID_IRoles> IRolesPtr;

interface DECLSPEC_UUID("{6C75FA7F-A62F-4D71-B371-824BAC04BBCB}") IRole;
typedef TComInterface<IRole, &IID_IRole> IRolePtr;

interface DECLSPEC_UUID("{0DC2FA20-B26E-4625-A317-3D6E4D926F58}") INameList;
typedef TComInterface<INameList, &IID_INameList> INameListPtr;

interface DECLSPEC_UUID("{798E8869-944E-43D3-9FBA-0057C316E3A9}") IUsers;
typedef TComInterface<IUsers, &IID_IUsers> IUsersPtr;

interface DECLSPEC_UUID("{D437A996-1B09-4600-B911-B9DCA680C068}") IUser;
typedef TComInterface<IUser, &IID_IUser> IUserPtr;

interface DECLSPEC_UUID("{92CF7599-E327-440D-B1D3-03942AFF591A}") IProject;
typedef TComInterface<IProject, &IID_IProject> IProjectPtr;

interface DECLSPEC_UUID("{26A19C68-9CFB-4885-992E-B182B51AB593}") IPTSSession;
typedef TComInterface<IPTSSession, &IID_IPTSSession> IPTSSessionPtr;

interface DECLSPEC_UUID("{6F79527A-DDFC-4F56-A899-CB001A488CFD}") INewStockSet;
typedef TComInterface<INewStockSet, &IID_INewStockSet> INewStockSetPtr;

interface DECLSPEC_UUID("{074E7DCF-AA92-4BA9-9EDB-4DFB79C0C201}") INotTradingStockSet;
typedef TComInterface<INotTradingStockSet, &IID_INotTradingStockSet> INotTradingStockSetPtr;

interface DECLSPEC_UUID("{BED76FDA-3A4F-41B4-81C6-43BBDF224E4D}") IQuoteDetail;
typedef TComInterface<IQuoteDetail, &IID_IQuoteDetail> IQuoteDetailPtr;

interface DECLSPEC_UUID("{AD3BD7A0-CD78-4280-B00F-F186F6B0FF53}") _ISubscriberEvents;
typedef TComInterface<_ISubscriberEvents, &DIID__ISubscriberEvents> _ISubscriberEventsPtr;

interface DECLSPEC_UUID("{99DB1DEB-7470-4647-9645-560C888EFB06}") ISubscriber2;
typedef TComInterface<ISubscriber2, &IID_ISubscriber2> ISubscriber2Ptr;

interface DECLSPEC_UUID("{ADC2CEF5-C488-44CE-94B4-3634A8C0466E}") IExchange2;
typedef TComInterface<IExchange2, &IID_IExchange2> IExchange2Ptr;

interface DECLSPEC_UUID("{4875FF1B-8357-4874-836F-C125B482F611}") IQuoteDataSet;
typedef TComInterface<IQuoteDataSet, &IID_IQuoteDataSet> IQuoteDataSetPtr;

interface DECLSPEC_UUID("{D74D5CE8-1B37-4E54-951E-03649A222646}") IQueryCondition;
typedef TComInterface<IQueryCondition, &IID_IQueryCondition> IQueryConditionPtr;

interface DECLSPEC_UUID("{8C7E3C0C-8920-463F-8A40-3556A163ED4D}") IQueryConditions;
typedef TComInterface<IQueryConditions, &IID_IQueryConditions> IQueryConditionsPtr;

interface DECLSPEC_UUID("{3F380C5C-47AA-45CD-92E7-BBF2045ACC7C}") IPermission;
typedef TComInterface<IPermission, &IID_IPermission> IPermissionPtr;

interface DECLSPEC_UUID("{834DA75C-BA20-490C-8ED6-4C074FE6850B}") IServers;
typedef TComInterface<IServers, &IID_IServers> IServersPtr;

interface DECLSPEC_UUID("{13C3CC10-4B55-4509-829B-92D846C59639}") IServer;
typedef TComInterface<IServer, &IID_IServer> IServerPtr;

interface DECLSPEC_UUID("{5CB39F9E-FB59-4EB6-986D-A8DD23515A60}") IBrokers;
typedef TComInterface<IBrokers, &IID_IBrokers> IBrokersPtr;

interface DECLSPEC_UUID("{1C964C4C-73C5-47B5-986D-371A40256813}") IBroker;
typedef TComInterface<IBroker, &IID_IBroker> IBrokerPtr;

interface DECLSPEC_UUID("{E5C1827B-C504-49B7-8722-4213A1B5039E}") IPortfolios;
typedef TComInterface<IPortfolios, &IID_IPortfolios> IPortfoliosPtr;

interface DECLSPEC_UUID("{BBF4CF4A-47F2-4CFF-81A4-B8E26739AC25}") IPortfolio;
typedef TComInterface<IPortfolio, &IID_IPortfolio> IPortfolioPtr;

interface DECLSPEC_UUID("{8E172085-8E32-4DC2-BFF3-10A96D192300}") IPortfolioItemSet;
typedef TComInterface<IPortfolioItemSet, &IID_IPortfolioItemSet> IPortfolioItemSetPtr;

interface DECLSPEC_UUID("{5ACD7FF3-0AA0-4C15-AC34-E69BD3CC26C0}") IDictionary;
typedef TComInterface<IDictionary, &IID_IDictionary> IDictionaryPtr;

interface DECLSPEC_UUID("{3194185A-4DF4-4059-94AE-1F89CB3C9106}") _IBrokerEvents;
typedef TComInterface<_IBrokerEvents, &DIID__IBrokerEvents> _IBrokerEventsPtr;

interface DECLSPEC_UUID("{9B24B576-EE54-4541-87CE-9B5DBC47CB7B}") IQuoteTickData;
typedef TComInterface<IQuoteTickData, &IID_IQuoteTickData> IQuoteTickDataPtr;

interface DECLSPEC_UUID("{AF6361AA-F62F-4CCA-90DA-FD92C54E3B12}") IOrderReport;
typedef TComInterface<IOrderReport, &IID_IOrderReport> IOrderReportPtr;

interface DECLSPEC_UUID("{377F476A-98F5-4949-946D-9E8A5A55F59F}") IObjectPermissionInfo;
typedef TComInterface<IObjectPermissionInfo, &IID_IObjectPermissionInfo> IObjectPermissionInfoPtr;

interface DECLSPEC_UUID("{DBB31D07-06AA-4F42-9243-FF197C54F197}") IProjects;
typedef TComInterface<IProjects, &IID_IProjects> IProjectsPtr;

interface DECLSPEC_UUID("{0E181F33-772E-4689-897A-C2E473BF727E}") IOrder2;
typedef TComInterface<IOrder2, &IID_IOrder2> IOrder2Ptr;

interface DECLSPEC_UUID("{B0FACE51-415C-4A01-BCBE-7E95CF27B39E}") IAuthInfo;
typedef TComInterface<IAuthInfo, &IID_IAuthInfo> IAuthInfoPtr;

interface DECLSPEC_UUID("{2DC08759-8A84-4495-8FC1-89B162062B0F}") IPTSManager;
typedef TComInterface<IPTSManager, &IID_IPTSManager> IPTSManagerPtr;

interface DECLSPEC_UUID("{77E96BE0-BBD3-422B-8155-67140A755A67}") _IPTSSessionEvents;
typedef TComInterface<_IPTSSessionEvents, &DIID__IPTSSessionEvents> _IPTSSessionEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IOrder Order;
typedef IOrderPtr OrderPtr;
typedef IOrders Orders;
typedef IOrdersPtr OrdersPtr;
typedef IExecutionReport ExecutionReport;
typedef IExecutionReportPtr ExecutionReportPtr;
typedef IInstrument Instrument;
typedef IInstrumentPtr InstrumentPtr;
typedef IAccount Account;
typedef IAccountPtr AccountPtr;
typedef IPositions Positions;
typedef IPositionsPtr PositionsPtr;
typedef IPosition Position;
typedef IPositionPtr PositionPtr;
typedef IFutureDetail FutureDetail;
typedef IFutureDetailPtr FutureDetailPtr;
typedef IFundDetail FundDetail;
typedef IFundDetailPtr FundDetailPtr;
typedef IOptionDetail OptionDetail;
typedef IOptionDetailPtr OptionDetailPtr;
typedef IWarrantDetail WarrantDetail;
typedef IWarrantDetailPtr WarrantDetailPtr;
typedef ICustomer Customer;
typedef ICustomerPtr CustomerPtr;
typedef ICustomers Customers;
typedef ICustomersPtr CustomersPtr;
typedef ITask Task;
typedef ITaskPtr TaskPtr;
typedef ITasks Tasks;
typedef ITasksPtr TasksPtr;
typedef IHedge Hedge;
typedef IHedgePtr HedgePtr;
typedef IHedges Hedges;
typedef IHedgesPtr HedgesPtr;
typedef ITradeCoreSvc TradeCoreSvc;
typedef ITradeCoreSvcPtr TradeCoreSvcPtr;
typedef IAccounts Accounts;
typedef IAccountsPtr AccountsPtr;
typedef IQuote Quote;
typedef IQuotePtr QuotePtr;
typedef IEventTopic EventTopic;
typedef IEventTopicPtr EventTopicPtr;
typedef IEventTopics EventTopics;
typedef IEventTopicsPtr EventTopicsPtr;
typedef IQuotes Quotes;
typedef IQuotesPtr QuotesPtr;
typedef IQuoteDetail QuoteDetail;
typedef IQuoteDetailPtr QuoteDetailPtr;
typedef IFundMember FundMember;
typedef IFundMemberPtr FundMemberPtr;
typedef IFundMembers FundMembers;
typedef IFundMembersPtr FundMembersPtr;
typedef ISubscriber Subscriber;
typedef ISubscriberPtr SubscriberPtr;
typedef IExchange Exchange;
typedef IExchangePtr ExchangePtr;
typedef IExchanges Exchanges;
typedef IExchangesPtr ExchangesPtr;
typedef IInstrumentDetail InstrumentDetail;
typedef IInstrumentDetailPtr InstrumentDetailPtr;
typedef IPositionQtys PositionQtys;
typedef IPositionQtysPtr PositionQtysPtr;
typedef IPositionQty PositionQty;
typedef IPositionQtyPtr PositionQtyPtr;
typedef IQueryCondition QueryCondition;
typedef IQueryConditionPtr QueryConditionPtr;
typedef IQueryConditions QueryConditions;
typedef IQueryConditionsPtr QueryConditionsPtr;
typedef IAccountDetail AccountDetail;
typedef IAccountDetailPtr AccountDetailPtr;
typedef IInstruments Instruments;
typedef IInstrumentsPtr InstrumentsPtr;
typedef ICustomerDetail CustomerDetail;
typedef ICustomerDetailPtr CustomerDetailPtr;
typedef IExchangeAccount ExchangeAccount;
typedef IExchangeAccountPtr ExchangeAccountPtr;
typedef IExchangeAccounts ExchangeAccounts;
typedef IExchangeAccountsPtr ExchangeAccountsPtr;
typedef IUser User;
typedef IUserPtr UserPtr;
typedef IUsers Users;
typedef IUsersPtr UsersPtr;
typedef INameList NameList;
typedef INameListPtr NameListPtr;
typedef IObjectList ObjectList;
typedef IObjectListPtr ObjectListPtr;
typedef IPermission Permission;
typedef IPermissionPtr PermissionPtr;
typedef IRole Role;
typedef IRolePtr RolePtr;
typedef IRoles Roles;
typedef IRolesPtr RolesPtr;
typedef IServers Servers;
typedef IServersPtr ServersPtr;
typedef IServer Server;
typedef IServerPtr ServerPtr;
typedef IEventPublisher EventPublisher;
typedef IEventPublisherPtr EventPublisherPtr;
typedef IPortfolio Portfolio;
typedef IPortfolioPtr PortfolioPtr;
typedef IPortfolios Portfolios;
typedef IPortfoliosPtr PortfoliosPtr;
typedef IDictionary Dictionary;
typedef IDictionaryPtr DictionaryPtr;
typedef IMiscFee MiscFee;
typedef IMiscFeePtr MiscFeePtr;
typedef IBroker Broker;
typedef IBrokerPtr BrokerPtr;
typedef IBrokers Brokers;
typedef IBrokersPtr BrokersPtr;
typedef IBrokerAccount BrokerAccount;
typedef IBrokerAccountPtr BrokerAccountPtr;
typedef IBrokerAccounts BrokerAccounts;
typedef IBrokerAccountsPtr BrokerAccountsPtr;
typedef IChartDataSet ChartDataSet;
typedef IChartDataSetPtr ChartDataSetPtr;
typedef IChart Chart;
typedef IChartPtr ChartPtr;
typedef ICharts Charts;
typedef IChartsPtr ChartsPtr;
typedef IExtendedProperty ExtendedProperty;
typedef IExtendedPropertyPtr ExtendedPropertyPtr;
typedef IExtendedProperties ExtendedProperties;
typedef IExtendedPropertiesPtr ExtendedPropertiesPtr;
typedef IPostalAddress PostalAddress;
typedef IPostalAddressPtr PostalAddressPtr;
typedef IQuoteTickData QuoteTickData;
typedef IQuoteTickDataPtr QuoteTickDataPtr;
typedef IMiscFees MiscFees;
typedef IMiscFeesPtr MiscFeesPtr;
typedef IOrderReport OrderReport;
typedef IOrderReportPtr OrderReportPtr;
typedef IQuoteDataSet QuoteDataSet;
typedef IQuoteDataSetPtr QuoteDataSetPtr;
typedef IObjectPermissionInfo ObjectPermissionInfo;
typedef IObjectPermissionInfoPtr ObjectPermissionInfoPtr;
typedef IProject Project;
typedef IProjectPtr ProjectPtr;
typedef IProjects Projects;
typedef IProjectsPtr ProjectsPtr;
typedef IPortfolioItemSet PortfolioItemSet;
typedef IPortfolioItemSetPtr PortfolioItemSetPtr;
typedef IOrder2 Order2;
typedef IOrder2Ptr Order2Ptr;
typedef INewStockSet NewStockSet;
typedef INewStockSetPtr NewStockSetPtr;
typedef INotTradingStockSet NotTradingStockSet;
typedef INotTradingStockSetPtr NotTradingStockSetPtr;
typedef IAuthInfo AuthInfo;
typedef IAuthInfoPtr AuthInfoPtr;
typedef IPTSManager PTSManager;
typedef IPTSManagerPtr PTSManagerPtr;
typedef IPTSSession PTSSession;
typedef IPTSSessionPtr PTSSessionPtr;

#define LIBID_OF_Order (&LIBID_PTSSMOLib)
#define LIBID_OF_Orders (&LIBID_PTSSMOLib)
#define LIBID_OF_ExecutionReport (&LIBID_PTSSMOLib)
#define LIBID_OF_Instrument (&LIBID_PTSSMOLib)
#define LIBID_OF_Account (&LIBID_PTSSMOLib)
#define LIBID_OF_Positions (&LIBID_PTSSMOLib)
#define LIBID_OF_Position (&LIBID_PTSSMOLib)
#define LIBID_OF_FutureDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_FundDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_OptionDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_WarrantDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_Customer (&LIBID_PTSSMOLib)
#define LIBID_OF_Customers (&LIBID_PTSSMOLib)
#define LIBID_OF_Task (&LIBID_PTSSMOLib)
#define LIBID_OF_Tasks (&LIBID_PTSSMOLib)
#define LIBID_OF_Hedge (&LIBID_PTSSMOLib)
#define LIBID_OF_Hedges (&LIBID_PTSSMOLib)
#define LIBID_OF_TradeCoreSvc (&LIBID_PTSSMOLib)
#define LIBID_OF_Accounts (&LIBID_PTSSMOLib)
#define LIBID_OF_Quote (&LIBID_PTSSMOLib)
#define LIBID_OF_EventTopic (&LIBID_PTSSMOLib)
#define LIBID_OF_EventTopics (&LIBID_PTSSMOLib)
#define LIBID_OF_Quotes (&LIBID_PTSSMOLib)
#define LIBID_OF_QuoteDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_FundMember (&LIBID_PTSSMOLib)
#define LIBID_OF_FundMembers (&LIBID_PTSSMOLib)
#define LIBID_OF_Subscriber (&LIBID_PTSSMOLib)
#define LIBID_OF_Exchange (&LIBID_PTSSMOLib)
#define LIBID_OF_Exchanges (&LIBID_PTSSMOLib)
#define LIBID_OF_InstrumentDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_PositionQtys (&LIBID_PTSSMOLib)
#define LIBID_OF_PositionQty (&LIBID_PTSSMOLib)
#define LIBID_OF_QueryCondition (&LIBID_PTSSMOLib)
#define LIBID_OF_QueryConditions (&LIBID_PTSSMOLib)
#define LIBID_OF_AccountDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_Instruments (&LIBID_PTSSMOLib)
#define LIBID_OF_CustomerDetail (&LIBID_PTSSMOLib)
#define LIBID_OF_ExchangeAccount (&LIBID_PTSSMOLib)
#define LIBID_OF_ExchangeAccounts (&LIBID_PTSSMOLib)
#define LIBID_OF_User (&LIBID_PTSSMOLib)
#define LIBID_OF_Users (&LIBID_PTSSMOLib)
#define LIBID_OF_NameList (&LIBID_PTSSMOLib)
#define LIBID_OF_ObjectList (&LIBID_PTSSMOLib)
#define LIBID_OF_Permission (&LIBID_PTSSMOLib)
#define LIBID_OF_Role (&LIBID_PTSSMOLib)
#define LIBID_OF_Roles (&LIBID_PTSSMOLib)
#define LIBID_OF_Servers (&LIBID_PTSSMOLib)
#define LIBID_OF_Server (&LIBID_PTSSMOLib)
#define LIBID_OF_EventPublisher (&LIBID_PTSSMOLib)
#define LIBID_OF_Portfolio (&LIBID_PTSSMOLib)
#define LIBID_OF_Portfolios (&LIBID_PTSSMOLib)
#define LIBID_OF_Dictionary (&LIBID_PTSSMOLib)
#define LIBID_OF_MiscFee (&LIBID_PTSSMOLib)
#define LIBID_OF_Broker (&LIBID_PTSSMOLib)
#define LIBID_OF_Brokers (&LIBID_PTSSMOLib)
#define LIBID_OF_BrokerAccount (&LIBID_PTSSMOLib)
#define LIBID_OF_BrokerAccounts (&LIBID_PTSSMOLib)
#define LIBID_OF_ChartDataSet (&LIBID_PTSSMOLib)
#define LIBID_OF_Chart (&LIBID_PTSSMOLib)
#define LIBID_OF_Charts (&LIBID_PTSSMOLib)
#define LIBID_OF_ExtendedProperty (&LIBID_PTSSMOLib)
#define LIBID_OF_ExtendedProperties (&LIBID_PTSSMOLib)
#define LIBID_OF_PostalAddress (&LIBID_PTSSMOLib)
#define LIBID_OF_QuoteTickData (&LIBID_PTSSMOLib)
#define LIBID_OF_MiscFees (&LIBID_PTSSMOLib)
#define LIBID_OF_OrderReport (&LIBID_PTSSMOLib)
#define LIBID_OF_QuoteDataSet (&LIBID_PTSSMOLib)
#define LIBID_OF_ObjectPermissionInfo (&LIBID_PTSSMOLib)
#define LIBID_OF_Project (&LIBID_PTSSMOLib)
#define LIBID_OF_Projects (&LIBID_PTSSMOLib)
#define LIBID_OF_PortfolioItemSet (&LIBID_PTSSMOLib)
#define LIBID_OF_Order2 (&LIBID_PTSSMOLib)
#define LIBID_OF_NewStockSet (&LIBID_PTSSMOLib)
#define LIBID_OF_NotTradingStockSet (&LIBID_PTSSMOLib)
#define LIBID_OF_AuthInfo (&LIBID_PTSSMOLib)
#define LIBID_OF_PTSManager (&LIBID_PTSSMOLib)
#define LIBID_OF_PTSSession (&LIBID_PTSSMOLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TcOrderStatus
{
  tcOrderStatusNew = 0, 
  tcOrderStatusPartFilled = 1, 
  tcOrderStatusFilled = 2, 
  tcOrderStatusRejected = 4, 
  tcOrderStatusPendingNew = 5, 
  tcOrderStatusAccepted = 6, 
  tcOrderStatusUnknown = 9
} TcOrderStatus;

typedef enum TcOrderType
{
  tcOrderTypeUnknown = 0, 
  tcOrderTypeMarket = 1, 
  tcOrderTypeLimit = 2, 
  tcOrderTypeStop = 3, 
  tcOrderTypeStopLimit = 4, 
  tcOrderTypeIceberg = 5, 
  tcOrderTypeMarketStopOut = 6, 
  tcOrderTypeCancel = 7, 
  tcOrderTypeNonTrading = 9
} TcOrderType;

typedef enum TcNonTradingOrderType
{
  tcNonTradingOrderUnknown = 0, 
  tcNonTradingOrderEC = 1, 
  tcNonTradingOrderER = 2, 
  tcNonTradingOrderWE = 3
} TcNonTradingOrderType;

typedef enum TcOrderSide
{
  tcOrderSideUnknown = 0, 
  tcOrderSideBuy = 1, 
  tcOrderSideSell = 2
} TcOrderSide;

typedef enum TcTimeInForce
{
  tcTimeInForceUnknown = 0, 
  tcTimeInForceGFD = 1, 
  tcTimeInForceGTC = 2, 
  tcTimeInForceIOC = 3, 
  tcTimeInForceFOK = 4, 
  tcTimeInForceGTD = 5, 
  tcTimeInForceGFA = 6, 
  tcTimeInForceGFS = 7
} TcTimeInForce;

typedef enum TcCreditTrading
{
  tcCreditTradingNo = 0, 
  tcCreditTradingFinancing = 1, 
  tcCreditTradingSecuLoan = 2, 
  tcCreditTradingGuaranty = 3
} TcCreditTrading;

typedef enum TcOrderRestriction
{
  tcOrderRestrictionUnknown = 0, 
  tcOrderRestrictionAU = 1, 
  tcOrderRestrictionOA = 2, 
  tcOrderRestrictionSU = 3, 
  tcOrderRestrictionFP = 4, 
  tcOrderRestrictionNO = 5
} TcOrderRestriction;

typedef enum TcPositionEffect
{
  tcPositionEffectUnknown = 0, 
  tcPositionEffectOpen = 1, 
  tcPositionEffectClose = 2, 
  tcPositionEffectForceClose = 3, 
  tcPositionEffectCloseToday = 4, 
  tcPositionEffectCloseYesterday = 5
} TcPositionEffect;

typedef enum TcQuantityCondition
{
  tcQuantityConditionUnknown = 0, 
  tcQuantityConditionAV = 1, 
  tcQuantityConditionMV = 2, 
  tcQuantityConditionCV = 3
} TcQuantityCondition;

typedef enum TcOrderCommitMode
{
  tcCommitModeUnknown = 0, 
  tcCommitModeIgnore = 1, 
  tcCommitModeAbort = 2, 
  tcCommitModeRollback = 3
} TcOrderCommitMode;

typedef enum TcMessageType
{
  tcMessageInformation = 0, 
  tcMessageWarning = 1, 
  tcMessageError = 2
} TcMessageType;

typedef enum TcObjectState
{
  tcObjectStateCreating = 0, 
  tcObjectStateDropped = 1, 
  tcObjectStateExisting = 2, 
  tcObjectStatePending = 3, 
  tcObjectStateToBeDropped = 4
} TcObjectState;

typedef enum TcObjectType
{
  tcObjectTypeUnknown = 0, 
  tcObjectTypeAccount = 3, 
  tcObjectTypeCustomer = 5, 
  tcObjectTypeEventTopic = 6, 
  tcObjectTypeExchange = 7, 
  tcObjectTypeExchangeAccount = 9, 
  tcObjectTypeTask = 10, 
  tcObjectTypeUser = 11, 
  tcObjectTypeRole = 12, 
  tcObjectTypeBroker = 13, 
  tcObjectTypeBrokerAccount = 14, 
  tcObjectTypeServer = 15, 
  tcObjectTypeFee = 16, 
  tcObjectTypeChart = 17, 
  tcObjectTypeProject = 18, 
  tcObjectTypePortfolio = 19, 
  tcObjectTypeMessage = 20, 
  tcObjectTypeOrder = 21, 
  tcObjectTypeHedge = 22, 
  tcObjectTypeCollection = 268435456
} TcObjectType;

typedef enum TcInstrumentType
{
  tcInstrumentUnknown = 0, 
  tcInstrumentEquity = 1, 
  tcInstrumentFuture = 2, 
  tcInstrumentOption = 4, 
  tcInstrumentWarrant = 8, 
  tcInstrumentFund = 16
} TcInstrumentType;

typedef enum TcInstrumentSubType
{
  tcInstrumentSubTypeUnknown = 0, 
  tcInstrumentSubTypeASH = 1, 
  tcInstrumentSubTypeBSH = 2, 
  tcInstrumentSubTypeEBL = 3, 
  tcInstrumentSubTypeOEQ = 4, 
  tcInstrumentSubTypeCEF = 5, 
  tcInstrumentSubTypeOEF = 6, 
  tcInstrumentSubTypeEBS = 7, 
  tcInstrumentSubTypeFBL = 8, 
  tcInstrumentSubTypeOFN = 9, 
  tcInstrumentSubTypeCIW = 10, 
  tcInstrumentSubTypeCOV = 11, 
  tcInstrumentSubTypeCER = 12, 
  tcInstrumentSubTypeOWR = 13, 
  tcInstrumentSubTypeFIX = 14, 
  tcInstrumentSubTypeFEQ = 15, 
  tcInstrumentSubTypeFBD = 16, 
  tcInstrumentSubTypeOFT = 17, 
  tcInstrumentSubTypeGBV = 18, 
  tcInstrumentSubTypeGBF = 19, 
  tcInstrumentSubTypeGBZ = 20, 
  tcInstrumentSubTypeDST = 21, 
  tcInstrumentSubTypeCBV = 22, 
  tcInstrumentSubTypeCBF = 23, 
  tcInstrumentSubTypeCCV = 24, 
  tcInstrumentSubTypeCCF = 25, 
  tcInstrumentSubTypeFBV = 26, 
  tcInstrumentSubTypeFBF = 27, 
  tcInstrumentSubTypeCRP = 28, 
  tcInstrumentSubTypeORP = 29, 
  tcInstrumentSubTypeBBL = 30, 
  tcInstrumentSubTypeOBD = 31
} TcInstrumentSubType;

typedef enum TcCurrencyType
{
  tcCurrencyTypeUnknown = 0, 
  tcCurrencyTypeRMB = 1, 
  tcCurrencyTypeUSD = 2, 
  tcCurrencyTypeHKD = 3
} TcCurrencyType;

typedef enum TcInstrumentStatus
{
  tcInstrumentStatusUnknown = 0, 
  tcInstrumentStatusNormal = 1, 
  tcInstrumentStatusAdd = 2, 
  tcInstrumentStatusDelete = 3, 
  tcInstrumentStatusHalt = 4, 
  tcInstrumentStatusSuspend = 5
} TcInstrumentStatus;

typedef enum TcOrderLotLimitType
{
  tcOrderLotLimitUnknown = 0, 
  tcOrderLotLimitNo = 1, 
  tcOrderLotLimitBuy = 2, 
  tcOrderLotLimitSell = 3, 
  tcOrderLotLimitAll = 4
} TcOrderLotLimitType;

typedef enum TcFinancingIndicate
{
  tcFinancingIndicateUnknown = 0, 
  tcFinancingIndicateNo = 1, 
  tcFinancingIndicateBuy = 2, 
  tcFinancingIndicateSell = 3, 
  tcFinancingIndicateAll = 4
} TcFinancingIndicate;

typedef enum TcAccountType
{
  tcAccountTypeUnknown = 0, 
  tcAccountTypeNormal = 1, 
  tcAccountTypeMargin = 2
} TcAccountType;

typedef enum TcAccountStatus
{
  tcAccountStatusUnknown = 0, 
  tcAccountStatusNormal = 1, 
  tcAccountStatusStop = 2, 
  tcAccountStatusFreeze = 3, 
  tcAccountStatusAssigned = 4
} TcAccountStatus;

typedef enum TcPositionDirection
{
  tcPositionDirectionUnknown = 0, 
  tcPositionDirectionNet = 1, 
  tcPositionDirectionLong = 2, 
  tcPositionDirectionShort = 3, 
  tcPositionDirectionNew = 4, 
  tcPositionDirectionCreate = 5
} TcPositionDirection;

typedef enum TcPositionType
{
  tcPositionTypeUnknown = 0, 
  tcPositionTypeSOD = 1, 
  tcPositionTypeDTR = 4, 
  tcPositionTypeECR = 5
} TcPositionType;

typedef enum TcPrivilegeType
{
  tcPrivilegeTypeUnknown = 0, 
  tcPrivilegeTypeAlter = 1, 
  tcPrivilegeTypeControl = 2, 
  tcPrivilegeTypeCreateOrder = 4, 
  tcPrivilegeTypeCreateHedge = 8, 
  tcPrivilegeTypeDrop = 16, 
  tcPrivilegeTypeView = 64
} TcPrivilegeType;

typedef enum TcDeliveryStyle
{
  tcDeliveryStyleUnknown = 0, 
  tcDeliveryStylePhysical = 1, 
  tcDeliveryStyleCash = 2
} TcDeliveryStyle;

typedef enum TcCashReplaceFlag
{
  tcCashReplaceFlagUnknown = 0, 
  tcCashReplaceFlagDisallow = 1, 
  tcCashReplaceFlagAllow = 2, 
  tcCashReplaceFlagMust = 3
} TcCashReplaceFlag;

typedef enum TcOptionType
{
  tcOptionTypeUnknown = 0, 
  tcOptionTypeCall = 1, 
  tcOptionTypePut = 2
} TcOptionType;

typedef enum TcExerciseStyle
{
  tcExerciseStyleUnknown = 0, 
  tcExerciseStyleAmerican = 1, 
  tcExerciseStyleEuropean = 2
} TcExerciseStyle;

typedef enum TcWarrantType
{
  tcWarrantTypeCall = 0, 
  tcWarrantTypePut = 1, 
  tcWarrantTypeOther = 9
} TcWarrantType;

typedef enum TcExchangeAccountType
{
  tcExchAccountTypeUnknown = 0, 
  tcExchAccountTypeNormal = 1, 
  tcExchAccountTypeBShare = 2, 
  tcExchAccountTypeCredit = 3
} TcExchangeAccountType;

typedef enum TcExchangeAccountStatus
{
  tcExchAccountStatusUnknown = 0, 
  tcExchAccountStatusNormal = 1, 
  tcExchAccountStatusStop = 2, 
  tcExchAccountStatusFreeze = 3
} TcExchangeAccountStatus;

typedef enum TcMiscFeeType
{
  tcMiscFeeTypeUnknown = 0, 
  tcMiscFeeTypeRegulatory = 1, 
  tcMiscFeeTypeTax = 2, 
  tcMiscFeeTypeCommission = 3, 
  tcMiscFeeTypeExchange = 4, 
  tcMiscFeeTypeStamp = 5, 
  tcMiscFeeTypeLevy = 6, 
  tcMiscFeeTypeMarkup = 7, 
  tcMiscFeeTypeConsumptionTax = 8, 
  tcMiscFeeTypePerTransaction = 9, 
  tcMiscFeeTypeConversion = 10, 
  tcMiscFeeTypeAgent = 11, 
  tcMiscFeeTypeTransfer = 12, 
  tcMiscFeeTypeOther = 13
} TcMiscFeeType;

typedef enum TcBusinessType
{
  tcBusinessTypeUnknown = 0, 
  tcBusinessTypeBuy = 1, 
  tcBusinessTypeSell = 2, 
  tcBusinessTypeOpen = 3, 
  tcBusinessTypeCloseToday = 4, 
  tcBusinessTypeCloseYesterday = 5, 
  tcBusinessTypeSubscribe = 6, 
  tcBusinessTypeRedeem = 7, 
  tcBusinessTypeIssue = 8, 
  tcBusinessTypeSeat = 9, 
  tcBusinessTypeOther = 10
} TcBusinessType;

typedef enum TcGenderType
{
  tcGenderTypeUnknown = 0, 
  tcGenderTypeMale = 1, 
  tcGenderTypeFemale = 2
} TcGenderType;

typedef enum TcIdentifiedCardType
{
  tcIdentifiedCardUnknown = 0, 
  tcIdentifiedCardPerson = 1, 
  tcIdentifiedCardOfficer = 2, 
  tcIdentifiedCardPolice = 3, 
  tcIdentifiedCardSoldier = 4, 
  tcIdentifiedCardPassport = 5, 
  tcIdentifiedCardTaiwanCompatriot = 6, 
  tcIdentifiedCardHomeComing = 7, 
  tcIdentifiedCardOther = 8
} TcIdentifiedCardType;

typedef enum TcPhoneNumberType
{
  tcPhoneNumberUnknown = 0, 
  tcPhoneNumberAssistant = 1, 
  tcPhoneNumberBusiness = 2, 
  tcPhoneNumberBusiness2 = 3, 
  tcPhoneNumberBusinessFax = 4, 
  tcPhoneNumberCompany = 5, 
  tcPhoneNumberHome = 6, 
  tcPhoneNumberHome2 = 7, 
  tcPhoneNumberHomeFax = 8, 
  tcPhoneNumberMobile = 9, 
  tcPhoneNumberOther = 10, 
  tcPhoneNumberOtherFax = 11, 
  tcPhoneNumberGeneral = 12
} TcPhoneNumberType;

typedef enum TcAddressType
{
  tcAddressTypeUnknown = 0, 
  tcAddressTypeBusiness = 1, 
  tcAddressTypeHome = 2, 
  tcAddressTypeOther = 3
} TcAddressType;

typedef enum TcTaskStatus
{
  tcTaskStatusUnknown = 0, 
  tcTaskStatusShareOpen = 1, 
  tcTaskStatusExclusiveOpen = 2, 
  tcTaskStatusClose = 3
} TcTaskStatus;

typedef enum TcTaskOpenMode
{
  tcTaskOpenModeUnknown = 0, 
  tcTaskOpenModeShare = 1, 
  tcTaskOpenModeExclusive = 2
} TcTaskOpenMode;

typedef enum TcHedgeStatus
{
  tcHedgeStatusUnknown = 0, 
  tcHedgeStatusWorking = 1, 
  tcHedgeStatusStop = 2, 
  tcHedgeStatusComplete = 3, 
  tcHedgeStatusInvalid = 4
} TcHedgeStatus;

typedef enum TcEventTopicType
{
  tcEventTopicUnknown = 0, 
  tcEventTopicPublic = 1, 
  tcEventTopicPrivate = 2
} TcEventTopicType;

typedef enum TcSubscribeStatus
{
  tcSubscribeStatusUnknown = 0, 
  tcSubscribeStatusWaiting = 1, 
  tcSubscribeStatusSubscribe = 2, 
  tcSubscribeStatusUnsubscribe = 3, 
  tcSubscribeStatusConnected = 4, 
  tcSubscribeStatusDisconnected = 5
} TcSubscribeStatus;

typedef enum TcExchangeStatus
{
  tcExchangeStatusUnknown = 0, 
  tcExchangeStatusOpenCall = 1, 
  tcExchangeStatusTrade = 2, 
  tcExchangeStatusBreak = 3, 
  tcExchangeStatusClose = 4
} TcExchangeStatus;

typedef enum TcUserType
{
  tcUserTypeUnknown = 0, 
  tcUserTypeNTGroup = 1, 
  tcUserTypeNTUser = 2, 
  tcUserTypeStandard = 3
} TcUserType;

typedef enum TcObjectSortType
{
  tcObjectSortTypeUnknown = 0, 
  tcObjectSortTypeDate = 1, 
  tcObjectSortTypeName = 2, 
  tcObjectSortTypeOwner = 3, 
  tcObjectSortTypeType = 4
} TcObjectSortType;

typedef enum TcProjectStatus
{
  tcProjectStatusUnknown = 0, 
  tcProjectStatusNew = 1, 
  tcProjectStatusConfirmed = 2, 
  tcProjectStatusCanceled = 3, 
  tcProjectStatusCompleted = 4
} TcProjectStatus;

typedef enum TcLoginType
{
  tcLoginTypeWindows = 1, 
  tcLoginTypePTS = 2, 
  tcLoginTypeMix = 3
} TcLoginType;

typedef enum TcOperatorType
{
  tcOperatorTypeUnknown = 0, 
  tcOperatorTypeBetween = 1, 
  tcOperatorTypeContains = 2, 
  tcOperatorTypeEqual = 3, 
  tcOperatorTypeGreaterThan = 4, 
  tcOperatorTypeGreaterThanEqual = 5, 
  tcOperatorTypeLessThan = 6, 
  tcOperatorTypeLessThanEqual = 7, 
  tcOperatorTypeNotBetween = 8, 
  tcOperatorTypeNotContains = 9, 
  tcOperatorTypeIn = 10
} TcOperatorType;

typedef enum TcPrincipalType
{
  tcPrincipalTypeUnknown = 0, 
  tcPrincipalTypeUser = 1, 
  tcPrincipalTypeRole = 2
} TcPrincipalType;

typedef enum TcPermissionState
{
  tcPermissionStateUnknown = 0, 
  tcPermissionStateDeny = 1, 
  tcPermissionStateGrant = 2, 
  tcPermissionStateGrantWithGrant = 3, 
  tcPermissionStateRevoke = 4
} TcPermissionState;

typedef enum TcServerStatus
{
  tcServerStatusUnknown = 0, 
  tcServerStatusStopped = 1, 
  tcServerStatusPaused = 2, 
  tcServerStatusRunning = 3, 
  tcServerStatusInitialized = 4, 
  tcServerStatusBackuped = 5
} TcServerStatus;

typedef enum TcCollectDataType
{
  tcCollectDataAll = 0, 
  tcCollectDataOrder = 1, 
  tcCollectDataOrderReport = 2, 
  tcCollectDataHedge = 3, 
  tcCollectDataChart = 4, 
  tcCollectDataQuoteTick = 5
} TcCollectDataType;

// *********************************************************************//
// Interface: IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {787035B1-4164-4933-99E7-A88257F65AF0}
// *********************************************************************//
interface IOrder  : public IDispatch
{
public:
  // [1] 账户标识
  virtual HRESULT STDMETHODCALLTYPE get_AccountID(long* pVal/*[out,retval]*/) = 0;
  // [1] 账户标识
  virtual HRESULT STDMETHODCALLTYPE set_AccountID(long pVal/*[in]*/) = 0;
  // [2] 对冲标识
  virtual HRESULT STDMETHODCALLTYPE get_HedgeID(long* pVal/*[out,retval]*/) = 0;
  // [2] 对冲标识
  virtual HRESULT STDMETHODCALLTYPE set_HedgeID(long pVal/*[in]*/) = 0;
  // [3] 投资账户标识
  virtual HRESULT STDMETHODCALLTYPE get_ExchAcctID(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 订单标识
  virtual HRESULT STDMETHODCALLTYPE get_OrderID(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 订单状态
  virtual HRESULT STDMETHODCALLTYPE get_OrderStatus(Ptssmolib_tlb::TcOrderStatus* pVal/*[out,retval]*/) = 0;
  // [7] 订单日期
  virtual HRESULT STDMETHODCALLTYPE get_OrderDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 订单时间
  virtual HRESULT STDMETHODCALLTYPE get_OrderTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 订单类型
  virtual HRESULT STDMETHODCALLTYPE get_OrderType(Ptssmolib_tlb::TcOrderType* pVal/*[out,retval]*/) = 0;
  // [9] 订单类型
  virtual HRESULT STDMETHODCALLTYPE set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/) = 0;
  // [10] 非交易订单类型
  virtual HRESULT STDMETHODCALLTYPE get_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType* pVal/*[out,retval]*/) = 0;
  // [10] 非交易订单类型
  virtual HRESULT STDMETHODCALLTYPE set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/) = 0;
  // [11] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstrumentID(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] 产品标识
  virtual HRESULT STDMETHODCALLTYPE set_InstrumentID(BSTR pVal/*[in]*/) = 0;
  // [12] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [12] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE set_InstIDSource(long pVal/*[in]*/) = 0;
  // [13] 订单方向
  virtual HRESULT STDMETHODCALLTYPE get_Side(Ptssmolib_tlb::TcOrderSide* pVal/*[out,retval]*/) = 0;
  // [13] 订单方向
  virtual HRESULT STDMETHODCALLTYPE set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/) = 0;
  // [14] 订单数量
  virtual HRESULT STDMETHODCALLTYPE get_Quantity(long* pVal/*[out,retval]*/) = 0;
  // [14] 订单数量
  virtual HRESULT STDMETHODCALLTYPE set_Quantity(long pVal/*[in]*/) = 0;
  // [15] 限价价格
  virtual HRESULT STDMETHODCALLTYPE get_Price(double* pVal/*[out,retval]*/) = 0;
  // [15] 限价价格
  virtual HRESULT STDMETHODCALLTYPE set_Price(double pVal/*[in]*/) = 0;
  // [16] 止损价格
  virtual HRESULT STDMETHODCALLTYPE get_StopPrice(double* pVal/*[out,retval]*/) = 0;
  // [16] 止损价格
  virtual HRESULT STDMETHODCALLTYPE set_StopPrice(double pVal/*[in]*/) = 0;
  // [17] 订单有效时间
  virtual HRESULT STDMETHODCALLTYPE get_TimeInForce(Ptssmolib_tlb::TcTimeInForce* pVal/*[out,retval]*/) = 0;
  // [17] 订单有效时间
  virtual HRESULT STDMETHODCALLTYPE set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/) = 0;
  // [18] 订单的有效日期
  virtual HRESULT STDMETHODCALLTYPE get_ExpireTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [18] 订单的有效日期
  virtual HRESULT STDMETHODCALLTYPE set_ExpireTime(BSTR pVal/*[in]*/) = 0;
  // [19] 冰山订单揭示数量
  virtual HRESULT STDMETHODCALLTYPE get_MaxFloor(long* pVal/*[out,retval]*/) = 0;
  // [19] 冰山订单揭示数量
  virtual HRESULT STDMETHODCALLTYPE set_MaxFloor(long pVal/*[in]*/) = 0;
  // [20] 信用交易类型
  virtual HRESULT STDMETHODCALLTYPE get_CreditTrading(Ptssmolib_tlb::TcCreditTrading* pVal/*[out,retval]*/) = 0;
  // [20] 信用交易类型
  virtual HRESULT STDMETHODCALLTYPE set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/) = 0;
  // [21] 交易限制条件
  virtual HRESULT STDMETHODCALLTYPE get_Restriction(Ptssmolib_tlb::TcOrderRestriction* pVal/*[out,retval]*/) = 0;
  // [21] 交易限制条件
  virtual HRESULT STDMETHODCALLTYPE set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/) = 0;
  // [22] 仓位效果
  virtual HRESULT STDMETHODCALLTYPE get_PositionEffect(Ptssmolib_tlb::TcPositionEffect* pVal/*[out,retval]*/) = 0;
  // [22] 仓位效果
  virtual HRESULT STDMETHODCALLTYPE set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/) = 0;
  // [23] 数量条件
  virtual HRESULT STDMETHODCALLTYPE get_QtyCondition(Ptssmolib_tlb::TcQuantityCondition* pVal/*[out,retval]*/) = 0;
  // [23] 数量条件
  virtual HRESULT STDMETHODCALLTYPE set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/) = 0;
  // [24] 最小委托数量
  virtual HRESULT STDMETHODCALLTYPE get_MinQty(long* pVal/*[out,retval]*/) = 0;
  // [24] 最小委托数量
  virtual HRESULT STDMETHODCALLTYPE set_MinQty(long pVal/*[in]*/) = 0;
  // [25] 拒绝原因
  virtual HRESULT STDMETHODCALLTYPE get_RejectReason(BSTR* pVal/*[out,retval]*/) = 0;
  // [26] 成交量
  virtual HRESULT STDMETHODCALLTYPE get_ExecQty(long* pVal/*[out,retval]*/) = 0;
  // [27] 成交均价
  virtual HRESULT STDMETHODCALLTYPE get_ExecAvgPrice(double* pVal/*[out,retval]*/) = 0;
  // [28] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/) = 0;
  // [28] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pVal/*[in]*/) = 0;
  // [50] 撤消
  virtual HRESULT STDMETHODCALLTYPE Cancel(void) = 0;
  // [51] 获得成交报告
  virtual HRESULT STDMETHODCALLTYPE GetReports(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/) = 0;
  // [52] 修改
  virtual HRESULT STDMETHODCALLTYPE Modify(void) = 0;
  // [53] 刷新
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_AccountID(void)
  {
    long pVal;
    OLECHECK(this->get_AccountID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_HedgeID(void)
  {
    long pVal;
    OLECHECK(this->get_HedgeID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExchAcctID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OrderID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OrderID((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOrderStatus __fastcall get_OrderStatus(void)
  {
    Ptssmolib_tlb::TcOrderStatus pVal;
    OLECHECK(this->get_OrderStatus((Ptssmolib_tlb::TcOrderStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OrderDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OrderDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OrderTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OrderTime((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOrderType __fastcall get_OrderType(void)
  {
    Ptssmolib_tlb::TcOrderType pVal;
    OLECHECK(this->get_OrderType((Ptssmolib_tlb::TcOrderType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcNonTradingOrderType __fastcall get_NonTradingType(void)
  {
    Ptssmolib_tlb::TcNonTradingOrderType pVal;
    OLECHECK(this->get_NonTradingType((Ptssmolib_tlb::TcNonTradingOrderType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InstrumentID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstrumentID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOrderSide __fastcall get_Side(void)
  {
    Ptssmolib_tlb::TcOrderSide pVal;
    OLECHECK(this->get_Side((Ptssmolib_tlb::TcOrderSide*)&pVal));
    return pVal;
  }

  long __fastcall get_Quantity(void)
  {
    long pVal;
    OLECHECK(this->get_Quantity((long*)&pVal));
    return pVal;
  }

  double __fastcall get_Price(void)
  {
    double pVal;
    OLECHECK(this->get_Price((double*)&pVal));
    return pVal;
  }

  double __fastcall get_StopPrice(void)
  {
    double pVal;
    OLECHECK(this->get_StopPrice((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcTimeInForce __fastcall get_TimeInForce(void)
  {
    Ptssmolib_tlb::TcTimeInForce pVal;
    OLECHECK(this->get_TimeInForce((Ptssmolib_tlb::TcTimeInForce*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExpireTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExpireTime((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxFloor(void)
  {
    long pVal;
    OLECHECK(this->get_MaxFloor((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcCreditTrading __fastcall get_CreditTrading(void)
  {
    Ptssmolib_tlb::TcCreditTrading pVal;
    OLECHECK(this->get_CreditTrading((Ptssmolib_tlb::TcCreditTrading*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOrderRestriction __fastcall get_Restriction(void)
  {
    Ptssmolib_tlb::TcOrderRestriction pVal;
    OLECHECK(this->get_Restriction((Ptssmolib_tlb::TcOrderRestriction*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPositionEffect __fastcall get_PositionEffect(void)
  {
    Ptssmolib_tlb::TcPositionEffect pVal;
    OLECHECK(this->get_PositionEffect((Ptssmolib_tlb::TcPositionEffect*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcQuantityCondition __fastcall get_QtyCondition(void)
  {
    Ptssmolib_tlb::TcQuantityCondition pVal;
    OLECHECK(this->get_QtyCondition((Ptssmolib_tlb::TcQuantityCondition*)&pVal));
    return pVal;
  }

  long __fastcall get_MinQty(void)
  {
    long pVal;
    OLECHECK(this->get_MinQty((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RejectReason(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RejectReason((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ExecQty(void)
  {
    long pVal;
    OLECHECK(this->get_ExecQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_ExecAvgPrice(void)
  {
    double pVal;
    OLECHECK(this->get_ExecAvgPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Text((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall GetReports(void)
  {
    Ptssmolib_tlb::IObjectList* pVal = 0;
    OLECHECK(this->GetReports((Ptssmolib_tlb::IObjectList**)&pVal));
    return pVal;
  }


  __property   long            AccountID = {read = get_AccountID, write = set_AccountID};
  __property   long            HedgeID = {read = get_HedgeID, write = set_HedgeID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            OrderID = {read = get_OrderID};
  __property   Ptssmolib_tlb::TcOrderStatus OrderStatus = {read = get_OrderStatus};
  __property   BSTR            OrderDate = {read = get_OrderDate};
  __property   BSTR            OrderTime = {read = get_OrderTime};
  __property   Ptssmolib_tlb::TcOrderType OrderType = {read = get_OrderType, write = set_OrderType};
  __property   Ptssmolib_tlb::TcNonTradingOrderType NonTradingType = {read = get_NonTradingType, write = set_NonTradingType};
  __property   BSTR            InstrumentID = {read = get_InstrumentID, write = set_InstrumentID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   Ptssmolib_tlb::TcOrderSide Side = {read = get_Side, write = set_Side};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   double          Price = {read = get_Price, write = set_Price};
  __property   double          StopPrice = {read = get_StopPrice, write = set_StopPrice};
  __property   Ptssmolib_tlb::TcTimeInForce TimeInForce = {read = get_TimeInForce, write = set_TimeInForce};
  __property   BSTR            ExpireTime = {read = get_ExpireTime, write = set_ExpireTime};
  __property   long            MaxFloor = {read = get_MaxFloor, write = set_MaxFloor};
  __property   Ptssmolib_tlb::TcCreditTrading CreditTrading = {read = get_CreditTrading, write = set_CreditTrading};
  __property   Ptssmolib_tlb::TcOrderRestriction Restriction = {read = get_Restriction, write = set_Restriction};
  __property   Ptssmolib_tlb::TcPositionEffect PositionEffect = {read = get_PositionEffect, write = set_PositionEffect};
  __property   Ptssmolib_tlb::TcQuantityCondition QtyCondition = {read = get_QtyCondition, write = set_QtyCondition};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   BSTR            RejectReason = {read = get_RejectReason};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecAvgPrice = {read = get_ExecAvgPrice};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObjectList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6115E5B1-7E3D-4116-B3DF-DE153CB9278A}
// *********************************************************************//
interface IObjectList  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             LPDISPATCH* ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] 方法Refresh
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  LPDISPATCH __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    LPDISPATCH ppObjVal;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOrders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3669D4E3-2E08-4840-8311-91B952C43182}
// *********************************************************************//
interface IOrders  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Add Items
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IOrder** ppObject/*[out,retval]*/) = 0;
  // [4] 方法DeleteAll
  virtual HRESULT STDMETHODCALLTYPE DeleteAll(void) = 0;
  // [5] 方法RemoveAt
  virtual HRESULT STDMETHODCALLTYPE RemoveAt(VARIANT Index/*[in]*/) = 0;
  // [3] 方法Commit
  virtual HRESULT STDMETHODCALLTYPE Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                           long* pErrorIndex/*[out]*/) = 0;
  // [7] Number of Items
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR OrderID/*[in]*/, 
                                         Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IOrder* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IOrder* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IOrder**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IOrder* __fastcall Add(void)
  {
    Ptssmolib_tlb::IOrder* ppObject = 0;
    OLECHECK(this->Add((Ptssmolib_tlb::IOrder**)&ppObject));
    return ppObject;
  }

  Ptssmolib_tlb::IOrder* __fastcall Find(BSTR OrderID/*[in]*/)
  {
    Ptssmolib_tlb::IOrder* ppObjVal = 0;
    OLECHECK(this->Find(OrderID, (Ptssmolib_tlb::IOrder**)&ppObjVal));
    return ppObjVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExecutionReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93E4BC77-26AF-4DB3-86A8-FBEAED97802C}
// *********************************************************************//
interface IExecutionReport  : public IDispatch
{
public:
  // [1] 消息类型
  virtual HRESULT STDMETHODCALLTYPE get_MsgType(Ptssmolib_tlb::TcMessageType* pVal/*[out,retval]*/) = 0;
  // [2] 消息
  virtual HRESULT STDMETHODCALLTYPE get_Message(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::TcMessageType __fastcall get_MsgType(void)
  {
    Ptssmolib_tlb::TcMessageType pVal;
    OLECHECK(this->get_MsgType((Ptssmolib_tlb::TcMessageType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Message(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Message((BSTR*)&pVal));
    return pVal;
  }


  __property   Ptssmolib_tlb::TcMessageType MsgType = {read = get_MsgType};
  __property   BSTR            Message = {read = get_Message};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91E6AC95-A60B-4CB3-A177-4B6A39E99EC5}
// *********************************************************************//
interface IObjectBase  : public IDispatch
{
public:
  // [-1] 父对象
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/) = 0;
  // [-1] 对象状态
  virtual HRESULT STDMETHODCALLTYPE get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/) = 0;
  // [-1] 对象类型
  virtual HRESULT STDMETHODCALLTYPE get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/) = 0;
  // [-1] 用户数据
  virtual HRESULT STDMETHODCALLTYPE get_UserData(VARIANT* pRetVal/*[out,retval]*/) = 0;
  // [1610743811] 用户数据
  virtual HRESULT STDMETHODCALLTYPE set_UserData(VARIANT pRetVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void)
  {
    Ptssmolib_tlb::IObjectBasePtr pRetVal;
    OLECHECK(this->get_Parent(&pRetVal));
    return pRetVal;
  }

  Ptssmolib_tlb::TcObjectState __fastcall get_State(void)
  {
    Ptssmolib_tlb::TcObjectState pRetVal;
    OLECHECK(this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal));
    return pRetVal;
  }

  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void)
  {
    Ptssmolib_tlb::TcObjectType pRetVal;
    OLECHECK(this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal));
    return pRetVal;
  }

  VARIANT __fastcall get_UserData(void)
  {
    VARIANT pRetVal;
    OLECHECK(this->get_UserData((VARIANT*)&pRetVal));
    return pRetVal;
  }


  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INameObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64A49DC7-630D-4ACC-8103-5BA643AC3F72}
// *********************************************************************//
interface INameObjectBase  : public Ptssmolib_tlb::IObjectBase
{
public:
  // [1610809344] 对象名称
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRetVal/*[out,retval]*/) = 0;
  // [1610809344] 对象名称
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRetVal/*[in]*/) = 0;
  // [1610809346] 所有者名称
  virtual HRESULT STDMETHODCALLTYPE get_Owner(BSTR* pRetVal/*[out,retval]*/) = 0;
  // [1610809346] 所有者名称
  virtual HRESULT STDMETHODCALLTYPE set_Owner(BSTR pRetVal/*[in]*/) = 0;
  // [1610809348] 刷新对象
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pRetVal));
    return pRetVal;
  }

  BSTR __fastcall get_Owner(void)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_Owner((BSTR*)&pRetVal));
    return pRetVal;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IInstrument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2ACE41D-DFE2-42E6-8A21-F3077455DACB}
// *********************************************************************//
interface IInstrument  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] 产品标识
  virtual HRESULT STDMETHODCALLTYPE set_ID(BSTR pVal/*[in]*/) = 0;
  // [2] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_IDSource(long* pVal/*[out,retval]*/) = 0;
  // [2] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE set_IDSource(long pVal/*[in]*/) = 0;
  // [3] 产品名称
  virtual HRESULT STDMETHODCALLTYPE get_Symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品名称
  virtual HRESULT STDMETHODCALLTYPE set_Symbol(BSTR pVal/*[in]*/) = 0;
  // [4] CFICode
  virtual HRESULT STDMETHODCALLTYPE get_CFICode(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] CFICode
  virtual HRESULT STDMETHODCALLTYPE set_CFICode(BSTR pVal/*[in]*/) = 0;
  // [5] 产品类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcInstrumentType* pVal/*[out,retval]*/) = 0;
  // [5] 产品类型
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/) = 0;
  // [6] 产品子类型
  virtual HRESULT STDMETHODCALLTYPE get_SubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/) = 0;
  // [6] 产品子类型
  virtual HRESULT STDMETHODCALLTYPE set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [9] 货币类型
  virtual HRESULT STDMETHODCALLTYPE get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/) = 0;
  // [9] 货币类型
  virtual HRESULT STDMETHODCALLTYPE set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/) = 0;
  // [10] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcInstrumentStatus* pVal/*[out,retval]*/) = 0;
  // [10] 状态
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/) = 0;
  // [13] 获得详细信息
  virtual HRESULT STDMETHODCALLTYPE GetDetail(Ptssmolib_tlb::IInstrumentDetail** ppInfo/*[out,retval]*/) = 0;
  // [14] 获得产品报价
  virtual HRESULT STDMETHODCALLTYPE GetNowQuote(Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/) = 0;
  // [15] 获得产品分时数据
  virtual HRESULT STDMETHODCALLTYPE GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                                      BSTR ToTime/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/, 
                                                      Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/) = 0;
  // [16] 设置详细信息
  virtual HRESULT STDMETHODCALLTYPE SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_IDSource(void)
  {
    long pVal;
    OLECHECK(this->get_IDSource((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CFICode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CFICode((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcInstrumentType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcInstrumentType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcInstrumentType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_SubType(void)
  {
    Ptssmolib_tlb::TcInstrumentSubType pVal;
    OLECHECK(this->get_SubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void)
  {
    Ptssmolib_tlb::TcCurrencyType pVal;
    OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcInstrumentStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcInstrumentStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcInstrumentStatus*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IInstrumentDetail* __fastcall GetDetail(void)
  {
    Ptssmolib_tlb::IInstrumentDetail* ppInfo = 0;
    OLECHECK(this->GetDetail((Ptssmolib_tlb::IInstrumentDetail**)&ppInfo));
    return ppInfo;
  }

  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(void)
  {
    Ptssmolib_tlb::IQuote* ppQuote = 0;
    OLECHECK(this->GetNowQuote((Ptssmolib_tlb::IQuote**)&ppQuote));
    return ppQuote;
  }

  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppTickData = 0;
    OLECHECK(this->GetQuoteTickDatas(TradingDay, FormTime, ToTime, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IObjectList**)&ppTickData));
    return ppTickData;
  }


  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            IDSource = {read = get_IDSource, write = set_IDSource};
  __property   BSTR            Symbol = {read = get_Symbol, write = set_Symbol};
  __property   BSTR            CFICode = {read = get_CFICode, write = set_CFICode};
  __property   Ptssmolib_tlb::TcInstrumentType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcInstrumentSubType SubType = {read = get_SubType, write = set_SubType};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
  __property   Ptssmolib_tlb::TcInstrumentStatus Status = {read = get_Status, write = set_Status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAlterable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {729089CB-BC7E-4F49-8881-1C6270257FE1}
// *********************************************************************//
interface IAlterable  : public IDispatch
{
public:
  // [-1] 更新
  virtual HRESULT STDMETHODCALLTYPE Alter(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IInstrumentDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {37627738-EA0B-4857-A389-0A02868BE825}
// *********************************************************************//
interface IInstrumentDetail  : public IDispatch
{
public:
  // [1] 代码
  virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 代码来源
  virtual HRESULT STDMETHODCALLTYPE get_IDSource(long* pVal/*[out,retval]*/) = 0;
  // [3] 产品前缀
  virtual HRESULT STDMETHODCALLTYPE get_Prefix(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品前缀
  virtual HRESULT STDMETHODCALLTYPE set_Prefix(BSTR pVal/*[in]*/) = 0;
  // [4] 订单手数类型
  virtual HRESULT STDMETHODCALLTYPE get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/) = 0;
  // [4] 订单手数类型
  virtual HRESULT STDMETHODCALLTYPE set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/) = 0;
  // [5] 买单整手数
  virtual HRESULT STDMETHODCALLTYPE get_BuyLotQty(long* pVal/*[out,retval]*/) = 0;
  // [5] 买单整手数
  virtual HRESULT STDMETHODCALLTYPE set_BuyLotQty(long pVal/*[in]*/) = 0;
  // [6] 卖单整手数
  virtual HRESULT STDMETHODCALLTYPE get_SellLotQty(long* pVal/*[out,retval]*/) = 0;
  // [6] 卖单整手数
  virtual HRESULT STDMETHODCALLTYPE set_SellLotQty(long pVal/*[in]*/) = 0;
  // [7] 最少交易单位
  virtual HRESULT STDMETHODCALLTYPE get_MinTradeUnit(long* pVal/*[out,retval]*/) = 0;
  // [7] 最少交易单位
  virtual HRESULT STDMETHODCALLTYPE set_MinTradeUnit(long pVal/*[in]*/) = 0;
  // [8] 最大订单数量
  virtual HRESULT STDMETHODCALLTYPE get_MaxOrderSize(long* pVal/*[out,retval]*/) = 0;
  // [8] 最大订单数量
  virtual HRESULT STDMETHODCALLTYPE set_MaxOrderSize(long pVal/*[in]*/) = 0;
  // [9] 最小订单数量
  virtual HRESULT STDMETHODCALLTYPE get_MinOrderSize(long* pVal/*[out,retval]*/) = 0;
  // [9] 最小订单数量
  virtual HRESULT STDMETHODCALLTYPE set_MinOrderSize(long pVal/*[in]*/) = 0;
  // [10] 做市商报价的最小数量
  virtual HRESULT STDMETHODCALLTYPE get_MinQty(long* pVal/*[out,retval]*/) = 0;
  // [10] 做市商报价的最小数量
  virtual HRESULT STDMETHODCALLTYPE set_MinQty(long pVal/*[in]*/) = 0;
  // [11] 订单价格上限
  virtual HRESULT STDMETHODCALLTYPE get_OrderPxUpLimit(double* pVal/*[out,retval]*/) = 0;
  // [11] 订单价格上限
  virtual HRESULT STDMETHODCALLTYPE set_OrderPxUpLimit(double pVal/*[in]*/) = 0;
  // [12] 订单价格下限
  virtual HRESULT STDMETHODCALLTYPE get_OrderPxLoLimit(double* pVal/*[out,retval]*/) = 0;
  // [12] 订单价格下限
  virtual HRESULT STDMETHODCALLTYPE set_OrderPxLoLimit(double pVal/*[in]*/) = 0;
  // [13] 是否支持市价订单
  virtual HRESULT STDMETHODCALLTYPE get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [13] 是否支持市价订单
  virtual HRESULT STDMETHODCALLTYPE set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [14] 是否支持限价订单
  virtual HRESULT STDMETHODCALLTYPE get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [14] 是否支持限价订单
  virtual HRESULT STDMETHODCALLTYPE set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [15] 是否支持冰山价订单
  virtual HRESULT STDMETHODCALLTYPE get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [15] 是否支持冰山价订单
  virtual HRESULT STDMETHODCALLTYPE set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [16] 融资融券标志
  virtual HRESULT STDMETHODCALLTYPE get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/) = 0;
  // [16] 融资融券标志
  virtual HRESULT STDMETHODCALLTYPE set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/) = 0;
  // [17] 产品面值
  virtual HRESULT STDMETHODCALLTYPE get_ParValue(long* pVal/*[out,retval]*/) = 0;
  // [17] 产品面值
  virtual HRESULT STDMETHODCALLTYPE set_ParValue(long pVal/*[in]*/) = 0;
  // [18] 交易币种
  virtual HRESULT STDMETHODCALLTYPE get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/) = 0;
  // [18] 交易币种
  virtual HRESULT STDMETHODCALLTYPE set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_IDSource(void)
  {
    long pVal;
    OLECHECK(this->get_IDSource((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Prefix(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Prefix((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void)
  {
    Ptssmolib_tlb::TcOrderLotLimitType pVal;
    OLECHECK(this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal));
    return pVal;
  }

  long __fastcall get_BuyLotQty(void)
  {
    long pVal;
    OLECHECK(this->get_BuyLotQty((long*)&pVal));
    return pVal;
  }

  long __fastcall get_SellLotQty(void)
  {
    long pVal;
    OLECHECK(this->get_SellLotQty((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinTradeUnit(void)
  {
    long pVal;
    OLECHECK(this->get_MinTradeUnit((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxOrderSize(void)
  {
    long pVal;
    OLECHECK(this->get_MaxOrderSize((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinOrderSize(void)
  {
    long pVal;
    OLECHECK(this->get_MinOrderSize((long*)&pVal));
    return pVal;
  }

  long __fastcall get_MinQty(void)
  {
    long pVal;
    OLECHECK(this->get_MinQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_OrderPxUpLimit(void)
  {
    double pVal;
    OLECHECK(this->get_OrderPxUpLimit((double*)&pVal));
    return pVal;
  }

  double __fastcall get_OrderPxLoLimit(void)
  {
    double pVal;
    OLECHECK(this->get_OrderPxLoLimit((double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsValidMarketOrder(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsValidLimitOrder(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsValidIcebergOrder(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void)
  {
    Ptssmolib_tlb::TcFinancingIndicate pVal;
    OLECHECK(this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal));
    return pVal;
  }

  long __fastcall get_ParValue(void)
  {
    long pVal;
    OLECHECK(this->get_ParValue((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void)
  {
    Ptssmolib_tlb::TcCurrencyType pVal;
    OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
    return pVal;
  }


  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQuote
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {75FB79D8-4BD7-476C-92BA-789FC673AA9B}
// *********************************************************************//
interface IQuote  : public IDispatch
{
public:
  // [1] 序号
  virtual HRESULT STDMETHODCALLTYPE get_SeqNo(long* pVal/*[out,retval]*/) = 0;
  // [2] 产品名称
  virtual HRESULT STDMETHODCALLTYPE get_Symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [5] 最后一笔交易数量
  virtual HRESULT STDMETHODCALLTYPE get_LastQty(long* pVal/*[out,retval]*/) = 0;
  // [6] 最后一笔交易价格
  virtual HRESULT STDMETHODCALLTYPE get_LastPrice(double* pVal/*[out,retval]*/) = 0;
  // [7] 最后一笔交易时间
  virtual HRESULT STDMETHODCALLTYPE get_LastTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 前收盘价
  virtual HRESULT STDMETHODCALLTYPE get_PreClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [9] 收盘价格
  virtual HRESULT STDMETHODCALLTYPE get_ClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [10] 开盘价
  virtual HRESULT STDMETHODCALLTYPE get_OpenPrice(double* pVal/*[out,retval]*/) = 0;
  // [11] 结算价
  virtual HRESULT STDMETHODCALLTYPE get_SettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [12] 最低价
  virtual HRESULT STDMETHODCALLTYPE get_LowPrice(double* pVal/*[out,retval]*/) = 0;
  // [13] 最高价
  virtual HRESULT STDMETHODCALLTYPE get_HighPrice(double* pVal/*[out,retval]*/) = 0;
  // [14] 交易量
  virtual HRESULT STDMETHODCALLTYPE get_Turnover(double* pVal/*[out,retval]*/) = 0;
  // [15] 日成交量
  virtual HRESULT STDMETHODCALLTYPE get_DayQty(long* pVal/*[out,retval]*/) = 0;
  // [16] 在固定竞价时段内的执行价格
  virtual HRESULT STDMETHODCALLTYPE get_FixPrice(double* pVal/*[out,retval]*/) = 0;
  // [17] 最好卖方数量
  virtual HRESULT STDMETHODCALLTYPE get_AskQty(long* pVal/*[out,retval]*/) = 0;
  // [18] 最好卖方价格
  virtual HRESULT STDMETHODCALLTYPE get_AskPrice(double* pVal/*[out,retval]*/) = 0;
  // [19] 最好买方数量
  virtual HRESULT STDMETHODCALLTYPE get_BidQty(long* pVal/*[out,retval]*/) = 0;
  // [20] 最好买方价格
  virtual HRESULT STDMETHODCALLTYPE get_BidPrice(double* pVal/*[out,retval]*/) = 0;
  // [21] 交易日
  virtual HRESULT STDMETHODCALLTYPE get_TradingDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] 获得详细盘口
  virtual HRESULT STDMETHODCALLTYPE GetQuoteDetails(Ptssmolib_tlb::IObjectList** ppDetails/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_SeqNo(void)
  {
    long pVal;
    OLECHECK(this->get_SeqNo((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  long __fastcall get_LastQty(void)
  {
    long pVal;
    OLECHECK(this->get_LastQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_LastPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LastPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LastTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LastTime((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_PreClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_PreClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_ClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_OpenPrice(void)
  {
    double pVal;
    OLECHECK(this->get_OpenPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_SettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_SettlPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_LowPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LowPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_HighPrice(void)
  {
    double pVal;
    OLECHECK(this->get_HighPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Turnover(void)
  {
    double pVal;
    OLECHECK(this->get_Turnover((double*)&pVal));
    return pVal;
  }

  long __fastcall get_DayQty(void)
  {
    long pVal;
    OLECHECK(this->get_DayQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_FixPrice(void)
  {
    double pVal;
    OLECHECK(this->get_FixPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_AskQty(void)
  {
    long pVal;
    OLECHECK(this->get_AskQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_AskPrice(void)
  {
    double pVal;
    OLECHECK(this->get_AskPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_BidQty(void)
  {
    long pVal;
    OLECHECK(this->get_BidQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_BidPrice(void)
  {
    double pVal;
    OLECHECK(this->get_BidPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradingDay((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteDetails(void)
  {
    Ptssmolib_tlb::IObjectList* ppDetails = 0;
    OLECHECK(this->GetQuoteDetails((Ptssmolib_tlb::IObjectList**)&ppDetails));
    return ppDetails;
  }


  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDroppable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E54008FC-5C59-4F4F-8849-2CB2EEB60101}
// *********************************************************************//
interface IDroppable  : public IDispatch
{
public:
  // [-1] 删除
  virtual HRESULT STDMETHODCALLTYPE Drop(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DE4CE813-5AD2-4915-B831-65FA3B40FE2B}
// *********************************************************************//
interface IAccount  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 客户标识
  virtual HRESULT STDMETHODCALLTYPE get_CustomerID(long* pVal/*[out,retval]*/) = 0;
  // [4] 任务标识
  virtual HRESULT STDMETHODCALLTYPE get_TaskID(long* pVal/*[out,retval]*/) = 0;
  // [5] 账户标识
  virtual HRESULT STDMETHODCALLTYPE get_AccountID(long* pVal/*[out,retval]*/) = 0;
  // [6] 父账户标识
  virtual HRESULT STDMETHODCALLTYPE get_ParentAcctID(long* pVal/*[out,retval]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [9] 类型
  virtual HRESULT STDMETHODCALLTYPE get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/) = 0;
  // [10] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/) = 0;
  // [10] 状态
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/) = 0;
  // [12] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [16] 申请资金
  virtual HRESULT STDMETHODCALLTYPE AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                                    double Amount/*[in]*/) = 0;
  // [17] 申请持仓股份
  virtual HRESULT STDMETHODCALLTYPE AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                     Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                     Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                                     long Quantity/*[in]*/) = 0;
  // [19] 释放资金
  virtual HRESULT STDMETHODCALLTYPE FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                                double Amount/*[in]*/) = 0;
  // [20] 释放持仓股份
  virtual HRESULT STDMETHODCALLTYPE FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                 Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                 Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                                 long Quantity/*[in]*/) = 0;
  // [21] 获取详细信息
  virtual HRESULT STDMETHODCALLTYPE GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                              Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/) = 0;
  // [22] 获取持仓信息
  virtual HRESULT STDMETHODCALLTYPE GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                Ptssmolib_tlb::IPosition** Position/*[out,retval]*/) = 0;
  // [23] 获取所有持仓信息
  virtual HRESULT STDMETHODCALLTYPE GetPositions(long* pStartIndex/*[in,out]*/, 
                                                 long MaxRowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/) = 0;
  // [24] 获取已完成的订单
  virtual HRESULT STDMETHODCALLTYPE GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                                    BSTR ToTime/*[in]*/, 
                                                    long* pStartIndex/*[in,out]*/, 
                                                    long RowCount/*[in]*/, 
                                                    Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/) = 0;
  // [25] 获取未完成的订单
  virtual HRESULT STDMETHODCALLTYPE GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/) = 0;
  // [29] 新建订单列表
  virtual HRESULT STDMETHODCALLTYPE NewOrders(Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CustomerID(void)
  {
    long pVal;
    OLECHECK(this->get_CustomerID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_TaskID(void)
  {
    long pVal;
    OLECHECK(this->get_TaskID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_AccountID(void)
  {
    long pVal;
    OLECHECK(this->get_AccountID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ParentAcctID(void)
  {
    long pVal;
    OLECHECK(this->get_ParentAcctID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void)
  {
    Ptssmolib_tlb::TcAccountType pVal;
    OLECHECK(this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcAccountStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
  {
    Ptssmolib_tlb::IAccountDetail* ppDetail = 0;
    OLECHECK(this->GetDetail(Currency, (Ptssmolib_tlb::IAccountDetail**)&ppDetail));
    return ppDetail;
  }

  Ptssmolib_tlb::IPosition* __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
  {
    Ptssmolib_tlb::IPosition* Position = 0;
    OLECHECK(this->GetPosition(InstID, InstIDSource, Direction, (Ptssmolib_tlb::IPosition**)&Position));
    return Position;
  }

  Ptssmolib_tlb::IPositions* __fastcall GetPositions(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IPositions* Positions = 0;
    OLECHECK(this->GetPositions(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IPositions**)&Positions));
    return Positions;
  }

  Ptssmolib_tlb::IOrders* __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                                     BSTR ToTime/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* ppOrders = 0;
    OLECHECK(this->GetFilledOrders(TradeDate, FromTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IOrders**)&ppOrders));
    return ppOrders;
  }

  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* ppOrders = 0;
    OLECHECK(this->GetWorkingOrders(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&ppOrders));
    return ppOrders;
  }

  Ptssmolib_tlb::IOrders* __fastcall NewOrders(void)
  {
    Ptssmolib_tlb::IOrders* pVal = 0;
    OLECHECK(this->NewOrders((Ptssmolib_tlb::IOrders**)&pVal));
    return pVal;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID};
  __property   long            TaskID = {read = get_TaskID};
  __property   long            AccountID = {read = get_AccountID};
  __property   long            ParentAcctID = {read = get_ParentAcctID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status, write = set_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRenamable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B5FD7832-C964-4441-8E22-7A420D1E2A3D}
// *********************************************************************//
interface IRenamable  : public IDispatch
{
public:
  // [-1] 更新
  virtual HRESULT STDMETHODCALLTYPE Rename(BSTR newVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObjectCollectionBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {060B063E-85DA-4EBE-9A8D-30AD7C2437BE}
// *********************************************************************//
interface IObjectCollectionBase  : public Ptssmolib_tlb::IObjectBase
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [-1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [-1] 刷新
  virtual HRESULT STDMETHODCALLTYPE Refresh(VARIANT ReleaseMemberObjects/*[in]*/) = 0;
  // [-1] 删除
  virtual HRESULT STDMETHODCALLTYPE RemoveAt(VARIANT Index/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExtendedProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0003CB5-0751-4480-833D-5DB3F380D4E2}
// *********************************************************************//
interface IExtendedProperties  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IExtendedProperty** ppObjVal/*[out,retval]*/) = 0;
  // [1] Add Items
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IExtendedProperty* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IExtendedProperty* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IExtendedProperty**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExtendedProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C23AC92B-D9DA-43B4-AC24-04F1517F55D2}
// *********************************************************************//
interface IExtendedProperty  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 值
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pVal/*[out,retval]*/) = 0;
  // [1] 值
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT pVal/*[in]*/) = 0;
  // [2] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [3] 描述
  virtual HRESULT STDMETHODCALLTYPE get_IsFixed(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_Value((VARIANT*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsFixed(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsFixed((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   VARIANT_BOOL    IsFixed = {read = get_IsFixed};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAccountDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D2EC8E61-48C3-4C8E-A0C8-1035A7C81CBF}
// *********************************************************************//
interface IAccountDetail  : public IDispatch
{
public:
  // [1] 初始资金
  virtual HRESULT STDMETHODCALLTYPE get_Initial(double* pVal/*[out,retval]*/) = 0;
  // [2] 可提资金
  virtual HRESULT STDMETHODCALLTYPE get_Available(double* pVal/*[out,retval]*/) = 0;
  // [3] 昨日余额
  virtual HRESULT STDMETHODCALLTYPE get_Yesterday(double* pVal/*[out,retval]*/) = 0;
  // [4] 入金金额
  virtual HRESULT STDMETHODCALLTYPE get_Credited(double* pVal/*[out,retval]*/) = 0;
  // [5] 出金金额
  virtual HRESULT STDMETHODCALLTYPE get_Debited(double* pVal/*[out,retval]*/) = 0;
  // [6] 冻结资金
  virtual HRESULT STDMETHODCALLTYPE get_Frozen(double* pVal/*[out,retval]*/) = 0;
  // [7] 维持的保证金
  virtual HRESULT STDMETHODCALLTYPE get_MaintenanceMargin(double* pVal/*[out,retval]*/) = 0;
  // [8] 手续费
  virtual HRESULT STDMETHODCALLTYPE get_Fee(double* pVal/*[out,retval]*/) = 0;
  // [9] 利息收入
  virtual HRESULT STDMETHODCALLTYPE get_Interest(double* pVal/*[out,retval]*/) = 0;
  // [10] 持仓成本
  virtual HRESULT STDMETHODCALLTYPE get_PositionCost(double* pVal/*[out,retval]*/) = 0;
  // [11] 持仓市值
  virtual HRESULT STDMETHODCALLTYPE get_PositionValue(double* pVal/*[out,retval]*/) = 0;
  // [12] 货币类型
  virtual HRESULT STDMETHODCALLTYPE get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/) = 0;
  // [13] 属性 Equity
  virtual HRESULT STDMETHODCALLTYPE get_Equity(double* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_Initial(void)
  {
    double pVal;
    OLECHECK(this->get_Initial((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Available(void)
  {
    double pVal;
    OLECHECK(this->get_Available((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Yesterday(void)
  {
    double pVal;
    OLECHECK(this->get_Yesterday((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Credited(void)
  {
    double pVal;
    OLECHECK(this->get_Credited((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Debited(void)
  {
    double pVal;
    OLECHECK(this->get_Debited((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Frozen(void)
  {
    double pVal;
    OLECHECK(this->get_Frozen((double*)&pVal));
    return pVal;
  }

  double __fastcall get_MaintenanceMargin(void)
  {
    double pVal;
    OLECHECK(this->get_MaintenanceMargin((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Fee(void)
  {
    double pVal;
    OLECHECK(this->get_Fee((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Interest(void)
  {
    double pVal;
    OLECHECK(this->get_Interest((double*)&pVal));
    return pVal;
  }

  double __fastcall get_PositionCost(void)
  {
    double pVal;
    OLECHECK(this->get_PositionCost((double*)&pVal));
    return pVal;
  }

  double __fastcall get_PositionValue(void)
  {
    double pVal;
    OLECHECK(this->get_PositionValue((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void)
  {
    Ptssmolib_tlb::TcCurrencyType pVal;
    OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
    return pVal;
  }

  double __fastcall get_Equity(void)
  {
    double pVal;
    OLECHECK(this->get_Equity((double*)&pVal));
    return pVal;
  }


  __property   double          Initial = {read = get_Initial};
  __property   double          Available = {read = get_Available};
  __property   double          Yesterday = {read = get_Yesterday};
  __property   double          Credited = {read = get_Credited};
  __property   double          Debited = {read = get_Debited};
  __property   double          Frozen = {read = get_Frozen};
  __property   double          MaintenanceMargin = {read = get_MaintenanceMargin};
  __property   double          Fee = {read = get_Fee};
  __property   double          Interest = {read = get_Interest};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          PositionValue = {read = get_PositionValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency};
  __property   double          Equity = {read = get_Equity};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPosition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6505206C-C307-47AC-A54B-7847A8F0D791}
// *********************************************************************//
interface IPosition  : public IDispatch
{
public:
  // [1] 交易账户标识
  virtual HRESULT STDMETHODCALLTYPE get_AccountID(long* pVal/*[out,retval]*/) = 0;
  // [2] 投资账户标识
  virtual HRESULT STDMETHODCALLTYPE get_ExchAcctID(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 产品市场标识
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [5] 持仓方向
  virtual HRESULT STDMETHODCALLTYPE get_Direction(Ptssmolib_tlb::TcPositionDirection* pVal/*[out,retval]*/) = 0;
  // [6] 持仓方向
  virtual HRESULT STDMETHODCALLTYPE get_Position(long* pVal/*[out,retval]*/) = 0;
  // [7] 可卖数量
  virtual HRESULT STDMETHODCALLTYPE get_ForSale(long* pVal/*[out,retval]*/) = 0;
  // [8] ETF 可申赎数量
  virtual HRESULT STDMETHODCALLTYPE get_ForETFCR(long* pVal/*[out,retval]*/) = 0;
  // [9] 权证可行权数量
  virtual HRESULT STDMETHODCALLTYPE get_ForExercise(long* pVal/*[out,retval]*/) = 0;
  // [10] 期货可平仓数量
  virtual HRESULT STDMETHODCALLTYPE get_ForClose(long* pVal/*[out,retval]*/) = 0;
  // [11] 持仓成本
  virtual HRESULT STDMETHODCALLTYPE get_PositionCost(double* pVal/*[out,retval]*/) = 0;
  // [12] 期货占用的保证金
  virtual HRESULT STDMETHODCALLTYPE get_UsedMargin(double* pVal/*[out,retval]*/) = 0;
  // [13] 买入均价
  virtual HRESULT STDMETHODCALLTYPE get_BuyAvgPrice(double* pVal/*[out,retval]*/) = 0;
  // [20] 获得详细信息
  virtual HRESULT STDMETHODCALLTYPE GetPositionQtys(Ptssmolib_tlb::IPositionQtys** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_AccountID(void)
  {
    long pVal;
    OLECHECK(this->get_AccountID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExchAcctID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPositionDirection __fastcall get_Direction(void)
  {
    Ptssmolib_tlb::TcPositionDirection pVal;
    OLECHECK(this->get_Direction((Ptssmolib_tlb::TcPositionDirection*)&pVal));
    return pVal;
  }

  long __fastcall get_Position(void)
  {
    long pVal;
    OLECHECK(this->get_Position((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ForSale(void)
  {
    long pVal;
    OLECHECK(this->get_ForSale((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ForETFCR(void)
  {
    long pVal;
    OLECHECK(this->get_ForETFCR((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ForExercise(void)
  {
    long pVal;
    OLECHECK(this->get_ForExercise((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ForClose(void)
  {
    long pVal;
    OLECHECK(this->get_ForClose((long*)&pVal));
    return pVal;
  }

  double __fastcall get_PositionCost(void)
  {
    double pVal;
    OLECHECK(this->get_PositionCost((double*)&pVal));
    return pVal;
  }

  double __fastcall get_UsedMargin(void)
  {
    double pVal;
    OLECHECK(this->get_UsedMargin((double*)&pVal));
    return pVal;
  }

  double __fastcall get_BuyAvgPrice(void)
  {
    double pVal;
    OLECHECK(this->get_BuyAvgPrice((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IPositionQtys* __fastcall GetPositionQtys(void)
  {
    Ptssmolib_tlb::IPositionQtys* pVal = 0;
    OLECHECK(this->GetPositionQtys((Ptssmolib_tlb::IPositionQtys**)&pVal));
    return pVal;
  }


  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   Ptssmolib_tlb::TcPositionDirection Direction = {read = get_Direction};
  __property   long            Position = {read = get_Position};
  __property   long            ForSale = {read = get_ForSale};
  __property   long            ForETFCR = {read = get_ForETFCR};
  __property   long            ForExercise = {read = get_ForExercise};
  __property   long            ForClose = {read = get_ForClose};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          UsedMargin = {read = get_UsedMargin};
  __property   double          BuyAvgPrice = {read = get_BuyAvgPrice};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPositionQtys
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EDA0A35-9565-493F-9C35-A8DD67DF3A4F}
// *********************************************************************//
interface IPositionQtys  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IPositionQty** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IPositionQty* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IPositionQty* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IPositionQty**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPositionQty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EA20B86-1C3A-4CC7-A2FA-AEDE6A8A558B}
// *********************************************************************//
interface IPositionQty  : public IDispatch
{
public:
  // [1] 持仓数量类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcPositionType* pVal/*[out,retval]*/) = 0;
  // [2] 持仓数量
  virtual HRESULT STDMETHODCALLTYPE get_Quantity(long* pVal/*[out,retval]*/) = 0;
  // [3] 冻结数量
  virtual HRESULT STDMETHODCALLTYPE get_FrozenQty(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::TcPositionType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcPositionType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcPositionType*)&pVal));
    return pVal;
  }

  long __fastcall get_Quantity(void)
  {
    long pVal;
    OLECHECK(this->get_Quantity((long*)&pVal));
    return pVal;
  }

  long __fastcall get_FrozenQty(void)
  {
    long pVal;
    OLECHECK(this->get_FrozenQty((long*)&pVal));
    return pVal;
  }


  __property   Ptssmolib_tlb::TcPositionType Type = {read = get_Type};
  __property   long            Quantity = {read = get_Quantity};
  __property   long            FrozenQty = {read = get_FrozenQty};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPositions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86769964-1C01-447B-B025-E844BCB42C48}
// *********************************************************************//
interface IPositions  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IPosition** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IPosition* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IPosition* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IPosition**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObjectPermission
// Flags:     (448) Dual NonExtensible OleAutomation
// GUID:      {38669BFB-21BF-4FFC-BFB3-26A9A70A02BC}
// *********************************************************************//
interface IObjectPermission  : public IUnknown
{
public:
  // [-1] 拒绝
  virtual HRESULT STDMETHODCALLTYPE Deny(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                         BSTR GranteeName/*[in]*/) = 0;
  // [-1] 授予
  virtual HRESULT STDMETHODCALLTYPE Grant(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                          BSTR GranteeName/*[in]*/) = 0;
  // [-1] 删除授予
  virtual HRESULT STDMETHODCALLTYPE Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                           BSTR GranteeName/*[in]*/) = 0;
  // [-1] 列出对象角色
  virtual HRESULT STDMETHODCALLTYPE ListPermissions(Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/) = 0;
  // [-1] 列出对象角色
  virtual HRESULT STDMETHODCALLTYPE ListUserPermissions(BSTR UserName/*[in]*/, 
                                                        Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IObjectList* __fastcall ListPermissions(void)
  {
    Ptssmolib_tlb::IObjectList* ppObjRet = 0;
    OLECHECK(this->ListPermissions((Ptssmolib_tlb::IObjectList**)&ppObjRet));
    return ppObjRet;
  }

  Ptssmolib_tlb::IObjectList* __fastcall ListUserPermissions(BSTR UserName/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjRet = 0;
    OLECHECK(this->ListUserPermissions(UserName, (Ptssmolib_tlb::IObjectList**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFutureDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {59A40B13-1DA3-41F7-BE52-2B4F62E2A393}
// *********************************************************************//
interface IFutureDetail  : public Ptssmolib_tlb::IInstrumentDetail
{
public:
  // [102] 合约乘数
  virtual HRESULT STDMETHODCALLTYPE get_Multiple(long* pVal/*[out,retval]*/) = 0;
  // [102] 合约乘数
  virtual HRESULT STDMETHODCALLTYPE set_Multiple(long pVal/*[in]*/) = 0;
  // [103] 初始保证金比例
  virtual HRESULT STDMETHODCALLTYPE get_MarginRatio(double* pVal/*[out,retval]*/) = 0;
  // [103] 初始保证金比例
  virtual HRESULT STDMETHODCALLTYPE set_MarginRatio(double pVal/*[in]*/) = 0;
  // [104] 基础商品代码
  virtual HRESULT STDMETHODCALLTYPE get_Underlying(BSTR* pVal/*[out,retval]*/) = 0;
  // [104] 基础商品代码
  virtual HRESULT STDMETHODCALLTYPE set_Underlying(BSTR pVal/*[in]*/) = 0;
  // [105] 交割月份
  virtual HRESULT STDMETHODCALLTYPE get_Month(BSTR* pVal/*[out,retval]*/) = 0;
  // [105] 交割月份
  virtual HRESULT STDMETHODCALLTYPE set_Month(BSTR pVal/*[in]*/) = 0;
  // [106] 交割月份
  virtual HRESULT STDMETHODCALLTYPE get_LastTradeDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [106] 交割月份
  virtual HRESULT STDMETHODCALLTYPE set_LastTradeDay(BSTR pVal/*[in]*/) = 0;
  // [107] 交割日期
  virtual HRESULT STDMETHODCALLTYPE get_SettlDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [107] 交割日期
  virtual HRESULT STDMETHODCALLTYPE set_SettlDay(BSTR pVal/*[in]*/) = 0;
  // [108] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE get_UnderlyingSrc(long* pVal/*[out,retval]*/) = 0;
  // [108] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE set_UnderlyingSrc(long pVal/*[in]*/) = 0;
  // [109] 结算价
  virtual HRESULT STDMETHODCALLTYPE get_SettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [109] 结算价
  virtual HRESULT STDMETHODCALLTYPE set_SettlPrice(double pVal/*[in]*/) = 0;
  // [110] 昨结算价
  virtual HRESULT STDMETHODCALLTYPE get_PreSettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [110] 昨结算价
  virtual HRESULT STDMETHODCALLTYPE set_PreSettlPrice(double pVal/*[in]*/) = 0;
  // [111] 结算类型
  virtual HRESULT STDMETHODCALLTYPE get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/) = 0;
  // [111] 结算类型
  virtual HRESULT STDMETHODCALLTYPE set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Multiple(void)
  {
    long pVal;
    OLECHECK(this->get_Multiple((long*)&pVal));
    return pVal;
  }

  double __fastcall get_MarginRatio(void)
  {
    double pVal;
    OLECHECK(this->get_MarginRatio((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Underlying(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Underlying((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Month(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Month((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LastTradeDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LastTradeDay((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SettlDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SettlDay((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_UnderlyingSrc(void)
  {
    long pVal;
    OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
    return pVal;
  }

  double __fastcall get_SettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_SettlPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_PreSettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_PreSettlPrice((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void)
  {
    Ptssmolib_tlb::TcDeliveryStyle pVal;
    OLECHECK(this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal));
    return pVal;
  }


  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          MarginRatio = {read = get_MarginRatio, write = set_MarginRatio};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            LastTradeDay = {read = get_LastTradeDay, write = set_LastTradeDay};
  __property   BSTR            SettlDay = {read = get_SettlDay, write = set_SettlDay};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   double          PreSettlPrice = {read = get_PreSettlPrice, write = set_PreSettlPrice};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFundDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9374C88C-99EB-463E-869C-60F1A5F1D3AD}
// *********************************************************************//
interface IFundDetail  : public Ptssmolib_tlb::IInstrumentDetail
{
public:
  // [104] 最小申购赎回单位
  virtual HRESULT STDMETHODCALLTYPE get_Unit(long* pVal/*[out,retval]*/) = 0;
  // [104] 最小申购赎回单位
  virtual HRESULT STDMETHODCALLTYPE set_Unit(long pVal/*[in]*/) = 0;
  // [105] 最大现金替代比例
  virtual HRESULT STDMETHODCALLTYPE get_MaxCashRatio(double* pVal/*[out,retval]*/) = 0;
  // [105] 最大现金替代比例
  virtual HRESULT STDMETHODCALLTYPE set_MaxCashRatio(double pVal/*[in]*/) = 0;
  // [106] 是否需要发布IOPV
  virtual HRESULT STDMETHODCALLTYPE get_IsPublish(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [106] 是否需要发布IOPV
  virtual HRESULT STDMETHODCALLTYPE set_IsPublish(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [107] 是否允许申购
  virtual HRESULT STDMETHODCALLTYPE get_IsAllowCreation(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [107] 是否允许申购
  virtual HRESULT STDMETHODCALLTYPE set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [108] 是否允许赎回
  virtual HRESULT STDMETHODCALLTYPE get_IsAllowRedemption(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [108] 是否允许赎回
  virtual HRESULT STDMETHODCALLTYPE set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [109] 证券记录数
  virtual HRESULT STDMETHODCALLTYPE get_RecordNum(long* pVal/*[out,retval]*/) = 0;
  // [109] 证券记录数
  virtual HRESULT STDMETHODCALLTYPE set_RecordNum(long pVal/*[in]*/) = 0;
  // [110] T日预估现金余额
  virtual HRESULT STDMETHODCALLTYPE get_EstimateCash(double* pVal/*[out,retval]*/) = 0;
  // [110] T日预估现金余额
  virtual HRESULT STDMETHODCALLTYPE set_EstimateCash(double pVal/*[in]*/) = 0;
  // [111] T日日期
  virtual HRESULT STDMETHODCALLTYPE get_TradingDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [111] T日日期
  virtual HRESULT STDMETHODCALLTYPE set_TradingDay(BSTR pVal/*[in]*/) = 0;
  // [112] T-1日日期
  virtual HRESULT STDMETHODCALLTYPE get_PreTradingDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [112] T-1日日期
  virtual HRESULT STDMETHODCALLTYPE set_PreTradingDay(BSTR pVal/*[in]*/) = 0;
  // [113] T－1日申购赎回基准单位的现金余额
  virtual HRESULT STDMETHODCALLTYPE get_CashComponent(double* pVal/*[out,retval]*/) = 0;
  // [113] T－1日申购赎回基准单位的现金余额
  virtual HRESULT STDMETHODCALLTYPE set_CashComponent(double pVal/*[in]*/) = 0;
  // [114] 方法AddMember
  virtual HRESULT STDMETHODCALLTYPE AddMember(BSTR InstID/*[in]*/, 
                                              Ptssmolib_tlb::IFundMember** ppFundMember/*[out,retval]*/) = 0;
  // [115] 方法DropMember
  virtual HRESULT STDMETHODCALLTYPE DropMember(BSTR InstID/*[in]*/) = 0;
  // [116] 方法GetMembers
  virtual HRESULT STDMETHODCALLTYPE GetMembers(Ptssmolib_tlb::IFundMembers** ppMembers/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Unit(void)
  {
    long pVal;
    OLECHECK(this->get_Unit((long*)&pVal));
    return pVal;
  }

  double __fastcall get_MaxCashRatio(void)
  {
    double pVal;
    OLECHECK(this->get_MaxCashRatio((double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsPublish(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsPublish((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsAllowCreation(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsAllowCreation((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsAllowRedemption(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsAllowRedemption((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_RecordNum(void)
  {
    long pVal;
    OLECHECK(this->get_RecordNum((long*)&pVal));
    return pVal;
  }

  double __fastcall get_EstimateCash(void)
  {
    double pVal;
    OLECHECK(this->get_EstimateCash((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradingDay((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PreTradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PreTradingDay((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_CashComponent(void)
  {
    double pVal;
    OLECHECK(this->get_CashComponent((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IFundMember* __fastcall AddMember(BSTR InstID/*[in]*/)
  {
    Ptssmolib_tlb::IFundMember* ppFundMember = 0;
    OLECHECK(this->AddMember(InstID, (Ptssmolib_tlb::IFundMember**)&ppFundMember));
    return ppFundMember;
  }

  Ptssmolib_tlb::IFundMembers* __fastcall GetMembers(void)
  {
    Ptssmolib_tlb::IFundMembers* ppMembers = 0;
    OLECHECK(this->GetMembers((Ptssmolib_tlb::IFundMembers**)&ppMembers));
    return ppMembers;
  }


  __property   long            Unit = {read = get_Unit, write = set_Unit};
  __property   double          MaxCashRatio = {read = get_MaxCashRatio, write = set_MaxCashRatio};
  __property   VARIANT_BOOL    IsPublish = {read = get_IsPublish, write = set_IsPublish};
  __property   VARIANT_BOOL    IsAllowCreation = {read = get_IsAllowCreation, write = set_IsAllowCreation};
  __property   VARIANT_BOOL    IsAllowRedemption = {read = get_IsAllowRedemption, write = set_IsAllowRedemption};
  __property   long            RecordNum = {read = get_RecordNum, write = set_RecordNum};
  __property   double          EstimateCash = {read = get_EstimateCash, write = set_EstimateCash};
  __property   BSTR            TradingDay = {read = get_TradingDay, write = set_TradingDay};
  __property   BSTR            PreTradingDay = {read = get_PreTradingDay, write = set_PreTradingDay};
  __property   double          CashComponent = {read = get_CashComponent, write = set_CashComponent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFundMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {490175F2-5CF2-41B9-BF31-9F9D0A99C0B6}
// *********************************************************************//
interface IFundMember  : public IDispatch
{
public:
  // [1] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 名称
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 名称
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/) = 0;
  // [3] 数量
  virtual HRESULT STDMETHODCALLTYPE get_Quantity(long* pVal/*[out,retval]*/) = 0;
  // [3] 数量
  virtual HRESULT STDMETHODCALLTYPE set_Quantity(long pVal/*[in]*/) = 0;
  // [4] 替代标志
  virtual HRESULT STDMETHODCALLTYPE get_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag* pVal/*[out,retval]*/) = 0;
  // [4] 替代标志
  virtual HRESULT STDMETHODCALLTYPE set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/) = 0;
  // [5] 益价比例
  virtual HRESULT STDMETHODCALLTYPE get_ReplaceRatio(double* pVal/*[out,retval]*/) = 0;
  // [5] 益价比例
  virtual HRESULT STDMETHODCALLTYPE set_ReplaceRatio(double pVal/*[in]*/) = 0;
  // [6] 替代现金
  virtual HRESULT STDMETHODCALLTYPE get_ReplaceCash(double* pVal/*[out,retval]*/) = 0;
  // [6] 替代现金
  virtual HRESULT STDMETHODCALLTYPE set_ReplaceCash(double pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Quantity(void)
  {
    long pVal;
    OLECHECK(this->get_Quantity((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcCashReplaceFlag __fastcall get_ReplaceFlag(void)
  {
    Ptssmolib_tlb::TcCashReplaceFlag pVal;
    OLECHECK(this->get_ReplaceFlag((Ptssmolib_tlb::TcCashReplaceFlag*)&pVal));
    return pVal;
  }

  double __fastcall get_ReplaceRatio(void)
  {
    double pVal;
    OLECHECK(this->get_ReplaceRatio((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ReplaceCash(void)
  {
    double pVal;
    OLECHECK(this->get_ReplaceCash((double*)&pVal));
    return pVal;
  }


  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   Ptssmolib_tlb::TcCashReplaceFlag ReplaceFlag = {read = get_ReplaceFlag, write = set_ReplaceFlag};
  __property   double          ReplaceRatio = {read = get_ReplaceRatio, write = set_ReplaceRatio};
  __property   double          ReplaceCash = {read = get_ReplaceCash, write = set_ReplaceCash};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFundMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B921350-7518-4F0D-BD8F-9866FF54EF99}
// *********************************************************************//
interface IFundMembers  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(BSTR ID/*[in]*/, 
                                                 Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IFundMember* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IFundMember* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IFundMember**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IFundMember* __fastcall get_ItemByID(BSTR ID/*[in]*/)
  {
    Ptssmolib_tlb::IFundMember* ppObjVal = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IFundMember**)&ppObjVal));
    return ppObjVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOptionDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BCD8BC2D-A7EE-4242-8A43-5AFEB778099F}
// *********************************************************************//
interface IOptionDetail  : public Ptssmolib_tlb::IInstrumentDetail
{
public:
  // [102] 合约乘数
  virtual HRESULT STDMETHODCALLTYPE get_Multiple(long* pVal/*[out,retval]*/) = 0;
  // [102] 合约乘数
  virtual HRESULT STDMETHODCALLTYPE set_Multiple(long pVal/*[in]*/) = 0;
  // [103] 结算价
  virtual HRESULT STDMETHODCALLTYPE get_SettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [103] 结算价
  virtual HRESULT STDMETHODCALLTYPE set_SettlPrice(double pVal/*[in]*/) = 0;
  // [105] 月份
  virtual HRESULT STDMETHODCALLTYPE get_Month(BSTR* pVal/*[out,retval]*/) = 0;
  // [105] 月份
  virtual HRESULT STDMETHODCALLTYPE set_Month(BSTR pVal/*[in]*/) = 0;
  // [106] 标的证券代码
  virtual HRESULT STDMETHODCALLTYPE get_Underlying(BSTR* pVal/*[out,retval]*/) = 0;
  // [106] 标的证券代码
  virtual HRESULT STDMETHODCALLTYPE set_Underlying(BSTR pVal/*[in]*/) = 0;
  // [107] 期权类型
  virtual HRESULT STDMETHODCALLTYPE get_OptionType(Ptssmolib_tlb::TcOptionType* pVal/*[out,retval]*/) = 0;
  // [107] 期权类型
  virtual HRESULT STDMETHODCALLTYPE set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/) = 0;
  // [108] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE get_UnderlyingSrc(long* pVal/*[out,retval]*/) = 0;
  // [108] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE set_UnderlyingSrc(long pVal/*[in]*/) = 0;
  // [109] 行权类型
  virtual HRESULT STDMETHODCALLTYPE get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/) = 0;
  // [109] 行权类型
  virtual HRESULT STDMETHODCALLTYPE set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/) = 0;
  // [110] 交割日期
  virtual HRESULT STDMETHODCALLTYPE get_ExpiryDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [110] 交割日期
  virtual HRESULT STDMETHODCALLTYPE set_ExpiryDay(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Multiple(void)
  {
    long pVal;
    OLECHECK(this->get_Multiple((long*)&pVal));
    return pVal;
  }

  double __fastcall get_SettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_SettlPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Month(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Month((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Underlying(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Underlying((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOptionType __fastcall get_OptionType(void)
  {
    Ptssmolib_tlb::TcOptionType pVal;
    OLECHECK(this->get_OptionType((Ptssmolib_tlb::TcOptionType*)&pVal));
    return pVal;
  }

  long __fastcall get_UnderlyingSrc(void)
  {
    long pVal;
    OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void)
  {
    Ptssmolib_tlb::TcExerciseStyle pVal;
    OLECHECK(this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExpiryDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExpiryDay((BSTR*)&pVal));
    return pVal;
  }


  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcOptionType OptionType = {read = get_OptionType, write = set_OptionType};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   BSTR            ExpiryDay = {read = get_ExpiryDay, write = set_ExpiryDay};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IWarrantDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3007FB97-9481-414F-BEDD-8408BD85CF0D}
// *********************************************************************//
interface IWarrantDetail  : public Ptssmolib_tlb::IInstrumentDetail
{
public:
  // [101] 标的证券代码
  virtual HRESULT STDMETHODCALLTYPE get_Underlying(BSTR* pVal/*[out,retval]*/) = 0;
  // [101] 标的证券代码
  virtual HRESULT STDMETHODCALLTYPE set_Underlying(BSTR pVal/*[in]*/) = 0;
  // [102] 权证类型
  virtual HRESULT STDMETHODCALLTYPE get_WarrantType(Ptssmolib_tlb::TcWarrantType* pVal/*[out,retval]*/) = 0;
  // [102] 权证类型
  virtual HRESULT STDMETHODCALLTYPE set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/) = 0;
  // [104] 行权价格
  virtual HRESULT STDMETHODCALLTYPE get_ExercisePrice(double* pVal/*[out,retval]*/) = 0;
  // [104] 行权价格
  virtual HRESULT STDMETHODCALLTYPE set_ExercisePrice(double pVal/*[in]*/) = 0;
  // [105] 行权比例
  virtual HRESULT STDMETHODCALLTYPE get_ExerciseRatio(double* pVal/*[out,retval]*/) = 0;
  // [105] 行权比例
  virtual HRESULT STDMETHODCALLTYPE set_ExerciseRatio(double pVal/*[in]*/) = 0;
  // [106] 行权类型
  virtual HRESULT STDMETHODCALLTYPE get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/) = 0;
  // [106] 行权类型
  virtual HRESULT STDMETHODCALLTYPE set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/) = 0;
  // [107] 结算类型
  virtual HRESULT STDMETHODCALLTYPE get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/) = 0;
  // [107] 结算类型
  virtual HRESULT STDMETHODCALLTYPE set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/) = 0;
  // [108] 结算价格
  virtual HRESULT STDMETHODCALLTYPE get_DeliveryPrice(double* pVal/*[out,retval]*/) = 0;
  // [108] 结算价格
  virtual HRESULT STDMETHODCALLTYPE set_DeliveryPrice(double pVal/*[in]*/) = 0;
  // [109] 结算日期
  virtual HRESULT STDMETHODCALLTYPE get_DeliveryDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [109] 结算日期
  virtual HRESULT STDMETHODCALLTYPE set_DeliveryDate(BSTR pVal/*[in]*/) = 0;
  // [110] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE get_UnderlyingSrc(long* pVal/*[out,retval]*/) = 0;
  // [110] 标的物来源
  virtual HRESULT STDMETHODCALLTYPE set_UnderlyingSrc(long pVal/*[in]*/) = 0;
  // [111] 行权代码
  virtual HRESULT STDMETHODCALLTYPE get_ExerciseCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [111] 行权代码
  virtual HRESULT STDMETHODCALLTYPE set_ExerciseCode(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Underlying(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Underlying((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcWarrantType __fastcall get_WarrantType(void)
  {
    Ptssmolib_tlb::TcWarrantType pVal;
    OLECHECK(this->get_WarrantType((Ptssmolib_tlb::TcWarrantType*)&pVal));
    return pVal;
  }

  double __fastcall get_ExercisePrice(void)
  {
    double pVal;
    OLECHECK(this->get_ExercisePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ExerciseRatio(void)
  {
    double pVal;
    OLECHECK(this->get_ExerciseRatio((double*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void)
  {
    Ptssmolib_tlb::TcExerciseStyle pVal;
    OLECHECK(this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void)
  {
    Ptssmolib_tlb::TcDeliveryStyle pVal;
    OLECHECK(this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal));
    return pVal;
  }

  double __fastcall get_DeliveryPrice(void)
  {
    double pVal;
    OLECHECK(this->get_DeliveryPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DeliveryDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DeliveryDate((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_UnderlyingSrc(void)
  {
    long pVal;
    OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExerciseCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExerciseCode((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcWarrantType WarrantType = {read = get_WarrantType, write = set_WarrantType};
  __property   double          ExercisePrice = {read = get_ExercisePrice, write = set_ExercisePrice};
  __property   double          ExerciseRatio = {read = get_ExerciseRatio, write = set_ExerciseRatio};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};
  __property   double          DeliveryPrice = {read = get_DeliveryPrice, write = set_DeliveryPrice};
  __property   BSTR            DeliveryDate = {read = get_DeliveryDate, write = set_DeliveryDate};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   BSTR            ExerciseCode = {read = get_ExerciseCode, write = set_ExerciseCode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICustomer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B457138-0D6B-4BF1-951A-18CB86093855}
// *********************************************************************//
interface ICustomer  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [4] 客户标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [5] 名称
  virtual HRESULT STDMETHODCALLTYPE get_FullName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 名称
  virtual HRESULT STDMETHODCALLTYPE set_FullName(BSTR pVal/*[in]*/) = 0;
  // [6] 公司名称
  virtual HRESULT STDMETHODCALLTYPE get_CompanyName(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 公司名称
  virtual HRESULT STDMETHODCALLTYPE set_CompanyName(BSTR pVal/*[in]*/) = 0;
  // [7] 职位
  virtual HRESULT STDMETHODCALLTYPE get_JobTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 职位
  virtual HRESULT STDMETHODCALLTYPE set_JobTitle(BSTR pVal/*[in]*/) = 0;
  // [10] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE get_Email(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE set_Email(BSTR pVal/*[in]*/) = 0;
  // [11] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE get_Email1(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE set_Email1(BSTR pVal/*[in]*/) = 0;
  // [12] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE get_Email2(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE set_Email2(BSTR pVal/*[in]*/) = 0;
  // [13] 网站地址
  virtual HRESULT STDMETHODCALLTYPE get_Website(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] 网站地址
  virtual HRESULT STDMETHODCALLTYPE set_Website(BSTR pVal/*[in]*/) = 0;
  // [14] 网站地址
  virtual HRESULT STDMETHODCALLTYPE get_IM(BSTR* pVal/*[out,retval]*/) = 0;
  // [14] 网站地址
  virtual HRESULT STDMETHODCALLTYPE set_IM(BSTR pVal/*[in]*/) = 0;
  // [15] 交易所账户
  virtual HRESULT STDMETHODCALLTYPE get_ExchangeAccounts(Ptssmolib_tlb::IExchangeAccounts** ppRetVal/*[out,retval]*/) = 0;
  // [16] 营业部账户
  virtual HRESULT STDMETHODCALLTYPE get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/) = 0;
  // [17] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** ppRetVal/*[out,retval]*/) = 0;
  // [20] 获得逻辑账户
  virtual HRESULT STDMETHODCALLTYPE GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/) = 0;
  // [21] 获得详细信息
  virtual HRESULT STDMETHODCALLTYPE GetDetails(Ptssmolib_tlb::ICustomerDetail** pVal/*[out,retval]*/) = 0;
  // [22] 获得联系电话
  virtual HRESULT STDMETHODCALLTYPE GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                                   BSTR* pVal/*[out,retval]*/) = 0;
  // [23] 获得邮政地址
  virtual HRESULT STDMETHODCALLTYPE GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                                     Ptssmolib_tlb::IPostalAddress** pVal/*[out,retval]*/) = 0;
  // [24] 设置详细信息
  virtual HRESULT STDMETHODCALLTYPE SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/) = 0;
  // [25] 设置联系电话
  virtual HRESULT STDMETHODCALLTYPE SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                                   BSTR newVal/*[in]*/) = 0;
  // [26] 设置邮政地址
  virtual HRESULT STDMETHODCALLTYPE SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                                     Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, 
                                                BSTR Content/*[in]*/, long* pID/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE DropAuthInfo(long AuthID/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE DenyAuth(long AuthID/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE GrantAuth(long AuthID/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE ListAuthInfo(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/) = 0; // [31]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FullName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FullName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CompanyName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CompanyName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_JobTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_JobTitle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Email(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Email((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Email1(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Email1((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Email2(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Email2((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Website(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Website((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_IM(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_IM((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExchangeAccountsPtr __fastcall get_ExchangeAccounts(void)
  {
    Ptssmolib_tlb::IExchangeAccountsPtr ppRetVal;
    OLECHECK(this->get_ExchangeAccounts(&ppRetVal));
    return ppRetVal;
  }

  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void)
  {
    Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
    OLECHECK(this->get_BrokerAccounts(&ppRetVal));
    return ppRetVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr ppRetVal;
    OLECHECK(this->get_ExtendedProperties(&ppRetVal));
    return ppRetVal;
  }

  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void)
  {
    Ptssmolib_tlb::IAccounts* pVal = 0;
    OLECHECK(this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ICustomerDetail* __fastcall GetDetails(void)
  {
    Ptssmolib_tlb::ICustomerDetail* pVal = 0;
    OLECHECK(this->GetDetails((Ptssmolib_tlb::ICustomerDetail**)&pVal));
    return pVal;
  }

  BSTR __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->GetPhoneNumber(Type, (BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IPostalAddress* __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/)
  {
    Ptssmolib_tlb::IPostalAddress* pVal = 0;
    OLECHECK(this->GetPostalAddress(Type, (Ptssmolib_tlb::IPostalAddress**)&pVal));
    return pVal;
  }

  long __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/)
  {
    long pID;
    OLECHECK(this->AddAuthInfo(Name, Type, Content, (long*)&pID));
    return pID;
  }

  Ptssmolib_tlb::IObjectList* __fastcall ListAuthInfo(void)
  {
    Ptssmolib_tlb::IObjectList* pVal = 0;
    OLECHECK(this->ListAuthInfo((Ptssmolib_tlb::IObjectList**)&pVal));
    return pVal;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            ID = {read = get_ID};
  __property   BSTR            FullName = {read = get_FullName, write = set_FullName};
  __property   BSTR            CompanyName = {read = get_CompanyName, write = set_CompanyName};
  __property   BSTR            JobTitle = {read = get_JobTitle, write = set_JobTitle};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   BSTR            Email1 = {read = get_Email1, write = set_Email1};
  __property   BSTR            Email2 = {read = get_Email2, write = set_Email2};
  __property   BSTR            Website = {read = get_Website, write = set_Website};
  __property   BSTR            IM = {read = get_IM, write = set_IM};
  __property   Ptssmolib_tlb::IExchangeAccountsPtr ExchangeAccounts = {read = get_ExchangeAccounts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExchangeAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {94E79ADE-2C31-492C-97F3-6E987D38FDD3}
// *********************************************************************//
interface IExchangeAccounts  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IExchangeAccount** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IExchangeAccount** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IExchangeAccount* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IExchangeAccount* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IExchangeAccount**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IExchangeAccount* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IExchangeAccount* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IExchangeAccount**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExchangeAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CBF526B8-6CCF-4D98-B562-C78DF25E9807}
// *********************************************************************//
interface IExchangeAccount  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 账户标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [4] 经纪账户ID
  virtual HRESULT STDMETHODCALLTYPE get_BrokerAcctID(long* pVal/*[out,retval]*/) = 0;
  // [5] 帐号
  virtual HRESULT STDMETHODCALLTYPE get_Number(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 帐号
  virtual HRESULT STDMETHODCALLTYPE set_Number(BSTR pVal/*[in]*/) = 0;
  // [6] 类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcExchangeAccountType* pVal/*[out,retval]*/) = 0;
  // [6] 类型
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/) = 0;
  // [7] 客户标识
  virtual HRESULT STDMETHODCALLTYPE get_CustomerID(long* pVal/*[out,retval]*/) = 0;
  // [7] 客户标识
  virtual HRESULT STDMETHODCALLTYPE set_CustomerID(long pVal/*[in]*/) = 0;
  // [8] 交易所标识
  virtual HRESULT STDMETHODCALLTYPE get_ExchangeID(long* pVal/*[out,retval]*/) = 0;
  // [8] 交易所标识
  virtual HRESULT STDMETHODCALLTYPE set_ExchangeID(long pVal/*[in]*/) = 0;
  // [9] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcExchangeAccountStatus* pVal/*[out,retval]*/) = 0;
  // [9] 状态
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/) = 0;
  // [10] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [11] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [22] 获得指定证券持仓
  virtual HRESULT STDMETHODCALLTYPE GetPosition(BSTR InstID, long InstIDSource, 
                                                Ptssmolib_tlb::TcPositionDirection Direction, 
                                                Ptssmolib_tlb::IPosition** Position) = 0;
  // [23] 获得所有持仓
  virtual HRESULT STDMETHODCALLTYPE GetPositions(long* pStartIndex, long MaxRowCount, 
                                                 Ptssmolib_tlb::IPositions** Positions) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_BrokerAcctID(void)
  {
    long pVal;
    OLECHECK(this->get_BrokerAcctID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Number(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Number((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcExchangeAccountType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcExchangeAccountType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcExchangeAccountType*)&pVal));
    return pVal;
  }

  long __fastcall get_CustomerID(void)
  {
    long pVal;
    OLECHECK(this->get_CustomerID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ExchangeID(void)
  {
    long pVal;
    OLECHECK(this->get_ExchangeID((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcExchangeAccountStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcExchangeAccountStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcExchangeAccountStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   long            BrokerAcctID = {read = get_BrokerAcctID};
  __property   BSTR            Number = {read = get_Number, write = set_Number};
  __property   Ptssmolib_tlb::TcExchangeAccountType Type = {read = get_Type, write = set_Type};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            ExchangeID = {read = get_ExchangeID, write = set_ExchangeID};
  __property   Ptssmolib_tlb::TcExchangeAccountStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBrokerAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76ED517D-70F7-4548-860D-E3661E063616}
// *********************************************************************//
interface IBrokerAccounts  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IBrokerAccount** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IBrokerAccount** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IBrokerAccount* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IBrokerAccount* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IBrokerAccount**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IBrokerAccount* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IBrokerAccount* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IBrokerAccount**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBrokerAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2EFF1224-3127-4C55-9D4E-A8394734A421}
// *********************************************************************//
interface IBrokerAccount  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 客户ID
  virtual HRESULT STDMETHODCALLTYPE get_CustomerID(long* pVal/*[out,retval]*/) = 0;
  // [3] 客户ID
  virtual HRESULT STDMETHODCALLTYPE set_CustomerID(long pVal/*[in]*/) = 0;
  // [4] 经纪公司ID
  virtual HRESULT STDMETHODCALLTYPE get_BrokerID(long* pVal/*[out,retval]*/) = 0;
  // [4] 经纪公司ID
  virtual HRESULT STDMETHODCALLTYPE set_BrokerID(long pVal/*[in]*/) = 0;
  // [5] 账户ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [6] 经纪公司账户ID
  virtual HRESULT STDMETHODCALLTYPE get_IDFromBroker(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 经纪公司账户ID
  virtual HRESULT STDMETHODCALLTYPE set_IDFromBroker(BSTR pVal/*[in]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [9] 类型
  virtual HRESULT STDMETHODCALLTYPE get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/) = 0;
  // [9] 类型
  virtual HRESULT STDMETHODCALLTYPE set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/) = 0;
  // [10] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/) = 0;
  // [11] 费用
  virtual HRESULT STDMETHODCALLTYPE get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/) = 0;
  // [12] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [13] 添加持仓
  virtual HRESULT STDMETHODCALLTYPE AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                                long Qty/*[in]*/, double CostPrice/*[in]*/) = 0;
  // [14] 添加逻辑账户
  virtual HRESULT STDMETHODCALLTYPE AddLogicalAccount(BSTR Name/*[in]*/, 
                                                      Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                                      BSTR Description/*[in]*/, 
                                                      Ptssmolib_tlb::IAccount** ppObject/*[out,retval]*/) = 0;
  // [16] 存款
  virtual HRESULT STDMETHODCALLTYPE Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                           double Amount/*[in]*/) = 0;
  // [17] 取款
  virtual HRESULT STDMETHODCALLTYPE Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                          double Amount/*[in]*/) = 0;
  // [19] 删除持仓
  virtual HRESULT STDMETHODCALLTYPE DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                 Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                 Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                                 long Qty/*[in]*/) = 0;
  // [20] 删除逻辑账户
  virtual HRESULT STDMETHODCALLTYPE DropLogicalAccount(long AccountID/*[in]*/) = 0;
  // [21] 获取详细信息
  virtual HRESULT STDMETHODCALLTYPE GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                              Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                              Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/) = 0;
  // [22] 获取持仓信息
  virtual HRESULT STDMETHODCALLTYPE GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                                Ptssmolib_tlb::IPosition** Position/*[out,retval]*/) = 0;
  // [23] 获取持仓
  virtual HRESULT STDMETHODCALLTYPE GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                 long* pStartIndex/*[in,out]*/, 
                                                 long MaxRowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/) = 0;
  // [24] 设置密码
  virtual HRESULT STDMETHODCALLTYPE SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/) = 0;
  // [26] 列出逻辑账户
  virtual HRESULT STDMETHODCALLTYPE ListLogicalAccounts(Ptssmolib_tlb::IAccounts** ppAccounts/*[out,retval]*/) = 0;
  // [27] 列出逻辑账户
  virtual HRESULT STDMETHODCALLTYPE Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                             double Amount) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CustomerID(void)
  {
    long pVal;
    OLECHECK(this->get_CustomerID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_BrokerID(void)
  {
    long pVal;
    OLECHECK(this->get_BrokerID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_IDFromBroker(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_IDFromBroker((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void)
  {
    Ptssmolib_tlb::TcAccountType pVal;
    OLECHECK(this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcAccountStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void)
  {
    Ptssmolib_tlb::IMiscFeesPtr pVal;
    OLECHECK(this->get_MiscFees(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IAccount* __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                                        Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                                        BSTR Description/*[in]*/)
  {
    Ptssmolib_tlb::IAccount* ppObject = 0;
    OLECHECK(this->AddLogicalAccount(Name, Status, Description, (Ptssmolib_tlb::IAccount**)&ppObject));
    return ppObject;
  }

  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                      Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
  {
    Ptssmolib_tlb::IAccountDetail* ppDetail = 0;
    OLECHECK(this->GetDetail(IncludeChildAccount, Currency, (Ptssmolib_tlb::IAccountDetail**)&ppDetail));
    return ppDetail;
  }

  Ptssmolib_tlb::IPosition* __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                   BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
  {
    Ptssmolib_tlb::IPosition* Position = 0;
    OLECHECK(this->GetPosition(IncludeChildAccount, InstID, InstIDSource, Direction, (Ptssmolib_tlb::IPosition**)&Position));
    return Position;
  }

  Ptssmolib_tlb::IPositions* __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IPositions* Positions = 0;
    OLECHECK(this->GetPositions(IncludeChildAccount, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IPositions**)&Positions));
    return Positions;
  }

  Ptssmolib_tlb::IAccounts* __fastcall ListLogicalAccounts(void)
  {
    Ptssmolib_tlb::IAccounts* ppAccounts = 0;
    OLECHECK(this->ListLogicalAccounts((Ptssmolib_tlb::IAccounts**)&ppAccounts));
    return ppAccounts;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            BrokerID = {read = get_BrokerID, write = set_BrokerID};
  __property   long            ID = {read = get_ID};
  __property   BSTR            IDFromBroker = {read = get_IDFromBroker, write = set_IDFromBroker};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType, write = set_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMiscFees
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D3574A-FAB0-4037-8DF7-C9357131839C}
// *********************************************************************//
interface IMiscFees  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IMiscFee** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IMiscFee** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IMiscFee* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IMiscFee* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IMiscFee**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IMiscFee* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IMiscFee* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IMiscFee**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMiscFee
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6778946F-1874-4747-A246-DE3DFA9826E5}
// *********************************************************************//
interface IMiscFee  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [2] 属性 OwnerID
  virtual HRESULT STDMETHODCALLTYPE get_OwnerID(long* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Type
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcMiscFeeType* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Type
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/) = 0;
  // [4] 属性 BusinessType
  virtual HRESULT STDMETHODCALLTYPE get_BusinessType(Ptssmolib_tlb::TcBusinessType* pVal/*[out,retval]*/) = 0;
  // [4] 属性 BusinessType
  virtual HRESULT STDMETHODCALLTYPE set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/) = 0;
  // [5] 属性 InstrumentSubType
  virtual HRESULT STDMETHODCALLTYPE get_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/) = 0;
  // [5] 属性 InstrumentSubType
  virtual HRESULT STDMETHODCALLTYPE set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/) = 0;
  // [6] 属性 AmountRatio
  virtual HRESULT STDMETHODCALLTYPE get_AmountRatio(double* pVal/*[out,retval]*/) = 0;
  // [6] 属性 AmountRatio
  virtual HRESULT STDMETHODCALLTYPE set_AmountRatio(double pVal/*[in]*/) = 0;
  // [7] 属性 ParRatio
  virtual HRESULT STDMETHODCALLTYPE get_ParRatio(double* pVal/*[out,retval]*/) = 0;
  // [7] 属性 ParRatio
  virtual HRESULT STDMETHODCALLTYPE set_ParRatio(double pVal/*[in]*/) = 0;
  // [8] 属性 FixedValue
  virtual HRESULT STDMETHODCALLTYPE get_FixedValue(double* pVal/*[out,retval]*/) = 0;
  // [8] 属性 FixedValue
  virtual HRESULT STDMETHODCALLTYPE set_FixedValue(double pVal/*[in]*/) = 0;
  // [9] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_OwnerID(void)
  {
    long pVal;
    OLECHECK(this->get_OwnerID((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcMiscFeeType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcMiscFeeType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcMiscFeeType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcBusinessType __fastcall get_BusinessType(void)
  {
    Ptssmolib_tlb::TcBusinessType pVal;
    OLECHECK(this->get_BusinessType((Ptssmolib_tlb::TcBusinessType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_InstrumentSubType(void)
  {
    Ptssmolib_tlb::TcInstrumentSubType pVal;
    OLECHECK(this->get_InstrumentSubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal));
    return pVal;
  }

  double __fastcall get_AmountRatio(void)
  {
    double pVal;
    OLECHECK(this->get_AmountRatio((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ParRatio(void)
  {
    double pVal;
    OLECHECK(this->get_ParRatio((double*)&pVal));
    return pVal;
  }

  double __fastcall get_FixedValue(void)
  {
    double pVal;
    OLECHECK(this->get_FixedValue((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }


  __property   long            ID = {read = get_ID};
  __property   long            OwnerID = {read = get_OwnerID};
  __property   Ptssmolib_tlb::TcMiscFeeType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcBusinessType BusinessType = {read = get_BusinessType, write = set_BusinessType};
  __property   Ptssmolib_tlb::TcInstrumentSubType InstrumentSubType = {read = get_InstrumentSubType, write = set_InstrumentSubType};
  __property   double          AmountRatio = {read = get_AmountRatio, write = set_AmountRatio};
  __property   double          ParRatio = {read = get_ParRatio, write = set_ParRatio};
  __property   double          FixedValue = {read = get_FixedValue, write = set_FixedValue};
  __property   BSTR            Description = {read = get_Description, write = set_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E132D92-431E-4D45-8FEA-3B51357C8E0D}
// *********************************************************************//
interface IAccounts  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE Find(long AccountID/*[in]*/, 
                                         Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IAccount* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IAccount* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IAccount**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IAccount* __fastcall Find(long AccountID/*[in]*/)
  {
    Ptssmolib_tlb::IAccount* ppObjVal = 0;
    OLECHECK(this->Find(AccountID, (Ptssmolib_tlb::IAccount**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICustomerDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2214C787-5A58-4C98-B298-019191BA0EC9}
// *********************************************************************//
interface ICustomerDetail  : public IDispatch
{
public:
  // [1] 部门
  virtual HRESULT STDMETHODCALLTYPE get_Department(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] 部门
  virtual HRESULT STDMETHODCALLTYPE set_Department(BSTR pVal/*[in]*/) = 0;
  // [2] 办公室
  virtual HRESULT STDMETHODCALLTYPE get_Office(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 办公室
  virtual HRESULT STDMETHODCALLTYPE set_Office(BSTR pVal/*[in]*/) = 0;
  // [3] 职业
  virtual HRESULT STDMETHODCALLTYPE get_Profession(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 职业
  virtual HRESULT STDMETHODCALLTYPE set_Profession(BSTR pVal/*[in]*/) = 0;
  // [4] 经理姓名
  virtual HRESULT STDMETHODCALLTYPE get_ManagerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 经理姓名
  virtual HRESULT STDMETHODCALLTYPE set_ManagerName(BSTR pVal/*[in]*/) = 0;
  // [5] 助理姓名
  virtual HRESULT STDMETHODCALLTYPE get_AssistantName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 助理姓名
  virtual HRESULT STDMETHODCALLTYPE set_AssistantName(BSTR pVal/*[in]*/) = 0;
  // [6] 昵称
  virtual HRESULT STDMETHODCALLTYPE get_NickName(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 昵称
  virtual HRESULT STDMETHODCALLTYPE set_NickName(BSTR pVal/*[in]*/) = 0;
  // [7] 性别类型
  virtual HRESULT STDMETHODCALLTYPE get_GenderType(Ptssmolib_tlb::TcGenderType* pVal/*[out,retval]*/) = 0;
  // [7] 性别类型
  virtual HRESULT STDMETHODCALLTYPE set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/) = 0;
  // [8] 出生日期
  virtual HRESULT STDMETHODCALLTYPE get_Birthday(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 出生日期
  virtual HRESULT STDMETHODCALLTYPE set_Birthday(BSTR pVal/*[in]*/) = 0;
  // [9] 英文称谓
  virtual HRESULT STDMETHODCALLTYPE get_EnglishTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 英文称谓
  virtual HRESULT STDMETHODCALLTYPE set_EnglishTitle(BSTR pVal/*[in]*/) = 0;
  // [10] 中文称谓
  virtual HRESULT STDMETHODCALLTYPE get_ChineseTitle(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 中文称谓
  virtual HRESULT STDMETHODCALLTYPE set_ChineseTitle(BSTR pVal/*[in]*/) = 0;
  // [11] 证件类型
  virtual HRESULT STDMETHODCALLTYPE get_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType* pVal/*[out,retval]*/) = 0;
  // [11] 证件类型
  virtual HRESULT STDMETHODCALLTYPE set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/) = 0;
  // [12] 证件号码
  virtual HRESULT STDMETHODCALLTYPE get_IdentifiedCard(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] 证件号码
  virtual HRESULT STDMETHODCALLTYPE set_IdentifiedCard(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Department(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Department((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Office(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Office((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Profession(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Profession((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ManagerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ManagerName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AssistantName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AssistantName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_NickName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_NickName((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcGenderType __fastcall get_GenderType(void)
  {
    Ptssmolib_tlb::TcGenderType pVal;
    OLECHECK(this->get_GenderType((Ptssmolib_tlb::TcGenderType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Birthday(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Birthday((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_EnglishTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_EnglishTitle((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ChineseTitle(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ChineseTitle((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcIdentifiedCardType __fastcall get_IdentifiedCardType(void)
  {
    Ptssmolib_tlb::TcIdentifiedCardType pVal;
    OLECHECK(this->get_IdentifiedCardType((Ptssmolib_tlb::TcIdentifiedCardType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_IdentifiedCard(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_IdentifiedCard((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Department = {read = get_Department, write = set_Department};
  __property   BSTR            Office = {read = get_Office, write = set_Office};
  __property   BSTR            Profession = {read = get_Profession, write = set_Profession};
  __property   BSTR            ManagerName = {read = get_ManagerName, write = set_ManagerName};
  __property   BSTR            AssistantName = {read = get_AssistantName, write = set_AssistantName};
  __property   BSTR            NickName = {read = get_NickName, write = set_NickName};
  __property   Ptssmolib_tlb::TcGenderType GenderType = {read = get_GenderType, write = set_GenderType};
  __property   BSTR            Birthday = {read = get_Birthday, write = set_Birthday};
  __property   BSTR            EnglishTitle = {read = get_EnglishTitle, write = set_EnglishTitle};
  __property   BSTR            ChineseTitle = {read = get_ChineseTitle, write = set_ChineseTitle};
  __property   Ptssmolib_tlb::TcIdentifiedCardType IdentifiedCardType = {read = get_IdentifiedCardType, write = set_IdentifiedCardType};
  __property   BSTR            IdentifiedCard = {read = get_IdentifiedCard, write = set_IdentifiedCard};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPostalAddress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EBC81E1B-A963-44C2-B710-E9510524A0AA}
// *********************************************************************//
interface IPostalAddress  : public IDispatch
{
public:
  // [1] 国家
  virtual HRESULT STDMETHODCALLTYPE get_Country(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] 国家
  virtual HRESULT STDMETHODCALLTYPE set_Country(BSTR pVal/*[in]*/) = 0;
  // [2] 城市
  virtual HRESULT STDMETHODCALLTYPE get_City(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 城市
  virtual HRESULT STDMETHODCALLTYPE set_City(BSTR pVal/*[in]*/) = 0;
  // [3] 省份地区
  virtual HRESULT STDMETHODCALLTYPE get_Province(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 省份地区
  virtual HRESULT STDMETHODCALLTYPE set_Province(BSTR pVal/*[in]*/) = 0;
  // [4] 街道
  virtual HRESULT STDMETHODCALLTYPE get_Street(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 街道
  virtual HRESULT STDMETHODCALLTYPE set_Street(BSTR pVal/*[in]*/) = 0;
  // [5] 类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcAddressType* pVal/*[out,retval]*/) = 0;
  // [5] 类型
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/) = 0;
  // [6] 邮证编码
  virtual HRESULT STDMETHODCALLTYPE get_ZipCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 邮证编码
  virtual HRESULT STDMETHODCALLTYPE set_ZipCode(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Country(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Country((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_City(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_City((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Province(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Province((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Street(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Street((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcAddressType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcAddressType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcAddressType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ZipCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ZipCode((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Country = {read = get_Country, write = set_Country};
  __property   BSTR            City = {read = get_City, write = set_City};
  __property   BSTR            Province = {read = get_Province, write = set_Province};
  __property   BSTR            Street = {read = get_Street, write = set_Street};
  __property   Ptssmolib_tlb::TcAddressType Type = {read = get_Type, write = set_Type};
  __property   BSTR            ZipCode = {read = get_ZipCode, write = set_ZipCode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICustomers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {319F2830-9A48-4B6C-BB07-C83BEF91A06F}
// *********************************************************************//
interface ICustomers  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::ICustomer** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::ICustomer** ppObjRet/*[out,retval]*/) = 0;
  // [5] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::ICustomer* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::ICustomer* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::ICustomer**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::ICustomer* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::ICustomer* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::ICustomer**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITask
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {730A7110-5812-4CFC-899E-72A875B78552}
// *********************************************************************//
interface ITask  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建日期
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改日期
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 任务ID
  virtual HRESULT STDMETHODCALLTYPE get_TaskID(long* pVal/*[out,retval]*/) = 0;
  // [5] 类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 类型
  virtual HRESULT STDMETHODCALLTYPE set_Type(BSTR pVal/*[in]*/) = 0;
  // [6] 任务状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcTaskStatus* pVal/*[out,retval]*/) = 0;
  // [7] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [10] 打开任务
  virtual HRESULT STDMETHODCALLTYPE Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/) = 0;
  // [11] 关闭任务
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0;
  // [12] 获得已完成的对冲
  virtual HRESULT STDMETHODCALLTYPE GetCompleteHedges(BSTR EndDate/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/, 
                                                      Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/) = 0;
  // [13] 获得未完成的对冲
  virtual HRESULT STDMETHODCALLTYPE GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/) = 0;
  // [14] 新建对冲
  virtual HRESULT STDMETHODCALLTYPE NewHedge(BSTR HedgeName/*[in]*/, 
                                             Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/) = 0;
  // [15] 分配账户
  virtual HRESULT STDMETHODCALLTYPE AssignAccount(long AccountID/*[in]*/) = 0;
  // [16] 分离账户
  virtual HRESULT STDMETHODCALLTYPE DetachAccount(long AccountID/*[in]*/) = 0;
  // [17] 获取账户
  virtual HRESULT STDMETHODCALLTYPE GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/) = 0;
  // [24] 获得对冲
  virtual HRESULT STDMETHODCALLTYPE GetHedge(long HedgeID/*[in]*/, 
                                             Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_TaskID(void)
  {
    long pVal;
    OLECHECK(this->get_TaskID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Type(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Type((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcTaskStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcTaskStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcTaskStatus*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IHedges* __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, 
                                                       long* pStartIndex/*[in,out]*/, 
                                                       long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IHedges* ppHedges = 0;
    OLECHECK(this->GetCompleteHedges(EndDate, pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&ppHedges));
    return ppHedges;
  }

  Ptssmolib_tlb::IHedges* __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IHedges* ppHedges = 0;
    OLECHECK(this->GetWorkingHedges(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IHedges**)&ppHedges));
    return ppHedges;
  }

  Ptssmolib_tlb::IHedge* __fastcall NewHedge(BSTR HedgeName/*[in]*/)
  {
    Ptssmolib_tlb::IHedge* ppHedge = 0;
    OLECHECK(this->NewHedge(HedgeName, (Ptssmolib_tlb::IHedge**)&ppHedge));
    return ppHedge;
  }

  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void)
  {
    Ptssmolib_tlb::IAccounts* pVal = 0;
    OLECHECK(this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IHedge* __fastcall GetHedge(long HedgeID/*[in]*/)
  {
    Ptssmolib_tlb::IHedge* ppHedge = 0;
    OLECHECK(this->GetHedge(HedgeID, (Ptssmolib_tlb::IHedge**)&ppHedge));
    return ppHedge;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            TaskID = {read = get_TaskID};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcTaskStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IHedges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C70EAC5-AE26-4BBD-95F2-B516AF28F9BC}
// *********************************************************************//
interface IHedges  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IHedge* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IHedge* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IHedge**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IHedge* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IHedge* ppObjVal = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IHedge**)&ppObjVal));
    return ppObjVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IHedge
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5DCB97F4-E99F-4629-97EF-371566CC4C45}
// *********************************************************************//
interface IHedge  : public IDispatch
{
public:
  // [1] 任务ID
  virtual HRESULT STDMETHODCALLTYPE get_TaskID(long* pVal/*[out,retval]*/) = 0;
  // [2] 对冲ID
  virtual HRESULT STDMETHODCALLTYPE get_HedgeID(long* pVal/*[out,retval]*/) = 0;
  // [3] 名称
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 名称
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/) = 0;
  // [4] 预期利润
  virtual HRESULT STDMETHODCALLTYPE get_ExpectProfit(double* pVal/*[out,retval]*/) = 0;
  // [4] 预期利润
  virtual HRESULT STDMETHODCALLTYPE set_ExpectProfit(double pVal/*[in]*/) = 0;
  // [5] 实际利润
  virtual HRESULT STDMETHODCALLTYPE get_RealProfit(double* pVal/*[out,retval]*/) = 0;
  // [5] 实际利润
  virtual HRESULT STDMETHODCALLTYPE set_RealProfit(double pVal/*[in]*/) = 0;
  // [6] 交易成本
  virtual HRESULT STDMETHODCALLTYPE get_Cost(double* pVal/*[out,retval]*/) = 0;
  // [6] 交易成本
  virtual HRESULT STDMETHODCALLTYPE set_Cost(double pVal/*[in]*/) = 0;
  // [7] 创建日期
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 结束日期
  virtual HRESULT STDMETHODCALLTYPE get_EndDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 结束日期
  virtual HRESULT STDMETHODCALLTYPE set_EndDate(BSTR pVal/*[in]*/) = 0;
  // [10] 结束时间
  virtual HRESULT STDMETHODCALLTYPE get_EndTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 结束时间
  virtual HRESULT STDMETHODCALLTYPE set_EndTime(BSTR pVal/*[in]*/) = 0;
  // [11] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcHedgeStatus* pVal/*[out,retval]*/) = 0;
  // [11] 状态
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/) = 0;
  // [18] 修改
  virtual HRESULT STDMETHODCALLTYPE Alter(void) = 0;
  // [12] 加载配置
  virtual HRESULT STDMETHODCALLTYPE LoadConfigure(VARIANT* pConfigure/*[out,retval]*/) = 0;
  // [13] 保存配置
  virtual HRESULT STDMETHODCALLTYPE SaveConfigure(VARIANT Configure/*[in]*/) = 0;
  // [14] 建立订单簿
  virtual HRESULT STDMETHODCALLTYPE NewOrders(long AccountID/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/) = 0;
  // [15] 获得未成交订单
  virtual HRESULT STDMETHODCALLTYPE GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/) = 0;
  // [16] 获得订单
  virtual HRESULT STDMETHODCALLTYPE GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                              long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/) = 0;
  // [17] 刷新
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_TaskID(void)
  {
    long pVal;
    OLECHECK(this->get_TaskID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_HedgeID(void)
  {
    long pVal;
    OLECHECK(this->get_HedgeID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_ExpectProfit(void)
  {
    double pVal;
    OLECHECK(this->get_ExpectProfit((double*)&pVal));
    return pVal;
  }

  double __fastcall get_RealProfit(void)
  {
    double pVal;
    OLECHECK(this->get_RealProfit((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Cost(void)
  {
    double pVal;
    OLECHECK(this->get_Cost((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CreateTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateTime((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_EndDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_EndDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_EndTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_EndTime((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcHedgeStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcHedgeStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcHedgeStatus*)&pVal));
    return pVal;
  }

  VARIANT __fastcall LoadConfigure(void)
  {
    VARIANT pConfigure;
    OLECHECK(this->LoadConfigure((VARIANT*)&pConfigure));
    return pConfigure;
  }

  Ptssmolib_tlb::IOrders* __fastcall NewOrders(long AccountID/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* pVal = 0;
    OLECHECK(this->NewOrders(AccountID, (Ptssmolib_tlb::IOrders**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* pVal = 0;
    OLECHECK(this->GetWorkingOrders(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IOrders* __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* pVal = 0;
    OLECHECK(this->GetOrders(FindInHistory, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&pVal));
    return pVal;
  }


  __property   long            TaskID = {read = get_TaskID};
  __property   long            HedgeID = {read = get_HedgeID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   double          ExpectProfit = {read = get_ExpectProfit, write = set_ExpectProfit};
  __property   double          RealProfit = {read = get_RealProfit, write = set_RealProfit};
  __property   double          Cost = {read = get_Cost, write = set_Cost};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            CreateTime = {read = get_CreateTime};
  __property   BSTR            EndDate = {read = get_EndDate, write = set_EndDate};
  __property   BSTR            EndTime = {read = get_EndTime, write = set_EndTime};
  __property   Ptssmolib_tlb::TcHedgeStatus Status = {read = get_Status, write = set_Status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITasks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64856AF0-84F6-42D4-A2F8-4E05B9B545CE}
// *********************************************************************//
interface ITasks  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/) = 0;
  // [2] 方法ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::ITask** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/, 
                                        Ptssmolib_tlb::ITask** ppObject/*[out,retval]*/) = 0;
  // [4] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/) = 0;
  // [5] 方法 Find
  virtual HRESULT STDMETHODCALLTYPE Find(long TaskID/*[in]*/, 
                                         Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::ITask* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::ITask* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::ITask**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::ITask* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::ITask* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::ITask**)&ppObjRet));
    return ppObjRet;
  }

  Ptssmolib_tlb::ITask* __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/)
  {
    Ptssmolib_tlb::ITask* ppObject = 0;
    OLECHECK(this->Add(TaskName, TaskType, (Ptssmolib_tlb::ITask**)&ppObject));
    return ppObject;
  }

  Ptssmolib_tlb::ITask* __fastcall Find(long TaskID/*[in]*/)
  {
    Ptssmolib_tlb::ITask* ppObjVal = 0;
    OLECHECK(this->Find(TaskID, (Ptssmolib_tlb::ITask**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITradeCoreSvc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31E87ABB-7FA1-41B9-B53E-B0A76C0A3028}
// *********************************************************************//
interface ITradeCoreSvc  : public IDispatch
{
public:
  // [7] 客户
  virtual HRESULT STDMETHODCALLTYPE get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/) = 0;
  // [8] 事件主题
  virtual HRESULT STDMETHODCALLTYPE get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/) = 0;
  // [9] 任务
  virtual HRESULT STDMETHODCALLTYPE get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/) = 0;
  // [10] 交易所
  virtual HRESULT STDMETHODCALLTYPE get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/) = 0;
  // [12] 图表
  virtual HRESULT STDMETHODCALLTYPE get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/) = 0;
  // [14] 角色
  virtual HRESULT STDMETHODCALLTYPE get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/) = 0;
  // [15] 用户
  virtual HRESULT STDMETHODCALLTYPE get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/) = 0;
  // [23] 方法ChangePassword
  virtual HRESULT STDMETHODCALLTYPE ChangePassword(BSTR OldPassword/*[in]*/, 
                                                   BSTR NewPassword/*[in]*/) = 0;
  // [26] 方法QueryObjects
  virtual HRESULT STDMETHODCALLTYPE QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                 BSTR Conditions/*[in]*/, 
                                                 long* pStartIndex/*[in,out]*/, 
                                                 long RowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/) = 0;
  // [28] 方法CommitOrders
  virtual HRESULT STDMETHODCALLTYPE CommitOrders(long AccountID/*[in]*/, 
                                                 Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                                 Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                                 long* pErrorIndex/*[out,retval]*/) = 0;
  // [29] 方法GetOnlineUserName
  virtual HRESULT STDMETHODCALLTYPE GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  // [30] 方法GetAllUserNames
  virtual HRESULT STDMETHODCALLTYPE GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  // [31] 方法AddProject
  virtual HRESULT STDMETHODCALLTYPE AddProject(Ptssmolib_tlb::IProject* p/*[in]*/) = 0;
  // [32] SetSession
  virtual HRESULT STDMETHODCALLTYPE SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/) = 0;
  // [33] SetSession
  virtual HRESULT STDMETHODCALLTYPE GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void)
  {
    Ptssmolib_tlb::ICustomersPtr pVal;
    OLECHECK(this->get_Customers(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void)
  {
    Ptssmolib_tlb::IEventTopicsPtr pVal;
    OLECHECK(this->get_EventTopics(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void)
  {
    Ptssmolib_tlb::ITasksPtr pVal;
    OLECHECK(this->get_Tasks(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void)
  {
    Ptssmolib_tlb::IExchangesPtr pVal;
    OLECHECK(this->get_Exchanges(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void)
  {
    Ptssmolib_tlb::IChartsPtr pVal;
    OLECHECK(this->get_Charts(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void)
  {
    Ptssmolib_tlb::IRolesPtr pVal;
    OLECHECK(this->get_Roles(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void)
  {
    Ptssmolib_tlb::IUsersPtr pVal;
    OLECHECK(this->get_Users(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjects = 0;
    OLECHECK(this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects));
    return ppObjects;
  }

  long __fastcall CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                               Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
  {
    long pErrorIndex;
    OLECHECK(this->CommitOrders(AccountID, Mode, pOrders, (long*)&pErrorIndex));
    return pErrorIndex;
  }

  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void)
  {
    Ptssmolib_tlb::IPTSSession* ppSession = 0;
    OLECHECK(this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession));
    return ppSession;
  }


  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITradeCoreSvc2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC2D6E0E-7F89-4CD3-8A9B-3CEEEC668EE2}
// *********************************************************************//
interface ITradeCoreSvc2  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE GetOrder(BSTR OrderID/*[in]*/, 
                                             Ptssmolib_tlb::IOrder** pVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                                       BSTR EndDate/*[in]*/, 
                                                       Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                                       long* pStartIndex/*[in,out]*/, 
                                                       long RowCount/*[in]*/, 
                                                       Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE GetPositionFromETFTrd(long CustID/*[in]*/, 
                                                          long* pStartIndex/*[in,out]*/, 
                                                          long RowCount/*[in]*/, 
                                                          Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void)
  {
    Ptssmolib_tlb::IAccounts* pVal = 0;
    OLECHECK(this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IOrder* __fastcall GetOrder(BSTR OrderID/*[in]*/)
  {
    Ptssmolib_tlb::IOrder* pVal = 0;
    OLECHECK(this->GetOrder(OrderID, (Ptssmolib_tlb::IOrder**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void)
  {
    Ptssmolib_tlb::INewStockSet* pVal = 0;
    OLECHECK(this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::INotTradingStockSet* __fastcall GetNotTradingStocks(void)
  {
    Ptssmolib_tlb::INotTradingStockSet* ppData = 0;
    OLECHECK(this->GetNotTradingStocks((Ptssmolib_tlb::INotTradingStockSet**)&ppData));
    return ppData;
  }

  Ptssmolib_tlb::IHedges* __fastcall GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                                        BSTR EndDate/*[in]*/, 
                                                        Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IHedges* ppHedges = 0;
    OLECHECK(this->GetHedgeFromETFTrd(CustID, StartDate, EndDate, Status, pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&ppHedges));
    return ppHedges;
  }

  Ptssmolib_tlb::IPositions* __fastcall GetPositionFromETFTrd(long CustID/*[in]*/, 
                                                              long* pStartIndex/*[in,out]*/, 
                                                              long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IPositions* Positions = 0;
    OLECHECK(this->GetPositionFromETFTrd(CustID, pStartIndex, RowCount, (Ptssmolib_tlb::IPositions**)&Positions));
    return Positions;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEventTopics
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {15D74C5B-AF5E-4DE2-86A4-DAC7A0F1B013}
// *********************************************************************//
interface IEventTopics  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IEventTopic** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IEventTopic* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IEventTopic* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IEventTopic**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEventTopic
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B7B1EC5-1278-4BD7-8687-6D74712F4A28}
// *********************************************************************//
interface IEventTopic  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 主题ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [3] 类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcEventTopicType* pVal/*[out,retval]*/) = 0;
  // [4] 发布者
  virtual HRESULT STDMETHODCALLTYPE get_Publisher(Ptssmolib_tlb::IEventPublisher** ppVal/*[out,retval]*/) = 0;
  // [5] 过滤器
  virtual HRESULT STDMETHODCALLTYPE get_Filter(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 配置
  virtual HRESULT STDMETHODCALLTYPE get_Config(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 新建订阅者
  virtual HRESULT STDMETHODCALLTYPE NewSubscriber(Ptssmolib_tlb::ISubscriber** ppSubscriber/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcEventTopicType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcEventTopicType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcEventTopicType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IEventPublisherPtr __fastcall get_Publisher(void)
  {
    Ptssmolib_tlb::IEventPublisherPtr ppVal;
    OLECHECK(this->get_Publisher(&ppVal));
    return ppVal;
  }

  BSTR __fastcall get_Filter(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Filter((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Config(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Config((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ISubscriber* __fastcall NewSubscriber(void)
  {
    Ptssmolib_tlb::ISubscriber* ppSubscriber = 0;
    OLECHECK(this->NewSubscriber((Ptssmolib_tlb::ISubscriber**)&ppSubscriber));
    return ppSubscriber;
  }


  __property   long            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcEventTopicType Type = {read = get_Type};
  __property   Ptssmolib_tlb::IEventPublisherPtr Publisher = {read = get_Publisher};
  __property   BSTR            Filter = {read = get_Filter};
  __property   BSTR            Config = {read = get_Config};
  __property   BSTR            Description = {read = get_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEventPublisher
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2833B8CC-4560-42BE-826F-E940BC186FAF}
// *********************************************************************//
interface IEventPublisher  : public IDispatch
{
public:
  // [1] 属性 ProgID
  virtual HRESULT STDMETHODCALLTYPE get_ProgID(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] 属性 ProgID
  virtual HRESULT STDMETHODCALLTYPE set_ProgID(BSTR pVal/*[in]*/) = 0;
  // [2] 方法Publish
  virtual HRESULT STDMETHODCALLTYPE Publish(BSTR XML/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ProgID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ProgID((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ProgID = {read = get_ProgID, write = set_ProgID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISubscriber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFC4DDEC-16E5-4850-A50D-E1231C3CD077}
// *********************************************************************//
interface ISubscriber  : public IDispatch
{
public:
  // [1] 属性 ServerName
  virtual HRESULT STDMETHODCALLTYPE get_ServerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 属性 ServerPort
  virtual HRESULT STDMETHODCALLTYPE get_ServerPort(long* pVal/*[out,retval]*/) = 0;
  // [3] 属性 TopicID
  virtual HRESULT STDMETHODCALLTYPE get_TopicID(long* pVal/*[out,retval]*/) = 0;
  // [4] 属性 TopicName
  virtual HRESULT STDMETHODCALLTYPE get_TopicName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 属性 FilterString
  virtual HRESULT STDMETHODCALLTYPE get_FilterString(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 属性 Status
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcSubscribeStatus* pVal/*[out,retval]*/) = 0;
  // [7] 属性 AuthCode
  virtual HRESULT STDMETHODCALLTYPE get_AuthCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 属性 SocketWndHandle
  virtual HRESULT STDMETHODCALLTYPE get_SocketWndHandle(long* pVal/*[out,retval]*/) = 0;
  // [10] 方法Connect
  virtual HRESULT STDMETHODCALLTYPE Connect(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/) = 0;
  // [11] 方法Disconnect
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0;
  // [12] 方法Subscribe
  virtual HRESULT STDMETHODCALLTYPE Subscribe(BSTR FilterString/*[in]*/) = 0;
  // [13] 方法Unsubscribe
  virtual HRESULT STDMETHODCALLTYPE Unsubscribe(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ServerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ServerName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ServerPort(void)
  {
    long pVal;
    OLECHECK(this->get_ServerPort((long*)&pVal));
    return pVal;
  }

  long __fastcall get_TopicID(void)
  {
    long pVal;
    OLECHECK(this->get_TopicID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TopicName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TopicName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FilterString(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FilterString((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcSubscribeStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcSubscribeStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcSubscribeStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AuthCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AuthCode((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_SocketWndHandle(void)
  {
    long pVal;
    OLECHECK(this->get_SocketWndHandle((long*)&pVal));
    return pVal;
  }


  __property   BSTR            ServerName = {read = get_ServerName};
  __property   long            ServerPort = {read = get_ServerPort};
  __property   long            TopicID = {read = get_TopicID};
  __property   BSTR            TopicName = {read = get_TopicName};
  __property   BSTR            FilterString = {read = get_FilterString};
  __property   Ptssmolib_tlb::TcSubscribeStatus Status = {read = get_Status};
  __property   BSTR            AuthCode = {read = get_AuthCode};
  __property   long            SocketWndHandle = {read = get_SocketWndHandle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExchanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE30AF8B-C1B1-4FEF-ADB2-0C466298BCEA}
// *********************************************************************//
interface IExchanges  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IExchange** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IExchange** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IExchange* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IExchange* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IExchange**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IExchange* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IExchange* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IExchange**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExchange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6ED6CC68-10E3-4A9C-AC55-73C3FCF781B8}
// *********************************************************************//
interface IExchange  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 交易所标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [5] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [6] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcExchangeStatus* pVal/*[out,retval]*/) = 0;
  // [6] 状态
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/) = 0;
  // [7] 市场代码
  virtual HRESULT STDMETHODCALLTYPE get_MarketCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 市场代码
  virtual HRESULT STDMETHODCALLTYPE set_MarketCode(BSTR pVal/*[in]*/) = 0;
  // [8] 费用
  virtual HRESULT STDMETHODCALLTYPE get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/) = 0;
  // [10] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [15] 获得产品信息
  virtual HRESULT STDMETHODCALLTYPE GetInstrument(BSTR InstID/*[in]*/, 
                                                  Ptssmolib_tlb::IInstrument** Instrument/*[out,retval]*/) = 0;
  // [16] 获得所有的产品信息
  virtual HRESULT STDMETHODCALLTYPE GetAllInstruments(long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/, 
                                                      Ptssmolib_tlb::IInstruments** Instruments/*[out,retval]*/) = 0;
  // [17] 获得证券行情快照
  virtual HRESULT STDMETHODCALLTYPE GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IQuotes** ppQuotes/*[out,retval]*/) = 0;
  // [18] 获得证券当前行情
  virtual HRESULT STDMETHODCALLTYPE GetNowQuote(BSTR InstID/*[in]*/, 
                                                Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/) = 0;
  // [19] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                                      BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/, 
                                                      Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/) = 0;
  // [20] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE Alter(void) = 0;
  // [21] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/) = 0;
  // [22] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE Drop(void) = 0;
  // [23] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE DropInstrument(BSTR InstID/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcExchangeStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcExchangeStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcExchangeStatus*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_MarketCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_MarketCode((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void)
  {
    Ptssmolib_tlb::IMiscFeesPtr pVal;
    OLECHECK(this->get_MiscFees(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IInstrument* __fastcall GetInstrument(BSTR InstID/*[in]*/)
  {
    Ptssmolib_tlb::IInstrument* Instrument = 0;
    OLECHECK(this->GetInstrument(InstID, (Ptssmolib_tlb::IInstrument**)&Instrument));
    return Instrument;
  }

  Ptssmolib_tlb::IInstruments* __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IInstruments* Instruments = 0;
    OLECHECK(this->GetAllInstruments(pStartIndex, RowCount, (Ptssmolib_tlb::IInstruments**)&Instruments));
    return Instruments;
  }

  Ptssmolib_tlb::IQuotes* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IQuotes* ppQuotes = 0;
    OLECHECK(this->GetQuoteSnapshot(pStartIndex, RowCount, (Ptssmolib_tlb::IQuotes**)&ppQuotes));
    return ppQuotes;
  }

  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(BSTR InstID/*[in]*/)
  {
    Ptssmolib_tlb::IQuote* ppQuote = 0;
    OLECHECK(this->GetNowQuote(InstID, (Ptssmolib_tlb::IQuote**)&ppQuote));
    return ppQuote;
  }

  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                           BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppTickData = 0;
    OLECHECK(this->GetQuoteTickDatas(InstID, TradingDay, FormTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppTickData));
    return ppTickData;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcExchangeStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            MarketCode = {read = get_MarketCode, write = set_MarketCode};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IInstruments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E18E14F-C1A6-48FA-8A6D-8C28929F83BC}
// *********************************************************************//
interface IInstruments  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(BSTR ID/*[in]*/, 
                                                 Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IInstrument* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IInstrument* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IInstrument**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IInstrument* __fastcall get_ItemByID(BSTR ID/*[in]*/)
  {
    Ptssmolib_tlb::IInstrument* ppObjVal = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IInstrument**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQuotes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B153FD3B-7DCA-4C6C-8597-ED851F190A30}
// *********************************************************************//
interface IQuotes  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IQuote** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IQuote* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IQuote* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IQuote**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {219BD7C5-FD75-493F-9EA5-A4415F617FC7}
// *********************************************************************//
interface ICharts  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IChart** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IChart** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IChart* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IChart* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IChart* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IChart**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IChart* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IChart* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IChart**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {43ACB6F1-5D0D-4457-AB14-7FC808143C35}
// *********************************************************************//
interface IChart  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [5] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [6] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [20] 增加图表数据
  virtual HRESULT STDMETHODCALLTYPE AddChartData(long ObjectID/*[in]*/, 
                                                 Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/) = 0;
  // [21] 获得图表数据
  virtual HRESULT STDMETHODCALLTYPE GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                                                 double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                                                 double ToYValue/*[in]*/, 
                                                 long* pStartIndex/*[in,out]*/, 
                                                 long MaxRowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IChartDataSet** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IChartDataSet* __fastcall GetChartData(long ObjectID/*[in]*/, 
                                                        double FromXValue/*[in]*/, 
                                                        double ToXValue/*[in]*/, 
                                                        double FromYValue/*[in]*/, 
                                                        double ToYValue/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long MaxRowCount/*[in]*/)
  {
    Ptssmolib_tlb::IChartDataSet* pVal = 0;
    OLECHECK(this->GetChartData(ObjectID, FromXValue, ToXValue, FromYValue, ToYValue, pStartIndex, 
                                MaxRowCount, (Ptssmolib_tlb::IChartDataSet**)&pVal));
    return pVal;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IChartDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {19746063-A291-4F96-8FCD-4D33A8DC9741}
// *********************************************************************//
interface IChartDataSet  : public IDispatch
{
public:
  // [1] 属性 XValue
  virtual HRESULT STDMETHODCALLTYPE get_XVal(double* pVal/*[out,retval]*/) = 0;
  // [1] 属性 XValue
  virtual HRESULT STDMETHODCALLTYPE set_XVal(double pVal/*[in]*/) = 0;
  // [2] 属性 YValue
  virtual HRESULT STDMETHODCALLTYPE get_YVal(double* pVal/*[out,retval]*/) = 0;
  // [2] 属性 YValue
  virtual HRESULT STDMETHODCALLTYPE set_YVal(double pVal/*[in]*/) = 0;
  // [3] 属性 ZValue
  virtual HRESULT STDMETHODCALLTYPE get_ZVal(double* pVal/*[out,retval]*/) = 0;
  // [3] 属性 ZValue
  virtual HRESULT STDMETHODCALLTYPE set_ZVal(double pVal/*[in]*/) = 0;
  // [4] 属性 DataBOF
  virtual HRESULT STDMETHODCALLTYPE get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] 属性 DataEOF
  virtual HRESULT STDMETHODCALLTYPE get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] 方法AddNew
  virtual HRESULT STDMETHODCALLTYPE AddNew(void) = 0;
  // [12] 方法MoveFirst
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0;
  // [13] 方法MoveLast
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0;
  // [14] 方法MovePrevious
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0;
  // [15] 方法MoveNext
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_XVal(void)
  {
    double pVal;
    OLECHECK(this->get_XVal((double*)&pVal));
    return pVal;
  }

  double __fastcall get_YVal(void)
  {
    double pVal;
    OLECHECK(this->get_YVal((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ZVal(void)
  {
    double pVal;
    OLECHECK(this->get_ZVal((double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataBOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataEOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   double          XVal = {read = get_XVal, write = set_XVal};
  __property   double          YVal = {read = get_YVal, write = set_YVal};
  __property   double          ZVal = {read = get_ZVal, write = set_ZVal};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRoles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F2F6D70-D913-478E-B2CF-2ED9D45C85A7}
// *********************************************************************//
interface IRoles  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IRole** ppObjVal/*[out,retval]*/) = 0;
  // [3] 方法ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IRole** ppObjRet/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IRole* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IRole* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IRole**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IRole* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IRole* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IRole**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRole
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6C75FA7F-A62F-4D71-B371-824BAC04BBCB}
// *********************************************************************//
interface IRole  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [2] 角色标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [3] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 添加成员
  virtual HRESULT STDMETHODCALLTYPE AddMember(BSTR UserName/*[in]*/) = 0;
  // [14] 删除成员
  virtual HRESULT STDMETHODCALLTYPE DropMember(BSTR UserName/*[in]*/) = 0;
  // [15] 列出成员
  virtual HRESULT STDMETHODCALLTYPE ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::INameList* __fastcall ListMembers(void)
  {
    Ptssmolib_tlb::INameList* ppObjRet = 0;
    OLECHECK(this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet));
    return ppObjRet;
  }


  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INameList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0DC2FA20-B26E-4625-A317-3D6E4D926F58}
// *********************************************************************//
interface INameList  : public IDispatch
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, BSTR* pRetVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] 方法FindName
  virtual HRESULT STDMETHODCALLTYPE FindName(BSTR Name/*[in]*/, long* pIndex/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    BSTR pRetVal = 0;
    OLECHECK(this->get_Item(Index, (BSTR*)&pRetVal));
    return pRetVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  long __fastcall FindName(BSTR Name/*[in]*/)
  {
    long pIndex;
    OLECHECK(this->FindName(Name, (long*)&pIndex));
    return pIndex;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUsers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {798E8869-944E-43D3-9FBA-0057C316E3A9}
// *********************************************************************//
interface IUsers  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IUser** ppObjVal/*[out,retval]*/) = 0;
  // [4] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IUser** ppObjRet/*[out,retval]*/) = 0;
  // [2] 方法Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IUser* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IUser* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IUser**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IUser* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IUser* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IUser**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D437A996-1B09-4600-B911-B9DCA680C068}
// *********************************************************************//
interface IUser  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 用户标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [4] 是否拒绝登录
  virtual HRESULT STDMETHODCALLTYPE get_DenyLogin(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [4] 是否拒绝登录
  virtual HRESULT STDMETHODCALLTYPE set_DenyLogin(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [6] 用户类型
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ptssmolib_tlb::TcUserType* pVal/*[out,retval]*/) = 0;
  // [6] 用户类型
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/) = 0;
  // [7] 密码是否过期
  virtual HRESULT STDMETHODCALLTYPE get_IsPasswordExpired(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [8] 是否是系统用户
  virtual HRESULT STDMETHODCALLTYPE get_IsSystemObject(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] 必须更改密码
  virtual HRESULT STDMETHODCALLTYPE get_MustChangePassword(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] 必须更改密码
  virtual HRESULT STDMETHODCALLTYPE set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [10] 强制实施密码策略
  virtual HRESULT STDMETHODCALLTYPE get_PasswordPolicyEnforced(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [10] 强制实施密码策略
  virtual HRESULT STDMETHODCALLTYPE set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [11] 强制密码过期
  virtual HRESULT STDMETHODCALLTYPE get_PasswordExpirationEnabled(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [11] 强制密码过期
  virtual HRESULT STDMETHODCALLTYPE set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [12] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE get_Email(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] 电子邮件
  virtual HRESULT STDMETHODCALLTYPE set_Email(BSTR pVal/*[in]*/) = 0;
  // [13] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/) = 0;
  // [20] 添加到指定的角色
  virtual HRESULT STDMETHODCALLTYPE AddToRole(BSTR RoleName/*[in]*/) = 0;
  // [22] 修改密码
  virtual HRESULT STDMETHODCALLTYPE ChangePassword(BSTR OldPassword/*[in]*/, 
                                                   BSTR NewPassword/*[in]*/) = 0;
  // [23] 拒绝权限
  virtual HRESULT STDMETHODCALLTYPE Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                         long ObjectID/*[in]*/, 
                                         VARIANT GrantGrant/*[in,opt]*/= TNoParam()) = 0;
  // [25] 授予权限
  virtual HRESULT STDMETHODCALLTYPE Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                          long ObjectID/*[in]*/, 
                                          VARIANT GrantGrant/*[in,opt]*/= TNoParam()) = 0;
  // [26] 是否是指定角色的成员
  virtual HRESULT STDMETHODCALLTYPE IsMember(BSTR RoleName/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [27] 列出成员
  virtual HRESULT STDMETHODCALLTYPE ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/) = 0;
  // [28] 列出拥有的对象
  virtual HRESULT STDMETHODCALLTYPE ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                                     Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/, 
                                                     Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/) = 0;
  // [29] 列出对象角色
  virtual HRESULT STDMETHODCALLTYPE ListObjectPermissions(long ObjectID/*[in]*/, 
                                                          Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/) = 0;
  // [30] 删除授予权限
  virtual HRESULT STDMETHODCALLTYPE Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                           long ObjectID/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DenyLogin(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DenyLogin((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcUserType __fastcall get_Type(void)
  {
    Ptssmolib_tlb::TcUserType pVal;
    OLECHECK(this->get_Type((Ptssmolib_tlb::TcUserType*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsPasswordExpired(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsPasswordExpired((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsSystemObject(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsSystemObject((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MustChangePassword(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MustChangePassword((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_PasswordPolicyEnforced(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_PasswordPolicyEnforced((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_PasswordExpirationEnabled(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_PasswordExpirationEnabled((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Email(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Email((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
    OLECHECK(this->get_ExtendedProperties(&pRetVal));
    return pRetVal;
  }

  VARIANT_BOOL __fastcall IsMember(BSTR RoleName/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->IsMember(RoleName, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::INameList* __fastcall ListMembers(void)
  {
    Ptssmolib_tlb::INameList* ppObjRet = 0;
    OLECHECK(this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet));
    return ppObjRet;
  }

  Ptssmolib_tlb::IObjectList* __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                                          Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjRet = 0;
    OLECHECK(this->ListOwnedObjects(ObjectTypes, SortBy, (Ptssmolib_tlb::IObjectList**)&ppObjRet));
    return ppObjRet;
  }

  Ptssmolib_tlb::IObjectList* __fastcall ListObjectPermissions(long ObjectID/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjRet = 0;
    OLECHECK(this->ListObjectPermissions(ObjectID, (Ptssmolib_tlb::IObjectList**)&ppObjRet));
    return ppObjRet;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   VARIANT_BOOL    DenyLogin = {read = get_DenyLogin, write = set_DenyLogin};
  __property   Ptssmolib_tlb::TcUserType Type = {read = get_Type, write = set_Type};
  __property   VARIANT_BOOL    IsPasswordExpired = {read = get_IsPasswordExpired};
  __property   VARIANT_BOOL    IsSystemObject = {read = get_IsSystemObject};
  __property   VARIANT_BOOL    MustChangePassword = {read = get_MustChangePassword, write = set_MustChangePassword};
  __property   VARIANT_BOOL    PasswordPolicyEnforced = {read = get_PasswordPolicyEnforced, write = set_PasswordPolicyEnforced};
  __property   VARIANT_BOOL    PasswordExpirationEnabled = {read = get_PasswordExpirationEnabled, write = set_PasswordExpirationEnabled};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {92CF7599-E327-440D-B1D3-03942AFF591A}
// *********************************************************************//
interface IProject  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [4] 属性 PositionPeriod
  virtual HRESULT STDMETHODCALLTYPE get_PositionPeriod(long* pVal/*[out,retval]*/) = 0;
  // [4] 属性 PositionPeriod
  virtual HRESULT STDMETHODCALLTYPE set_PositionPeriod(long pVal/*[in]*/) = 0;
  // [5] 属性 CompleteDegree
  virtual HRESULT STDMETHODCALLTYPE get_CompleteDegree(long* pVal/*[out,retval]*/) = 0;
  // [5] 属性 CompleteDegree
  virtual HRESULT STDMETHODCALLTYPE set_CompleteDegree(long pVal/*[in]*/) = 0;
  // [6] 属性 CreateDate
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 属性 FinishDate
  virtual HRESULT STDMETHODCALLTYPE get_FinishDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 属性 FinishDate
  virtual HRESULT STDMETHODCALLTYPE set_FinishDate(BSTR pVal/*[in]*/) = 0;
  // [8] 属性 StartDate
  virtual HRESULT STDMETHODCALLTYPE get_StartDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 属性 StartDate
  virtual HRESULT STDMETHODCALLTYPE set_StartDate(BSTR pVal/*[in]*/) = 0;
  // [9] 属性 TradeManagerName
  virtual HRESULT STDMETHODCALLTYPE get_TradeManagerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 属性 TradeManagerName
  virtual HRESULT STDMETHODCALLTYPE set_TradeManagerName(BSTR pVal/*[in]*/) = 0;
  // [10] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE get_TradeManagerIdea(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE set_TradeManagerIdea(BSTR pVal/*[in]*/) = 0;
  // [11] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE get_TradeManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [11] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [12] 属性 RiskManagerName
  virtual HRESULT STDMETHODCALLTYPE get_RiskManagerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [12] 属性 RiskManagerName
  virtual HRESULT STDMETHODCALLTYPE set_RiskManagerName(BSTR pVal/*[in]*/) = 0;
  // [13] 属性 RiskManagerIdea
  virtual HRESULT STDMETHODCALLTYPE get_RiskManagerIdea(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] 属性 RiskManagerIdea
  virtual HRESULT STDMETHODCALLTYPE set_RiskManagerIdea(BSTR pVal/*[in]*/) = 0;
  // [14] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE get_RiskManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [14] 属性 TradeManagerIdea
  virtual HRESULT STDMETHODCALLTYPE set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [15] 属性 FinishDate
  virtual HRESULT STDMETHODCALLTYPE get_TradeManagerConfirmedDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [16] 属性 FinishDate
  virtual HRESULT STDMETHODCALLTYPE get_RiskManagerConfirmedDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [17] 属性 Priority
  virtual HRESULT STDMETHODCALLTYPE get_Priority(long* pVal/*[out,retval]*/) = 0;
  // [17] 属性 Priority
  virtual HRESULT STDMETHODCALLTYPE set_Priority(long pVal/*[in]*/) = 0;
  // [18] 属性 Status
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcProjectStatus* pVal/*[out,retval]*/) = 0;
  // [19] 属性 ExtendedProperties
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [20] 方法AddHedge
  virtual HRESULT STDMETHODCALLTYPE AddHedge(long ID/*[in]*/) = 0;
  // [21] 方法AddOrder
  virtual HRESULT STDMETHODCALLTYPE AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/) = 0;
  // [22] 方法GetHedges
  virtual HRESULT STDMETHODCALLTYPE GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IHedges** pRetVal/*[out,retval]*/) = 0;
  // [23] 方法GetOrders
  virtual HRESULT STDMETHODCALLTYPE GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** ppRetVal/*[out,retval]*/) = 0;
  // [24] 方法GetOrders
  virtual HRESULT STDMETHODCALLTYPE Cancel(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_PositionPeriod(void)
  {
    long pVal;
    OLECHECK(this->get_PositionPeriod((long*)&pVal));
    return pVal;
  }

  long __fastcall get_CompleteDegree(void)
  {
    long pVal;
    OLECHECK(this->get_CompleteDegree((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_FinishDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_FinishDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_StartDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_StartDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradeManagerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradeManagerName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradeManagerIdea(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradeManagerIdea((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_TradeManagerConfirmed(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_TradeManagerConfirmed((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RiskManagerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RiskManagerName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RiskManagerIdea(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RiskManagerIdea((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_RiskManagerConfirmed(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_RiskManagerConfirmed((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradeManagerConfirmedDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradeManagerConfirmedDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_RiskManagerConfirmedDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_RiskManagerConfirmedDate((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_Priority(void)
  {
    long pVal;
    OLECHECK(this->get_Priority((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcProjectStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcProjectStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcProjectStatus*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IHedges* __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IHedges* pRetVal = 0;
    OLECHECK(this->GetHedges(pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&pRetVal));
    return pRetVal;
  }

  Ptssmolib_tlb::IOrders* __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IOrders* ppRetVal = 0;
    OLECHECK(this->GetOrders(pStartIndex, RowCount, (Ptssmolib_tlb::IOrders**)&ppRetVal));
    return ppRetVal;
  }


  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            PositionPeriod = {read = get_PositionPeriod, write = set_PositionPeriod};
  __property   long            CompleteDegree = {read = get_CompleteDegree, write = set_CompleteDegree};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            FinishDate = {read = get_FinishDate, write = set_FinishDate};
  __property   BSTR            StartDate = {read = get_StartDate, write = set_StartDate};
  __property   BSTR            TradeManagerName = {read = get_TradeManagerName, write = set_TradeManagerName};
  __property   BSTR            TradeManagerIdea = {read = get_TradeManagerIdea, write = set_TradeManagerIdea};
  __property   VARIANT_BOOL    TradeManagerConfirmed = {read = get_TradeManagerConfirmed, write = set_TradeManagerConfirmed};
  __property   BSTR            RiskManagerName = {read = get_RiskManagerName, write = set_RiskManagerName};
  __property   BSTR            RiskManagerIdea = {read = get_RiskManagerIdea, write = set_RiskManagerIdea};
  __property   VARIANT_BOOL    RiskManagerConfirmed = {read = get_RiskManagerConfirmed, write = set_RiskManagerConfirmed};
  __property   BSTR            TradeManagerConfirmedDate = {read = get_TradeManagerConfirmedDate};
  __property   BSTR            RiskManagerConfirmedDate = {read = get_RiskManagerConfirmedDate};
  __property   long            Priority = {read = get_Priority, write = set_Priority};
  __property   Ptssmolib_tlb::TcProjectStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPTSSession
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26A19C68-9CFB-4885-992E-B182B51AB593}
// *********************************************************************//
interface IPTSSession  : public IDispatch
{
public:
  // [1] ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 登录方式
  virtual HRESULT STDMETHODCALLTYPE get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/) = 0;
  // [3] 域名
  virtual HRESULT STDMETHODCALLTYPE get_DomainName(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 登录用户名
  virtual HRESULT STDMETHODCALLTYPE get_UserName(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 身份验证级别
  virtual HRESULT STDMETHODCALLTYPE get_AuthnLevel(long* pVal/*[out,retval]*/) = 0;
  // [7] 模拟级别
  virtual HRESULT STDMETHODCALLTYPE get_ImpLevel(long* pVal/*[out,retval]*/) = 0;
  // [8] 是否登录
  virtual HRESULT STDMETHODCALLTYPE get_IsLogin(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] 登录用户名
  virtual HRESULT STDMETHODCALLTYPE get_ServerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] 登录
  virtual HRESULT STDMETHODCALLTYPE Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                          BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, 
                                          BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                                          long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/) = 0;
  // [14] 注销
  virtual HRESULT STDMETHODCALLTYPE Logout(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_ID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ID((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void)
  {
    Ptssmolib_tlb::TcLoginType pVal;
    OLECHECK(this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DomainName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DomainName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AuthnLevel(void)
  {
    long pVal;
    OLECHECK(this->get_AuthnLevel((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ImpLevel(void)
  {
    long pVal;
    OLECHECK(this->get_ImpLevel((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsLogin(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsLogin((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ServerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ServerName((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogin = {read = get_IsLogin};
  __property   BSTR            ServerName = {read = get_ServerName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INewStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F79527A-DDFC-4F56-A899-CB001A488CFD}
// *********************************************************************//
interface INewStockSet  : public IDispatch
{
public:
  // [1] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_SubsCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_SecID(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ExchID(long* pVal/*[out,retval]*/) = 0;
  // [4] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_IssuePrice(double* pVal/*[out,retval]*/) = 0;
  // [6] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_NetIssueQty(long* pVal/*[out,retval]*/) = 0;
  // [7] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_IssueQty(long* pVal/*[out,retval]*/) = 0;
  // [8] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_SubsStartDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_SubsEndDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_UnFreezeDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Status(short* pVal/*[out,retval]*/) = 0;
  // [20] 属性 BOF
  virtual HRESULT STDMETHODCALLTYPE get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [21] 属性 EOF
  virtual HRESULT STDMETHODCALLTYPE get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [22] 方法 MoveFirst
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0;
  // [23] 方法 MoveLast
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0;
  // [24] 方法 MovePrevious
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0;
  // [25] 方法 MoveNext
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SubsCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SubsCode((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SecID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SecID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ExchID(void)
  {
    long pVal;
    OLECHECK(this->get_ExchID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_IssuePrice(void)
  {
    double pVal;
    OLECHECK(this->get_IssuePrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_NetIssueQty(void)
  {
    long pVal;
    OLECHECK(this->get_NetIssueQty((long*)&pVal));
    return pVal;
  }

  long __fastcall get_IssueQty(void)
  {
    long pVal;
    OLECHECK(this->get_IssueQty((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SubsStartDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SubsStartDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SubsEndDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SubsEndDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UnFreezeDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UnFreezeDate((BSTR*)&pVal));
    return pVal;
  }

  short __fastcall get_Status(void)
  {
    short pVal;
    OLECHECK(this->get_Status((short*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataBOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataEOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            SubsCode = {read = get_SubsCode};
  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   BSTR            Name = {read = get_Name};
  __property   double          IssuePrice = {read = get_IssuePrice};
  __property   long            NetIssueQty = {read = get_NetIssueQty};
  __property   long            IssueQty = {read = get_IssueQty};
  __property   BSTR            SubsStartDate = {read = get_SubsStartDate};
  __property   BSTR            SubsEndDate = {read = get_SubsEndDate};
  __property   BSTR            UnFreezeDate = {read = get_UnFreezeDate};
  __property   short           Status = {read = get_Status};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INotTradingStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {074E7DCF-AA92-4BA9-9EDB-4DFB79C0C201}
// *********************************************************************//
interface INotTradingStockSet  : public IDispatch
{
public:
  // [2] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_SecID(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ExchID(long* pVal/*[out,retval]*/) = 0;
  // [4] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Duration(long* pVal/*[out,retval]*/) = 0;
  // [5] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Date(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Time(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_Reason(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] 属性 BOF
  virtual HRESULT STDMETHODCALLTYPE get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [12] 属性 EOF
  virtual HRESULT STDMETHODCALLTYPE get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [13] 方法 MoveFirst
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0;
  // [14] 方法 MoveLast
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0;
  // [15] 方法 MovePrevious
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0;
  // [16] 方法 MoveNext
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SecID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SecID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ExchID(void)
  {
    long pVal;
    OLECHECK(this->get_ExchID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Duration(void)
  {
    long pVal;
    OLECHECK(this->get_Duration((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Date(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Date((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Time(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Time((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Reason(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Reason((BSTR*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataBOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataEOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }


  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            Date = {read = get_Date};
  __property   BSTR            Time = {read = get_Time};
  __property   BSTR            Reason = {read = get_Reason};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQuoteDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BED76FDA-3A4F-41B4-81C6-43BBDF224E4D}
// *********************************************************************//
interface IQuoteDetail  : public IDispatch
{
public:
  // [1] 价格层次
  virtual HRESULT STDMETHODCALLTYPE get_Level(long* pVal/*[out,retval]*/) = 0;
  // [2] 最好卖方数量
  virtual HRESULT STDMETHODCALLTYPE get_AskQty(long* pVal/*[out,retval]*/) = 0;
  // [3] 最好卖方价格
  virtual HRESULT STDMETHODCALLTYPE get_AskPrice(double* pVal/*[out,retval]*/) = 0;
  // [4] 最好买方数量
  virtual HRESULT STDMETHODCALLTYPE get_BidQty(long* pVal/*[out,retval]*/) = 0;
  // [5] 最好买方价格
  virtual HRESULT STDMETHODCALLTYPE get_BidPrice(double* pVal/*[out,retval]*/) = 0;
  // [6] 卖方委托数量
  virtual HRESULT STDMETHODCALLTYPE get_AskOrderNum(long* pVal/*[out,retval]*/) = 0;
  // [7] 买方委托数量
  virtual HRESULT STDMETHODCALLTYPE get_BidOrderNum(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Level(void)
  {
    long pVal;
    OLECHECK(this->get_Level((long*)&pVal));
    return pVal;
  }

  long __fastcall get_AskQty(void)
  {
    long pVal;
    OLECHECK(this->get_AskQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_AskPrice(void)
  {
    double pVal;
    OLECHECK(this->get_AskPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_BidQty(void)
  {
    long pVal;
    OLECHECK(this->get_BidQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_BidPrice(void)
  {
    double pVal;
    OLECHECK(this->get_BidPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_AskOrderNum(void)
  {
    long pVal;
    OLECHECK(this->get_AskOrderNum((long*)&pVal));
    return pVal;
  }

  long __fastcall get_BidOrderNum(void)
  {
    long pVal;
    OLECHECK(this->get_BidOrderNum((long*)&pVal));
    return pVal;
  }


  __property   long            Level = {read = get_Level};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   long            AskOrderNum = {read = get_AskOrderNum};
  __property   long            BidOrderNum = {read = get_BidOrderNum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ISubscriberEvents
// Flags:     (4096) Dispatchable
// GUID:      {AD3BD7A0-CD78-4280-B00F-F186F6B0FF53}
// *********************************************************************//
interface _ISubscriberEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall OnEvent(LPDISPATCH pEventHead/*[in]*/, LPDISPATCH pEventData/*[in]*/)
  {
    _TDispID _dispid(/* OnEvent */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = pEventHead /*[VT_DISPATCH:0]*/;
    _args[2] = pEventData /*[VT_DISPATCH:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall OnStatusChanged(Ptssmolib_tlb::TcSubscribeStatus Status/*[in]*/)
  {
    _TDispID _dispid(/* OnStatusChanged */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall OnError(BSTR ErrMsg/*[in]*/)
  {
    _TDispID _dispid(/* OnError */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = ErrMsg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ISubscriber2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99DB1DEB-7470-4647-9645-560C888EFB06}
// *********************************************************************//
interface ISubscriber2  : public IDispatch
{
public:
  // [1] 事件主题
  virtual HRESULT STDMETHODCALLTYPE get_EventTopic(Ptssmolib_tlb::IEventTopic** pVal/*[out,retval]*/) = 0;
  // [2] 订阅
  virtual HRESULT STDMETHODCALLTYPE Subscribe2(BSTR FilterString/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IEventTopicPtr __fastcall get_EventTopic(void)
  {
    Ptssmolib_tlb::IEventTopicPtr pVal;
    OLECHECK(this->get_EventTopic(&pVal));
    return pVal;
  }


  __property   Ptssmolib_tlb::IEventTopicPtr EventTopic = {read = get_EventTopic};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExchange2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {ADC2CEF5-C488-44CE-94B4-3634A8C0466E}
// *********************************************************************//
interface IExchange2  : public IDispatch
{
public:
  // [1] 获得证券行情快照
  virtual HRESULT STDMETHODCALLTYPE GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/) = 0;
  // [2] 获得证券当前行情
  virtual HRESULT STDMETHODCALLTYPE GetNowQuote(BSTR InstID/*[in]*/, 
                                                Ptssmolib_tlb::IQuoteDataSet** ppQuote/*[out,retval]*/) = 0;
  // [3] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                                      BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/, 
                                                      Ptssmolib_tlb::IQuoteDataSet** ppTickData/*[out,retval]*/) = 0;
  // [4] 获得历史行情
  virtual HRESULT STDMETHODCALLTYPE GetHistoryQuotes(BSTR InstID/*[in]*/, BSTR FormDate/*[in]*/, 
                                                     BSTR ToDate/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/, 
                                                     Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/) = 0;
  // [5] 获得新股信息
  virtual HRESULT STDMETHODCALLTYPE GetNewStocks(Ptssmolib_tlb::INewStockSet** ppData/*[out,retval]*/) = 0;
  // [6] 获得停牌股票信息
  virtual HRESULT STDMETHODCALLTYPE GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IQuoteDataSet* ppQuotes = 0;
    OLECHECK(this->GetQuoteSnapshot(pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuotes));
    return ppQuotes;
  }

  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetNowQuote(BSTR InstID/*[in]*/)
  {
    Ptssmolib_tlb::IQuoteDataSet* ppQuote = 0;
    OLECHECK(this->GetNowQuote(InstID, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuote));
    return ppQuote;
  }

  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                             BSTR TradingDay/*[in]*/, 
                                                             BSTR FormTime/*[in]*/, 
                                                             BSTR ToTime/*[in]*/, 
                                                             long* pStartIndex/*[in,out]*/, 
                                                             long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IQuoteDataSet* ppTickData = 0;
    OLECHECK(this->GetQuoteTickDatas(InstID, TradingDay, FormTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppTickData));
    return ppTickData;
  }

  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetHistoryQuotes(BSTR InstID/*[in]*/, 
                                                            BSTR FormDate/*[in]*/, 
                                                            BSTR ToDate/*[in]*/, 
                                                            long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IQuoteDataSet* ppQuotes = 0;
    OLECHECK(this->GetHistoryQuotes(InstID, FormDate, ToDate, pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuotes));
    return ppQuotes;
  }

  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void)
  {
    Ptssmolib_tlb::INewStockSet* ppData = 0;
    OLECHECK(this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&ppData));
    return ppData;
  }

  Ptssmolib_tlb::INotTradingStockSet* __fastcall GetNotTradingStocks(void)
  {
    Ptssmolib_tlb::INotTradingStockSet* ppData = 0;
    OLECHECK(this->GetNotTradingStocks((Ptssmolib_tlb::INotTradingStockSet**)&ppData));
    return ppData;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQuoteDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4875FF1B-8357-4874-836F-C125B482F611}
// *********************************************************************//
interface IQuoteDataSet  : public IDispatch
{
public:
  // [1] 产品名称
  virtual HRESULT STDMETHODCALLTYPE get_Symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [4] 最后一笔交易数量
  virtual HRESULT STDMETHODCALLTYPE get_LastQty(long* pVal/*[out,retval]*/) = 0;
  // [5] 最后一笔交易价格
  virtual HRESULT STDMETHODCALLTYPE get_LastPrice(double* pVal/*[out,retval]*/) = 0;
  // [6] 最后一笔交易时间
  virtual HRESULT STDMETHODCALLTYPE get_LastTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 前收盘价
  virtual HRESULT STDMETHODCALLTYPE get_PreClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [8] 收盘价格
  virtual HRESULT STDMETHODCALLTYPE get_ClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [9] 开盘价
  virtual HRESULT STDMETHODCALLTYPE get_OpenPrice(double* pVal/*[out,retval]*/) = 0;
  // [10] 结算价
  virtual HRESULT STDMETHODCALLTYPE get_SettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [11] 最低价
  virtual HRESULT STDMETHODCALLTYPE get_LowPrice(double* pVal/*[out,retval]*/) = 0;
  // [12] 最高价
  virtual HRESULT STDMETHODCALLTYPE get_HighPrice(double* pVal/*[out,retval]*/) = 0;
  // [13] 交易量
  virtual HRESULT STDMETHODCALLTYPE get_Turnover(double* pVal/*[out,retval]*/) = 0;
  // [14] 日成交量
  virtual HRESULT STDMETHODCALLTYPE get_DayQty(long* pVal/*[out,retval]*/) = 0;
  // [15] 在固定竞价时段内的执行价格
  virtual HRESULT STDMETHODCALLTYPE get_FixPrice(double* pVal/*[out,retval]*/) = 0;
  // [16] 交易日
  virtual HRESULT STDMETHODCALLTYPE get_TradingDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [17] 最好卖方数量
  virtual HRESULT STDMETHODCALLTYPE get_AskQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [18] 最好卖方价格
  virtual HRESULT STDMETHODCALLTYPE get_AskPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/) = 0;
  // [19] 卖方委托数量
  virtual HRESULT STDMETHODCALLTYPE get_AskOrderNum(VARIANT Index/*[in]*/, 
                                                    long* pVal/*[out,retval]*/) = 0;
  // [20] 最好买方数量
  virtual HRESULT STDMETHODCALLTYPE get_BidQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [21] 最好买方价格
  virtual HRESULT STDMETHODCALLTYPE get_BidPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/) = 0;
  // [22] 买方委托数量
  virtual HRESULT STDMETHODCALLTYPE get_BidOrderNum(VARIANT Index/*[in]*/, 
                                                    long* pVal/*[out,retval]*/) = 0;
  // [23] 记录数
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [24] 数据
  virtual HRESULT STDMETHODCALLTYPE get_Data(VARIANT* pVal/*[out,retval]*/) = 0;
  // [25] 读取器是否定位在数据的开头
  virtual HRESULT STDMETHODCALLTYPE get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [26] 读取器是否定位在数据的结尾
  virtual HRESULT STDMETHODCALLTYPE get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [27] 数据索引
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* pVal/*[out,retval]*/) = 0;
  // [35] 移动到集合的第一个元素
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0;
  // [36] 移动到集合的最后一个元素
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0;
  // [37] 前进到集合的上一个元素
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0;
  // [38] 前进到集合的下一个元素
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  long __fastcall get_LastQty(void)
  {
    long pVal;
    OLECHECK(this->get_LastQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_LastPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LastPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LastTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LastTime((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_PreClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_PreClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_ClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_OpenPrice(void)
  {
    double pVal;
    OLECHECK(this->get_OpenPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_SettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_SettlPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_LowPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LowPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_HighPrice(void)
  {
    double pVal;
    OLECHECK(this->get_HighPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Turnover(void)
  {
    double pVal;
    OLECHECK(this->get_Turnover((double*)&pVal));
    return pVal;
  }

  long __fastcall get_DayQty(void)
  {
    long pVal;
    OLECHECK(this->get_DayQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_FixPrice(void)
  {
    double pVal;
    OLECHECK(this->get_FixPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradingDay((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AskQty(VARIANT Index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_AskQty(Index, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_AskPrice(VARIANT Index/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_AskPrice(Index, (double*)&pVal));
    return pVal;
  }

  long __fastcall get_AskOrderNum(VARIANT Index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_AskOrderNum(Index, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_BidQty(VARIANT Index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_BidQty(Index, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_BidPrice(VARIANT Index/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_BidPrice(Index, (double*)&pVal));
    return pVal;
  }

  long __fastcall get_BidOrderNum(VARIANT Index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_BidOrderNum(Index, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_Data(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_Data((VARIANT*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataBOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataEOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_Index(void)
  {
    long pVal;
    OLECHECK(this->get_Index((long*)&pVal));
    return pVal;
  }


  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            Count = {read = get_Count};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
  __property   long            Index = {read = get_Index};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQueryCondition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D74D5CE8-1B37-4E54-951E-03649A222646}
// *********************************************************************//
interface IQueryCondition  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Property(BSTR* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Property(BSTR pVal/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Operator(Ptssmolib_tlb::TcOperatorType* pVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_LeftValue(VARIANT* pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_LeftValue(VARIANT pVal/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_RightValue(VARIANT* pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_RightValue(VARIANT pVal/*[in]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Property(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Property((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcOperatorType __fastcall get_Operator(void)
  {
    Ptssmolib_tlb::TcOperatorType pVal;
    OLECHECK(this->get_Operator((Ptssmolib_tlb::TcOperatorType*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_LeftValue(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_LeftValue((VARIANT*)&pVal));
    return pVal;
  }

  VARIANT __fastcall get_RightValue(void)
  {
    VARIANT pVal;
    OLECHECK(this->get_RightValue((VARIANT*)&pVal));
    return pVal;
  }


  __property   BSTR            Property = {read = get_Property, write = set_Property};
  __property   Ptssmolib_tlb::TcOperatorType Operator = {read = get_Operator, write = set_Operator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQueryConditions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C7E3C0C-8920-463F-8A40-3556A163ED4D}
// *********************************************************************//
interface IQueryConditions  : public IDispatch
{
public:
  // [-4] IEnumVariant object
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0;
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/) = 0;
  // [1] Number of Items
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [2] Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/) = 0;
  // [3] DeleteAll
  virtual HRESULT STDMETHODCALLTYPE DeleteAll(void) = 0;
  // [4] RemoveAt
  virtual HRESULT STDMETHODCALLTYPE RemoveAt(VARIANT Index/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  Ptssmolib_tlb::IQueryCondition* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IQueryCondition* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IQueryCondition**)&ppObjVal));
    return ppObjVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IQueryCondition* __fastcall Add(void)
  {
    Ptssmolib_tlb::IQueryCondition* ppObjVal = 0;
    OLECHECK(this->Add((Ptssmolib_tlb::IQueryCondition**)&ppObjVal));
    return ppObjVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPermission
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F380C5C-47AA-45CD-92E7-BBF2045ACC7C}
// *********************************************************************//
interface IPermission  : public IDispatch
{
public:
  // [1] 属性 Grantee
  virtual HRESULT STDMETHODCALLTYPE get_Grantee(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 属性 GranteeType
  virtual HRESULT STDMETHODCALLTYPE get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Grantor
  virtual HRESULT STDMETHODCALLTYPE get_Grantor(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 属性 GrantorType
  virtual HRESULT STDMETHODCALLTYPE get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/) = 0;
  // [5] 属性 ObjectType
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/) = 0;
  // [6] 属性 ObjectID
  virtual HRESULT STDMETHODCALLTYPE get_ObjectID(long* pVal/*[out,retval]*/) = 0;
  // [7] 属性 ObjectName
  virtual HRESULT STDMETHODCALLTYPE get_ObjectName(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 属性 PermissionState
  virtual HRESULT STDMETHODCALLTYPE get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/) = 0;
  // [9] 属性 PrivilegeType
  virtual HRESULT STDMETHODCALLTYPE get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/) = 0;
  // [10] 属性 PrivilegeName
  virtual HRESULT STDMETHODCALLTYPE get_PrivilegeName(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Grantee(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantee((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void)
  {
    Ptssmolib_tlb::TcPrincipalType pVal;
    OLECHECK(this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Grantor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantor((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void)
  {
    Ptssmolib_tlb::TcPrincipalType pVal;
    OLECHECK(this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void)
  {
    Ptssmolib_tlb::TcObjectType pVal;
    OLECHECK(this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal));
    return pVal;
  }

  long __fastcall get_ObjectID(void)
  {
    long pVal;
    OLECHECK(this->get_ObjectID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ObjectName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ObjectName((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void)
  {
    Ptssmolib_tlb::TcPermissionState pVal;
    OLECHECK(this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void)
  {
    Ptssmolib_tlb::TcPrivilegeType pVal;
    OLECHECK(this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PrivilegeName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PrivilegeName((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {834DA75C-BA20-490C-8ED6-4C074FE6850B}
// *********************************************************************//
interface IServers  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/) = 0;
  // [2] 方法Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IServer* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IServer* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IServer**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IServer* __fastcall Add(void)
  {
    Ptssmolib_tlb::IServer* ppObjVal = 0;
    OLECHECK(this->Add((Ptssmolib_tlb::IServer**)&ppObjVal));
    return ppObjVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13C3CC10-4B55-4509-829B-92D846C59639}
// *********************************************************************//
interface IServer  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [2] 登录方式
  virtual HRESULT STDMETHODCALLTYPE get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/) = 0;
  // [3] 域名
  virtual HRESULT STDMETHODCALLTYPE get_DomainName(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 登录用户名
  virtual HRESULT STDMETHODCALLTYPE get_UserName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 登录密码
  virtual HRESULT STDMETHODCALLTYPE get_Password(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 身份验证级别
  virtual HRESULT STDMETHODCALLTYPE get_AuthnLevel(long* pVal/*[out,retval]*/) = 0;
  // [7] 模拟级别
  virtual HRESULT STDMETHODCALLTYPE get_ImpLevel(long* pVal/*[out,retval]*/) = 0;
  // [8] 是否登录
  virtual HRESULT STDMETHODCALLTYPE get_IsLogined(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [9] 状态
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcServerStatus* pVal/*[out,retval]*/) = 0;
  // [10] 主版本号
  virtual HRESULT STDMETHODCALLTYPE get_VersionMajor(long* pVal/*[out,retval]*/) = 0;
  // [11] 次版本号
  virtual HRESULT STDMETHODCALLTYPE get_VersionMinor(long* pVal/*[out,retval]*/) = 0;
  // [12] 版本
  virtual HRESULT STDMETHODCALLTYPE get_VersionString(BSTR* pVal/*[out,retval]*/) = 0;
  // [13] 上次初始化日期
  virtual HRESULT STDMETHODCALLTYPE get_InitializeDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [14] 上次备份日期
  virtual HRESULT STDMETHODCALLTYPE get_BackupDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [20] 客户
  virtual HRESULT STDMETHODCALLTYPE get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/) = 0;
  // [21] 营业部
  virtual HRESULT STDMETHODCALLTYPE get_Brokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/) = 0;
  // [22] 事件主题
  virtual HRESULT STDMETHODCALLTYPE get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/) = 0;
  // [23] 交易所
  virtual HRESULT STDMETHODCALLTYPE get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/) = 0;
  // [24] 任务
  virtual HRESULT STDMETHODCALLTYPE get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/) = 0;
  // [25] 角色
  virtual HRESULT STDMETHODCALLTYPE get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/) = 0;
  // [26] 用户
  virtual HRESULT STDMETHODCALLTYPE get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/) = 0;
  // [27] 产品组合
  virtual HRESULT STDMETHODCALLTYPE get_Portfolios(Ptssmolib_tlb::IPortfolios** pVal/*[out,retval]*/) = 0;
  // [28] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [29] 图表
  virtual HRESULT STDMETHODCALLTYPE get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/) = 0;
  // [30] 图表
  virtual HRESULT STDMETHODCALLTYPE get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** pVal/*[out,retval]*/) = 0;
  // [31] 修改密码
  virtual HRESULT STDMETHODCALLTYPE ChangePassword(BSTR OldPassword/*[in]*/, 
                                                   BSTR NewPassword/*[in]*/) = 0;
  // [32] 汇总数据
  virtual HRESULT STDMETHODCALLTYPE CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/) = 0;
  // [33] 检查账户
  virtual HRESULT STDMETHODCALLTYPE CheckAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/) = 0;
  // [35] 获得对象
  virtual HRESULT STDMETHODCALLTYPE GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                              VARIANT ObjectID/*[in]*/, 
                                              Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/) = 0;
  // [36] 初始化系统
  virtual HRESULT STDMETHODCALLTYPE Initialize(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/) = 0;
  // [38] 登录
  virtual HRESULT STDMETHODCALLTYPE Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                          BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, 
                                          BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                                          long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/) = 0;
  // [39] 注销
  virtual HRESULT STDMETHODCALLTYPE Logout(void) = 0;
  // [40] 提交订单
  virtual HRESULT STDMETHODCALLTYPE CommitOrders(long AccountID/*[in]*/, 
                                                 Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                                 Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                                 long* pErrorIndex/*[out,retval]*/) = 0;
  // [41] 查询对象
  virtual HRESULT STDMETHODCALLTYPE QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                 BSTR Conditions/*[in]*/, 
                                                 long* pStartIndex/*[in,out]*/, 
                                                 long RowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/) = 0;
  // [42] 运行
  virtual HRESULT STDMETHODCALLTYPE Run(void) = 0;
  // [43] 停止
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [44] 暂停
  virtual HRESULT STDMETHODCALLTYPE Pause(void) = 0;
  // [45] 同步账户
  virtual HRESULT STDMETHODCALLTYPE SynchAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/) = 0;
  // [47] 方法GetOnlineUserName
  virtual HRESULT STDMETHODCALLTYPE GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  // [48] 方法GetAllUserNames
  virtual HRESULT STDMETHODCALLTYPE GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  // [49] 方法AddProject
  virtual HRESULT STDMETHODCALLTYPE AddProject(Ptssmolib_tlb::IProject* p/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/) = 0; // [50]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void)
  {
    Ptssmolib_tlb::TcLoginType pVal;
    OLECHECK(this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DomainName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DomainName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Password(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Password((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AuthnLevel(void)
  {
    long pVal;
    OLECHECK(this->get_AuthnLevel((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ImpLevel(void)
  {
    long pVal;
    OLECHECK(this->get_ImpLevel((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsLogined(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsLogined((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcServerStatus __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcServerStatus pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcServerStatus*)&pVal));
    return pVal;
  }

  long __fastcall get_VersionMajor(void)
  {
    long pVal;
    OLECHECK(this->get_VersionMajor((long*)&pVal));
    return pVal;
  }

  long __fastcall get_VersionMinor(void)
  {
    long pVal;
    OLECHECK(this->get_VersionMinor((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_VersionString(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_VersionString((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InitializeDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InitializeDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_BackupDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_BackupDate((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void)
  {
    Ptssmolib_tlb::ICustomersPtr pVal;
    OLECHECK(this->get_Customers(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IBrokersPtr __fastcall get_Brokers(void)
  {
    Ptssmolib_tlb::IBrokersPtr pVal;
    OLECHECK(this->get_Brokers(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void)
  {
    Ptssmolib_tlb::IEventTopicsPtr pVal;
    OLECHECK(this->get_EventTopics(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void)
  {
    Ptssmolib_tlb::IExchangesPtr pVal;
    OLECHECK(this->get_Exchanges(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void)
  {
    Ptssmolib_tlb::ITasksPtr pVal;
    OLECHECK(this->get_Tasks(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void)
  {
    Ptssmolib_tlb::IRolesPtr pVal;
    OLECHECK(this->get_Roles(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void)
  {
    Ptssmolib_tlb::IUsersPtr pVal;
    OLECHECK(this->get_Users(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IPortfoliosPtr __fastcall get_Portfolios(void)
  {
    Ptssmolib_tlb::IPortfoliosPtr pVal;
    OLECHECK(this->get_Portfolios(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void)
  {
    Ptssmolib_tlb::IChartsPtr pVal;
    OLECHECK(this->get_Charts(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void)
  {
    Ptssmolib_tlb::IBrokerAccountsPtr pVal;
    OLECHECK(this->get_BrokerAccounts(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall CheckAccounts(void)
  {
    Ptssmolib_tlb::IObjectList* ppExecReoprts = 0;
    OLECHECK(this->CheckAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
    return ppExecReoprts;
  }

  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/)
  {
    Ptssmolib_tlb::IObjectBase* ppObject = 0;
    OLECHECK(this->GetObject(Type, ObjectID, (Ptssmolib_tlb::IObjectBase**)&ppObject));
    return ppObject;
  }

  Ptssmolib_tlb::IObjectList* __fastcall Initialize(void)
  {
    Ptssmolib_tlb::IObjectList* ppExecReoprts = 0;
    OLECHECK(this->Initialize((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
    return ppExecReoprts;
  }

  long __fastcall CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                               Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
  {
    long pErrorIndex;
    OLECHECK(this->CommitOrders(AccountID, Mode, pOrders, (long*)&pErrorIndex));
    return pErrorIndex;
  }

  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjects = 0;
    OLECHECK(this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects));
    return ppObjects;
  }

  Ptssmolib_tlb::IObjectList* __fastcall SynchAccounts(void)
  {
    Ptssmolib_tlb::IObjectList* ppExecReoprts = 0;
    OLECHECK(this->SynchAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
    return ppExecReoprts;
  }

  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void)
  {
    Ptssmolib_tlb::INewStockSet* pVal = 0;
    OLECHECK(this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&pVal));
    return pVal;
  }


  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Password = {read = get_Password};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogined = {read = get_IsLogined};
  __property   Ptssmolib_tlb::TcServerStatus Status = {read = get_Status};
  __property   long            VersionMajor = {read = get_VersionMajor};
  __property   long            VersionMinor = {read = get_VersionMinor};
  __property   BSTR            VersionString = {read = get_VersionString};
  __property   BSTR            InitializeDate = {read = get_InitializeDate};
  __property   BSTR            BackupDate = {read = get_BackupDate};
  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IBrokersPtr Brokers = {read = get_Brokers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};
  __property   Ptssmolib_tlb::IPortfoliosPtr Portfolios = {read = get_Portfolios};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBrokers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CB39F9E-FB59-4EB6-986D-A8DD23515A60}
// *********************************************************************//
interface IBrokers  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IBroker** ppObjVal/*[out,retval]*/) = 0;
  // [3] 方法ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IBroker** ppObjRet/*[out,retval]*/) = 0;
  // [2] 方法Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IBroker* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IBroker* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IBroker**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IBroker* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IBroker* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IBroker**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IBroker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1C964C4C-73C5-47B5-986D-371A40256813}
// *********************************************************************//
interface IBroker  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 创建时间
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 最后修改时间
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 标识
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [5] 系统名称
  virtual HRESULT STDMETHODCALLTYPE get_SystemName(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 系统名称
  virtual HRESULT STDMETHODCALLTYPE set_SystemName(BSTR pVal/*[in]*/) = 0;
  // [6] 服务器名
  virtual HRESULT STDMETHODCALLTYPE get_ServerName(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 服务器名
  virtual HRESULT STDMETHODCALLTYPE set_ServerName(BSTR pVal/*[in]*/) = 0;
  // [7] 服务器端口
  virtual HRESULT STDMETHODCALLTYPE get_ServerPort(long* pVal/*[out,retval]*/) = 0;
  // [7] 服务器端口
  virtual HRESULT STDMETHODCALLTYPE set_ServerPort(long pVal/*[in]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 描述
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [9] 营业部账户
  virtual HRESULT STDMETHODCALLTYPE get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/) = 0;
  // [10] 扩展属性
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/) = 0;
  // [11] 添加成员
  virtual HRESULT STDMETHODCALLTYPE AddMember(long BrokerAccountID/*[in]*/) = 0;
  // [12] 连接
  virtual HRESULT STDMETHODCALLTYPE Connect(void) = 0;
  // [14] 断开
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0;
  // [16] 删除成员
  virtual HRESULT STDMETHODCALLTYPE DropMember(long BrokerAccountID/*[in]*/) = 0;
  // [17] 列出成员
  virtual HRESULT STDMETHODCALLTYPE ListMembers(Ptssmolib_tlb::IObjectList** ppAccounts/*[out,retval]*/) = 0;
  // [18] 删除成员
  virtual HRESULT STDMETHODCALLTYPE RunOrderSyncJob(void) = 0;
  // [19] 列出成员
  virtual HRESULT STDMETHODCALLTYPE StopOrderSyncJob(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_SystemName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_SystemName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ServerName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ServerName((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ServerPort(void)
  {
    long pVal;
    OLECHECK(this->get_ServerPort((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void)
  {
    Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
    OLECHECK(this->get_BrokerAccounts(&ppRetVal));
    return ppRetVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
    OLECHECK(this->get_ExtendedProperties(&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall ListMembers(void)
  {
    Ptssmolib_tlb::IObjectList* ppAccounts = 0;
    OLECHECK(this->ListMembers((Ptssmolib_tlb::IObjectList**)&ppAccounts));
    return ppAccounts;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            SystemName = {read = get_SystemName, write = set_SystemName};
  __property   BSTR            ServerName = {read = get_ServerName, write = set_ServerName};
  __property   long            ServerPort = {read = get_ServerPort, write = set_ServerPort};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPortfolios
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5C1827B-C504-49B7-8722-4213A1B5039E}
// *********************************************************************//
interface IPortfolios  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IPortfolio** ppObjVal/*[out,retval]*/) = 0;
  // [4] 方法ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IPortfolio** ppObjRet/*[out,retval]*/) = 0;
  // [2] 方法Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IPortfolio* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IPortfolio* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IPortfolio**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IPortfolio* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IPortfolio* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IPortfolio**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPortfolio
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBF4CF4A-47F2-4CFF-81A4-B8E26739AC25}
// *********************************************************************//
interface IPortfolio  : public Ptssmolib_tlb::INameObjectBase
{
public:
  // [1] 属性 CreateDate
  virtual HRESULT STDMETHODCALLTYPE get_CreateDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 属性 DateLastModified
  virtual HRESULT STDMETHODCALLTYPE get_DateLastModified(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [4] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 属性 Description
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pVal/*[in]*/) = 0;
  // [8] 属性 Properties
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/) = 0;
  // [9] 属性 Items
  virtual HRESULT STDMETHODCALLTYPE get_Items(Ptssmolib_tlb::IPortfolioItemSet** pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_CreateDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_DateLastModified(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Description((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void)
  {
    Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
    OLECHECK(this->get_ExtendedProperties(&pRetVal));
    return pRetVal;
  }

  Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall get_Items(void)
  {
    Ptssmolib_tlb::IPortfolioItemSetPtr pVal;
    OLECHECK(this->get_Items(&pVal));
    return pVal;
  }


  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IPortfolioItemSetPtr Items = {read = get_Items};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPortfolioItemSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E172085-8E32-4DC2-BFF3-10A96D192300}
// *********************************************************************//
interface IPortfolioItemSet  : public IDispatch
{
public:
  // [1] 属性 InstID
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] 属性 InstID
  virtual HRESULT STDMETHODCALLTYPE set_InstID(BSTR pVal/*[in]*/) = 0;
  // [2] 属性 InstIDSource
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [2] 属性 InstIDSource
  virtual HRESULT STDMETHODCALLTYPE set_InstIDSource(long pVal/*[in]*/) = 0;
  // [3] 属性 Qty
  virtual HRESULT STDMETHODCALLTYPE get_Qty(long* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Qty
  virtual HRESULT STDMETHODCALLTYPE set_Qty(long pVal/*[in]*/) = 0;
  // [4] 属性 IsCrossTrade
  virtual HRESULT STDMETHODCALLTYPE get_IsCrossTrade(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [4] 属性 IsCrossTrade
  virtual HRESULT STDMETHODCALLTYPE set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/) = 0;
  // [14] 属性 MemberBOF
  virtual HRESULT STDMETHODCALLTYPE get_ItemBOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [15] 属性 MemberEOF
  virtual HRESULT STDMETHODCALLTYPE get_ItemEOF(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [16] 属性 Count
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;
  // [8] 方法AddNew
  virtual HRESULT STDMETHODCALLTYPE AddNew(void) = 0;
  // [9] 方法Update
  virtual HRESULT STDMETHODCALLTYPE _Update(void) = 0;
  // [10] 方法MoveFirst
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0;
  // [11] 方法MoveLast
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0;
  // [12] 方法MovePrevious
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0;
  // [13] 方法MoveNext
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  long __fastcall get_Qty(void)
  {
    long pVal;
    OLECHECK(this->get_Qty((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsCrossTrade(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsCrossTrade((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ItemBOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ItemBOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ItemEOF(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ItemEOF((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   BSTR            InstID = {read = get_InstID, write = set_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   long            Qty = {read = get_Qty, write = set_Qty};
  __property   VARIANT_BOOL    IsCrossTrade = {read = get_IsCrossTrade, write = set_IsCrossTrade};
  __property   VARIANT_BOOL    ItemBOF = {read = get_ItemBOF};
  __property   VARIANT_BOOL    ItemEOF = {read = get_ItemEOF};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDictionary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5ACD7FF3-0AA0-4C15-AC34-E69BD3CC26C0}
// *********************************************************************//
interface IDictionary  : public Ptssmolib_tlb::IObjectBase
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IBrokerEvents
// Flags:     (4096) Dispatchable
// GUID:      {3194185A-4DF4-4059-94AE-1F89CB3C9106}
// *********************************************************************//
interface _IBrokerEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall OnConnected()
  {
    _TDispID _dispid(/* OnConnected */ DISPID(1));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnDisconnected()
  {
    _TDispID _dispid(/* OnDisconnected */ DISPID(2));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnSynchronize(Ptssmolib_tlb::TcMessageType Type/*[in]*/, BSTR Message/*[in]*/)
  {
    _TDispID _dispid(/* OnSynchronize */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
    _args[2] = Message /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IQuoteTickData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B24B576-EE54-4541-87CE-9B5DBC47CB7B}
// *********************************************************************//
interface IQuoteTickData  : public IDispatch
{
public:
  // [1] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [3] 最后一笔交易数量
  virtual HRESULT STDMETHODCALLTYPE get_LastQty(long* pVal/*[out,retval]*/) = 0;
  // [4] 最后一笔交易价格
  virtual HRESULT STDMETHODCALLTYPE get_LastPrice(double* pVal/*[out,retval]*/) = 0;
  // [5] 最后一笔交易时间
  virtual HRESULT STDMETHODCALLTYPE get_LastTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 日成交量
  virtual HRESULT STDMETHODCALLTYPE get_DayQty(long* pVal/*[out,retval]*/) = 0;
  // [7] 交易日
  virtual HRESULT STDMETHODCALLTYPE get_TradingDay(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  long __fastcall get_LastQty(void)
  {
    long pVal;
    OLECHECK(this->get_LastQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_LastPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LastPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LastTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LastTime((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_DayQty(void)
  {
    long pVal;
    OLECHECK(this->get_DayQty((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradingDay((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   long            DayQty = {read = get_DayQty};
  __property   BSTR            TradingDay = {read = get_TradingDay};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOrderReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AF6361AA-F62F-4CCA-90DA-FD92C54E3B12}
// *********************************************************************//
interface IOrderReport  : public IDispatch
{
public:
  // [1] 订单编号
  virtual HRESULT STDMETHODCALLTYPE get_OrderID(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 成交编号
  virtual HRESULT STDMETHODCALLTYPE get_ExecID(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 账户标识
  virtual HRESULT STDMETHODCALLTYPE get_AccountID(long* pVal/*[out,retval]*/) = 0;
  // [5] 投资账户标识
  virtual HRESULT STDMETHODCALLTYPE get_ExchAcctID(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 撤单数量
  virtual HRESULT STDMETHODCALLTYPE get_CancelQty(long* pVal/*[out,retval]*/) = 0;
  // [6] 成交数量
  virtual HRESULT STDMETHODCALLTYPE get_ExecQty(long* pVal/*[out,retval]*/) = 0;
  // [7] 成交价格
  virtual HRESULT STDMETHODCALLTYPE get_ExecPrice(double* pVal/*[out,retval]*/) = 0;
  // [8] 成交时间
  virtual HRESULT STDMETHODCALLTYPE get_ExecTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 备注
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_OrderID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OrderID((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExecID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExecID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_AccountID(void)
  {
    long pVal;
    OLECHECK(this->get_AccountID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExchAcctID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_CancelQty(void)
  {
    long pVal;
    OLECHECK(this->get_CancelQty((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ExecQty(void)
  {
    long pVal;
    OLECHECK(this->get_ExecQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_ExecPrice(void)
  {
    double pVal;
    OLECHECK(this->get_ExecPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ExecTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ExecTime((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Text((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            OrderID = {read = get_OrderID};
  __property   BSTR            ExecID = {read = get_ExecID};
  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   long            CancelQty = {read = get_CancelQty};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecPrice = {read = get_ExecPrice};
  __property   BSTR            ExecTime = {read = get_ExecTime};
  __property   BSTR            Text = {read = get_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObjectPermissionInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {377F476A-98F5-4949-946D-9E8A5A55F59F}
// *********************************************************************//
interface IObjectPermissionInfo  : public IDispatch
{
public:
  // [1] 受让者
  virtual HRESULT STDMETHODCALLTYPE get_Grantee(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] 受让者类型
  virtual HRESULT STDMETHODCALLTYPE get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/) = 0;
  // [3] 授予者
  virtual HRESULT STDMETHODCALLTYPE get_Grantor(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 授予者类型
  virtual HRESULT STDMETHODCALLTYPE get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/) = 0;
  // [5] 对象ID
  virtual HRESULT STDMETHODCALLTYPE get_ObjectID(long* pVal/*[out,retval]*/) = 0;
  // [6] 对象名称
  virtual HRESULT STDMETHODCALLTYPE get_ObjectName(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 对象所有者
  virtual HRESULT STDMETHODCALLTYPE get_ObjectOwner(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 对象类型
  virtual HRESULT STDMETHODCALLTYPE get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/) = 0;
  // [9] 对象类型
  virtual HRESULT STDMETHODCALLTYPE get_ObjectTypeName(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 权限状态
  virtual HRESULT STDMETHODCALLTYPE get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/) = 0;
  // [10] 权限状态
  virtual HRESULT STDMETHODCALLTYPE set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/) = 0;
  // [11] 特权类型
  virtual HRESULT STDMETHODCALLTYPE get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/) = 0;
  // [12] 特权名称
  virtual HRESULT STDMETHODCALLTYPE get_PrivilegeName(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Grantee(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantee((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void)
  {
    Ptssmolib_tlb::TcPrincipalType pVal;
    OLECHECK(this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Grantor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantor((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void)
  {
    Ptssmolib_tlb::TcPrincipalType pVal;
    OLECHECK(this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
    return pVal;
  }

  long __fastcall get_ObjectID(void)
  {
    long pVal;
    OLECHECK(this->get_ObjectID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ObjectName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ObjectName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ObjectOwner(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ObjectOwner((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void)
  {
    Ptssmolib_tlb::TcObjectType pVal;
    OLECHECK(this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ObjectTypeName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ObjectTypeName((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void)
  {
    Ptssmolib_tlb::TcPermissionState pVal;
    OLECHECK(this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void)
  {
    Ptssmolib_tlb::TcPrivilegeType pVal;
    OLECHECK(this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_PrivilegeName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_PrivilegeName((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   BSTR            ObjectOwner = {read = get_ObjectOwner};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   BSTR            ObjectTypeName = {read = get_ObjectTypeName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState, write = set_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IProjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DBB31D07-06AA-4F42-9243-FF197C54F197}
// *********************************************************************//
interface IProjects  : public Ptssmolib_tlb::IObjectCollectionBase
{
public:
  // [0] Retrieve an object
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ptssmolib_tlb::IProject** ppObjVal/*[out,retval]*/) = 0;
  // [2] ItemByID
  virtual HRESULT STDMETHODCALLTYPE get_ItemByID(long ID/*[in]*/, 
                                                 Ptssmolib_tlb::IProject** ppObjRet/*[out,retval]*/) = 0;
  // [3] 方法 Add
  virtual HRESULT STDMETHODCALLTYPE Add(Ptssmolib_tlb::IProject* pObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IProject* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ptssmolib_tlb::IProject* ppObjVal = 0;
    OLECHECK(this->get_Item(Index, (Ptssmolib_tlb::IProject**)&ppObjVal));
    return ppObjVal;
  }

  Ptssmolib_tlb::IProject* __fastcall get_ItemByID(long ID/*[in]*/)
  {
    Ptssmolib_tlb::IProject* ppObjRet = 0;
    OLECHECK(this->get_ItemByID(ID, (Ptssmolib_tlb::IProject**)&ppObjRet));
    return ppObjRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOrder2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0E181F33-772E-4689-897A-C2E473BF727E}
// *********************************************************************//
interface IOrder2  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAuthInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B0FACE51-415C-4A01-BCBE-7E95CF27B39E}
// *********************************************************************//
interface IAuthInfo  : public IDispatch
{
public:
  // [1] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE get_ID(long* pVal/*[out,retval]*/) = 0;
  // [1] 属性 ID
  virtual HRESULT STDMETHODCALLTYPE set_ID(long pVal/*[in]*/) = 0;
  // [2] 属性 CustomerID
  virtual HRESULT STDMETHODCALLTYPE get_CustomerID(long* pVal/*[out,retval]*/) = 0;
  // [2] 属性 CustomerID
  virtual HRESULT STDMETHODCALLTYPE set_CustomerID(long pVal/*[in]*/) = 0;
  // [3] 属性 Name
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 属性 Name
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pVal/*[in]*/) = 0;
  // [4] 属性 Type
  virtual HRESULT STDMETHODCALLTYPE get_Type(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 属性 Type
  virtual HRESULT STDMETHODCALLTYPE set_Type(BSTR pVal/*[in]*/) = 0;
  // [5] 属性 Content
  virtual HRESULT STDMETHODCALLTYPE get_Content(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] 属性 Content
  virtual HRESULT STDMETHODCALLTYPE set_Content(BSTR pVal/*[in]*/) = 0;
  // [6] 属性 Grantee
  virtual HRESULT STDMETHODCALLTYPE get_Grantee(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] 属性 Grantee
  virtual HRESULT STDMETHODCALLTYPE set_Grantee(BSTR pVal/*[in]*/) = 0;
  // [7] 属性 CreateTime
  virtual HRESULT STDMETHODCALLTYPE get_CreateTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] 属性 CreateTime
  virtual HRESULT STDMETHODCALLTYPE set_CreateTime(BSTR pVal/*[in]*/) = 0;
  // [8] 属性 Grantor
  virtual HRESULT STDMETHODCALLTYPE get_Grantor(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 属性 Grantor
  virtual HRESULT STDMETHODCALLTYPE set_Grantor(BSTR pVal/*[in]*/) = 0;
  // [9] 属性 GrantTime
  virtual HRESULT STDMETHODCALLTYPE get_GrantTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] 属性 GrantTime
  virtual HRESULT STDMETHODCALLTYPE set_GrantTime(BSTR pVal/*[in]*/) = 0;
  // [10] 属性 Abolisher
  virtual HRESULT STDMETHODCALLTYPE get_Abolisher(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] 属性 Abolisher
  virtual HRESULT STDMETHODCALLTYPE set_Abolisher(BSTR pVal/*[in]*/) = 0;
  // [11] 属性 AbolishTime
  virtual HRESULT STDMETHODCALLTYPE get_AbolishTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] 属性 AbolishTime
  virtual HRESULT STDMETHODCALLTYPE set_AbolishTime(BSTR pVal/*[in]*/) = 0;
  // [12] 属性 Status
  virtual HRESULT STDMETHODCALLTYPE get_Status(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/) = 0;
  // [12] 属性 Status
  virtual HRESULT STDMETHODCALLTYPE set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ID(void)
  {
    long pVal;
    OLECHECK(this->get_ID((long*)&pVal));
    return pVal;
  }

  long __fastcall get_CustomerID(void)
  {
    long pVal;
    OLECHECK(this->get_CustomerID((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Type(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Type((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Content(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Content((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Grantee(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantee((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_CreateTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_CreateTime((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Grantor(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Grantor((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_GrantTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_GrantTime((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Abolisher(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Abolisher((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_AbolishTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_AbolishTime((BSTR*)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::TcPermissionState __fastcall get_Status(void)
  {
    Ptssmolib_tlb::TcPermissionState pVal;
    OLECHECK(this->get_Status((Ptssmolib_tlb::TcPermissionState*)&pVal));
    return pVal;
  }


  __property   long            ID = {read = get_ID, write = set_ID};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   BSTR            Content = {read = get_Content, write = set_Content};
  __property   BSTR            Grantee = {read = get_Grantee, write = set_Grantee};
  __property   BSTR            CreateTime = {read = get_CreateTime, write = set_CreateTime};
  __property   BSTR            Grantor = {read = get_Grantor, write = set_Grantor};
  __property   BSTR            GrantTime = {read = get_GrantTime, write = set_GrantTime};
  __property   BSTR            Abolisher = {read = get_Abolisher, write = set_Abolisher};
  __property   BSTR            AbolishTime = {read = get_AbolishTime, write = set_AbolishTime};
  __property   Ptssmolib_tlb::TcPermissionState Status = {read = get_Status, write = set_Status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPTSManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DC08759-8A84-4495-8FC1-89B162062B0F}
// *********************************************************************//
interface IPTSManager  : public IDispatch
{
public:
  // [1] 方法AddProject
  virtual HRESULT STDMETHODCALLTYPE AddProject(Ptssmolib_tlb::IProject* p/*[in]*/) = 0;
  // [3] 获得对象
  virtual HRESULT STDMETHODCALLTYPE GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                              VARIANT ObjectID/*[in]*/, 
                                              Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/) = 0;
  // [4] 方法GetOnlineUserName
  virtual HRESULT STDMETHODCALLTYPE GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  // [5] 方法GetAllUserNames
  virtual HRESULT STDMETHODCALLTYPE GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE ListBrokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE ListCharts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE ListCustomers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE ListEventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ListExchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE ListRoles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE ListTasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE ListUsers(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/) = 0; // [15]
  // [16] 暂停
  virtual HRESULT STDMETHODCALLTYPE Pause(void) = 0;
  // [17] 查询对象
  virtual HRESULT STDMETHODCALLTYPE QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                 BSTR Conditions/*[in]*/, 
                                                 long* pStartIndex/*[in,out]*/, 
                                                 long RowCount/*[in]*/, 
                                                 Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/) = 0;
  // [18] 运行
  virtual HRESULT STDMETHODCALLTYPE Run(void) = 0;
  // [19] 停止
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [20] SetSession
  virtual HRESULT STDMETHODCALLTYPE SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/) = 0;
  // [21] SetSession
  virtual HRESULT STDMETHODCALLTYPE GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/)
  {
    Ptssmolib_tlb::IObjectBase* ppObject = 0;
    OLECHECK(this->GetObject(Type, ObjectID, (Ptssmolib_tlb::IObjectBase**)&ppObject));
    return ppObject;
  }

  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void)
  {
    Ptssmolib_tlb::INameList* Names = 0;
    OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
    return Names;
  }

  Ptssmolib_tlb::IBrokers* __fastcall ListBrokers(void)
  {
    Ptssmolib_tlb::IBrokers* pVal = 0;
    OLECHECK(this->ListBrokers((Ptssmolib_tlb::IBrokers**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ICharts* __fastcall ListCharts(void)
  {
    Ptssmolib_tlb::ICharts* pVal = 0;
    OLECHECK(this->ListCharts((Ptssmolib_tlb::ICharts**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ICustomers* __fastcall ListCustomers(void)
  {
    Ptssmolib_tlb::ICustomers* pVal = 0;
    OLECHECK(this->ListCustomers((Ptssmolib_tlb::ICustomers**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IEventTopics* __fastcall ListEventTopics(void)
  {
    Ptssmolib_tlb::IEventTopics* pVal = 0;
    OLECHECK(this->ListEventTopics((Ptssmolib_tlb::IEventTopics**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IExchanges* __fastcall ListExchanges(void)
  {
    Ptssmolib_tlb::IExchanges* pVal = 0;
    OLECHECK(this->ListExchanges((Ptssmolib_tlb::IExchanges**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IRoles* __fastcall ListRoles(void)
  {
    Ptssmolib_tlb::IRoles* pVal = 0;
    OLECHECK(this->ListRoles((Ptssmolib_tlb::IRoles**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::ITasks* __fastcall ListTasks(void)
  {
    Ptssmolib_tlb::ITasks* pVal = 0;
    OLECHECK(this->ListTasks((Ptssmolib_tlb::ITasks**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IUsers* __fastcall ListUsers(void)
  {
    Ptssmolib_tlb::IUsers* pVal = 0;
    OLECHECK(this->ListUsers((Ptssmolib_tlb::IUsers**)&pVal));
    return pVal;
  }

  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/)
  {
    Ptssmolib_tlb::IObjectList* ppObjects = 0;
    OLECHECK(this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects));
    return ppObjects;
  }

  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void)
  {
    Ptssmolib_tlb::IPTSSession* ppSession = 0;
    OLECHECK(this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession));
    return ppSession;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IPTSSessionEvents
// Flags:     (4096) Dispatchable
// GUID:      {77E96BE0-BBD3-422B-8155-67140A755A67}
// *********************************************************************//
interface _IPTSSessionEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall OnLogin()
  {
    _TDispID _dispid(/* OnLogin */ DISPID(1));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnLogout()
  {
    _TDispID _dispid(/* OnLogout */ DISPID(2));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall OnError(BSTR ErrMsg/*[in]*/)
  {
    _TDispID _dispid(/* OnError */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = ErrMsg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIOrder
// Interface: IOrder
// *********************************************************************//
template <class T /* IOrder */ >
class TCOMIOrderT : public TComInterface<IOrder>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOrderT() {}
  TCOMIOrderT(IOrder *intf, bool addRef = false) : TComInterface<IOrder>(intf, addRef) {}
  TCOMIOrderT(const TCOMIOrderT& src) : TComInterface<IOrder>(src) {}
  TCOMIOrderT& operator=(const TCOMIOrderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall set_AccountID(long pVal/*[in]*/);
  HRESULT         __fastcall get_HedgeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_HedgeID(void);
  HRESULT         __fastcall set_HedgeID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_OrderID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderID(void);
  HRESULT         __fastcall get_OrderStatus(Ptssmolib_tlb::TcOrderStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderStatus __fastcall get_OrderStatus(void);
  HRESULT         __fastcall get_OrderDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderDate(void);
  HRESULT         __fastcall get_OrderTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderTime(void);
  HRESULT         __fastcall get_OrderType(Ptssmolib_tlb::TcOrderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderType __fastcall get_OrderType(void);
  HRESULT         __fastcall set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/);
  HRESULT         __fastcall get_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcNonTradingOrderType __fastcall get_NonTradingType(void);
  HRESULT         __fastcall set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/);
  HRESULT         __fastcall get_InstrumentID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstrumentID(void);
  HRESULT         __fastcall set_InstrumentID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall set_InstIDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Side(Ptssmolib_tlb::TcOrderSide* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderSide __fastcall get_Side(void);
  HRESULT         __fastcall set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall set_Quantity(long pVal/*[in]*/);
  HRESULT         __fastcall get_Price(double* pVal/*[out,retval]*/);
  double          __fastcall get_Price(void);
  HRESULT         __fastcall set_Price(double pVal/*[in]*/);
  HRESULT         __fastcall get_StopPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_StopPrice(void);
  HRESULT         __fastcall set_StopPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_TimeInForce(Ptssmolib_tlb::TcTimeInForce* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcTimeInForce __fastcall get_TimeInForce(void);
  HRESULT         __fastcall set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/);
  HRESULT         __fastcall get_ExpireTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpireTime(void);
  HRESULT         __fastcall set_ExpireTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MaxFloor(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxFloor(void);
  HRESULT         __fastcall set_MaxFloor(long pVal/*[in]*/);
  HRESULT         __fastcall get_CreditTrading(Ptssmolib_tlb::TcCreditTrading* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCreditTrading __fastcall get_CreditTrading(void);
  HRESULT         __fastcall set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/);
  HRESULT         __fastcall get_Restriction(Ptssmolib_tlb::TcOrderRestriction* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderRestriction __fastcall get_Restriction(void);
  HRESULT         __fastcall set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/);
  HRESULT         __fastcall get_PositionEffect(Ptssmolib_tlb::TcPositionEffect* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionEffect __fastcall get_PositionEffect(void);
  HRESULT         __fastcall set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/);
  HRESULT         __fastcall get_QtyCondition(Ptssmolib_tlb::TcQuantityCondition* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcQuantityCondition __fastcall get_QtyCondition(void);
  HRESULT         __fastcall set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_RejectReason(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RejectReason(void);
  HRESULT         __fastcall get_ExecQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExecQty(void);
  HRESULT         __fastcall get_ExecAvgPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExecAvgPrice(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Cancel(void);
  HRESULT         __fastcall GetReports(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetReports(void);
  HRESULT         __fastcall Modify(void);
  HRESULT         __fastcall Refresh(void);

  __property   long            AccountID = {read = get_AccountID, write = set_AccountID};
  __property   long            HedgeID = {read = get_HedgeID, write = set_HedgeID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            OrderID = {read = get_OrderID};
  __property   Ptssmolib_tlb::TcOrderStatus OrderStatus = {read = get_OrderStatus};
  __property   BSTR            OrderDate = {read = get_OrderDate};
  __property   BSTR            OrderTime = {read = get_OrderTime};
  __property   Ptssmolib_tlb::TcOrderType OrderType = {read = get_OrderType, write = set_OrderType};
  __property   Ptssmolib_tlb::TcNonTradingOrderType NonTradingType = {read = get_NonTradingType, write = set_NonTradingType};
  __property   BSTR            InstrumentID = {read = get_InstrumentID, write = set_InstrumentID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   Ptssmolib_tlb::TcOrderSide Side = {read = get_Side, write = set_Side};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   double          Price = {read = get_Price, write = set_Price};
  __property   double          StopPrice = {read = get_StopPrice, write = set_StopPrice};
  __property   Ptssmolib_tlb::TcTimeInForce TimeInForce = {read = get_TimeInForce, write = set_TimeInForce};
  __property   BSTR            ExpireTime = {read = get_ExpireTime, write = set_ExpireTime};
  __property   long            MaxFloor = {read = get_MaxFloor, write = set_MaxFloor};
  __property   Ptssmolib_tlb::TcCreditTrading CreditTrading = {read = get_CreditTrading, write = set_CreditTrading};
  __property   Ptssmolib_tlb::TcOrderRestriction Restriction = {read = get_Restriction, write = set_Restriction};
  __property   Ptssmolib_tlb::TcPositionEffect PositionEffect = {read = get_PositionEffect, write = set_PositionEffect};
  __property   Ptssmolib_tlb::TcQuantityCondition QtyCondition = {read = get_QtyCondition, write = set_QtyCondition};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   BSTR            RejectReason = {read = get_RejectReason};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecAvgPrice = {read = get_ExecAvgPrice};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
};
typedef TCOMIOrderT<IOrder> TCOMIOrder;

// *********************************************************************//
// DispIntf:  IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {787035B1-4164-4933-99E7-A88257F65AF0}
// *********************************************************************//
template<class T>
class IOrderDispT : public TAutoDriver<IOrder>
{
public:
  IOrderDispT(){}

  IOrderDispT(IOrder *pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, false);
  }

  IOrderDispT(IOrderPtr pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, true);
  }

  IOrderDispT& operator=(IOrder *pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, false);
    return *this;
  }

  IOrderDispT& operator=(IOrderPtr pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Order));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Order);
  }

  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall set_AccountID(long pVal/*[in]*/);
  HRESULT         __fastcall get_HedgeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_HedgeID(void);
  HRESULT         __fastcall set_HedgeID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_OrderID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderID(void);
  HRESULT         __fastcall get_OrderStatus(Ptssmolib_tlb::TcOrderStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderStatus __fastcall get_OrderStatus(void);
  HRESULT         __fastcall get_OrderDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderDate(void);
  HRESULT         __fastcall get_OrderTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderTime(void);
  HRESULT         __fastcall get_OrderType(Ptssmolib_tlb::TcOrderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderType __fastcall get_OrderType(void);
  HRESULT         __fastcall set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/);
  HRESULT         __fastcall get_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcNonTradingOrderType __fastcall get_NonTradingType(void);
  HRESULT         __fastcall set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/);
  HRESULT         __fastcall get_InstrumentID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstrumentID(void);
  HRESULT         __fastcall set_InstrumentID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall set_InstIDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Side(Ptssmolib_tlb::TcOrderSide* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderSide __fastcall get_Side(void);
  HRESULT         __fastcall set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall set_Quantity(long pVal/*[in]*/);
  HRESULT         __fastcall get_Price(double* pVal/*[out,retval]*/);
  double          __fastcall get_Price(void);
  HRESULT         __fastcall set_Price(double pVal/*[in]*/);
  HRESULT         __fastcall get_StopPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_StopPrice(void);
  HRESULT         __fastcall set_StopPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_TimeInForce(Ptssmolib_tlb::TcTimeInForce* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcTimeInForce __fastcall get_TimeInForce(void);
  HRESULT         __fastcall set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/);
  HRESULT         __fastcall get_ExpireTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpireTime(void);
  HRESULT         __fastcall set_ExpireTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MaxFloor(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxFloor(void);
  HRESULT         __fastcall set_MaxFloor(long pVal/*[in]*/);
  HRESULT         __fastcall get_CreditTrading(Ptssmolib_tlb::TcCreditTrading* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCreditTrading __fastcall get_CreditTrading(void);
  HRESULT         __fastcall set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/);
  HRESULT         __fastcall get_Restriction(Ptssmolib_tlb::TcOrderRestriction* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderRestriction __fastcall get_Restriction(void);
  HRESULT         __fastcall set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/);
  HRESULT         __fastcall get_PositionEffect(Ptssmolib_tlb::TcPositionEffect* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionEffect __fastcall get_PositionEffect(void);
  HRESULT         __fastcall set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/);
  HRESULT         __fastcall get_QtyCondition(Ptssmolib_tlb::TcQuantityCondition* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcQuantityCondition __fastcall get_QtyCondition(void);
  HRESULT         __fastcall set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_RejectReason(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RejectReason(void);
  HRESULT         __fastcall get_ExecQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExecQty(void);
  HRESULT         __fastcall get_ExecAvgPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExecAvgPrice(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall GetReports(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetReports(void);
  HRESULT         __fastcall Modify();
  HRESULT         __fastcall Refresh();

  __property   long            AccountID = {read = get_AccountID, write = set_AccountID};
  __property   long            HedgeID = {read = get_HedgeID, write = set_HedgeID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            OrderID = {read = get_OrderID};
  __property   Ptssmolib_tlb::TcOrderStatus OrderStatus = {read = get_OrderStatus};
  __property   BSTR            OrderDate = {read = get_OrderDate};
  __property   BSTR            OrderTime = {read = get_OrderTime};
  __property   Ptssmolib_tlb::TcOrderType OrderType = {read = get_OrderType, write = set_OrderType};
  __property   Ptssmolib_tlb::TcNonTradingOrderType NonTradingType = {read = get_NonTradingType, write = set_NonTradingType};
  __property   BSTR            InstrumentID = {read = get_InstrumentID, write = set_InstrumentID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   Ptssmolib_tlb::TcOrderSide Side = {read = get_Side, write = set_Side};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   double          Price = {read = get_Price, write = set_Price};
  __property   double          StopPrice = {read = get_StopPrice, write = set_StopPrice};
  __property   Ptssmolib_tlb::TcTimeInForce TimeInForce = {read = get_TimeInForce, write = set_TimeInForce};
  __property   BSTR            ExpireTime = {read = get_ExpireTime, write = set_ExpireTime};
  __property   long            MaxFloor = {read = get_MaxFloor, write = set_MaxFloor};
  __property   Ptssmolib_tlb::TcCreditTrading CreditTrading = {read = get_CreditTrading, write = set_CreditTrading};
  __property   Ptssmolib_tlb::TcOrderRestriction Restriction = {read = get_Restriction, write = set_Restriction};
  __property   Ptssmolib_tlb::TcPositionEffect PositionEffect = {read = get_PositionEffect, write = set_PositionEffect};
  __property   Ptssmolib_tlb::TcQuantityCondition QtyCondition = {read = get_QtyCondition, write = set_QtyCondition};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   BSTR            RejectReason = {read = get_RejectReason};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecAvgPrice = {read = get_ExecAvgPrice};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
};
typedef IOrderDispT<IOrder> IOrderDisp;

// *********************************************************************//
// SmartIntf: TCOMIObjectList
// Interface: IObjectList
// *********************************************************************//
template <class T /* IObjectList */ >
class TCOMIObjectListT : public TComInterface<IObjectList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIObjectListT() {}
  TCOMIObjectListT(IObjectList *intf, bool addRef = false) : TComInterface<IObjectList>(intf, addRef) {}
  TCOMIObjectListT(const TCOMIObjectListT& src) : TComInterface<IObjectList>(src) {}
  TCOMIObjectListT& operator=(const TCOMIObjectListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, LPDISPATCH* ppObjVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIObjectListT<IObjectList> TCOMIObjectList;

// *********************************************************************//
// DispIntf:  IObjectList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6115E5B1-7E3D-4116-B3DF-DE153CB9278A}
// *********************************************************************//
template<class T>
class IObjectListDispT : public TAutoDriver<IObjectList>
{
public:
  IObjectListDispT(){}

  IObjectListDispT(IObjectList *pintf)
  {
    TAutoDriver<IObjectList>::Bind(pintf, false);
  }

  IObjectListDispT(IObjectListPtr pintf)
  {
    TAutoDriver<IObjectList>::Bind(pintf, true);
  }

  IObjectListDispT& operator=(IObjectList *pintf)
  {
    TAutoDriver<IObjectList>::Bind(pintf, false);
    return *this;
  }

  IObjectListDispT& operator=(IObjectListPtr pintf)
  {
    TAutoDriver<IObjectList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ObjectList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ObjectList);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, LPDISPATCH* ppObjVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh();

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IObjectListDispT<IObjectList> IObjectListDisp;

// *********************************************************************//
// SmartIntf: TCOMIOrders
// Interface: IOrders
// *********************************************************************//
template <class T /* IOrders */ >
class TCOMIOrdersT : public TComInterface<IOrders>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOrdersT() {}
  TCOMIOrdersT(IOrders *intf, bool addRef = false) : TComInterface<IOrders>(intf, addRef) {}
  TCOMIOrdersT(const TCOMIOrdersT& src) : TComInterface<IOrders>(src) {}
  TCOMIOrdersT& operator=(const TCOMIOrdersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IOrder** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall Add(void);
  HRESULT         __fastcall DeleteAll(void);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    long* pErrorIndex/*[out]*/);
  HRESULT         __fastcall Find(BSTR OrderID/*[in]*/, 
                                  Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall Find(BSTR OrderID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIOrdersT<IOrders> TCOMIOrders;

// *********************************************************************//
// DispIntf:  IOrders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3669D4E3-2E08-4840-8311-91B952C43182}
// *********************************************************************//
template<class T>
class IOrdersDispT : public TAutoDriver<IOrders>
{
public:
  IOrdersDispT(){}

  IOrdersDispT(IOrders *pintf)
  {
    TAutoDriver<IOrders>::Bind(pintf, false);
  }

  IOrdersDispT(IOrdersPtr pintf)
  {
    TAutoDriver<IOrders>::Bind(pintf, true);
  }

  IOrdersDispT& operator=(IOrders *pintf)
  {
    TAutoDriver<IOrders>::Bind(pintf, false);
    return *this;
  }

  IOrdersDispT& operator=(IOrdersPtr pintf)
  {
    TAutoDriver<IOrders>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Orders));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Orders);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IOrder** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall Add(void);
  HRESULT         __fastcall DeleteAll();
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    long* pErrorIndex/*[out]*/);
  HRESULT         __fastcall Find(BSTR OrderID/*[in]*/, 
                                  Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall Find(BSTR OrderID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IOrdersDispT<IOrders> IOrdersDisp;

// *********************************************************************//
// SmartIntf: TCOMIExecutionReport
// Interface: IExecutionReport
// *********************************************************************//
template <class T /* IExecutionReport */ >
class TCOMIExecutionReportT : public TComInterface<IExecutionReport>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExecutionReportT() {}
  TCOMIExecutionReportT(IExecutionReport *intf, bool addRef = false) : TComInterface<IExecutionReport>(intf, addRef) {}
  TCOMIExecutionReportT(const TCOMIExecutionReportT& src) : TComInterface<IExecutionReport>(src) {}
  TCOMIExecutionReportT& operator=(const TCOMIExecutionReportT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_MsgType(Ptssmolib_tlb::TcMessageType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcMessageType __fastcall get_MsgType(void);
  HRESULT         __fastcall get_Message(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Message(void);

  __property   Ptssmolib_tlb::TcMessageType MsgType = {read = get_MsgType};
  __property   BSTR            Message = {read = get_Message};
};
typedef TCOMIExecutionReportT<IExecutionReport> TCOMIExecutionReport;

// *********************************************************************//
// DispIntf:  IExecutionReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93E4BC77-26AF-4DB3-86A8-FBEAED97802C}
// *********************************************************************//
template<class T>
class IExecutionReportDispT : public TAutoDriver<IExecutionReport>
{
public:
  IExecutionReportDispT(){}

  IExecutionReportDispT(IExecutionReport *pintf)
  {
    TAutoDriver<IExecutionReport>::Bind(pintf, false);
  }

  IExecutionReportDispT(IExecutionReportPtr pintf)
  {
    TAutoDriver<IExecutionReport>::Bind(pintf, true);
  }

  IExecutionReportDispT& operator=(IExecutionReport *pintf)
  {
    TAutoDriver<IExecutionReport>::Bind(pintf, false);
    return *this;
  }

  IExecutionReportDispT& operator=(IExecutionReportPtr pintf)
  {
    TAutoDriver<IExecutionReport>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExecutionReport));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExecutionReport);
  }

  HRESULT         __fastcall get_MsgType(Ptssmolib_tlb::TcMessageType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcMessageType __fastcall get_MsgType(void);
  HRESULT         __fastcall get_Message(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Message(void);

  __property   Ptssmolib_tlb::TcMessageType MsgType = {read = get_MsgType};
  __property   BSTR            Message = {read = get_Message};
};
typedef IExecutionReportDispT<IExecutionReport> IExecutionReportDisp;

typedef TComInterface<IObjectBase>  TCOMIObjectBase;

// *********************************************************************//
// DispIntf:  IObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91E6AC95-A60B-4CB3-A177-4B6A39E99EC5}
// *********************************************************************//
template<class T>
class IObjectBaseDispT : public TAutoDriver<IObjectBase>
{
public:
  IObjectBaseDispT(){}

  IObjectBaseDispT(IObjectBase *pintf)
  {
    TAutoDriver<IObjectBase>::Bind(pintf, false);
  }

  IObjectBaseDispT(IObjectBasePtr pintf)
  {
    TAutoDriver<IObjectBase>::Bind(pintf, true);
  }

  IObjectBaseDispT& operator=(IObjectBase *pintf)
  {
    TAutoDriver<IObjectBase>::Bind(pintf, false);
    return *this;
  }

  IObjectBaseDispT& operator=(IObjectBasePtr pintf)
  {
    TAutoDriver<IObjectBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IObjectBaseDispT<IObjectBase> IObjectBaseDisp;

typedef TComInterface<INameObjectBase>  TCOMINameObjectBase;

// *********************************************************************//
// DispIntf:  INameObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64A49DC7-630D-4ACC-8103-5BA643AC3F72}
// *********************************************************************//
template<class T>
class INameObjectBaseDispT : public TAutoDriver<INameObjectBase>
{
public:
  INameObjectBaseDispT(){}

  INameObjectBaseDispT(INameObjectBase *pintf)
  {
    TAutoDriver<INameObjectBase>::Bind(pintf, false);
  }

  INameObjectBaseDispT(INameObjectBasePtr pintf)
  {
    TAutoDriver<INameObjectBase>::Bind(pintf, true);
  }

  INameObjectBaseDispT& operator=(INameObjectBase *pintf)
  {
    TAutoDriver<INameObjectBase>::Bind(pintf, false);
    return *this;
  }

  INameObjectBaseDispT& operator=(INameObjectBasePtr pintf)
  {
    TAutoDriver<INameObjectBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef INameObjectBaseDispT<INameObjectBase> INameObjectBaseDisp;

// *********************************************************************//
// SmartIntf: TCOMIInstrument
// Interface: IInstrument
// *********************************************************************//
template <class T /* IInstrument */ >
class TCOMIInstrumentT : public TComInterface<IInstrument>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIInstrumentT() {}
  TCOMIInstrumentT(IInstrument *intf, bool addRef = false) : TComInterface<IInstrument>(intf, addRef) {}
  TCOMIInstrumentT(const TCOMIInstrumentT& src) : TComInterface<IInstrument>(src) {}
  TCOMIInstrumentT& operator=(const TCOMIInstrumentT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall set_IDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall set_Symbol(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CFICode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CFICode(void);
  HRESULT         __fastcall set_CFICode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcInstrumentType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/);
  HRESULT         __fastcall get_SubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_SubType(void);
  HRESULT         __fastcall set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcInstrumentStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/);
  HRESULT         __fastcall GetDetail(Ptssmolib_tlb::IInstrumentDetail** ppInfo/*[out,retval]*/);
  Ptssmolib_tlb::IInstrumentDetail* __fastcall GetDetail(void);
  HRESULT         __fastcall GetNowQuote(Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(void);
  HRESULT         __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                               BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/, 
                                               Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long MaxRowCount/*[in]*/);
  HRESULT         __fastcall SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/);

  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            IDSource = {read = get_IDSource, write = set_IDSource};
  __property   BSTR            Symbol = {read = get_Symbol, write = set_Symbol};
  __property   BSTR            CFICode = {read = get_CFICode, write = set_CFICode};
  __property   Ptssmolib_tlb::TcInstrumentType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcInstrumentSubType SubType = {read = get_SubType, write = set_SubType};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
  __property   Ptssmolib_tlb::TcInstrumentStatus Status = {read = get_Status, write = set_Status};
};
typedef TCOMIInstrumentT<IInstrument> TCOMIInstrument;

// *********************************************************************//
// DispIntf:  IInstrument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2ACE41D-DFE2-42E6-8A21-F3077455DACB}
// *********************************************************************//
template<class T>
class IInstrumentDispT : public TAutoDriver<IInstrument>
{
public:
  IInstrumentDispT(){}

  IInstrumentDispT(IInstrument *pintf)
  {
    TAutoDriver<IInstrument>::Bind(pintf, false);
  }

  IInstrumentDispT(IInstrumentPtr pintf)
  {
    TAutoDriver<IInstrument>::Bind(pintf, true);
  }

  IInstrumentDispT& operator=(IInstrument *pintf)
  {
    TAutoDriver<IInstrument>::Bind(pintf, false);
    return *this;
  }

  IInstrumentDispT& operator=(IInstrumentPtr pintf)
  {
    TAutoDriver<IInstrument>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Instrument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Instrument);
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall set_IDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall set_Symbol(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CFICode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CFICode(void);
  HRESULT         __fastcall set_CFICode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcInstrumentType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/);
  HRESULT         __fastcall get_SubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_SubType(void);
  HRESULT         __fastcall set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcInstrumentStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/);
  HRESULT         __fastcall GetDetail(Ptssmolib_tlb::IInstrumentDetail** ppInfo/*[out,retval]*/);
  Ptssmolib_tlb::IInstrumentDetail* __fastcall GetDetail(void);
  HRESULT         __fastcall GetNowQuote(Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(void);
  HRESULT         __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                               BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/, 
                                               Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long MaxRowCount/*[in]*/);
  HRESULT         __fastcall SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            ID = {read = get_ID, write = set_ID};
  __property   long            IDSource = {read = get_IDSource, write = set_IDSource};
  __property   BSTR            Symbol = {read = get_Symbol, write = set_Symbol};
  __property   BSTR            CFICode = {read = get_CFICode, write = set_CFICode};
  __property   Ptssmolib_tlb::TcInstrumentType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcInstrumentSubType SubType = {read = get_SubType, write = set_SubType};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
  __property   Ptssmolib_tlb::TcInstrumentStatus Status = {read = get_Status, write = set_Status};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IInstrumentDispT<IInstrument> IInstrumentDisp;

typedef TComInterface<IAlterable>  TCOMIAlterable;

// *********************************************************************//
// DispIntf:  IAlterable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {729089CB-BC7E-4F49-8881-1C6270257FE1}
// *********************************************************************//
template<class T>
class IAlterableDispT : public TAutoDriver<IAlterable>
{
public:
  IAlterableDispT(){}

  IAlterableDispT(IAlterable *pintf)
  {
    TAutoDriver<IAlterable>::Bind(pintf, false);
  }

  IAlterableDispT(IAlterablePtr pintf)
  {
    TAutoDriver<IAlterable>::Bind(pintf, true);
  }

  IAlterableDispT& operator=(IAlterable *pintf)
  {
    TAutoDriver<IAlterable>::Bind(pintf, false);
    return *this;
  }

  IAlterableDispT& operator=(IAlterablePtr pintf)
  {
    TAutoDriver<IAlterable>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Alter();

};
typedef IAlterableDispT<IAlterable> IAlterableDisp;

// *********************************************************************//
// SmartIntf: TCOMIInstrumentDetail
// Interface: IInstrumentDetail
// *********************************************************************//
template <class T /* IInstrumentDetail */ >
class TCOMIInstrumentDetailT : public TComInterface<IInstrumentDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIInstrumentDetailT() {}
  TCOMIInstrumentDetailT(IInstrumentDetail *intf, bool addRef = false) : TComInterface<IInstrumentDetail>(intf, addRef) {}
  TCOMIInstrumentDetailT(const TCOMIInstrumentDetailT& src) : TComInterface<IInstrumentDetail>(src) {}
  TCOMIInstrumentDetailT& operator=(const TCOMIInstrumentDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef TCOMIInstrumentDetailT<IInstrumentDetail> TCOMIInstrumentDetail;

// *********************************************************************//
// DispIntf:  IInstrumentDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {37627738-EA0B-4857-A389-0A02868BE825}
// *********************************************************************//
template<class T>
class IInstrumentDetailDispT : public TAutoDriver<IInstrumentDetail>
{
public:
  IInstrumentDetailDispT(){}

  IInstrumentDetailDispT(IInstrumentDetail *pintf)
  {
    TAutoDriver<IInstrumentDetail>::Bind(pintf, false);
  }

  IInstrumentDetailDispT(IInstrumentDetailPtr pintf)
  {
    TAutoDriver<IInstrumentDetail>::Bind(pintf, true);
  }

  IInstrumentDetailDispT& operator=(IInstrumentDetail *pintf)
  {
    TAutoDriver<IInstrumentDetail>::Bind(pintf, false);
    return *this;
  }

  IInstrumentDetailDispT& operator=(IInstrumentDetailPtr pintf)
  {
    TAutoDriver<IInstrumentDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_InstrumentDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_InstrumentDetail);
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef IInstrumentDetailDispT<IInstrumentDetail> IInstrumentDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIQuote
// Interface: IQuote
// *********************************************************************//
template <class T /* IQuote */ >
class TCOMIQuoteT : public TComInterface<IQuote>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuoteT() {}
  TCOMIQuoteT(IQuote *intf, bool addRef = false) : TComInterface<IQuote>(intf, addRef) {}
  TCOMIQuoteT(const TCOMIQuoteT& src) : TComInterface<IQuote>(src) {}
  TCOMIQuoteT& operator=(const TCOMIQuoteT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SeqNo(long* pVal/*[out,retval]*/);
  long            __fastcall get_SeqNo(void);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_AskQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(void);
  HRESULT         __fastcall get_AskPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(void);
  HRESULT         __fastcall get_BidQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(void);
  HRESULT         __fastcall get_BidPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall GetQuoteDetails(Ptssmolib_tlb::IObjectList** ppDetails/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteDetails(void);

  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
};
typedef TCOMIQuoteT<IQuote> TCOMIQuote;

// *********************************************************************//
// DispIntf:  IQuote
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {75FB79D8-4BD7-476C-92BA-789FC673AA9B}
// *********************************************************************//
template<class T>
class IQuoteDispT : public TAutoDriver<IQuote>
{
public:
  IQuoteDispT(){}

  IQuoteDispT(IQuote *pintf)
  {
    TAutoDriver<IQuote>::Bind(pintf, false);
  }

  IQuoteDispT(IQuotePtr pintf)
  {
    TAutoDriver<IQuote>::Bind(pintf, true);
  }

  IQuoteDispT& operator=(IQuote *pintf)
  {
    TAutoDriver<IQuote>::Bind(pintf, false);
    return *this;
  }

  IQuoteDispT& operator=(IQuotePtr pintf)
  {
    TAutoDriver<IQuote>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Quote));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Quote);
  }

  HRESULT         __fastcall get_SeqNo(long* pVal/*[out,retval]*/);
  long            __fastcall get_SeqNo(void);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_AskQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(void);
  HRESULT         __fastcall get_AskPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(void);
  HRESULT         __fastcall get_BidQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(void);
  HRESULT         __fastcall get_BidPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall GetQuoteDetails(Ptssmolib_tlb::IObjectList** ppDetails/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteDetails(void);

  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
};
typedef IQuoteDispT<IQuote> IQuoteDisp;

typedef TComInterface<IDroppable>  TCOMIDroppable;

// *********************************************************************//
// DispIntf:  IDroppable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E54008FC-5C59-4F4F-8849-2CB2EEB60101}
// *********************************************************************//
template<class T>
class IDroppableDispT : public TAutoDriver<IDroppable>
{
public:
  IDroppableDispT(){}

  IDroppableDispT(IDroppable *pintf)
  {
    TAutoDriver<IDroppable>::Bind(pintf, false);
  }

  IDroppableDispT(IDroppablePtr pintf)
  {
    TAutoDriver<IDroppable>::Bind(pintf, true);
  }

  IDroppableDispT& operator=(IDroppable *pintf)
  {
    TAutoDriver<IDroppable>::Bind(pintf, false);
    return *this;
  }

  IDroppableDispT& operator=(IDroppablePtr pintf)
  {
    TAutoDriver<IDroppable>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Drop();

};
typedef IDroppableDispT<IDroppable> IDroppableDisp;

// *********************************************************************//
// SmartIntf: TCOMIAccount
// Interface: IAccount
// *********************************************************************//
template <class T /* IAccount */ >
class TCOMIAccountT : public TComInterface<IAccount>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAccountT() {}
  TCOMIAccountT(IAccount *intf, bool addRef = false) : TComInterface<IAccount>(intf, addRef) {}
  TCOMIAccountT(const TCOMIAccountT& src) : TComInterface<IAccount>(src) {}
  TCOMIAccountT& operator=(const TCOMIAccountT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ParentAcctID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParentAcctID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                             double Amount/*[in]*/);
  HRESULT         __fastcall AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                              long Quantity/*[in]*/);
  HRESULT         __fastcall FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                         double Amount/*[in]*/);
  HRESULT         __fastcall FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Quantity/*[in]*/);
  HRESULT         __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                       Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  HRESULT         __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::IPosition** Position/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  HRESULT         __fastcall GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  HRESULT         __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                             BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                             long RowCount/*[in]*/, 
                                             Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                                     BSTR ToTime/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/);
  HRESULT         __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall NewOrders(Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(void);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID};
  __property   long            TaskID = {read = get_TaskID};
  __property   long            AccountID = {read = get_AccountID};
  __property   long            ParentAcctID = {read = get_ParentAcctID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status, write = set_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIAccountT<IAccount> TCOMIAccount;

// *********************************************************************//
// DispIntf:  IAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DE4CE813-5AD2-4915-B831-65FA3B40FE2B}
// *********************************************************************//
template<class T>
class IAccountDispT : public TAutoDriver<IAccount>
{
public:
  IAccountDispT(){}

  IAccountDispT(IAccount *pintf)
  {
    TAutoDriver<IAccount>::Bind(pintf, false);
  }

  IAccountDispT(IAccountPtr pintf)
  {
    TAutoDriver<IAccount>::Bind(pintf, true);
  }

  IAccountDispT& operator=(IAccount *pintf)
  {
    TAutoDriver<IAccount>::Bind(pintf, false);
    return *this;
  }

  IAccountDispT& operator=(IAccountPtr pintf)
  {
    TAutoDriver<IAccount>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Account));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Account);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ParentAcctID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParentAcctID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                             double Amount/*[in]*/);
  HRESULT         __fastcall AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                              long Quantity/*[in]*/);
  HRESULT         __fastcall FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                         double Amount/*[in]*/);
  HRESULT         __fastcall FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Quantity/*[in]*/);
  HRESULT         __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                       Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  HRESULT         __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::IPosition** Position/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  HRESULT         __fastcall GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  HRESULT         __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                             BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                             long RowCount/*[in]*/, 
                                             Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                                     BSTR ToTime/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/);
  HRESULT         __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall NewOrders(Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID};
  __property   long            TaskID = {read = get_TaskID};
  __property   long            AccountID = {read = get_AccountID};
  __property   long            ParentAcctID = {read = get_ParentAcctID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status, write = set_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IAccountDispT<IAccount> IAccountDisp;

typedef TComInterface<IRenamable>  TCOMIRenamable;

// *********************************************************************//
// DispIntf:  IRenamable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B5FD7832-C964-4441-8E22-7A420D1E2A3D}
// *********************************************************************//
template<class T>
class IRenamableDispT : public TAutoDriver<IRenamable>
{
public:
  IRenamableDispT(){}

  IRenamableDispT(IRenamable *pintf)
  {
    TAutoDriver<IRenamable>::Bind(pintf, false);
  }

  IRenamableDispT(IRenamablePtr pintf)
  {
    TAutoDriver<IRenamable>::Bind(pintf, true);
  }

  IRenamableDispT& operator=(IRenamable *pintf)
  {
    TAutoDriver<IRenamable>::Bind(pintf, false);
    return *this;
  }

  IRenamableDispT& operator=(IRenamablePtr pintf)
  {
    TAutoDriver<IRenamable>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Rename(BSTR newVal/*[in]*/);

};
typedef IRenamableDispT<IRenamable> IRenamableDisp;

typedef TComInterface<IObjectCollectionBase>  TCOMIObjectCollectionBase;

// *********************************************************************//
// DispIntf:  IObjectCollectionBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {060B063E-85DA-4EBE-9A8D-30AD7C2437BE}
// *********************************************************************//
template<class T>
class IObjectCollectionBaseDispT : public TAutoDriver<IObjectCollectionBase>
{
public:
  IObjectCollectionBaseDispT(){}

  IObjectCollectionBaseDispT(IObjectCollectionBase *pintf)
  {
    TAutoDriver<IObjectCollectionBase>::Bind(pintf, false);
  }

  IObjectCollectionBaseDispT(IObjectCollectionBasePtr pintf)
  {
    TAutoDriver<IObjectCollectionBase>::Bind(pintf, true);
  }

  IObjectCollectionBaseDispT& operator=(IObjectCollectionBase *pintf)
  {
    TAutoDriver<IObjectCollectionBase>::Bind(pintf, false);
    return *this;
  }

  IObjectCollectionBaseDispT& operator=(IObjectCollectionBasePtr pintf)
  {
    TAutoDriver<IObjectCollectionBase>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IObjectCollectionBaseDispT<IObjectCollectionBase> IObjectCollectionBaseDisp;

// *********************************************************************//
// SmartIntf: TCOMIExtendedProperties
// Interface: IExtendedProperties
// *********************************************************************//
template <class T /* IExtendedProperties */ >
class TCOMIExtendedPropertiesT : public TComInterface<IExtendedProperties>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExtendedPropertiesT() {}
  TCOMIExtendedPropertiesT(IExtendedProperties *intf, bool addRef = false) : TComInterface<IExtendedProperties>(intf, addRef) {}
  TCOMIExtendedPropertiesT(const TCOMIExtendedPropertiesT& src) : TComInterface<IExtendedProperties>(src) {}
  TCOMIExtendedPropertiesT& operator=(const TCOMIExtendedPropertiesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExtendedProperty** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/);

};
typedef TCOMIExtendedPropertiesT<IExtendedProperties> TCOMIExtendedProperties;

// *********************************************************************//
// DispIntf:  IExtendedProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0003CB5-0751-4480-833D-5DB3F380D4E2}
// *********************************************************************//
template<class T>
class IExtendedPropertiesDispT : public TAutoDriver<IExtendedProperties>
{
public:
  IExtendedPropertiesDispT(){}

  IExtendedPropertiesDispT(IExtendedProperties *pintf)
  {
    TAutoDriver<IExtendedProperties>::Bind(pintf, false);
  }

  IExtendedPropertiesDispT(IExtendedPropertiesPtr pintf)
  {
    TAutoDriver<IExtendedProperties>::Bind(pintf, true);
  }

  IExtendedPropertiesDispT& operator=(IExtendedProperties *pintf)
  {
    TAutoDriver<IExtendedProperties>::Bind(pintf, false);
    return *this;
  }

  IExtendedPropertiesDispT& operator=(IExtendedPropertiesPtr pintf)
  {
    TAutoDriver<IExtendedProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExtendedProperties));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExtendedProperties);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExtendedProperty** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExtendedPropertiesDispT<IExtendedProperties> IExtendedPropertiesDisp;

// *********************************************************************//
// SmartIntf: TCOMIExtendedProperty
// Interface: IExtendedProperty
// *********************************************************************//
template <class T /* IExtendedProperty */ >
class TCOMIExtendedPropertyT : public TComInterface<IExtendedProperty>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExtendedPropertyT() {}
  TCOMIExtendedPropertyT(IExtendedProperty *intf, bool addRef = false) : TComInterface<IExtendedProperty>(intf, addRef) {}
  TCOMIExtendedPropertyT(const TCOMIExtendedPropertyT& src) : TComInterface<IExtendedProperty>(src) {}
  TCOMIExtendedPropertyT& operator=(const TCOMIExtendedPropertyT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Value(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IsFixed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsFixed(void);

  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   VARIANT_BOOL    IsFixed = {read = get_IsFixed};
};
typedef TCOMIExtendedPropertyT<IExtendedProperty> TCOMIExtendedProperty;

// *********************************************************************//
// DispIntf:  IExtendedProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C23AC92B-D9DA-43B4-AC24-04F1517F55D2}
// *********************************************************************//
template<class T>
class IExtendedPropertyDispT : public TAutoDriver<IExtendedProperty>
{
public:
  IExtendedPropertyDispT(){}

  IExtendedPropertyDispT(IExtendedProperty *pintf)
  {
    TAutoDriver<IExtendedProperty>::Bind(pintf, false);
  }

  IExtendedPropertyDispT(IExtendedPropertyPtr pintf)
  {
    TAutoDriver<IExtendedProperty>::Bind(pintf, true);
  }

  IExtendedPropertyDispT& operator=(IExtendedProperty *pintf)
  {
    TAutoDriver<IExtendedProperty>::Bind(pintf, false);
    return *this;
  }

  IExtendedPropertyDispT& operator=(IExtendedPropertyPtr pintf)
  {
    TAutoDriver<IExtendedProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExtendedProperty));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExtendedProperty);
  }

  HRESULT         __fastcall get_Value(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IsFixed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsFixed(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   VARIANT_BOOL    IsFixed = {read = get_IsFixed};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExtendedPropertyDispT<IExtendedProperty> IExtendedPropertyDisp;

// *********************************************************************//
// SmartIntf: TCOMIAccountDetail
// Interface: IAccountDetail
// *********************************************************************//
template <class T /* IAccountDetail */ >
class TCOMIAccountDetailT : public TComInterface<IAccountDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAccountDetailT() {}
  TCOMIAccountDetailT(IAccountDetail *intf, bool addRef = false) : TComInterface<IAccountDetail>(intf, addRef) {}
  TCOMIAccountDetailT(const TCOMIAccountDetailT& src) : TComInterface<IAccountDetail>(src) {}
  TCOMIAccountDetailT& operator=(const TCOMIAccountDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Initial(double* pVal/*[out,retval]*/);
  double          __fastcall get_Initial(void);
  HRESULT         __fastcall get_Available(double* pVal/*[out,retval]*/);
  double          __fastcall get_Available(void);
  HRESULT         __fastcall get_Yesterday(double* pVal/*[out,retval]*/);
  double          __fastcall get_Yesterday(void);
  HRESULT         __fastcall get_Credited(double* pVal/*[out,retval]*/);
  double          __fastcall get_Credited(void);
  HRESULT         __fastcall get_Debited(double* pVal/*[out,retval]*/);
  double          __fastcall get_Debited(void);
  HRESULT         __fastcall get_Frozen(double* pVal/*[out,retval]*/);
  double          __fastcall get_Frozen(void);
  HRESULT         __fastcall get_MaintenanceMargin(double* pVal/*[out,retval]*/);
  double          __fastcall get_MaintenanceMargin(void);
  HRESULT         __fastcall get_Fee(double* pVal/*[out,retval]*/);
  double          __fastcall get_Fee(void);
  HRESULT         __fastcall get_Interest(double* pVal/*[out,retval]*/);
  double          __fastcall get_Interest(void);
  HRESULT         __fastcall get_PositionCost(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionCost(void);
  HRESULT         __fastcall get_PositionValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionValue(void);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall get_Equity(double* pVal/*[out,retval]*/);
  double          __fastcall get_Equity(void);

  __property   double          Initial = {read = get_Initial};
  __property   double          Available = {read = get_Available};
  __property   double          Yesterday = {read = get_Yesterday};
  __property   double          Credited = {read = get_Credited};
  __property   double          Debited = {read = get_Debited};
  __property   double          Frozen = {read = get_Frozen};
  __property   double          MaintenanceMargin = {read = get_MaintenanceMargin};
  __property   double          Fee = {read = get_Fee};
  __property   double          Interest = {read = get_Interest};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          PositionValue = {read = get_PositionValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency};
  __property   double          Equity = {read = get_Equity};
};
typedef TCOMIAccountDetailT<IAccountDetail> TCOMIAccountDetail;

// *********************************************************************//
// DispIntf:  IAccountDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D2EC8E61-48C3-4C8E-A0C8-1035A7C81CBF}
// *********************************************************************//
template<class T>
class IAccountDetailDispT : public TAutoDriver<IAccountDetail>
{
public:
  IAccountDetailDispT(){}

  IAccountDetailDispT(IAccountDetail *pintf)
  {
    TAutoDriver<IAccountDetail>::Bind(pintf, false);
  }

  IAccountDetailDispT(IAccountDetailPtr pintf)
  {
    TAutoDriver<IAccountDetail>::Bind(pintf, true);
  }

  IAccountDetailDispT& operator=(IAccountDetail *pintf)
  {
    TAutoDriver<IAccountDetail>::Bind(pintf, false);
    return *this;
  }

  IAccountDetailDispT& operator=(IAccountDetailPtr pintf)
  {
    TAutoDriver<IAccountDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccountDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccountDetail);
  }

  HRESULT         __fastcall get_Initial(double* pVal/*[out,retval]*/);
  double          __fastcall get_Initial(void);
  HRESULT         __fastcall get_Available(double* pVal/*[out,retval]*/);
  double          __fastcall get_Available(void);
  HRESULT         __fastcall get_Yesterday(double* pVal/*[out,retval]*/);
  double          __fastcall get_Yesterday(void);
  HRESULT         __fastcall get_Credited(double* pVal/*[out,retval]*/);
  double          __fastcall get_Credited(void);
  HRESULT         __fastcall get_Debited(double* pVal/*[out,retval]*/);
  double          __fastcall get_Debited(void);
  HRESULT         __fastcall get_Frozen(double* pVal/*[out,retval]*/);
  double          __fastcall get_Frozen(void);
  HRESULT         __fastcall get_MaintenanceMargin(double* pVal/*[out,retval]*/);
  double          __fastcall get_MaintenanceMargin(void);
  HRESULT         __fastcall get_Fee(double* pVal/*[out,retval]*/);
  double          __fastcall get_Fee(void);
  HRESULT         __fastcall get_Interest(double* pVal/*[out,retval]*/);
  double          __fastcall get_Interest(void);
  HRESULT         __fastcall get_PositionCost(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionCost(void);
  HRESULT         __fastcall get_PositionValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionValue(void);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall get_Equity(double* pVal/*[out,retval]*/);
  double          __fastcall get_Equity(void);

  __property   double          Initial = {read = get_Initial};
  __property   double          Available = {read = get_Available};
  __property   double          Yesterday = {read = get_Yesterday};
  __property   double          Credited = {read = get_Credited};
  __property   double          Debited = {read = get_Debited};
  __property   double          Frozen = {read = get_Frozen};
  __property   double          MaintenanceMargin = {read = get_MaintenanceMargin};
  __property   double          Fee = {read = get_Fee};
  __property   double          Interest = {read = get_Interest};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          PositionValue = {read = get_PositionValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency};
  __property   double          Equity = {read = get_Equity};
};
typedef IAccountDetailDispT<IAccountDetail> IAccountDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIPosition
// Interface: IPosition
// *********************************************************************//
template <class T /* IPosition */ >
class TCOMIPositionT : public TComInterface<IPosition>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPositionT() {}
  TCOMIPositionT(IPosition *intf, bool addRef = false) : TComInterface<IPosition>(intf, addRef) {}
  TCOMIPositionT(const TCOMIPositionT& src) : TComInterface<IPosition>(src) {}
  TCOMIPositionT& operator=(const TCOMIPositionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_Direction(Ptssmolib_tlb::TcPositionDirection* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionDirection __fastcall get_Direction(void);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall get_ForSale(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForSale(void);
  HRESULT         __fastcall get_ForETFCR(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForETFCR(void);
  HRESULT         __fastcall get_ForExercise(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForExercise(void);
  HRESULT         __fastcall get_ForClose(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForClose(void);
  HRESULT         __fastcall get_PositionCost(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionCost(void);
  HRESULT         __fastcall get_UsedMargin(double* pVal/*[out,retval]*/);
  double          __fastcall get_UsedMargin(void);
  HRESULT         __fastcall get_BuyAvgPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BuyAvgPrice(void);
  HRESULT         __fastcall GetPositionQtys(Ptssmolib_tlb::IPositionQtys** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPositionQtys* __fastcall GetPositionQtys(void);

  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   Ptssmolib_tlb::TcPositionDirection Direction = {read = get_Direction};
  __property   long            Position = {read = get_Position};
  __property   long            ForSale = {read = get_ForSale};
  __property   long            ForETFCR = {read = get_ForETFCR};
  __property   long            ForExercise = {read = get_ForExercise};
  __property   long            ForClose = {read = get_ForClose};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          UsedMargin = {read = get_UsedMargin};
  __property   double          BuyAvgPrice = {read = get_BuyAvgPrice};
};
typedef TCOMIPositionT<IPosition> TCOMIPosition;

// *********************************************************************//
// DispIntf:  IPosition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6505206C-C307-47AC-A54B-7847A8F0D791}
// *********************************************************************//
template<class T>
class IPositionDispT : public TAutoDriver<IPosition>
{
public:
  IPositionDispT(){}

  IPositionDispT(IPosition *pintf)
  {
    TAutoDriver<IPosition>::Bind(pintf, false);
  }

  IPositionDispT(IPositionPtr pintf)
  {
    TAutoDriver<IPosition>::Bind(pintf, true);
  }

  IPositionDispT& operator=(IPosition *pintf)
  {
    TAutoDriver<IPosition>::Bind(pintf, false);
    return *this;
  }

  IPositionDispT& operator=(IPositionPtr pintf)
  {
    TAutoDriver<IPosition>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Position));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Position);
  }

  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_Direction(Ptssmolib_tlb::TcPositionDirection* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionDirection __fastcall get_Direction(void);
  HRESULT         __fastcall get_Position(long* pVal/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall get_ForSale(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForSale(void);
  HRESULT         __fastcall get_ForETFCR(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForETFCR(void);
  HRESULT         __fastcall get_ForExercise(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForExercise(void);
  HRESULT         __fastcall get_ForClose(long* pVal/*[out,retval]*/);
  long            __fastcall get_ForClose(void);
  HRESULT         __fastcall get_PositionCost(double* pVal/*[out,retval]*/);
  double          __fastcall get_PositionCost(void);
  HRESULT         __fastcall get_UsedMargin(double* pVal/*[out,retval]*/);
  double          __fastcall get_UsedMargin(void);
  HRESULT         __fastcall get_BuyAvgPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BuyAvgPrice(void);
  HRESULT         __fastcall GetPositionQtys(Ptssmolib_tlb::IPositionQtys** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPositionQtys* __fastcall GetPositionQtys(void);

  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   Ptssmolib_tlb::TcPositionDirection Direction = {read = get_Direction};
  __property   long            Position = {read = get_Position};
  __property   long            ForSale = {read = get_ForSale};
  __property   long            ForETFCR = {read = get_ForETFCR};
  __property   long            ForExercise = {read = get_ForExercise};
  __property   long            ForClose = {read = get_ForClose};
  __property   double          PositionCost = {read = get_PositionCost};
  __property   double          UsedMargin = {read = get_UsedMargin};
  __property   double          BuyAvgPrice = {read = get_BuyAvgPrice};
};
typedef IPositionDispT<IPosition> IPositionDisp;

// *********************************************************************//
// SmartIntf: TCOMIPositionQtys
// Interface: IPositionQtys
// *********************************************************************//
template <class T /* IPositionQtys */ >
class TCOMIPositionQtysT : public TComInterface<IPositionQtys>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPositionQtysT() {}
  TCOMIPositionQtysT(IPositionQtys *intf, bool addRef = false) : TComInterface<IPositionQtys>(intf, addRef) {}
  TCOMIPositionQtysT(const TCOMIPositionQtysT& src) : TComInterface<IPositionQtys>(src) {}
  TCOMIPositionQtysT& operator=(const TCOMIPositionQtysT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPositionQty** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPositionQty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIPositionQtysT<IPositionQtys> TCOMIPositionQtys;

// *********************************************************************//
// DispIntf:  IPositionQtys
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EDA0A35-9565-493F-9C35-A8DD67DF3A4F}
// *********************************************************************//
template<class T>
class IPositionQtysDispT : public TAutoDriver<IPositionQtys>
{
public:
  IPositionQtysDispT(){}

  IPositionQtysDispT(IPositionQtys *pintf)
  {
    TAutoDriver<IPositionQtys>::Bind(pintf, false);
  }

  IPositionQtysDispT(IPositionQtysPtr pintf)
  {
    TAutoDriver<IPositionQtys>::Bind(pintf, true);
  }

  IPositionQtysDispT& operator=(IPositionQtys *pintf)
  {
    TAutoDriver<IPositionQtys>::Bind(pintf, false);
    return *this;
  }

  IPositionQtysDispT& operator=(IPositionQtysPtr pintf)
  {
    TAutoDriver<IPositionQtys>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PositionQtys));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PositionQtys);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPositionQty** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPositionQty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IPositionQtysDispT<IPositionQtys> IPositionQtysDisp;

// *********************************************************************//
// SmartIntf: TCOMIPositionQty
// Interface: IPositionQty
// *********************************************************************//
template <class T /* IPositionQty */ >
class TCOMIPositionQtyT : public TComInterface<IPositionQty>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPositionQtyT() {}
  TCOMIPositionQtyT(IPositionQty *intf, bool addRef = false) : TComInterface<IPositionQty>(intf, addRef) {}
  TCOMIPositionQtyT(const TCOMIPositionQtyT& src) : TComInterface<IPositionQty>(src) {}
  TCOMIPositionQtyT& operator=(const TCOMIPositionQtyT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcPositionType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionType __fastcall get_Type(void);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall get_FrozenQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_FrozenQty(void);

  __property   Ptssmolib_tlb::TcPositionType Type = {read = get_Type};
  __property   long            Quantity = {read = get_Quantity};
  __property   long            FrozenQty = {read = get_FrozenQty};
};
typedef TCOMIPositionQtyT<IPositionQty> TCOMIPositionQty;

// *********************************************************************//
// DispIntf:  IPositionQty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EA20B86-1C3A-4CC7-A2FA-AEDE6A8A558B}
// *********************************************************************//
template<class T>
class IPositionQtyDispT : public TAutoDriver<IPositionQty>
{
public:
  IPositionQtyDispT(){}

  IPositionQtyDispT(IPositionQty *pintf)
  {
    TAutoDriver<IPositionQty>::Bind(pintf, false);
  }

  IPositionQtyDispT(IPositionQtyPtr pintf)
  {
    TAutoDriver<IPositionQty>::Bind(pintf, true);
  }

  IPositionQtyDispT& operator=(IPositionQty *pintf)
  {
    TAutoDriver<IPositionQty>::Bind(pintf, false);
    return *this;
  }

  IPositionQtyDispT& operator=(IPositionQtyPtr pintf)
  {
    TAutoDriver<IPositionQty>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PositionQty));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PositionQty);
  }

  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcPositionType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPositionType __fastcall get_Type(void);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall get_FrozenQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_FrozenQty(void);

  __property   Ptssmolib_tlb::TcPositionType Type = {read = get_Type};
  __property   long            Quantity = {read = get_Quantity};
  __property   long            FrozenQty = {read = get_FrozenQty};
};
typedef IPositionQtyDispT<IPositionQty> IPositionQtyDisp;

// *********************************************************************//
// SmartIntf: TCOMIPositions
// Interface: IPositions
// *********************************************************************//
template <class T /* IPositions */ >
class TCOMIPositionsT : public TComInterface<IPositions>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPositionsT() {}
  TCOMIPositionsT(IPositions *intf, bool addRef = false) : TComInterface<IPositions>(intf, addRef) {}
  TCOMIPositionsT(const TCOMIPositionsT& src) : TComInterface<IPositions>(src) {}
  TCOMIPositionsT& operator=(const TCOMIPositionsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPosition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIPositionsT<IPositions> TCOMIPositions;

// *********************************************************************//
// DispIntf:  IPositions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86769964-1C01-447B-B025-E844BCB42C48}
// *********************************************************************//
template<class T>
class IPositionsDispT : public TAutoDriver<IPositions>
{
public:
  IPositionsDispT(){}

  IPositionsDispT(IPositions *pintf)
  {
    TAutoDriver<IPositions>::Bind(pintf, false);
  }

  IPositionsDispT(IPositionsPtr pintf)
  {
    TAutoDriver<IPositions>::Bind(pintf, true);
  }

  IPositionsDispT& operator=(IPositions *pintf)
  {
    TAutoDriver<IPositions>::Bind(pintf, false);
    return *this;
  }

  IPositionsDispT& operator=(IPositionsPtr pintf)
  {
    TAutoDriver<IPositions>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Positions));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Positions);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPosition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IPositionsDispT<IPositions> IPositionsDisp;

typedef TComInterface<IObjectPermission>  TCOMIObjectPermission;

// *********************************************************************//
// DispIntf:  IObjectPermission
// Flags:     (448) Dual NonExtensible OleAutomation
// GUID:      {38669BFB-21BF-4FFC-BFB3-26A9A70A02BC}
// *********************************************************************//
template<class T>
class IObjectPermissionDispT : public TAutoDriver<IObjectPermission>
{
public:
  IObjectPermissionDispT(){}

  IObjectPermissionDispT(IObjectPermission *pintf)
  {
    TAutoDriver<IObjectPermission>::Bind(pintf, false);
  }

  IObjectPermissionDispT(IObjectPermissionPtr pintf)
  {
    TAutoDriver<IObjectPermission>::Bind(pintf, true);
  }

  IObjectPermissionDispT& operator=(IObjectPermission *pintf)
  {
    TAutoDriver<IObjectPermission>::Bind(pintf, false);
    return *this;
  }

  IObjectPermissionDispT& operator=(IObjectPermissionPtr pintf)
  {
    TAutoDriver<IObjectPermission>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Deny(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                  BSTR GranteeName/*[in]*/);
  HRESULT         __fastcall Grant(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                   BSTR GranteeName/*[in]*/);
  HRESULT         __fastcall Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                    BSTR GranteeName/*[in]*/);
  HRESULT         __fastcall ListPermissions(Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListPermissions(void);
  HRESULT         __fastcall ListUserPermissions(BSTR UserName/*[in]*/, 
                                                 Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListUserPermissions(BSTR UserName/*[in]*/);

};
typedef IObjectPermissionDispT<IObjectPermission> IObjectPermissionDisp;

// *********************************************************************//
// SmartIntf: TCOMIFutureDetail
// Interface: IFutureDetail
// *********************************************************************//
template <class T /* IFutureDetail */ >
class TCOMIFutureDetailT : public TComInterface<IFutureDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFutureDetailT() {}
  TCOMIFutureDetailT(IFutureDetail *intf, bool addRef = false) : TComInterface<IFutureDetail>(intf, addRef) {}
  TCOMIFutureDetailT(const TCOMIFutureDetailT& src) : TComInterface<IFutureDetail>(src) {}
  TCOMIFutureDetailT& operator=(const TCOMIFutureDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Multiple(long* pVal/*[out,retval]*/);
  long            __fastcall get_Multiple(void);
  HRESULT         __fastcall set_Multiple(long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_MarginRatio(void);
  HRESULT         __fastcall set_MarginRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Month(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Month(void);
  HRESULT         __fastcall set_Month(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LastTradeDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTradeDay(void);
  HRESULT         __fastcall set_LastTradeDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SettlDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SettlDay(void);
  HRESULT         __fastcall set_SettlDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall set_SettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_PreSettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreSettlPrice(void);
  HRESULT         __fastcall set_PreSettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  HRESULT         __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);

  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          MarginRatio = {read = get_MarginRatio, write = set_MarginRatio};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            LastTradeDay = {read = get_LastTradeDay, write = set_LastTradeDay};
  __property   BSTR            SettlDay = {read = get_SettlDay, write = set_SettlDay};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   double          PreSettlPrice = {read = get_PreSettlPrice, write = set_PreSettlPrice};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};
};
typedef TCOMIFutureDetailT<IFutureDetail> TCOMIFutureDetail;

// *********************************************************************//
// DispIntf:  IFutureDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {59A40B13-1DA3-41F7-BE52-2B4F62E2A393}
// *********************************************************************//
template<class T>
class IFutureDetailDispT : public TAutoDriver<IFutureDetail>
{
public:
  IFutureDetailDispT(){}

  IFutureDetailDispT(IFutureDetail *pintf)
  {
    TAutoDriver<IFutureDetail>::Bind(pintf, false);
  }

  IFutureDetailDispT(IFutureDetailPtr pintf)
  {
    TAutoDriver<IFutureDetail>::Bind(pintf, true);
  }

  IFutureDetailDispT& operator=(IFutureDetail *pintf)
  {
    TAutoDriver<IFutureDetail>::Bind(pintf, false);
    return *this;
  }

  IFutureDetailDispT& operator=(IFutureDetailPtr pintf)
  {
    TAutoDriver<IFutureDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FutureDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FutureDetail);
  }

  HRESULT         __fastcall get_Multiple(long* pVal/*[out,retval]*/);
  long            __fastcall get_Multiple(void);
  HRESULT         __fastcall set_Multiple(long pVal/*[in]*/);
  HRESULT         __fastcall get_MarginRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_MarginRatio(void);
  HRESULT         __fastcall set_MarginRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Month(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Month(void);
  HRESULT         __fastcall set_Month(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LastTradeDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTradeDay(void);
  HRESULT         __fastcall set_LastTradeDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_SettlDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SettlDay(void);
  HRESULT         __fastcall set_SettlDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall set_SettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_PreSettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreSettlPrice(void);
  HRESULT         __fastcall set_PreSettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  HRESULT         __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          MarginRatio = {read = get_MarginRatio, write = set_MarginRatio};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            LastTradeDay = {read = get_LastTradeDay, write = set_LastTradeDay};
  __property   BSTR            SettlDay = {read = get_SettlDay, write = set_SettlDay};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   double          PreSettlPrice = {read = get_PreSettlPrice, write = set_PreSettlPrice};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef IFutureDetailDispT<IFutureDetail> IFutureDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIFundDetail
// Interface: IFundDetail
// *********************************************************************//
template <class T /* IFundDetail */ >
class TCOMIFundDetailT : public TComInterface<IFundDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFundDetailT() {}
  TCOMIFundDetailT(IFundDetail *intf, bool addRef = false) : TComInterface<IFundDetail>(intf, addRef) {}
  TCOMIFundDetailT(const TCOMIFundDetailT& src) : TComInterface<IFundDetail>(src) {}
  TCOMIFundDetailT& operator=(const TCOMIFundDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Unit(long* pVal/*[out,retval]*/);
  long            __fastcall get_Unit(void);
  HRESULT         __fastcall set_Unit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxCashRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_MaxCashRatio(void);
  HRESULT         __fastcall set_MaxCashRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsPublish(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsPublish(void);
  HRESULT         __fastcall set_IsPublish(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsAllowCreation(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAllowCreation(void);
  HRESULT         __fastcall set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsAllowRedemption(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAllowRedemption(void);
  HRESULT         __fastcall set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RecordNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_RecordNum(void);
  HRESULT         __fastcall set_RecordNum(long pVal/*[in]*/);
  HRESULT         __fastcall get_EstimateCash(double* pVal/*[out,retval]*/);
  double          __fastcall get_EstimateCash(void);
  HRESULT         __fastcall set_EstimateCash(double pVal/*[in]*/);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall set_TradingDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PreTradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PreTradingDay(void);
  HRESULT         __fastcall set_PreTradingDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CashComponent(double* pVal/*[out,retval]*/);
  double          __fastcall get_CashComponent(void);
  HRESULT         __fastcall set_CashComponent(double pVal/*[in]*/);
  HRESULT         __fastcall AddMember(BSTR InstID/*[in]*/, 
                                       Ptssmolib_tlb::IFundMember** ppFundMember/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall AddMember(BSTR InstID/*[in]*/);
  HRESULT         __fastcall DropMember(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetMembers(Ptssmolib_tlb::IFundMembers** ppMembers/*[out,retval]*/);
  Ptssmolib_tlb::IFundMembers* __fastcall GetMembers(void);

  __property   long            Unit = {read = get_Unit, write = set_Unit};
  __property   double          MaxCashRatio = {read = get_MaxCashRatio, write = set_MaxCashRatio};
  __property   VARIANT_BOOL    IsPublish = {read = get_IsPublish, write = set_IsPublish};
  __property   VARIANT_BOOL    IsAllowCreation = {read = get_IsAllowCreation, write = set_IsAllowCreation};
  __property   VARIANT_BOOL    IsAllowRedemption = {read = get_IsAllowRedemption, write = set_IsAllowRedemption};
  __property   long            RecordNum = {read = get_RecordNum, write = set_RecordNum};
  __property   double          EstimateCash = {read = get_EstimateCash, write = set_EstimateCash};
  __property   BSTR            TradingDay = {read = get_TradingDay, write = set_TradingDay};
  __property   BSTR            PreTradingDay = {read = get_PreTradingDay, write = set_PreTradingDay};
  __property   double          CashComponent = {read = get_CashComponent, write = set_CashComponent};
};
typedef TCOMIFundDetailT<IFundDetail> TCOMIFundDetail;

// *********************************************************************//
// DispIntf:  IFundDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9374C88C-99EB-463E-869C-60F1A5F1D3AD}
// *********************************************************************//
template<class T>
class IFundDetailDispT : public TAutoDriver<IFundDetail>
{
public:
  IFundDetailDispT(){}

  IFundDetailDispT(IFundDetail *pintf)
  {
    TAutoDriver<IFundDetail>::Bind(pintf, false);
  }

  IFundDetailDispT(IFundDetailPtr pintf)
  {
    TAutoDriver<IFundDetail>::Bind(pintf, true);
  }

  IFundDetailDispT& operator=(IFundDetail *pintf)
  {
    TAutoDriver<IFundDetail>::Bind(pintf, false);
    return *this;
  }

  IFundDetailDispT& operator=(IFundDetailPtr pintf)
  {
    TAutoDriver<IFundDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FundDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FundDetail);
  }

  HRESULT         __fastcall get_Unit(long* pVal/*[out,retval]*/);
  long            __fastcall get_Unit(void);
  HRESULT         __fastcall set_Unit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxCashRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_MaxCashRatio(void);
  HRESULT         __fastcall set_MaxCashRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsPublish(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsPublish(void);
  HRESULT         __fastcall set_IsPublish(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsAllowCreation(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAllowCreation(void);
  HRESULT         __fastcall set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsAllowRedemption(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAllowRedemption(void);
  HRESULT         __fastcall set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RecordNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_RecordNum(void);
  HRESULT         __fastcall set_RecordNum(long pVal/*[in]*/);
  HRESULT         __fastcall get_EstimateCash(double* pVal/*[out,retval]*/);
  double          __fastcall get_EstimateCash(void);
  HRESULT         __fastcall set_EstimateCash(double pVal/*[in]*/);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall set_TradingDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PreTradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PreTradingDay(void);
  HRESULT         __fastcall set_PreTradingDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CashComponent(double* pVal/*[out,retval]*/);
  double          __fastcall get_CashComponent(void);
  HRESULT         __fastcall set_CashComponent(double pVal/*[in]*/);
  HRESULT         __fastcall AddMember(BSTR InstID/*[in]*/, 
                                       Ptssmolib_tlb::IFundMember** ppFundMember/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall AddMember(BSTR InstID/*[in]*/);
  HRESULT         __fastcall DropMember(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetMembers(Ptssmolib_tlb::IFundMembers** ppMembers/*[out,retval]*/);
  Ptssmolib_tlb::IFundMembers* __fastcall GetMembers(void);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   long            Unit = {read = get_Unit, write = set_Unit};
  __property   double          MaxCashRatio = {read = get_MaxCashRatio, write = set_MaxCashRatio};
  __property   VARIANT_BOOL    IsPublish = {read = get_IsPublish, write = set_IsPublish};
  __property   VARIANT_BOOL    IsAllowCreation = {read = get_IsAllowCreation, write = set_IsAllowCreation};
  __property   VARIANT_BOOL    IsAllowRedemption = {read = get_IsAllowRedemption, write = set_IsAllowRedemption};
  __property   long            RecordNum = {read = get_RecordNum, write = set_RecordNum};
  __property   double          EstimateCash = {read = get_EstimateCash, write = set_EstimateCash};
  __property   BSTR            TradingDay = {read = get_TradingDay, write = set_TradingDay};
  __property   BSTR            PreTradingDay = {read = get_PreTradingDay, write = set_PreTradingDay};
  __property   double          CashComponent = {read = get_CashComponent, write = set_CashComponent};

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef IFundDetailDispT<IFundDetail> IFundDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIFundMember
// Interface: IFundMember
// *********************************************************************//
template <class T /* IFundMember */ >
class TCOMIFundMemberT : public TComInterface<IFundMember>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFundMemberT() {}
  TCOMIFundMemberT(IFundMember *intf, bool addRef = false) : TComInterface<IFundMember>(intf, addRef) {}
  TCOMIFundMemberT(const TCOMIFundMemberT& src) : TComInterface<IFundMember>(src) {}
  TCOMIFundMemberT& operator=(const TCOMIFundMemberT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall set_Quantity(long pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCashReplaceFlag __fastcall get_ReplaceFlag(void);
  HRESULT         __fastcall set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ReplaceRatio(void);
  HRESULT         __fastcall set_ReplaceRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceCash(double* pVal/*[out,retval]*/);
  double          __fastcall get_ReplaceCash(void);
  HRESULT         __fastcall set_ReplaceCash(double pVal/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   Ptssmolib_tlb::TcCashReplaceFlag ReplaceFlag = {read = get_ReplaceFlag, write = set_ReplaceFlag};
  __property   double          ReplaceRatio = {read = get_ReplaceRatio, write = set_ReplaceRatio};
  __property   double          ReplaceCash = {read = get_ReplaceCash, write = set_ReplaceCash};
};
typedef TCOMIFundMemberT<IFundMember> TCOMIFundMember;

// *********************************************************************//
// DispIntf:  IFundMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {490175F2-5CF2-41B9-BF31-9F9D0A99C0B6}
// *********************************************************************//
template<class T>
class IFundMemberDispT : public TAutoDriver<IFundMember>
{
public:
  IFundMemberDispT(){}

  IFundMemberDispT(IFundMember *pintf)
  {
    TAutoDriver<IFundMember>::Bind(pintf, false);
  }

  IFundMemberDispT(IFundMemberPtr pintf)
  {
    TAutoDriver<IFundMember>::Bind(pintf, true);
  }

  IFundMemberDispT& operator=(IFundMember *pintf)
  {
    TAutoDriver<IFundMember>::Bind(pintf, false);
    return *this;
  }

  IFundMemberDispT& operator=(IFundMemberPtr pintf)
  {
    TAutoDriver<IFundMember>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FundMember));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FundMember);
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Quantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_Quantity(void);
  HRESULT         __fastcall set_Quantity(long pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCashReplaceFlag __fastcall get_ReplaceFlag(void);
  HRESULT         __fastcall set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ReplaceRatio(void);
  HRESULT         __fastcall set_ReplaceRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ReplaceCash(double* pVal/*[out,retval]*/);
  double          __fastcall get_ReplaceCash(void);
  HRESULT         __fastcall set_ReplaceCash(double pVal/*[in]*/);

  __property   BSTR            ID = {read = get_ID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Quantity = {read = get_Quantity, write = set_Quantity};
  __property   Ptssmolib_tlb::TcCashReplaceFlag ReplaceFlag = {read = get_ReplaceFlag, write = set_ReplaceFlag};
  __property   double          ReplaceRatio = {read = get_ReplaceRatio, write = set_ReplaceRatio};
  __property   double          ReplaceCash = {read = get_ReplaceCash, write = set_ReplaceCash};
};
typedef IFundMemberDispT<IFundMember> IFundMemberDisp;

// *********************************************************************//
// SmartIntf: TCOMIFundMembers
// Interface: IFundMembers
// *********************************************************************//
template <class T /* IFundMembers */ >
class TCOMIFundMembersT : public TComInterface<IFundMembers>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFundMembersT() {}
  TCOMIFundMembersT(IFundMembers *intf, bool addRef = false) : TComInterface<IFundMembers>(intf, addRef) {}
  TCOMIFundMembersT(const TCOMIFundMembersT& src) : TComInterface<IFundMembers>(src) {}
  TCOMIFundMembersT& operator=(const TCOMIFundMembersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_ItemByID(BSTR ID/*[in]*/, 
                                          Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall get_ItemByID(BSTR ID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIFundMembersT<IFundMembers> TCOMIFundMembers;

// *********************************************************************//
// DispIntf:  IFundMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B921350-7518-4F0D-BD8F-9866FF54EF99}
// *********************************************************************//
template<class T>
class IFundMembersDispT : public TAutoDriver<IFundMembers>
{
public:
  IFundMembersDispT(){}

  IFundMembersDispT(IFundMembers *pintf)
  {
    TAutoDriver<IFundMembers>::Bind(pintf, false);
  }

  IFundMembersDispT(IFundMembersPtr pintf)
  {
    TAutoDriver<IFundMembers>::Bind(pintf, true);
  }

  IFundMembersDispT& operator=(IFundMembers *pintf)
  {
    TAutoDriver<IFundMembers>::Bind(pintf, false);
    return *this;
  }

  IFundMembersDispT& operator=(IFundMembersPtr pintf)
  {
    TAutoDriver<IFundMembers>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FundMembers));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FundMembers);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_ItemByID(BSTR ID/*[in]*/, 
                                          Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IFundMember* __fastcall get_ItemByID(BSTR ID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IFundMembersDispT<IFundMembers> IFundMembersDisp;

// *********************************************************************//
// SmartIntf: TCOMIOptionDetail
// Interface: IOptionDetail
// *********************************************************************//
template <class T /* IOptionDetail */ >
class TCOMIOptionDetailT : public TComInterface<IOptionDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOptionDetailT() {}
  TCOMIOptionDetailT(IOptionDetail *intf, bool addRef = false) : TComInterface<IOptionDetail>(intf, addRef) {}
  TCOMIOptionDetailT(const TCOMIOptionDetailT& src) : TComInterface<IOptionDetail>(src) {}
  TCOMIOptionDetailT& operator=(const TCOMIOptionDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Multiple(long* pVal/*[out,retval]*/);
  long            __fastcall get_Multiple(void);
  HRESULT         __fastcall set_Multiple(long pVal/*[in]*/);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall set_SettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_Month(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Month(void);
  HRESULT         __fastcall set_Month(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_OptionType(Ptssmolib_tlb::TcOptionType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOptionType __fastcall get_OptionType(void);
  HRESULT         __fastcall set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  HRESULT         __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDay(void);
  HRESULT         __fastcall set_ExpiryDay(BSTR pVal/*[in]*/);

  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcOptionType OptionType = {read = get_OptionType, write = set_OptionType};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   BSTR            ExpiryDay = {read = get_ExpiryDay, write = set_ExpiryDay};
};
typedef TCOMIOptionDetailT<IOptionDetail> TCOMIOptionDetail;

// *********************************************************************//
// DispIntf:  IOptionDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BCD8BC2D-A7EE-4242-8A43-5AFEB778099F}
// *********************************************************************//
template<class T>
class IOptionDetailDispT : public TAutoDriver<IOptionDetail>
{
public:
  IOptionDetailDispT(){}

  IOptionDetailDispT(IOptionDetail *pintf)
  {
    TAutoDriver<IOptionDetail>::Bind(pintf, false);
  }

  IOptionDetailDispT(IOptionDetailPtr pintf)
  {
    TAutoDriver<IOptionDetail>::Bind(pintf, true);
  }

  IOptionDetailDispT& operator=(IOptionDetail *pintf)
  {
    TAutoDriver<IOptionDetail>::Bind(pintf, false);
    return *this;
  }

  IOptionDetailDispT& operator=(IOptionDetailPtr pintf)
  {
    TAutoDriver<IOptionDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OptionDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OptionDetail);
  }

  HRESULT         __fastcall get_Multiple(long* pVal/*[out,retval]*/);
  long            __fastcall get_Multiple(void);
  HRESULT         __fastcall set_Multiple(long pVal/*[in]*/);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall set_SettlPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_Month(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Month(void);
  HRESULT         __fastcall set_Month(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_OptionType(Ptssmolib_tlb::TcOptionType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOptionType __fastcall get_OptionType(void);
  HRESULT         __fastcall set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  HRESULT         __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  HRESULT         __fastcall get_ExpiryDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExpiryDay(void);
  HRESULT         __fastcall set_ExpiryDay(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   long            Multiple = {read = get_Multiple, write = set_Multiple};
  __property   double          SettlPrice = {read = get_SettlPrice, write = set_SettlPrice};
  __property   BSTR            Month = {read = get_Month, write = set_Month};
  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcOptionType OptionType = {read = get_OptionType, write = set_OptionType};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   BSTR            ExpiryDay = {read = get_ExpiryDay, write = set_ExpiryDay};

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef IOptionDetailDispT<IOptionDetail> IOptionDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIWarrantDetail
// Interface: IWarrantDetail
// *********************************************************************//
template <class T /* IWarrantDetail */ >
class TCOMIWarrantDetailT : public TComInterface<IWarrantDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIWarrantDetailT() {}
  TCOMIWarrantDetailT(IWarrantDetail *intf, bool addRef = false) : TComInterface<IWarrantDetail>(intf, addRef) {}
  TCOMIWarrantDetailT(const TCOMIWarrantDetailT& src) : TComInterface<IWarrantDetail>(src) {}
  TCOMIWarrantDetailT& operator=(const TCOMIWarrantDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WarrantType(Ptssmolib_tlb::TcWarrantType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcWarrantType __fastcall get_WarrantType(void);
  HRESULT         __fastcall set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/);
  HRESULT         __fastcall get_ExercisePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExercisePrice(void);
  HRESULT         __fastcall set_ExercisePrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExerciseRatio(void);
  HRESULT         __fastcall set_ExerciseRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  HRESULT         __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  HRESULT         __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_DeliveryPrice(void);
  HRESULT         __fastcall set_DeliveryPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DeliveryDate(void);
  HRESULT         __fastcall set_DeliveryDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExerciseCode(void);
  HRESULT         __fastcall set_ExerciseCode(BSTR pVal/*[in]*/);

  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcWarrantType WarrantType = {read = get_WarrantType, write = set_WarrantType};
  __property   double          ExercisePrice = {read = get_ExercisePrice, write = set_ExercisePrice};
  __property   double          ExerciseRatio = {read = get_ExerciseRatio, write = set_ExerciseRatio};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};
  __property   double          DeliveryPrice = {read = get_DeliveryPrice, write = set_DeliveryPrice};
  __property   BSTR            DeliveryDate = {read = get_DeliveryDate, write = set_DeliveryDate};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   BSTR            ExerciseCode = {read = get_ExerciseCode, write = set_ExerciseCode};
};
typedef TCOMIWarrantDetailT<IWarrantDetail> TCOMIWarrantDetail;

// *********************************************************************//
// DispIntf:  IWarrantDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3007FB97-9481-414F-BEDD-8408BD85CF0D}
// *********************************************************************//
template<class T>
class IWarrantDetailDispT : public TAutoDriver<IWarrantDetail>
{
public:
  IWarrantDetailDispT(){}

  IWarrantDetailDispT(IWarrantDetail *pintf)
  {
    TAutoDriver<IWarrantDetail>::Bind(pintf, false);
  }

  IWarrantDetailDispT(IWarrantDetailPtr pintf)
  {
    TAutoDriver<IWarrantDetail>::Bind(pintf, true);
  }

  IWarrantDetailDispT& operator=(IWarrantDetail *pintf)
  {
    TAutoDriver<IWarrantDetail>::Bind(pintf, false);
    return *this;
  }

  IWarrantDetailDispT& operator=(IWarrantDetailPtr pintf)
  {
    TAutoDriver<IWarrantDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WarrantDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WarrantDetail);
  }

  HRESULT         __fastcall get_Underlying(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Underlying(void);
  HRESULT         __fastcall set_Underlying(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_WarrantType(Ptssmolib_tlb::TcWarrantType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcWarrantType __fastcall get_WarrantType(void);
  HRESULT         __fastcall set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/);
  HRESULT         __fastcall get_ExercisePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExercisePrice(void);
  HRESULT         __fastcall set_ExercisePrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExerciseRatio(void);
  HRESULT         __fastcall set_ExerciseRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  HRESULT         __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  HRESULT         __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_DeliveryPrice(void);
  HRESULT         __fastcall set_DeliveryPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_DeliveryDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DeliveryDate(void);
  HRESULT         __fastcall set_DeliveryDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_UnderlyingSrc(long* pVal/*[out,retval]*/);
  long            __fastcall get_UnderlyingSrc(void);
  HRESULT         __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExerciseCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExerciseCode(void);
  HRESULT         __fastcall set_ExerciseCode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_IDSource(void);
  HRESULT         __fastcall get_Prefix(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Prefix(void);
  HRESULT         __fastcall set_Prefix(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  HRESULT         __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  HRESULT         __fastcall get_BuyLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BuyLotQty(void);
  HRESULT         __fastcall set_BuyLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_SellLotQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_SellLotQty(void);
  HRESULT         __fastcall set_SellLotQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinTradeUnit(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinTradeUnit(void);
  HRESULT         __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  HRESULT         __fastcall get_MaxOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxOrderSize(void);
  HRESULT         __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinOrderSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinOrderSize(void);
  HRESULT         __fastcall set_MinOrderSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_MinQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_MinQty(void);
  HRESULT         __fastcall set_MinQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxUpLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  HRESULT         __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_OrderPxLoLimit(double* pVal/*[out,retval]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  HRESULT         __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  HRESULT         __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  HRESULT         __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  HRESULT         __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  HRESULT         __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  HRESULT         __fastcall get_ParValue(long* pVal/*[out,retval]*/);
  long            __fastcall get_ParValue(void);
  HRESULT         __fastcall set_ParValue(long pVal/*[in]*/);
  HRESULT         __fastcall get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);

  __property   BSTR            Underlying = {read = get_Underlying, write = set_Underlying};
  __property   Ptssmolib_tlb::TcWarrantType WarrantType = {read = get_WarrantType, write = set_WarrantType};
  __property   double          ExercisePrice = {read = get_ExercisePrice, write = set_ExercisePrice};
  __property   double          ExerciseRatio = {read = get_ExerciseRatio, write = set_ExerciseRatio};
  __property   Ptssmolib_tlb::TcExerciseStyle ExerciseStyle = {read = get_ExerciseStyle, write = set_ExerciseStyle};
  __property   Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle = {read = get_DeliveryStyle, write = set_DeliveryStyle};
  __property   double          DeliveryPrice = {read = get_DeliveryPrice, write = set_DeliveryPrice};
  __property   BSTR            DeliveryDate = {read = get_DeliveryDate, write = set_DeliveryDate};
  __property   long            UnderlyingSrc = {read = get_UnderlyingSrc, write = set_UnderlyingSrc};
  __property   BSTR            ExerciseCode = {read = get_ExerciseCode, write = set_ExerciseCode};

  __property   BSTR            ID = {read = get_ID};
  __property   long            IDSource = {read = get_IDSource};
  __property   BSTR            Prefix = {read = get_Prefix, write = set_Prefix};
  __property   Ptssmolib_tlb::TcOrderLotLimitType LotLimitType = {read = get_LotLimitType, write = set_LotLimitType};
  __property   long            BuyLotQty = {read = get_BuyLotQty, write = set_BuyLotQty};
  __property   long            SellLotQty = {read = get_SellLotQty, write = set_SellLotQty};
  __property   long            MinTradeUnit = {read = get_MinTradeUnit, write = set_MinTradeUnit};
  __property   long            MaxOrderSize = {read = get_MaxOrderSize, write = set_MaxOrderSize};
  __property   long            MinOrderSize = {read = get_MinOrderSize, write = set_MinOrderSize};
  __property   long            MinQty = {read = get_MinQty, write = set_MinQty};
  __property   double          OrderPxUpLimit = {read = get_OrderPxUpLimit, write = set_OrderPxUpLimit};
  __property   double          OrderPxLoLimit = {read = get_OrderPxLoLimit, write = set_OrderPxLoLimit};
  __property   VARIANT_BOOL    IsValidMarketOrder = {read = get_IsValidMarketOrder, write = set_IsValidMarketOrder};
  __property   VARIANT_BOOL    IsValidLimitOrder = {read = get_IsValidLimitOrder, write = set_IsValidLimitOrder};
  __property   VARIANT_BOOL    IsValidIcebergOrder = {read = get_IsValidIcebergOrder, write = set_IsValidIcebergOrder};
  __property   Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate = {read = get_FinancingIndicate, write = set_FinancingIndicate};
  __property   long            ParValue = {read = get_ParValue, write = set_ParValue};
  __property   Ptssmolib_tlb::TcCurrencyType Currency = {read = get_Currency, write = set_Currency};
};
typedef IWarrantDetailDispT<IWarrantDetail> IWarrantDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMICustomer
// Interface: ICustomer
// *********************************************************************//
template <class T /* ICustomer */ >
class TCOMICustomerT : public TComInterface<ICustomer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICustomerT() {}
  TCOMICustomerT(ICustomer *intf, bool addRef = false) : TComInterface<ICustomer>(intf, addRef) {}
  TCOMICustomerT(const TCOMICustomerT& src) : TComInterface<ICustomer>(src) {}
  TCOMICustomerT& operator=(const TCOMICustomerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall set_FullName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CompanyName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CompanyName(void);
  HRESULT         __fastcall set_CompanyName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_JobTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_JobTitle(void);
  HRESULT         __fastcall set_JobTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email(void);
  HRESULT         __fastcall set_Email(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email1(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email1(void);
  HRESULT         __fastcall set_Email1(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email2(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email2(void);
  HRESULT         __fastcall set_Email2(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Website(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Website(void);
  HRESULT         __fastcall set_Website(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IM(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IM(void);
  HRESULT         __fastcall set_IM(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExchangeAccounts(Ptssmolib_tlb::IExchangeAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccountsPtr __fastcall get_ExchangeAccounts(void);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  HRESULT         __fastcall GetDetails(Ptssmolib_tlb::ICustomerDetail** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomerDetail* __fastcall GetDetails(void);
  HRESULT         __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/);
  HRESULT         __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                              Ptssmolib_tlb::IPostalAddress** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPostalAddress* __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/);
  HRESULT         __fastcall SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/);
  HRESULT         __fastcall SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                            BSTR newVal/*[in]*/);
  HRESULT         __fastcall SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                              Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/);
  HRESULT         __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/, 
                                         long* pID/*[out,retval]*/);
  long            __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/);
  HRESULT         __fastcall DropAuthInfo(long AuthID/*[in]*/);
  HRESULT         __fastcall DenyAuth(long AuthID/*[in]*/);
  HRESULT         __fastcall GrantAuth(long AuthID/*[in]*/);
  HRESULT         __fastcall ListAuthInfo(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListAuthInfo(void);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            ID = {read = get_ID};
  __property   BSTR            FullName = {read = get_FullName, write = set_FullName};
  __property   BSTR            CompanyName = {read = get_CompanyName, write = set_CompanyName};
  __property   BSTR            JobTitle = {read = get_JobTitle, write = set_JobTitle};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   BSTR            Email1 = {read = get_Email1, write = set_Email1};
  __property   BSTR            Email2 = {read = get_Email2, write = set_Email2};
  __property   BSTR            Website = {read = get_Website, write = set_Website};
  __property   BSTR            IM = {read = get_IM, write = set_IM};
  __property   Ptssmolib_tlb::IExchangeAccountsPtr ExchangeAccounts = {read = get_ExchangeAccounts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMICustomerT<ICustomer> TCOMICustomer;

// *********************************************************************//
// DispIntf:  ICustomer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B457138-0D6B-4BF1-951A-18CB86093855}
// *********************************************************************//
template<class T>
class ICustomerDispT : public TAutoDriver<ICustomer>
{
public:
  ICustomerDispT(){}

  ICustomerDispT(ICustomer *pintf)
  {
    TAutoDriver<ICustomer>::Bind(pintf, false);
  }

  ICustomerDispT(ICustomerPtr pintf)
  {
    TAutoDriver<ICustomer>::Bind(pintf, true);
  }

  ICustomerDispT& operator=(ICustomer *pintf)
  {
    TAutoDriver<ICustomer>::Bind(pintf, false);
    return *this;
  }

  ICustomerDispT& operator=(ICustomerPtr pintf)
  {
    TAutoDriver<ICustomer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Customer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Customer);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_FullName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FullName(void);
  HRESULT         __fastcall set_FullName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CompanyName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CompanyName(void);
  HRESULT         __fastcall set_CompanyName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_JobTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_JobTitle(void);
  HRESULT         __fastcall set_JobTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email(void);
  HRESULT         __fastcall set_Email(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email1(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email1(void);
  HRESULT         __fastcall set_Email1(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Email2(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email2(void);
  HRESULT         __fastcall set_Email2(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Website(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Website(void);
  HRESULT         __fastcall set_Website(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IM(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IM(void);
  HRESULT         __fastcall set_IM(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExchangeAccounts(Ptssmolib_tlb::IExchangeAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccountsPtr __fastcall get_ExchangeAccounts(void);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  HRESULT         __fastcall GetDetails(Ptssmolib_tlb::ICustomerDetail** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomerDetail* __fastcall GetDetails(void);
  HRESULT         __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                            BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/);
  HRESULT         __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                              Ptssmolib_tlb::IPostalAddress** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPostalAddress* __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/);
  HRESULT         __fastcall SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/);
  HRESULT         __fastcall SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                            BSTR newVal/*[in]*/);
  HRESULT         __fastcall SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                              Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/);
  HRESULT         __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/
                                         , long* pID/*[out,retval]*/);
  long            __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/);
  HRESULT         __fastcall DropAuthInfo(long AuthID/*[in]*/);
  HRESULT         __fastcall DenyAuth(long AuthID/*[in]*/);
  HRESULT         __fastcall GrantAuth(long AuthID/*[in]*/);
  HRESULT         __fastcall ListAuthInfo(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListAuthInfo(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            ID = {read = get_ID};
  __property   BSTR            FullName = {read = get_FullName, write = set_FullName};
  __property   BSTR            CompanyName = {read = get_CompanyName, write = set_CompanyName};
  __property   BSTR            JobTitle = {read = get_JobTitle, write = set_JobTitle};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   BSTR            Email1 = {read = get_Email1, write = set_Email1};
  __property   BSTR            Email2 = {read = get_Email2, write = set_Email2};
  __property   BSTR            Website = {read = get_Website, write = set_Website};
  __property   BSTR            IM = {read = get_IM, write = set_IM};
  __property   Ptssmolib_tlb::IExchangeAccountsPtr ExchangeAccounts = {read = get_ExchangeAccounts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef ICustomerDispT<ICustomer> ICustomerDisp;

// *********************************************************************//
// SmartIntf: TCOMIExchangeAccounts
// Interface: IExchangeAccounts
// *********************************************************************//
template <class T /* IExchangeAccounts */ >
class TCOMIExchangeAccountsT : public TComInterface<IExchangeAccounts>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExchangeAccountsT() {}
  TCOMIExchangeAccountsT(IExchangeAccounts *intf, bool addRef = false) : TComInterface<IExchangeAccounts>(intf, addRef) {}
  TCOMIExchangeAccountsT(const TCOMIExchangeAccountsT& src) : TComInterface<IExchangeAccounts>(src) {}
  TCOMIExchangeAccountsT& operator=(const TCOMIExchangeAccountsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExchangeAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IExchangeAccount** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/);

};
typedef TCOMIExchangeAccountsT<IExchangeAccounts> TCOMIExchangeAccounts;

// *********************************************************************//
// DispIntf:  IExchangeAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {94E79ADE-2C31-492C-97F3-6E987D38FDD3}
// *********************************************************************//
template<class T>
class IExchangeAccountsDispT : public TAutoDriver<IExchangeAccounts>
{
public:
  IExchangeAccountsDispT(){}

  IExchangeAccountsDispT(IExchangeAccounts *pintf)
  {
    TAutoDriver<IExchangeAccounts>::Bind(pintf, false);
  }

  IExchangeAccountsDispT(IExchangeAccountsPtr pintf)
  {
    TAutoDriver<IExchangeAccounts>::Bind(pintf, true);
  }

  IExchangeAccountsDispT& operator=(IExchangeAccounts *pintf)
  {
    TAutoDriver<IExchangeAccounts>::Bind(pintf, false);
    return *this;
  }

  IExchangeAccountsDispT& operator=(IExchangeAccountsPtr pintf)
  {
    TAutoDriver<IExchangeAccounts>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExchangeAccounts));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExchangeAccounts);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExchangeAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IExchangeAccount** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IExchangeAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExchangeAccountsDispT<IExchangeAccounts> IExchangeAccountsDisp;

// *********************************************************************//
// SmartIntf: TCOMIExchangeAccount
// Interface: IExchangeAccount
// *********************************************************************//
template <class T /* IExchangeAccount */ >
class TCOMIExchangeAccountT : public TComInterface<IExchangeAccount>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExchangeAccountT() {}
  TCOMIExchangeAccountT(IExchangeAccount *intf, bool addRef = false) : TComInterface<IExchangeAccount>(intf, addRef) {}
  TCOMIExchangeAccountT(const TCOMIExchangeAccountT& src) : TComInterface<IExchangeAccount>(src) {}
  TCOMIExchangeAccountT& operator=(const TCOMIExchangeAccountT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_BrokerAcctID(long* pVal/*[out,retval]*/);
  long            __fastcall get_BrokerAcctID(void);
  HRESULT         __fastcall get_Number(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Number(void);
  HRESULT         __fastcall set_Number(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcExchangeAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeAccountType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExchangeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchangeID(void);
  HRESULT         __fastcall set_ExchangeID(long pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcExchangeAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetPosition(BSTR InstID, long InstIDSource, 
                                         Ptssmolib_tlb::TcPositionDirection Direction, 
                                         Ptssmolib_tlb::IPosition** Position);
  HRESULT         __fastcall GetPositions(long* pStartIndex, long MaxRowCount, 
                                          Ptssmolib_tlb::IPositions** Positions);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   long            BrokerAcctID = {read = get_BrokerAcctID};
  __property   BSTR            Number = {read = get_Number, write = set_Number};
  __property   Ptssmolib_tlb::TcExchangeAccountType Type = {read = get_Type, write = set_Type};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            ExchangeID = {read = get_ExchangeID, write = set_ExchangeID};
  __property   Ptssmolib_tlb::TcExchangeAccountStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIExchangeAccountT<IExchangeAccount> TCOMIExchangeAccount;

// *********************************************************************//
// DispIntf:  IExchangeAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CBF526B8-6CCF-4D98-B562-C78DF25E9807}
// *********************************************************************//
template<class T>
class IExchangeAccountDispT : public TAutoDriver<IExchangeAccount>
{
public:
  IExchangeAccountDispT(){}

  IExchangeAccountDispT(IExchangeAccount *pintf)
  {
    TAutoDriver<IExchangeAccount>::Bind(pintf, false);
  }

  IExchangeAccountDispT(IExchangeAccountPtr pintf)
  {
    TAutoDriver<IExchangeAccount>::Bind(pintf, true);
  }

  IExchangeAccountDispT& operator=(IExchangeAccount *pintf)
  {
    TAutoDriver<IExchangeAccount>::Bind(pintf, false);
    return *this;
  }

  IExchangeAccountDispT& operator=(IExchangeAccountPtr pintf)
  {
    TAutoDriver<IExchangeAccount>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExchangeAccount));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExchangeAccount);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_BrokerAcctID(long* pVal/*[out,retval]*/);
  long            __fastcall get_BrokerAcctID(void);
  HRESULT         __fastcall get_Number(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Number(void);
  HRESULT         __fastcall set_Number(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcExchangeAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeAccountType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ExchangeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchangeID(void);
  HRESULT         __fastcall set_ExchangeID(long pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcExchangeAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetPosition(BSTR InstID, long InstIDSource, 
                                         Ptssmolib_tlb::TcPositionDirection Direction, 
                                         Ptssmolib_tlb::IPosition** Position);
  HRESULT         __fastcall GetPositions(long* pStartIndex, long MaxRowCount, 
                                          Ptssmolib_tlb::IPositions** Positions);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   long            BrokerAcctID = {read = get_BrokerAcctID};
  __property   BSTR            Number = {read = get_Number, write = set_Number};
  __property   Ptssmolib_tlb::TcExchangeAccountType Type = {read = get_Type, write = set_Type};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            ExchangeID = {read = get_ExchangeID, write = set_ExchangeID};
  __property   Ptssmolib_tlb::TcExchangeAccountStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExchangeAccountDispT<IExchangeAccount> IExchangeAccountDisp;

// *********************************************************************//
// SmartIntf: TCOMIBrokerAccounts
// Interface: IBrokerAccounts
// *********************************************************************//
template <class T /* IBrokerAccounts */ >
class TCOMIBrokerAccountsT : public TComInterface<IBrokerAccounts>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBrokerAccountsT() {}
  TCOMIBrokerAccountsT(IBrokerAccounts *intf, bool addRef = false) : TComInterface<IBrokerAccounts>(intf, addRef) {}
  TCOMIBrokerAccountsT(const TCOMIBrokerAccountsT& src) : TComInterface<IBrokerAccounts>(src) {}
  TCOMIBrokerAccountsT& operator=(const TCOMIBrokerAccountsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IBrokerAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IBrokerAccount** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/);

};
typedef TCOMIBrokerAccountsT<IBrokerAccounts> TCOMIBrokerAccounts;

// *********************************************************************//
// DispIntf:  IBrokerAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76ED517D-70F7-4548-860D-E3661E063616}
// *********************************************************************//
template<class T>
class IBrokerAccountsDispT : public TAutoDriver<IBrokerAccounts>
{
public:
  IBrokerAccountsDispT(){}

  IBrokerAccountsDispT(IBrokerAccounts *pintf)
  {
    TAutoDriver<IBrokerAccounts>::Bind(pintf, false);
  }

  IBrokerAccountsDispT(IBrokerAccountsPtr pintf)
  {
    TAutoDriver<IBrokerAccounts>::Bind(pintf, true);
  }

  IBrokerAccountsDispT& operator=(IBrokerAccounts *pintf)
  {
    TAutoDriver<IBrokerAccounts>::Bind(pintf, false);
    return *this;
  }

  IBrokerAccountsDispT& operator=(IBrokerAccountsPtr pintf)
  {
    TAutoDriver<IBrokerAccounts>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BrokerAccounts));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BrokerAccounts);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IBrokerAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IBrokerAccount** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IBrokerAccountsDispT<IBrokerAccounts> IBrokerAccountsDisp;

// *********************************************************************//
// SmartIntf: TCOMIBrokerAccount
// Interface: IBrokerAccount
// *********************************************************************//
template <class T /* IBrokerAccount */ >
class TCOMIBrokerAccountT : public TComInterface<IBrokerAccount>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBrokerAccountT() {}
  TCOMIBrokerAccountT(IBrokerAccount *intf, bool addRef = false) : TComInterface<IBrokerAccount>(intf, addRef) {}
  TCOMIBrokerAccountT(const TCOMIBrokerAccountT& src) : TComInterface<IBrokerAccount>(src) {}
  TCOMIBrokerAccountT& operator=(const TCOMIBrokerAccountT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_BrokerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_BrokerID(void);
  HRESULT         __fastcall set_BrokerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDFromBroker(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IDFromBroker(void);
  HRESULT         __fastcall set_IDFromBroker(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  HRESULT         __fastcall set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                         long Qty/*[in]*/, double CostPrice/*[in]*/);
  HRESULT         __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                               Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                               BSTR Description/*[in]*/, 
                                               Ptssmolib_tlb::IAccount** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                                        Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                                        BSTR Description/*[in]*/);
  HRESULT         __fastcall Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                    double Amount/*[in]*/);
  HRESULT         __fastcall Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                   double Amount/*[in]*/);
  HRESULT         __fastcall DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Qty/*[in]*/);
  HRESULT         __fastcall DropLogicalAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                       Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                       Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                      Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  HRESULT         __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                         BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::IPosition** Position/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                   BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  HRESULT         __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                          long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  HRESULT         __fastcall SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall ListLogicalAccounts(Ptssmolib_tlb::IAccounts** ppAccounts/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall ListLogicalAccounts(void);
  HRESULT         __fastcall Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                      double Amount);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            BrokerID = {read = get_BrokerID, write = set_BrokerID};
  __property   long            ID = {read = get_ID};
  __property   BSTR            IDFromBroker = {read = get_IDFromBroker, write = set_IDFromBroker};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType, write = set_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIBrokerAccountT<IBrokerAccount> TCOMIBrokerAccount;

// *********************************************************************//
// DispIntf:  IBrokerAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2EFF1224-3127-4C55-9D4E-A8394734A421}
// *********************************************************************//
template<class T>
class IBrokerAccountDispT : public TAutoDriver<IBrokerAccount>
{
public:
  IBrokerAccountDispT(){}

  IBrokerAccountDispT(IBrokerAccount *pintf)
  {
    TAutoDriver<IBrokerAccount>::Bind(pintf, false);
  }

  IBrokerAccountDispT(IBrokerAccountPtr pintf)
  {
    TAutoDriver<IBrokerAccount>::Bind(pintf, true);
  }

  IBrokerAccountDispT& operator=(IBrokerAccount *pintf)
  {
    TAutoDriver<IBrokerAccount>::Bind(pintf, false);
    return *this;
  }

  IBrokerAccountDispT& operator=(IBrokerAccountPtr pintf)
  {
    TAutoDriver<IBrokerAccount>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BrokerAccount));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BrokerAccount);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_BrokerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_BrokerID(void);
  HRESULT         __fastcall set_BrokerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_IDFromBroker(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IDFromBroker(void);
  HRESULT         __fastcall set_IDFromBroker(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  HRESULT         __fastcall set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                         long Qty/*[in]*/, double CostPrice/*[in]*/);
  HRESULT         __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                               Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                               BSTR Description/*[in]*/, 
                                               Ptssmolib_tlb::IAccount** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                                        Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                                        BSTR Description/*[in]*/);
  HRESULT         __fastcall Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                    double Amount/*[in]*/);
  HRESULT         __fastcall Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                   double Amount/*[in]*/);
  HRESULT         __fastcall DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Qty/*[in]*/);
  HRESULT         __fastcall DropLogicalAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                       Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                       Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                      Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  HRESULT         __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                         BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::IPosition** Position/*[out,retval]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                   BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  HRESULT         __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                          long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  HRESULT         __fastcall SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall ListLogicalAccounts(Ptssmolib_tlb::IAccounts** ppAccounts/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall ListLogicalAccounts(void);
  HRESULT         __fastcall Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                      double Amount);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   long            BrokerID = {read = get_BrokerID, write = set_BrokerID};
  __property   long            ID = {read = get_ID};
  __property   BSTR            IDFromBroker = {read = get_IDFromBroker, write = set_IDFromBroker};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcAccountType AccountType = {read = get_AccountType, write = set_AccountType};
  __property   Ptssmolib_tlb::TcAccountStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IBrokerAccountDispT<IBrokerAccount> IBrokerAccountDisp;

// *********************************************************************//
// SmartIntf: TCOMIMiscFees
// Interface: IMiscFees
// *********************************************************************//
template <class T /* IMiscFees */ >
class TCOMIMiscFeesT : public TComInterface<IMiscFees>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMiscFeesT() {}
  TCOMIMiscFeesT(IMiscFees *intf, bool addRef = false) : TComInterface<IMiscFees>(intf, addRef) {}
  TCOMIMiscFeesT(const TCOMIMiscFeesT& src) : TComInterface<IMiscFees>(src) {}
  TCOMIMiscFeesT& operator=(const TCOMIMiscFeesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IMiscFee** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFee* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IMiscFee** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFee* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/);

};
typedef TCOMIMiscFeesT<IMiscFees> TCOMIMiscFees;

// *********************************************************************//
// DispIntf:  IMiscFees
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D3574A-FAB0-4037-8DF7-C9357131839C}
// *********************************************************************//
template<class T>
class IMiscFeesDispT : public TAutoDriver<IMiscFees>
{
public:
  IMiscFeesDispT(){}

  IMiscFeesDispT(IMiscFees *pintf)
  {
    TAutoDriver<IMiscFees>::Bind(pintf, false);
  }

  IMiscFeesDispT(IMiscFeesPtr pintf)
  {
    TAutoDriver<IMiscFees>::Bind(pintf, true);
  }

  IMiscFeesDispT& operator=(IMiscFees *pintf)
  {
    TAutoDriver<IMiscFees>::Bind(pintf, false);
    return *this;
  }

  IMiscFeesDispT& operator=(IMiscFeesPtr pintf)
  {
    TAutoDriver<IMiscFees>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MiscFees));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MiscFees);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IMiscFee** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFee* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IMiscFee** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFee* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IMiscFeesDispT<IMiscFees> IMiscFeesDisp;

// *********************************************************************//
// SmartIntf: TCOMIMiscFee
// Interface: IMiscFee
// *********************************************************************//
template <class T /* IMiscFee */ >
class TCOMIMiscFeeT : public TComInterface<IMiscFee>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMiscFeeT() {}
  TCOMIMiscFeeT(IMiscFee *intf, bool addRef = false) : TComInterface<IMiscFee>(intf, addRef) {}
  TCOMIMiscFeeT(const TCOMIMiscFeeT& src) : TComInterface<IMiscFee>(src) {}
  TCOMIMiscFeeT& operator=(const TCOMIMiscFeeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_OwnerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_OwnerID(void);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcMiscFeeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcMiscFeeType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/);
  HRESULT         __fastcall get_BusinessType(Ptssmolib_tlb::TcBusinessType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcBusinessType __fastcall get_BusinessType(void);
  HRESULT         __fastcall set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/);
  HRESULT         __fastcall get_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_InstrumentSubType(void);
  HRESULT         __fastcall set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  HRESULT         __fastcall get_AmountRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_AmountRatio(void);
  HRESULT         __fastcall set_AmountRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ParRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ParRatio(void);
  HRESULT         __fastcall set_ParRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_FixedValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixedValue(void);
  HRESULT         __fastcall set_FixedValue(double pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);

  __property   long            ID = {read = get_ID};
  __property   long            OwnerID = {read = get_OwnerID};
  __property   Ptssmolib_tlb::TcMiscFeeType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcBusinessType BusinessType = {read = get_BusinessType, write = set_BusinessType};
  __property   Ptssmolib_tlb::TcInstrumentSubType InstrumentSubType = {read = get_InstrumentSubType, write = set_InstrumentSubType};
  __property   double          AmountRatio = {read = get_AmountRatio, write = set_AmountRatio};
  __property   double          ParRatio = {read = get_ParRatio, write = set_ParRatio};
  __property   double          FixedValue = {read = get_FixedValue, write = set_FixedValue};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
};
typedef TCOMIMiscFeeT<IMiscFee> TCOMIMiscFee;

// *********************************************************************//
// DispIntf:  IMiscFee
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6778946F-1874-4747-A246-DE3DFA9826E5}
// *********************************************************************//
template<class T>
class IMiscFeeDispT : public TAutoDriver<IMiscFee>
{
public:
  IMiscFeeDispT(){}

  IMiscFeeDispT(IMiscFee *pintf)
  {
    TAutoDriver<IMiscFee>::Bind(pintf, false);
  }

  IMiscFeeDispT(IMiscFeePtr pintf)
  {
    TAutoDriver<IMiscFee>::Bind(pintf, true);
  }

  IMiscFeeDispT& operator=(IMiscFee *pintf)
  {
    TAutoDriver<IMiscFee>::Bind(pintf, false);
    return *this;
  }

  IMiscFeeDispT& operator=(IMiscFeePtr pintf)
  {
    TAutoDriver<IMiscFee>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MiscFee));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MiscFee);
  }

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_OwnerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_OwnerID(void);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcMiscFeeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcMiscFeeType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/);
  HRESULT         __fastcall get_BusinessType(Ptssmolib_tlb::TcBusinessType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcBusinessType __fastcall get_BusinessType(void);
  HRESULT         __fastcall set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/);
  HRESULT         __fastcall get_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_InstrumentSubType(void);
  HRESULT         __fastcall set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  HRESULT         __fastcall get_AmountRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_AmountRatio(void);
  HRESULT         __fastcall set_AmountRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_ParRatio(double* pVal/*[out,retval]*/);
  double          __fastcall get_ParRatio(void);
  HRESULT         __fastcall set_ParRatio(double pVal/*[in]*/);
  HRESULT         __fastcall get_FixedValue(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixedValue(void);
  HRESULT         __fastcall set_FixedValue(double pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   long            ID = {read = get_ID};
  __property   long            OwnerID = {read = get_OwnerID};
  __property   Ptssmolib_tlb::TcMiscFeeType Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcBusinessType BusinessType = {read = get_BusinessType, write = set_BusinessType};
  __property   Ptssmolib_tlb::TcInstrumentSubType InstrumentSubType = {read = get_InstrumentSubType, write = set_InstrumentSubType};
  __property   double          AmountRatio = {read = get_AmountRatio, write = set_AmountRatio};
  __property   double          ParRatio = {read = get_ParRatio, write = set_ParRatio};
  __property   double          FixedValue = {read = get_FixedValue, write = set_FixedValue};
  __property   BSTR            Description = {read = get_Description, write = set_Description};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IMiscFeeDispT<IMiscFee> IMiscFeeDisp;

// *********************************************************************//
// SmartIntf: TCOMIAccounts
// Interface: IAccounts
// *********************************************************************//
template <class T /* IAccounts */ >
class TCOMIAccountsT : public TComInterface<IAccounts>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAccountsT() {}
  TCOMIAccountsT(IAccounts *intf, bool addRef = false) : TComInterface<IAccounts>(intf, addRef) {}
  TCOMIAccountsT(const TCOMIAccountsT& src) : TComInterface<IAccounts>(src) {}
  TCOMIAccountsT& operator=(const TCOMIAccountsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Find(long AccountID/*[in]*/, 
                                  Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall Find(long AccountID/*[in]*/);

};
typedef TCOMIAccountsT<IAccounts> TCOMIAccounts;

// *********************************************************************//
// DispIntf:  IAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E132D92-431E-4D45-8FEA-3B51357C8E0D}
// *********************************************************************//
template<class T>
class IAccountsDispT : public TAutoDriver<IAccounts>
{
public:
  IAccountsDispT(){}

  IAccountsDispT(IAccounts *pintf)
  {
    TAutoDriver<IAccounts>::Bind(pintf, false);
  }

  IAccountsDispT(IAccountsPtr pintf)
  {
    TAutoDriver<IAccounts>::Bind(pintf, true);
  }

  IAccountsDispT& operator=(IAccounts *pintf)
  {
    TAutoDriver<IAccounts>::Bind(pintf, false);
    return *this;
  }

  IAccountsDispT& operator=(IAccountsPtr pintf)
  {
    TAutoDriver<IAccounts>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Accounts));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Accounts);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Find(long AccountID/*[in]*/, 
                                  Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccount* __fastcall Find(long AccountID/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IAccountsDispT<IAccounts> IAccountsDisp;

// *********************************************************************//
// SmartIntf: TCOMICustomerDetail
// Interface: ICustomerDetail
// *********************************************************************//
template <class T /* ICustomerDetail */ >
class TCOMICustomerDetailT : public TComInterface<ICustomerDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICustomerDetailT() {}
  TCOMICustomerDetailT(ICustomerDetail *intf, bool addRef = false) : TComInterface<ICustomerDetail>(intf, addRef) {}
  TCOMICustomerDetailT(const TCOMICustomerDetailT& src) : TComInterface<ICustomerDetail>(src) {}
  TCOMICustomerDetailT& operator=(const TCOMICustomerDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Department(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Department(void);
  HRESULT         __fastcall set_Department(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Office(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Office(void);
  HRESULT         __fastcall set_Office(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Profession(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Profession(void);
  HRESULT         __fastcall set_Profession(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ManagerName(void);
  HRESULT         __fastcall set_ManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AssistantName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AssistantName(void);
  HRESULT         __fastcall set_AssistantName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_NickName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_NickName(void);
  HRESULT         __fastcall set_NickName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_GenderType(Ptssmolib_tlb::TcGenderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcGenderType __fastcall get_GenderType(void);
  HRESULT         __fastcall set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/);
  HRESULT         __fastcall get_Birthday(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Birthday(void);
  HRESULT         __fastcall set_Birthday(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_EnglishTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EnglishTitle(void);
  HRESULT         __fastcall set_EnglishTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChineseTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChineseTitle(void);
  HRESULT         __fastcall set_ChineseTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcIdentifiedCardType __fastcall get_IdentifiedCardType(void);
  HRESULT         __fastcall set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/);
  HRESULT         __fastcall get_IdentifiedCard(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IdentifiedCard(void);
  HRESULT         __fastcall set_IdentifiedCard(BSTR pVal/*[in]*/);

  __property   BSTR            Department = {read = get_Department, write = set_Department};
  __property   BSTR            Office = {read = get_Office, write = set_Office};
  __property   BSTR            Profession = {read = get_Profession, write = set_Profession};
  __property   BSTR            ManagerName = {read = get_ManagerName, write = set_ManagerName};
  __property   BSTR            AssistantName = {read = get_AssistantName, write = set_AssistantName};
  __property   BSTR            NickName = {read = get_NickName, write = set_NickName};
  __property   Ptssmolib_tlb::TcGenderType GenderType = {read = get_GenderType, write = set_GenderType};
  __property   BSTR            Birthday = {read = get_Birthday, write = set_Birthday};
  __property   BSTR            EnglishTitle = {read = get_EnglishTitle, write = set_EnglishTitle};
  __property   BSTR            ChineseTitle = {read = get_ChineseTitle, write = set_ChineseTitle};
  __property   Ptssmolib_tlb::TcIdentifiedCardType IdentifiedCardType = {read = get_IdentifiedCardType, write = set_IdentifiedCardType};
  __property   BSTR            IdentifiedCard = {read = get_IdentifiedCard, write = set_IdentifiedCard};
};
typedef TCOMICustomerDetailT<ICustomerDetail> TCOMICustomerDetail;

// *********************************************************************//
// DispIntf:  ICustomerDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2214C787-5A58-4C98-B298-019191BA0EC9}
// *********************************************************************//
template<class T>
class ICustomerDetailDispT : public TAutoDriver<ICustomerDetail>
{
public:
  ICustomerDetailDispT(){}

  ICustomerDetailDispT(ICustomerDetail *pintf)
  {
    TAutoDriver<ICustomerDetail>::Bind(pintf, false);
  }

  ICustomerDetailDispT(ICustomerDetailPtr pintf)
  {
    TAutoDriver<ICustomerDetail>::Bind(pintf, true);
  }

  ICustomerDetailDispT& operator=(ICustomerDetail *pintf)
  {
    TAutoDriver<ICustomerDetail>::Bind(pintf, false);
    return *this;
  }

  ICustomerDetailDispT& operator=(ICustomerDetailPtr pintf)
  {
    TAutoDriver<ICustomerDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CustomerDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CustomerDetail);
  }

  HRESULT         __fastcall get_Department(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Department(void);
  HRESULT         __fastcall set_Department(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Office(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Office(void);
  HRESULT         __fastcall set_Office(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Profession(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Profession(void);
  HRESULT         __fastcall set_Profession(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ManagerName(void);
  HRESULT         __fastcall set_ManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AssistantName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AssistantName(void);
  HRESULT         __fastcall set_AssistantName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_NickName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_NickName(void);
  HRESULT         __fastcall set_NickName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_GenderType(Ptssmolib_tlb::TcGenderType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcGenderType __fastcall get_GenderType(void);
  HRESULT         __fastcall set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/);
  HRESULT         __fastcall get_Birthday(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Birthday(void);
  HRESULT         __fastcall set_Birthday(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_EnglishTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EnglishTitle(void);
  HRESULT         __fastcall set_EnglishTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ChineseTitle(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ChineseTitle(void);
  HRESULT         __fastcall set_ChineseTitle(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcIdentifiedCardType __fastcall get_IdentifiedCardType(void);
  HRESULT         __fastcall set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/);
  HRESULT         __fastcall get_IdentifiedCard(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_IdentifiedCard(void);
  HRESULT         __fastcall set_IdentifiedCard(BSTR pVal/*[in]*/);

  __property   BSTR            Department = {read = get_Department, write = set_Department};
  __property   BSTR            Office = {read = get_Office, write = set_Office};
  __property   BSTR            Profession = {read = get_Profession, write = set_Profession};
  __property   BSTR            ManagerName = {read = get_ManagerName, write = set_ManagerName};
  __property   BSTR            AssistantName = {read = get_AssistantName, write = set_AssistantName};
  __property   BSTR            NickName = {read = get_NickName, write = set_NickName};
  __property   Ptssmolib_tlb::TcGenderType GenderType = {read = get_GenderType, write = set_GenderType};
  __property   BSTR            Birthday = {read = get_Birthday, write = set_Birthday};
  __property   BSTR            EnglishTitle = {read = get_EnglishTitle, write = set_EnglishTitle};
  __property   BSTR            ChineseTitle = {read = get_ChineseTitle, write = set_ChineseTitle};
  __property   Ptssmolib_tlb::TcIdentifiedCardType IdentifiedCardType = {read = get_IdentifiedCardType, write = set_IdentifiedCardType};
  __property   BSTR            IdentifiedCard = {read = get_IdentifiedCard, write = set_IdentifiedCard};
};
typedef ICustomerDetailDispT<ICustomerDetail> ICustomerDetailDisp;

// *********************************************************************//
// SmartIntf: TCOMIPostalAddress
// Interface: IPostalAddress
// *********************************************************************//
template <class T /* IPostalAddress */ >
class TCOMIPostalAddressT : public TComInterface<IPostalAddress>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPostalAddressT() {}
  TCOMIPostalAddressT(IPostalAddress *intf, bool addRef = false) : TComInterface<IPostalAddress>(intf, addRef) {}
  TCOMIPostalAddressT(const TCOMIPostalAddressT& src) : TComInterface<IPostalAddress>(src) {}
  TCOMIPostalAddressT& operator=(const TCOMIPostalAddressT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall set_Country(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall set_City(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall set_Province(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Street(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Street(void);
  HRESULT         __fastcall set_Street(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcAddressType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAddressType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/);
  HRESULT         __fastcall get_ZipCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ZipCode(void);
  HRESULT         __fastcall set_ZipCode(BSTR pVal/*[in]*/);

  __property   BSTR            Country = {read = get_Country, write = set_Country};
  __property   BSTR            City = {read = get_City, write = set_City};
  __property   BSTR            Province = {read = get_Province, write = set_Province};
  __property   BSTR            Street = {read = get_Street, write = set_Street};
  __property   Ptssmolib_tlb::TcAddressType Type = {read = get_Type, write = set_Type};
  __property   BSTR            ZipCode = {read = get_ZipCode, write = set_ZipCode};
};
typedef TCOMIPostalAddressT<IPostalAddress> TCOMIPostalAddress;

// *********************************************************************//
// DispIntf:  IPostalAddress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EBC81E1B-A963-44C2-B710-E9510524A0AA}
// *********************************************************************//
template<class T>
class IPostalAddressDispT : public TAutoDriver<IPostalAddress>
{
public:
  IPostalAddressDispT(){}

  IPostalAddressDispT(IPostalAddress *pintf)
  {
    TAutoDriver<IPostalAddress>::Bind(pintf, false);
  }

  IPostalAddressDispT(IPostalAddressPtr pintf)
  {
    TAutoDriver<IPostalAddress>::Bind(pintf, true);
  }

  IPostalAddressDispT& operator=(IPostalAddress *pintf)
  {
    TAutoDriver<IPostalAddress>::Bind(pintf, false);
    return *this;
  }

  IPostalAddressDispT& operator=(IPostalAddressPtr pintf)
  {
    TAutoDriver<IPostalAddress>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PostalAddress));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PostalAddress);
  }

  HRESULT         __fastcall get_Country(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Country(void);
  HRESULT         __fastcall set_Country(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_City(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_City(void);
  HRESULT         __fastcall set_City(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Province(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Province(void);
  HRESULT         __fastcall set_Province(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Street(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Street(void);
  HRESULT         __fastcall set_Street(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcAddressType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcAddressType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/);
  HRESULT         __fastcall get_ZipCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ZipCode(void);
  HRESULT         __fastcall set_ZipCode(BSTR pVal/*[in]*/);

  __property   BSTR            Country = {read = get_Country, write = set_Country};
  __property   BSTR            City = {read = get_City, write = set_City};
  __property   BSTR            Province = {read = get_Province, write = set_Province};
  __property   BSTR            Street = {read = get_Street, write = set_Street};
  __property   Ptssmolib_tlb::TcAddressType Type = {read = get_Type, write = set_Type};
  __property   BSTR            ZipCode = {read = get_ZipCode, write = set_ZipCode};
};
typedef IPostalAddressDispT<IPostalAddress> IPostalAddressDisp;

// *********************************************************************//
// SmartIntf: TCOMICustomers
// Interface: ICustomers
// *********************************************************************//
template <class T /* ICustomers */ >
class TCOMICustomersT : public TComInterface<ICustomers>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICustomersT() {}
  TCOMICustomersT(ICustomers *intf, bool addRef = false) : TComInterface<ICustomers>(intf, addRef) {}
  TCOMICustomersT(const TCOMICustomersT& src) : TComInterface<ICustomers>(src) {}
  TCOMICustomersT& operator=(const TCOMICustomersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::ICustomer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomer* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::ICustomer** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::ICustomer* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/);

};
typedef TCOMICustomersT<ICustomers> TCOMICustomers;

// *********************************************************************//
// DispIntf:  ICustomers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {319F2830-9A48-4B6C-BB07-C83BEF91A06F}
// *********************************************************************//
template<class T>
class ICustomersDispT : public TAutoDriver<ICustomers>
{
public:
  ICustomersDispT(){}

  ICustomersDispT(ICustomers *pintf)
  {
    TAutoDriver<ICustomers>::Bind(pintf, false);
  }

  ICustomersDispT(ICustomersPtr pintf)
  {
    TAutoDriver<ICustomers>::Bind(pintf, true);
  }

  ICustomersDispT& operator=(ICustomers *pintf)
  {
    TAutoDriver<ICustomers>::Bind(pintf, false);
    return *this;
  }

  ICustomersDispT& operator=(ICustomersPtr pintf)
  {
    TAutoDriver<ICustomers>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Customers));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Customers);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::ICustomer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomer* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::ICustomer** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::ICustomer* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef ICustomersDispT<ICustomers> ICustomersDisp;

// *********************************************************************//
// SmartIntf: TCOMITask
// Interface: ITask
// *********************************************************************//
template <class T /* ITask */ >
class TCOMITaskT : public TComInterface<ITask>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITaskT() {}
  TCOMITaskT(ITask *intf, bool addRef = false) : TComInterface<ITask>(intf, addRef) {}
  TCOMITaskT(const TCOMITaskT& src) : TComInterface<ITask>(src) {}
  TCOMITaskT& operator=(const TCOMITaskT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcTaskStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcTaskStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                               long RowCount/*[in]*/, 
                                               Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, 
                                                       long* pStartIndex/*[in,out]*/, 
                                                       long RowCount/*[in]*/);
  HRESULT         __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall NewHedge(BSTR HedgeName/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall NewHedge(BSTR HedgeName/*[in]*/);
  HRESULT         __fastcall AssignAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall DetachAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  HRESULT         __fastcall GetHedge(long HedgeID/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall GetHedge(long HedgeID/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            TaskID = {read = get_TaskID};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcTaskStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMITaskT<ITask> TCOMITask;

// *********************************************************************//
// DispIntf:  ITask
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {730A7110-5812-4CFC-899E-72A875B78552}
// *********************************************************************//
template<class T>
class ITaskDispT : public TAutoDriver<ITask>
{
public:
  ITaskDispT(){}

  ITaskDispT(ITask *pintf)
  {
    TAutoDriver<ITask>::Bind(pintf, false);
  }

  ITaskDispT(ITaskPtr pintf)
  {
    TAutoDriver<ITask>::Bind(pintf, true);
  }

  ITaskDispT& operator=(ITask *pintf)
  {
    TAutoDriver<ITask>::Bind(pintf, false);
    return *this;
  }

  ITaskDispT& operator=(ITaskPtr pintf)
  {
    TAutoDriver<ITask>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Task));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Task);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcTaskStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcTaskStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/);
  HRESULT         __fastcall Close();
  HRESULT         __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                               long RowCount/*[in]*/, 
                                               Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, 
                                                       long* pStartIndex/*[in,out]*/, 
                                                       long RowCount/*[in]*/);
  HRESULT         __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall NewHedge(BSTR HedgeName/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall NewHedge(BSTR HedgeName/*[in]*/);
  HRESULT         __fastcall AssignAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall DetachAccount(long AccountID/*[in]*/);
  HRESULT         __fastcall GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  HRESULT         __fastcall GetHedge(long HedgeID/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall GetHedge(long HedgeID/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            TaskID = {read = get_TaskID};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   Ptssmolib_tlb::TcTaskStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef ITaskDispT<ITask> ITaskDisp;

// *********************************************************************//
// SmartIntf: TCOMIHedges
// Interface: IHedges
// *********************************************************************//
template <class T /* IHedges */ >
class TCOMIHedgesT : public TComInterface<IHedges>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIHedgesT() {}
  TCOMIHedgesT(IHedges *intf, bool addRef = false) : TComInterface<IHedges>(intf, addRef) {}
  TCOMIHedgesT(const TCOMIHedgesT& src) : TComInterface<IHedges>(src) {}
  TCOMIHedgesT& operator=(const TCOMIHedgesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall get_ItemByID(long ID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIHedgesT<IHedges> TCOMIHedges;

// *********************************************************************//
// DispIntf:  IHedges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C70EAC5-AE26-4BBD-95F2-B516AF28F9BC}
// *********************************************************************//
template<class T>
class IHedgesDispT : public TAutoDriver<IHedges>
{
public:
  IHedgesDispT(){}

  IHedgesDispT(IHedges *pintf)
  {
    TAutoDriver<IHedges>::Bind(pintf, false);
  }

  IHedgesDispT(IHedgesPtr pintf)
  {
    TAutoDriver<IHedges>::Bind(pintf, true);
  }

  IHedgesDispT& operator=(IHedges *pintf)
  {
    TAutoDriver<IHedges>::Bind(pintf, false);
    return *this;
  }

  IHedgesDispT& operator=(IHedgesPtr pintf)
  {
    TAutoDriver<IHedges>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Hedges));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Hedges);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedge* __fastcall get_ItemByID(long ID/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IHedgesDispT<IHedges> IHedgesDisp;

// *********************************************************************//
// SmartIntf: TCOMIHedge
// Interface: IHedge
// *********************************************************************//
template <class T /* IHedge */ >
class TCOMIHedgeT : public TComInterface<IHedge>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIHedgeT() {}
  TCOMIHedgeT(IHedge *intf, bool addRef = false) : TComInterface<IHedge>(intf, addRef) {}
  TCOMIHedgeT(const TCOMIHedgeT& src) : TComInterface<IHedge>(src) {}
  TCOMIHedgeT& operator=(const TCOMIHedgeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_HedgeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_HedgeID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExpectProfit(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExpectProfit(void);
  HRESULT         __fastcall set_ExpectProfit(double pVal/*[in]*/);
  HRESULT         __fastcall get_RealProfit(double* pVal/*[out,retval]*/);
  double          __fastcall get_RealProfit(void);
  HRESULT         __fastcall set_RealProfit(double pVal/*[in]*/);
  HRESULT         __fastcall get_Cost(double* pVal/*[out,retval]*/);
  double          __fastcall get_Cost(void);
  HRESULT         __fastcall set_Cost(double pVal/*[in]*/);
  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_CreateTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateTime(void);
  HRESULT         __fastcall get_EndDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EndDate(void);
  HRESULT         __fastcall set_EndDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_EndTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EndTime(void);
  HRESULT         __fastcall set_EndTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcHedgeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcHedgeStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/);
  HRESULT         __fastcall Alter(void);
  HRESULT         __fastcall LoadConfigure(VARIANT* pConfigure/*[out,retval]*/);
  VARIANT         __fastcall LoadConfigure(void);
  HRESULT         __fastcall SaveConfigure(VARIANT Configure/*[in]*/);
  HRESULT         __fastcall NewOrders(long AccountID/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(long AccountID/*[in]*/);
  HRESULT         __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                       long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/);
  HRESULT         __fastcall Refresh(void);

  __property   long            TaskID = {read = get_TaskID};
  __property   long            HedgeID = {read = get_HedgeID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   double          ExpectProfit = {read = get_ExpectProfit, write = set_ExpectProfit};
  __property   double          RealProfit = {read = get_RealProfit, write = set_RealProfit};
  __property   double          Cost = {read = get_Cost, write = set_Cost};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            CreateTime = {read = get_CreateTime};
  __property   BSTR            EndDate = {read = get_EndDate, write = set_EndDate};
  __property   BSTR            EndTime = {read = get_EndTime, write = set_EndTime};
  __property   Ptssmolib_tlb::TcHedgeStatus Status = {read = get_Status, write = set_Status};
};
typedef TCOMIHedgeT<IHedge> TCOMIHedge;

// *********************************************************************//
// DispIntf:  IHedge
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5DCB97F4-E99F-4629-97EF-371566CC4C45}
// *********************************************************************//
template<class T>
class IHedgeDispT : public TAutoDriver<IHedge>
{
public:
  IHedgeDispT(){}

  IHedgeDispT(IHedge *pintf)
  {
    TAutoDriver<IHedge>::Bind(pintf, false);
  }

  IHedgeDispT(IHedgePtr pintf)
  {
    TAutoDriver<IHedge>::Bind(pintf, true);
  }

  IHedgeDispT& operator=(IHedge *pintf)
  {
    TAutoDriver<IHedge>::Bind(pintf, false);
    return *this;
  }

  IHedgeDispT& operator=(IHedgePtr pintf)
  {
    TAutoDriver<IHedge>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Hedge));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Hedge);
  }

  HRESULT         __fastcall get_TaskID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TaskID(void);
  HRESULT         __fastcall get_HedgeID(long* pVal/*[out,retval]*/);
  long            __fastcall get_HedgeID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExpectProfit(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExpectProfit(void);
  HRESULT         __fastcall set_ExpectProfit(double pVal/*[in]*/);
  HRESULT         __fastcall get_RealProfit(double* pVal/*[out,retval]*/);
  double          __fastcall get_RealProfit(void);
  HRESULT         __fastcall set_RealProfit(double pVal/*[in]*/);
  HRESULT         __fastcall get_Cost(double* pVal/*[out,retval]*/);
  double          __fastcall get_Cost(void);
  HRESULT         __fastcall set_Cost(double pVal/*[in]*/);
  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_CreateTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateTime(void);
  HRESULT         __fastcall get_EndDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EndDate(void);
  HRESULT         __fastcall set_EndDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_EndTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_EndTime(void);
  HRESULT         __fastcall set_EndTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcHedgeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcHedgeStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/);
  HRESULT         __fastcall Alter();
  HRESULT         __fastcall LoadConfigure(VARIANT* pConfigure/*[out,retval]*/);
  VARIANT         __fastcall LoadConfigure(void);
  HRESULT         __fastcall SaveConfigure(VARIANT Configure/*[in]*/);
  HRESULT         __fastcall NewOrders(long AccountID/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(long AccountID/*[in]*/);
  HRESULT         __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                              long MaxRowCount/*[in]*/, 
                                              Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  HRESULT         __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                       long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/);
  HRESULT         __fastcall Refresh();

  __property   long            TaskID = {read = get_TaskID};
  __property   long            HedgeID = {read = get_HedgeID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   double          ExpectProfit = {read = get_ExpectProfit, write = set_ExpectProfit};
  __property   double          RealProfit = {read = get_RealProfit, write = set_RealProfit};
  __property   double          Cost = {read = get_Cost, write = set_Cost};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            CreateTime = {read = get_CreateTime};
  __property   BSTR            EndDate = {read = get_EndDate, write = set_EndDate};
  __property   BSTR            EndTime = {read = get_EndTime, write = set_EndTime};
  __property   Ptssmolib_tlb::TcHedgeStatus Status = {read = get_Status, write = set_Status};
};
typedef IHedgeDispT<IHedge> IHedgeDisp;

// *********************************************************************//
// SmartIntf: TCOMITasks
// Interface: ITasks
// *********************************************************************//
template <class T /* ITasks */ >
class TCOMITasksT : public TComInterface<ITasks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITasksT() {}
  TCOMITasksT(ITasks *intf, bool addRef = false) : TComInterface<ITasks>(intf, addRef) {}
  TCOMITasksT(const TCOMITasksT& src) : TComInterface<ITasks>(src) {}
  TCOMITasksT& operator=(const TCOMITasksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::ITask** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/, 
                                 Ptssmolib_tlb::ITask** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/);
  HRESULT         __fastcall Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/);
  HRESULT         __fastcall Find(long TaskID/*[in]*/, 
                                  Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall Find(long TaskID/*[in]*/);

};
typedef TCOMITasksT<ITasks> TCOMITasks;

// *********************************************************************//
// DispIntf:  ITasks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64856AF0-84F6-42D4-A2F8-4E05B9B545CE}
// *********************************************************************//
template<class T>
class ITasksDispT : public TAutoDriver<ITasks>
{
public:
  ITasksDispT(){}

  ITasksDispT(ITasks *pintf)
  {
    TAutoDriver<ITasks>::Bind(pintf, false);
  }

  ITasksDispT(ITasksPtr pintf)
  {
    TAutoDriver<ITasks>::Bind(pintf, true);
  }

  ITasksDispT& operator=(ITasks *pintf)
  {
    TAutoDriver<ITasks>::Bind(pintf, false);
    return *this;
  }

  ITasksDispT& operator=(ITasksPtr pintf)
  {
    TAutoDriver<ITasks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tasks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tasks);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::ITask** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/, 
                                 Ptssmolib_tlb::ITask** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/);
  HRESULT         __fastcall Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/);
  HRESULT         __fastcall Find(long TaskID/*[in]*/, 
                                  Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::ITask* __fastcall Find(long TaskID/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef ITasksDispT<ITasks> ITasksDisp;

// *********************************************************************//
// SmartIntf: TCOMITradeCoreSvc
// Interface: ITradeCoreSvc
// *********************************************************************//
template <class T /* ITradeCoreSvc */ >
class TCOMITradeCoreSvcT : public TComInterface<ITradeCoreSvc>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITradeCoreSvcT() {}
  TCOMITradeCoreSvcT(ITradeCoreSvc *intf, bool addRef = false) : TComInterface<ITradeCoreSvc>(intf, addRef) {}
  TCOMITradeCoreSvcT(const TCOMITradeCoreSvcT& src) : TComInterface<ITradeCoreSvc>(src) {}
  TCOMITradeCoreSvcT& operator=(const TCOMITradeCoreSvcT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  HRESULT         __fastcall get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  HRESULT         __fastcall get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  HRESULT         __fastcall get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  HRESULT         __fastcall get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  HRESULT         __fastcall get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  HRESULT         __fastcall get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                          long* pErrorIndex/*[out,retval]*/);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  HRESULT         __fastcall GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);

  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};
};
typedef TCOMITradeCoreSvcT<ITradeCoreSvc> TCOMITradeCoreSvc;

// *********************************************************************//
// DispIntf:  ITradeCoreSvc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31E87ABB-7FA1-41B9-B53E-B0A76C0A3028}
// *********************************************************************//
template<class T>
class ITradeCoreSvcDispT : public TAutoDriver<ITradeCoreSvc>
{
public:
  ITradeCoreSvcDispT(){}

  ITradeCoreSvcDispT(ITradeCoreSvc *pintf)
  {
    TAutoDriver<ITradeCoreSvc>::Bind(pintf, false);
  }

  ITradeCoreSvcDispT(ITradeCoreSvcPtr pintf)
  {
    TAutoDriver<ITradeCoreSvc>::Bind(pintf, true);
  }

  ITradeCoreSvcDispT& operator=(ITradeCoreSvc *pintf)
  {
    TAutoDriver<ITradeCoreSvc>::Bind(pintf, false);
    return *this;
  }

  ITradeCoreSvcDispT& operator=(ITradeCoreSvcPtr pintf)
  {
    TAutoDriver<ITradeCoreSvc>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TradeCoreSvc));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TradeCoreSvc);
  }

  HRESULT         __fastcall get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  HRESULT         __fastcall get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  HRESULT         __fastcall get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  HRESULT         __fastcall get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  HRESULT         __fastcall get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  HRESULT         __fastcall get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  HRESULT         __fastcall get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                          long* pErrorIndex/*[out,retval]*/);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  HRESULT         __fastcall GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);

  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};
};
typedef ITradeCoreSvcDispT<ITradeCoreSvc> ITradeCoreSvcDisp;

typedef TComInterface<ITradeCoreSvc2>  TCOMITradeCoreSvc2;

// *********************************************************************//
// DispIntf:  ITradeCoreSvc2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC2D6E0E-7F89-4CD3-8A9B-3CEEEC668EE2}
// *********************************************************************//
template<class T>
class ITradeCoreSvc2DispT : public TAutoDriver<ITradeCoreSvc2>
{
public:
  ITradeCoreSvc2DispT(){}

  ITradeCoreSvc2DispT(ITradeCoreSvc2 *pintf)
  {
    TAutoDriver<ITradeCoreSvc2>::Bind(pintf, false);
  }

  ITradeCoreSvc2DispT(ITradeCoreSvc2Ptr pintf)
  {
    TAutoDriver<ITradeCoreSvc2>::Bind(pintf, true);
  }

  ITradeCoreSvc2DispT& operator=(ITradeCoreSvc2 *pintf)
  {
    TAutoDriver<ITradeCoreSvc2>::Bind(pintf, false);
    return *this;
  }

  ITradeCoreSvc2DispT& operator=(ITradeCoreSvc2Ptr pintf)
  {
    TAutoDriver<ITradeCoreSvc2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  HRESULT         __fastcall GetOrder(BSTR OrderID/*[in]*/, 
                                      Ptssmolib_tlb::IOrder** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrder* __fastcall GetOrder(BSTR OrderID/*[in]*/);
  HRESULT         __fastcall GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void);
  HRESULT         __fastcall GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/);
  Ptssmolib_tlb::INotTradingStockSet* __fastcall GetNotTradingStocks(void);
  HRESULT         __fastcall GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                                BSTR EndDate/*[in]*/, 
                                                Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                                long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/
                                                , Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                                        BSTR EndDate/*[in]*/, 
                                                        Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long RowCount/*[in]*/);
  HRESULT         __fastcall GetPositionFromETFTrd(long CustID/*[in]*/, 
                                                   long* pStartIndex/*[in,out]*/, 
                                                   long RowCount/*[in]*/, 
                                                   Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositionFromETFTrd(long CustID/*[in]*/, 
                                                              long* pStartIndex/*[in,out]*/, 
                                                              long RowCount/*[in]*/);

};
typedef ITradeCoreSvc2DispT<ITradeCoreSvc2> ITradeCoreSvc2Disp;

// *********************************************************************//
// SmartIntf: TCOMIEventTopics
// Interface: IEventTopics
// *********************************************************************//
template <class T /* IEventTopics */ >
class TCOMIEventTopicsT : public TComInterface<IEventTopics>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEventTopicsT() {}
  TCOMIEventTopicsT(IEventTopics *intf, bool addRef = false) : TComInterface<IEventTopics>(intf, addRef) {}
  TCOMIEventTopicsT(const TCOMIEventTopicsT& src) : TComInterface<IEventTopics>(src) {}
  TCOMIEventTopicsT& operator=(const TCOMIEventTopicsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IEventTopic** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopic* __fastcall get_Item(VARIANT Index/*[in]*/);

};
typedef TCOMIEventTopicsT<IEventTopics> TCOMIEventTopics;

// *********************************************************************//
// DispIntf:  IEventTopics
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {15D74C5B-AF5E-4DE2-86A4-DAC7A0F1B013}
// *********************************************************************//
template<class T>
class IEventTopicsDispT : public TAutoDriver<IEventTopics>
{
public:
  IEventTopicsDispT(){}

  IEventTopicsDispT(IEventTopics *pintf)
  {
    TAutoDriver<IEventTopics>::Bind(pintf, false);
  }

  IEventTopicsDispT(IEventTopicsPtr pintf)
  {
    TAutoDriver<IEventTopics>::Bind(pintf, true);
  }

  IEventTopicsDispT& operator=(IEventTopics *pintf)
  {
    TAutoDriver<IEventTopics>::Bind(pintf, false);
    return *this;
  }

  IEventTopicsDispT& operator=(IEventTopicsPtr pintf)
  {
    TAutoDriver<IEventTopics>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventTopics));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventTopics);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IEventTopic** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopic* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IEventTopicsDispT<IEventTopics> IEventTopicsDisp;

// *********************************************************************//
// SmartIntf: TCOMIEventTopic
// Interface: IEventTopic
// *********************************************************************//
template <class T /* IEventTopic */ >
class TCOMIEventTopicT : public TComInterface<IEventTopic>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEventTopicT() {}
  TCOMIEventTopicT(IEventTopic *intf, bool addRef = false) : TComInterface<IEventTopic>(intf, addRef) {}
  TCOMIEventTopicT(const TCOMIEventTopicT& src) : TComInterface<IEventTopic>(src) {}
  TCOMIEventTopicT& operator=(const TCOMIEventTopicT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcEventTopicType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcEventTopicType __fastcall get_Type(void);
  HRESULT         __fastcall get_Publisher(Ptssmolib_tlb::IEventPublisher** ppVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventPublisherPtr __fastcall get_Publisher(void);
  HRESULT         __fastcall get_Filter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT         __fastcall get_Config(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Config(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall NewSubscriber(Ptssmolib_tlb::ISubscriber** ppSubscriber/*[out,retval]*/);
  Ptssmolib_tlb::ISubscriber* __fastcall NewSubscriber(void);

  __property   long            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcEventTopicType Type = {read = get_Type};
  __property   Ptssmolib_tlb::IEventPublisherPtr Publisher = {read = get_Publisher};
  __property   BSTR            Filter = {read = get_Filter};
  __property   BSTR            Config = {read = get_Config};
  __property   BSTR            Description = {read = get_Description};
};
typedef TCOMIEventTopicT<IEventTopic> TCOMIEventTopic;

// *********************************************************************//
// DispIntf:  IEventTopic
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B7B1EC5-1278-4BD7-8687-6D74712F4A28}
// *********************************************************************//
template<class T>
class IEventTopicDispT : public TAutoDriver<IEventTopic>
{
public:
  IEventTopicDispT(){}

  IEventTopicDispT(IEventTopic *pintf)
  {
    TAutoDriver<IEventTopic>::Bind(pintf, false);
  }

  IEventTopicDispT(IEventTopicPtr pintf)
  {
    TAutoDriver<IEventTopic>::Bind(pintf, true);
  }

  IEventTopicDispT& operator=(IEventTopic *pintf)
  {
    TAutoDriver<IEventTopic>::Bind(pintf, false);
    return *this;
  }

  IEventTopicDispT& operator=(IEventTopicPtr pintf)
  {
    TAutoDriver<IEventTopic>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventTopic));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventTopic);
  }

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcEventTopicType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcEventTopicType __fastcall get_Type(void);
  HRESULT         __fastcall get_Publisher(Ptssmolib_tlb::IEventPublisher** ppVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventPublisherPtr __fastcall get_Publisher(void);
  HRESULT         __fastcall get_Filter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT         __fastcall get_Config(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Config(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall NewSubscriber(Ptssmolib_tlb::ISubscriber** ppSubscriber/*[out,retval]*/);
  Ptssmolib_tlb::ISubscriber* __fastcall NewSubscriber(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   long            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcEventTopicType Type = {read = get_Type};
  __property   Ptssmolib_tlb::IEventPublisherPtr Publisher = {read = get_Publisher};
  __property   BSTR            Filter = {read = get_Filter};
  __property   BSTR            Config = {read = get_Config};
  __property   BSTR            Description = {read = get_Description};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IEventTopicDispT<IEventTopic> IEventTopicDisp;

// *********************************************************************//
// SmartIntf: TCOMIEventPublisher
// Interface: IEventPublisher
// *********************************************************************//
template <class T /* IEventPublisher */ >
class TCOMIEventPublisherT : public TComInterface<IEventPublisher>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEventPublisherT() {}
  TCOMIEventPublisherT(IEventPublisher *intf, bool addRef = false) : TComInterface<IEventPublisher>(intf, addRef) {}
  TCOMIEventPublisherT(const TCOMIEventPublisherT& src) : TComInterface<IEventPublisher>(src) {}
  TCOMIEventPublisherT& operator=(const TCOMIEventPublisherT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ProgID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ProgID(void);
  HRESULT         __fastcall set_ProgID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Publish(BSTR XML/*[in]*/);

  __property   BSTR            ProgID = {read = get_ProgID, write = set_ProgID};
};
typedef TCOMIEventPublisherT<IEventPublisher> TCOMIEventPublisher;

// *********************************************************************//
// DispIntf:  IEventPublisher
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2833B8CC-4560-42BE-826F-E940BC186FAF}
// *********************************************************************//
template<class T>
class IEventPublisherDispT : public TAutoDriver<IEventPublisher>
{
public:
  IEventPublisherDispT(){}

  IEventPublisherDispT(IEventPublisher *pintf)
  {
    TAutoDriver<IEventPublisher>::Bind(pintf, false);
  }

  IEventPublisherDispT(IEventPublisherPtr pintf)
  {
    TAutoDriver<IEventPublisher>::Bind(pintf, true);
  }

  IEventPublisherDispT& operator=(IEventPublisher *pintf)
  {
    TAutoDriver<IEventPublisher>::Bind(pintf, false);
    return *this;
  }

  IEventPublisherDispT& operator=(IEventPublisherPtr pintf)
  {
    TAutoDriver<IEventPublisher>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EventPublisher));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EventPublisher);
  }

  HRESULT         __fastcall get_ProgID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ProgID(void);
  HRESULT         __fastcall set_ProgID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Publish(BSTR XML/*[in]*/);

  __property   BSTR            ProgID = {read = get_ProgID, write = set_ProgID};
};
typedef IEventPublisherDispT<IEventPublisher> IEventPublisherDisp;

// *********************************************************************//
// SmartIntf: TCOMISubscriber
// Interface: ISubscriber
// *********************************************************************//
template <class T /* ISubscriber */ >
class TCOMISubscriberT : public TComInterface<ISubscriber>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISubscriberT() {}
  TCOMISubscriberT(ISubscriber *intf, bool addRef = false) : TComInterface<ISubscriber>(intf, addRef) {}
  TCOMISubscriberT(const TCOMISubscriberT& src) : TComInterface<ISubscriber>(src) {}
  TCOMISubscriberT& operator=(const TCOMISubscriberT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall get_ServerPort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ServerPort(void);
  HRESULT         __fastcall get_TopicID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopicID(void);
  HRESULT         __fastcall get_TopicName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TopicName(void);
  HRESULT         __fastcall get_FilterString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FilterString(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcSubscribeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcSubscribeStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_AuthCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AuthCode(void);
  HRESULT         __fastcall get_SocketWndHandle(long* pVal/*[out,retval]*/);
  long            __fastcall get_SocketWndHandle(void);
  HRESULT         __fastcall Connect(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall Subscribe(BSTR FilterString/*[in]*/);
  HRESULT         __fastcall Unsubscribe(void);

  __property   BSTR            ServerName = {read = get_ServerName};
  __property   long            ServerPort = {read = get_ServerPort};
  __property   long            TopicID = {read = get_TopicID};
  __property   BSTR            TopicName = {read = get_TopicName};
  __property   BSTR            FilterString = {read = get_FilterString};
  __property   Ptssmolib_tlb::TcSubscribeStatus Status = {read = get_Status};
  __property   BSTR            AuthCode = {read = get_AuthCode};
  __property   long            SocketWndHandle = {read = get_SocketWndHandle};
};
typedef TCOMISubscriberT<ISubscriber> TCOMISubscriber;

// *********************************************************************//
// DispIntf:  ISubscriber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFC4DDEC-16E5-4850-A50D-E1231C3CD077}
// *********************************************************************//
template<class T>
class ISubscriberDispT : public TAutoDriver<ISubscriber>
{
public:
  ISubscriberDispT(){}

  ISubscriberDispT(ISubscriber *pintf)
  {
    TAutoDriver<ISubscriber>::Bind(pintf, false);
  }

  ISubscriberDispT(ISubscriberPtr pintf)
  {
    TAutoDriver<ISubscriber>::Bind(pintf, true);
  }

  ISubscriberDispT& operator=(ISubscriber *pintf)
  {
    TAutoDriver<ISubscriber>::Bind(pintf, false);
    return *this;
  }

  ISubscriberDispT& operator=(ISubscriberPtr pintf)
  {
    TAutoDriver<ISubscriber>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Subscriber));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Subscriber);
  }

  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall get_ServerPort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ServerPort(void);
  HRESULT         __fastcall get_TopicID(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopicID(void);
  HRESULT         __fastcall get_TopicName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TopicName(void);
  HRESULT         __fastcall get_FilterString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FilterString(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcSubscribeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcSubscribeStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_AuthCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AuthCode(void);
  HRESULT         __fastcall get_SocketWndHandle(long* pVal/*[out,retval]*/);
  long            __fastcall get_SocketWndHandle(void);
  HRESULT         __fastcall Connect(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/);
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall Subscribe(BSTR FilterString/*[in]*/);
  HRESULT         __fastcall Unsubscribe();

  __property   BSTR            ServerName = {read = get_ServerName};
  __property   long            ServerPort = {read = get_ServerPort};
  __property   long            TopicID = {read = get_TopicID};
  __property   BSTR            TopicName = {read = get_TopicName};
  __property   BSTR            FilterString = {read = get_FilterString};
  __property   Ptssmolib_tlb::TcSubscribeStatus Status = {read = get_Status};
  __property   BSTR            AuthCode = {read = get_AuthCode};
  __property   long            SocketWndHandle = {read = get_SocketWndHandle};
};
typedef ISubscriberDispT<ISubscriber> ISubscriberDisp;

// *********************************************************************//
// SmartIntf: TCOMIExchanges
// Interface: IExchanges
// *********************************************************************//
template <class T /* IExchanges */ >
class TCOMIExchangesT : public TComInterface<IExchanges>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExchangesT() {}
  TCOMIExchangesT(IExchanges *intf, bool addRef = false) : TComInterface<IExchanges>(intf, addRef) {}
  TCOMIExchangesT(const TCOMIExchangesT& src) : TComInterface<IExchanges>(src) {}
  TCOMIExchangesT& operator=(const TCOMIExchangesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExchange** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchange* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IExchange** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IExchange* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/);

};
typedef TCOMIExchangesT<IExchanges> TCOMIExchanges;

// *********************************************************************//
// DispIntf:  IExchanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE30AF8B-C1B1-4FEF-ADB2-0C466298BCEA}
// *********************************************************************//
template<class T>
class IExchangesDispT : public TAutoDriver<IExchanges>
{
public:
  IExchangesDispT(){}

  IExchangesDispT(IExchanges *pintf)
  {
    TAutoDriver<IExchanges>::Bind(pintf, false);
  }

  IExchangesDispT(IExchangesPtr pintf)
  {
    TAutoDriver<IExchanges>::Bind(pintf, true);
  }

  IExchangesDispT& operator=(IExchanges *pintf)
  {
    TAutoDriver<IExchanges>::Bind(pintf, false);
    return *this;
  }

  IExchangesDispT& operator=(IExchangesPtr pintf)
  {
    TAutoDriver<IExchanges>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Exchanges));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Exchanges);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExchange** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchange* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IExchange** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IExchange* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExchangesDispT<IExchanges> IExchangesDisp;

// *********************************************************************//
// SmartIntf: TCOMIExchange
// Interface: IExchange
// *********************************************************************//
template <class T /* IExchange */ >
class TCOMIExchangeT : public TComInterface<IExchange>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExchangeT() {}
  TCOMIExchangeT(IExchange *intf, bool addRef = false) : TComInterface<IExchange>(intf, addRef) {}
  TCOMIExchangeT(const TCOMIExchangeT& src) : TComInterface<IExchange>(src) {}
  TCOMIExchangeT& operator=(const TCOMIExchangeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcExchangeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/);
  HRESULT         __fastcall get_MarketCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MarketCode(void);
  HRESULT         __fastcall set_MarketCode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetInstrument(BSTR InstID/*[in]*/, 
                                           Ptssmolib_tlb::IInstrument** Instrument/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall GetInstrument(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                               Ptssmolib_tlb::IInstruments** Instruments/*[out,retval]*/);
  Ptssmolib_tlb::IInstruments* __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/);
  HRESULT         __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IQuotes** ppQuotes/*[out,retval]*/);
  Ptssmolib_tlb::IQuotes* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall GetNowQuote(BSTR InstID/*[in]*/, 
                                         Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                               BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                               Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                           BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long RowCount/*[in]*/);
  HRESULT         __fastcall Alter(void);
  HRESULT         __fastcall AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/);
  HRESULT         __fastcall Drop(void);
  HRESULT         __fastcall DropInstrument(BSTR InstID/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcExchangeStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            MarketCode = {read = get_MarketCode, write = set_MarketCode};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIExchangeT<IExchange> TCOMIExchange;

// *********************************************************************//
// DispIntf:  IExchange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6ED6CC68-10E3-4A9C-AC55-73C3FCF781B8}
// *********************************************************************//
template<class T>
class IExchangeDispT : public TAutoDriver<IExchange>
{
public:
  IExchangeDispT(){}

  IExchangeDispT(IExchange *pintf)
  {
    TAutoDriver<IExchange>::Bind(pintf, false);
  }

  IExchangeDispT(IExchangePtr pintf)
  {
    TAutoDriver<IExchange>::Bind(pintf, true);
  }

  IExchangeDispT& operator=(IExchange *pintf)
  {
    TAutoDriver<IExchange>::Bind(pintf, false);
    return *this;
  }

  IExchangeDispT& operator=(IExchangePtr pintf)
  {
    TAutoDriver<IExchange>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Exchange));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Exchange);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcExchangeStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcExchangeStatus __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/);
  HRESULT         __fastcall get_MarketCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_MarketCode(void);
  HRESULT         __fastcall set_MarketCode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall GetInstrument(BSTR InstID/*[in]*/, 
                                           Ptssmolib_tlb::IInstrument** Instrument/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall GetInstrument(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/
                                               , 
                                               Ptssmolib_tlb::IInstruments** Instruments/*[out,retval]*/);
  Ptssmolib_tlb::IInstruments* __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/);
  HRESULT         __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IQuotes** ppQuotes/*[out,retval]*/);
  Ptssmolib_tlb::IQuotes* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall GetNowQuote(BSTR InstID/*[in]*/, 
                                         Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                               BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/
                                               , 
                                               Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                           BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long RowCount/*[in]*/);
  HRESULT         __fastcall Alter();
  HRESULT         __fastcall AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/);
  HRESULT         __fastcall Drop();
  HRESULT         __fastcall DropInstrument(BSTR InstID/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::TcExchangeStatus Status = {read = get_Status, write = set_Status};
  __property   BSTR            MarketCode = {read = get_MarketCode, write = set_MarketCode};
  __property   Ptssmolib_tlb::IMiscFeesPtr MiscFees = {read = get_MiscFees};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IExchangeDispT<IExchange> IExchangeDisp;

// *********************************************************************//
// SmartIntf: TCOMIInstruments
// Interface: IInstruments
// *********************************************************************//
template <class T /* IInstruments */ >
class TCOMIInstrumentsT : public TComInterface<IInstruments>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIInstrumentsT() {}
  TCOMIInstrumentsT(IInstruments *intf, bool addRef = false) : TComInterface<IInstruments>(intf, addRef) {}
  TCOMIInstrumentsT(const TCOMIInstrumentsT& src) : TComInterface<IInstruments>(src) {}
  TCOMIInstrumentsT& operator=(const TCOMIInstrumentsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(BSTR ID/*[in]*/, 
                                          Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall get_ItemByID(BSTR ID/*[in]*/);

};
typedef TCOMIInstrumentsT<IInstruments> TCOMIInstruments;

// *********************************************************************//
// DispIntf:  IInstruments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E18E14F-C1A6-48FA-8A6D-8C28929F83BC}
// *********************************************************************//
template<class T>
class IInstrumentsDispT : public TAutoDriver<IInstruments>
{
public:
  IInstrumentsDispT(){}

  IInstrumentsDispT(IInstruments *pintf)
  {
    TAutoDriver<IInstruments>::Bind(pintf, false);
  }

  IInstrumentsDispT(IInstrumentsPtr pintf)
  {
    TAutoDriver<IInstruments>::Bind(pintf, true);
  }

  IInstrumentsDispT& operator=(IInstruments *pintf)
  {
    TAutoDriver<IInstruments>::Bind(pintf, false);
    return *this;
  }

  IInstrumentsDispT& operator=(IInstrumentsPtr pintf)
  {
    TAutoDriver<IInstruments>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Instruments));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Instruments);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(BSTR ID/*[in]*/, 
                                          Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IInstrument* __fastcall get_ItemByID(BSTR ID/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IInstrumentsDispT<IInstruments> IInstrumentsDisp;

// *********************************************************************//
// SmartIntf: TCOMIQuotes
// Interface: IQuotes
// *********************************************************************//
template <class T /* IQuotes */ >
class TCOMIQuotesT : public TComInterface<IQuotes>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuotesT() {}
  TCOMIQuotesT(IQuotes *intf, bool addRef = false) : TComInterface<IQuotes>(intf, addRef) {}
  TCOMIQuotesT(const TCOMIQuotesT& src) : TComInterface<IQuotes>(src) {}
  TCOMIQuotesT& operator=(const TCOMIQuotesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IQuote** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIQuotesT<IQuotes> TCOMIQuotes;

// *********************************************************************//
// DispIntf:  IQuotes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B153FD3B-7DCA-4C6C-8597-ED851F190A30}
// *********************************************************************//
template<class T>
class IQuotesDispT : public TAutoDriver<IQuotes>
{
public:
  IQuotesDispT(){}

  IQuotesDispT(IQuotes *pintf)
  {
    TAutoDriver<IQuotes>::Bind(pintf, false);
  }

  IQuotesDispT(IQuotesPtr pintf)
  {
    TAutoDriver<IQuotes>::Bind(pintf, true);
  }

  IQuotesDispT& operator=(IQuotes *pintf)
  {
    TAutoDriver<IQuotes>::Bind(pintf, false);
    return *this;
  }

  IQuotesDispT& operator=(IQuotesPtr pintf)
  {
    TAutoDriver<IQuotes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Quotes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Quotes);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IQuote** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQuote* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IQuotesDispT<IQuotes> IQuotesDisp;

// *********************************************************************//
// SmartIntf: TCOMICharts
// Interface: ICharts
// *********************************************************************//
template <class T /* ICharts */ >
class TCOMIChartsT : public TComInterface<ICharts>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChartsT() {}
  TCOMIChartsT(ICharts *intf, bool addRef = false) : TComInterface<ICharts>(intf, addRef) {}
  TCOMIChartsT(const TCOMIChartsT& src) : TComInterface<ICharts>(src) {}
  TCOMIChartsT& operator=(const TCOMIChartsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IChart** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IChart* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IChart** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IChart* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IChart* pObject/*[in]*/);

};
typedef TCOMIChartsT<ICharts> TCOMICharts;

// *********************************************************************//
// DispIntf:  ICharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {219BD7C5-FD75-493F-9EA5-A4415F617FC7}
// *********************************************************************//
template<class T>
class IChartsDispT : public TAutoDriver<ICharts>
{
public:
  IChartsDispT(){}

  IChartsDispT(ICharts *pintf)
  {
    TAutoDriver<ICharts>::Bind(pintf, false);
  }

  IChartsDispT(IChartsPtr pintf)
  {
    TAutoDriver<ICharts>::Bind(pintf, true);
  }

  IChartsDispT& operator=(ICharts *pintf)
  {
    TAutoDriver<ICharts>::Bind(pintf, false);
    return *this;
  }

  IChartsDispT& operator=(IChartsPtr pintf)
  {
    TAutoDriver<ICharts>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Charts));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Charts);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IChart** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IChart* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IChart** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IChart* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IChart* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IChartsDispT<ICharts> IChartsDisp;

// *********************************************************************//
// SmartIntf: TCOMIChart
// Interface: IChart
// *********************************************************************//
template <class T /* IChart */ >
class TCOMIChartT : public TComInterface<IChart>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChartT() {}
  TCOMIChartT(IChart *intf, bool addRef = false) : TComInterface<IChart>(intf, addRef) {}
  TCOMIChartT(const TCOMIChartT& src) : TComInterface<IChart>(src) {}
  TCOMIChartT& operator=(const TCOMIChartT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddChartData(long ObjectID/*[in]*/, 
                                          Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/);
  HRESULT         __fastcall GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                                          double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                                          double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IChartDataSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartDataSet* __fastcall GetChartData(long ObjectID/*[in]*/, 
                                                        double FromXValue/*[in]*/, 
                                                        double ToXValue/*[in]*/, 
                                                        double FromYValue/*[in]*/, 
                                                        double ToYValue/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long MaxRowCount/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIChartT<IChart> TCOMIChart;

// *********************************************************************//
// DispIntf:  IChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {43ACB6F1-5D0D-4457-AB14-7FC808143C35}
// *********************************************************************//
template<class T>
class IChartDispT : public TAutoDriver<IChart>
{
public:
  IChartDispT(){}

  IChartDispT(IChart *pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, false);
  }

  IChartDispT(IChartPtr pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, true);
  }

  IChartDispT& operator=(IChart *pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, false);
    return *this;
  }

  IChartDispT& operator=(IChartPtr pintf)
  {
    TAutoDriver<IChart>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Chart));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Chart);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddChartData(long ObjectID/*[in]*/, 
                                          Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/);
  HRESULT         __fastcall GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                                          double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                                          double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long MaxRowCount/*[in]*/, 
                                          Ptssmolib_tlb::IChartDataSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartDataSet* __fastcall GetChartData(long ObjectID/*[in]*/, 
                                                        double FromXValue/*[in]*/, 
                                                        double ToXValue/*[in]*/, 
                                                        double FromYValue/*[in]*/, 
                                                        double ToYValue/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long MaxRowCount/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IChartDispT<IChart> IChartDisp;

// *********************************************************************//
// SmartIntf: TCOMIChartDataSet
// Interface: IChartDataSet
// *********************************************************************//
template <class T /* IChartDataSet */ >
class TCOMIChartDataSetT : public TComInterface<IChartDataSet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIChartDataSetT() {}
  TCOMIChartDataSetT(IChartDataSet *intf, bool addRef = false) : TComInterface<IChartDataSet>(intf, addRef) {}
  TCOMIChartDataSetT(const TCOMIChartDataSetT& src) : TComInterface<IChartDataSet>(src) {}
  TCOMIChartDataSetT& operator=(const TCOMIChartDataSetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_XVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_XVal(void);
  HRESULT         __fastcall set_XVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_YVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_YVal(void);
  HRESULT         __fastcall set_YVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_ZVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_ZVal(void);
  HRESULT         __fastcall set_ZVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall AddNew(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveNext(void);

  __property   double          XVal = {read = get_XVal, write = set_XVal};
  __property   double          YVal = {read = get_YVal, write = set_YVal};
  __property   double          ZVal = {read = get_ZVal, write = set_ZVal};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef TCOMIChartDataSetT<IChartDataSet> TCOMIChartDataSet;

// *********************************************************************//
// DispIntf:  IChartDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {19746063-A291-4F96-8FCD-4D33A8DC9741}
// *********************************************************************//
template<class T>
class IChartDataSetDispT : public TAutoDriver<IChartDataSet>
{
public:
  IChartDataSetDispT(){}

  IChartDataSetDispT(IChartDataSet *pintf)
  {
    TAutoDriver<IChartDataSet>::Bind(pintf, false);
  }

  IChartDataSetDispT(IChartDataSetPtr pintf)
  {
    TAutoDriver<IChartDataSet>::Bind(pintf, true);
  }

  IChartDataSetDispT& operator=(IChartDataSet *pintf)
  {
    TAutoDriver<IChartDataSet>::Bind(pintf, false);
    return *this;
  }

  IChartDataSetDispT& operator=(IChartDataSetPtr pintf)
  {
    TAutoDriver<IChartDataSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ChartDataSet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ChartDataSet);
  }

  HRESULT         __fastcall get_XVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_XVal(void);
  HRESULT         __fastcall set_XVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_YVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_YVal(void);
  HRESULT         __fastcall set_YVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_ZVal(double* pVal/*[out,retval]*/);
  double          __fastcall get_ZVal(void);
  HRESULT         __fastcall set_ZVal(double pVal/*[in]*/);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall AddNew();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveNext();

  __property   double          XVal = {read = get_XVal, write = set_XVal};
  __property   double          YVal = {read = get_YVal, write = set_YVal};
  __property   double          ZVal = {read = get_ZVal, write = set_ZVal};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef IChartDataSetDispT<IChartDataSet> IChartDataSetDisp;

// *********************************************************************//
// SmartIntf: TCOMIRoles
// Interface: IRoles
// *********************************************************************//
template <class T /* IRoles */ >
class TCOMIRolesT : public TComInterface<IRoles>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRolesT() {}
  TCOMIRolesT(IRoles *intf, bool addRef = false) : TComInterface<IRoles>(intf, addRef) {}
  TCOMIRolesT(const TCOMIRolesT& src) : TComInterface<IRoles>(src) {}
  TCOMIRolesT& operator=(const TCOMIRolesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IRole** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IRole* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IRole** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IRole* __fastcall get_ItemByID(long ID/*[in]*/);

};
typedef TCOMIRolesT<IRoles> TCOMIRoles;

// *********************************************************************//
// DispIntf:  IRoles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F2F6D70-D913-478E-B2CF-2ED9D45C85A7}
// *********************************************************************//
template<class T>
class IRolesDispT : public TAutoDriver<IRoles>
{
public:
  IRolesDispT(){}

  IRolesDispT(IRoles *pintf)
  {
    TAutoDriver<IRoles>::Bind(pintf, false);
  }

  IRolesDispT(IRolesPtr pintf)
  {
    TAutoDriver<IRoles>::Bind(pintf, true);
  }

  IRolesDispT& operator=(IRoles *pintf)
  {
    TAutoDriver<IRoles>::Bind(pintf, false);
    return *this;
  }

  IRolesDispT& operator=(IRolesPtr pintf)
  {
    TAutoDriver<IRoles>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Roles));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Roles);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IRole** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IRole* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IRole** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IRole* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IRolesDispT<IRoles> IRolesDisp;

// *********************************************************************//
// SmartIntf: TCOMIRole
// Interface: IRole
// *********************************************************************//
template <class T /* IRole */ >
class TCOMIRoleT : public TComInterface<IRole>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRoleT() {}
  TCOMIRoleT(IRole *intf, bool addRef = false) : TComInterface<IRole>(intf, addRef) {}
  TCOMIRoleT(const TCOMIRoleT& src) : TComInterface<IRole>(src) {}
  TCOMIRoleT& operator=(const TCOMIRoleT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall AddMember(BSTR UserName/*[in]*/);
  HRESULT         __fastcall DropMember(BSTR UserName/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);

  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description};
};
typedef TCOMIRoleT<IRole> TCOMIRole;

// *********************************************************************//
// DispIntf:  IRole
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6C75FA7F-A62F-4D71-B371-824BAC04BBCB}
// *********************************************************************//
template<class T>
class IRoleDispT : public TAutoDriver<IRole>
{
public:
  IRoleDispT(){}

  IRoleDispT(IRole *pintf)
  {
    TAutoDriver<IRole>::Bind(pintf, false);
  }

  IRoleDispT(IRolePtr pintf)
  {
    TAutoDriver<IRole>::Bind(pintf, true);
  }

  IRoleDispT& operator=(IRole *pintf)
  {
    TAutoDriver<IRole>::Bind(pintf, false);
    return *this;
  }

  IRoleDispT& operator=(IRolePtr pintf)
  {
    TAutoDriver<IRole>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Role));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Role);
  }

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall AddMember(BSTR UserName/*[in]*/);
  HRESULT         __fastcall DropMember(BSTR UserName/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IRoleDispT<IRole> IRoleDisp;

// *********************************************************************//
// SmartIntf: TCOMINameList
// Interface: INameList
// *********************************************************************//
template <class T /* INameList */ >
class TCOMINameListT : public TComInterface<INameList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINameListT() {}
  TCOMINameListT(INameList *intf, bool addRef = false) : TComInterface<INameList>(intf, addRef) {}
  TCOMINameListT(const TCOMINameListT& src) : TComInterface<INameList>(src) {}
  TCOMINameListT& operator=(const TCOMINameListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall FindName(BSTR Name/*[in]*/, long* pIndex/*[out,retval]*/);
  long            __fastcall FindName(BSTR Name/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMINameListT<INameList> TCOMINameList;

// *********************************************************************//
// DispIntf:  INameList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0DC2FA20-B26E-4625-A317-3D6E4D926F58}
// *********************************************************************//
template<class T>
class INameListDispT : public TAutoDriver<INameList>
{
public:
  INameListDispT(){}

  INameListDispT(INameList *pintf)
  {
    TAutoDriver<INameList>::Bind(pintf, false);
  }

  INameListDispT(INameListPtr pintf)
  {
    TAutoDriver<INameList>::Bind(pintf, true);
  }

  INameListDispT& operator=(INameList *pintf)
  {
    TAutoDriver<INameList>::Bind(pintf, false);
    return *this;
  }

  INameListDispT& operator=(INameListPtr pintf)
  {
    TAutoDriver<INameList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NameList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NameList);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall FindName(BSTR Name/*[in]*/, long* pIndex/*[out,retval]*/);
  long            __fastcall FindName(BSTR Name/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef INameListDispT<INameList> INameListDisp;

// *********************************************************************//
// SmartIntf: TCOMIUsers
// Interface: IUsers
// *********************************************************************//
template <class T /* IUsers */ >
class TCOMIUsersT : public TComInterface<IUsers>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIUsersT() {}
  TCOMIUsersT(IUsers *intf, bool addRef = false) : TComInterface<IUsers>(intf, addRef) {}
  TCOMIUsersT(const TCOMIUsersT& src) : TComInterface<IUsers>(src) {}
  TCOMIUsersT& operator=(const TCOMIUsersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IUser** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IUser* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IUser** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IUser* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/);

};
typedef TCOMIUsersT<IUsers> TCOMIUsers;

// *********************************************************************//
// DispIntf:  IUsers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {798E8869-944E-43D3-9FBA-0057C316E3A9}
// *********************************************************************//
template<class T>
class IUsersDispT : public TAutoDriver<IUsers>
{
public:
  IUsersDispT(){}

  IUsersDispT(IUsers *pintf)
  {
    TAutoDriver<IUsers>::Bind(pintf, false);
  }

  IUsersDispT(IUsersPtr pintf)
  {
    TAutoDriver<IUsers>::Bind(pintf, true);
  }

  IUsersDispT& operator=(IUsers *pintf)
  {
    TAutoDriver<IUsers>::Bind(pintf, false);
    return *this;
  }

  IUsersDispT& operator=(IUsersPtr pintf)
  {
    TAutoDriver<IUsers>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Users));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Users);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IUser** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IUser* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IUser** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IUser* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IUsersDispT<IUsers> IUsersDisp;

// *********************************************************************//
// SmartIntf: TCOMIUser
// Interface: IUser
// *********************************************************************//
template <class T /* IUser */ >
class TCOMIUserT : public TComInterface<IUser>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIUserT() {}
  TCOMIUserT(IUser *intf, bool addRef = false) : TComInterface<IUser>(intf, addRef) {}
  TCOMIUserT(const TCOMIUserT& src) : TComInterface<IUser>(src) {}
  TCOMIUserT& operator=(const TCOMIUserT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_DenyLogin(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DenyLogin(void);
  HRESULT         __fastcall set_DenyLogin(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcUserType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcUserType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/);
  HRESULT         __fastcall get_IsPasswordExpired(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsPasswordExpired(void);
  HRESULT         __fastcall get_IsSystemObject(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsSystemObject(void);
  HRESULT         __fastcall get_MustChangePassword(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MustChangePassword(void);
  HRESULT         __fastcall set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordPolicyEnforced(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PasswordPolicyEnforced(void);
  HRESULT         __fastcall set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordExpirationEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PasswordExpirationEnabled(void);
  HRESULT         __fastcall set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Email(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email(void);
  HRESULT         __fastcall set_Email(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddToRole(BSTR RoleName/*[in]*/);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                  long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                   long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall IsMember(BSTR RoleName/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsMember(BSTR RoleName/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);
  HRESULT         __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                              Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/, 
                                              Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                                          Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/);
  HRESULT         __fastcall ListObjectPermissions(long ObjectID/*[in]*/, 
                                                   Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListObjectPermissions(long ObjectID/*[in]*/);
  HRESULT         __fastcall Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                    long ObjectID/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   VARIANT_BOOL    DenyLogin = {read = get_DenyLogin, write = set_DenyLogin};
  __property   Ptssmolib_tlb::TcUserType Type = {read = get_Type, write = set_Type};
  __property   VARIANT_BOOL    IsPasswordExpired = {read = get_IsPasswordExpired};
  __property   VARIANT_BOOL    IsSystemObject = {read = get_IsSystemObject};
  __property   VARIANT_BOOL    MustChangePassword = {read = get_MustChangePassword, write = set_MustChangePassword};
  __property   VARIANT_BOOL    PasswordPolicyEnforced = {read = get_PasswordPolicyEnforced, write = set_PasswordPolicyEnforced};
  __property   VARIANT_BOOL    PasswordExpirationEnabled = {read = get_PasswordExpirationEnabled, write = set_PasswordExpirationEnabled};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIUserT<IUser> TCOMIUser;

// *********************************************************************//
// DispIntf:  IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D437A996-1B09-4600-B911-B9DCA680C068}
// *********************************************************************//
template<class T>
class IUserDispT : public TAutoDriver<IUser>
{
public:
  IUserDispT(){}

  IUserDispT(IUser *pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, false);
  }

  IUserDispT(IUserPtr pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, true);
  }

  IUserDispT& operator=(IUser *pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, false);
    return *this;
  }

  IUserDispT& operator=(IUserPtr pintf)
  {
    TAutoDriver<IUser>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_User));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_User);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_DenyLogin(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DenyLogin(void);
  HRESULT         __fastcall set_DenyLogin(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Type(Ptssmolib_tlb::TcUserType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcUserType __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/);
  HRESULT         __fastcall get_IsPasswordExpired(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsPasswordExpired(void);
  HRESULT         __fastcall get_IsSystemObject(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsSystemObject(void);
  HRESULT         __fastcall get_MustChangePassword(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MustChangePassword(void);
  HRESULT         __fastcall set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordPolicyEnforced(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PasswordPolicyEnforced(void);
  HRESULT         __fastcall set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_PasswordExpirationEnabled(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PasswordExpirationEnabled(void);
  HRESULT         __fastcall set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_Email(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Email(void);
  HRESULT         __fastcall set_Email(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddToRole(BSTR RoleName/*[in]*/);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                  long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                   long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall IsMember(BSTR RoleName/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsMember(BSTR RoleName/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);
  HRESULT         __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                              Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/, 
                                              Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                                          Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/);
  HRESULT         __fastcall ListObjectPermissions(long ObjectID/*[in]*/, 
                                                   Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListObjectPermissions(long ObjectID/*[in]*/);
  HRESULT         __fastcall Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                    long ObjectID/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   VARIANT_BOOL    DenyLogin = {read = get_DenyLogin, write = set_DenyLogin};
  __property   Ptssmolib_tlb::TcUserType Type = {read = get_Type, write = set_Type};
  __property   VARIANT_BOOL    IsPasswordExpired = {read = get_IsPasswordExpired};
  __property   VARIANT_BOOL    IsSystemObject = {read = get_IsSystemObject};
  __property   VARIANT_BOOL    MustChangePassword = {read = get_MustChangePassword, write = set_MustChangePassword};
  __property   VARIANT_BOOL    PasswordPolicyEnforced = {read = get_PasswordPolicyEnforced, write = set_PasswordPolicyEnforced};
  __property   VARIANT_BOOL    PasswordExpirationEnabled = {read = get_PasswordExpirationEnabled, write = set_PasswordExpirationEnabled};
  __property   BSTR            Email = {read = get_Email, write = set_Email};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IUserDispT<IUser> IUserDisp;

// *********************************************************************//
// SmartIntf: TCOMIProject
// Interface: IProject
// *********************************************************************//
template <class T /* IProject */ >
class TCOMIProjectT : public TComInterface<IProject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIProjectT() {}
  TCOMIProjectT(IProject *intf, bool addRef = false) : TComInterface<IProject>(intf, addRef) {}
  TCOMIProjectT(const TCOMIProjectT& src) : TComInterface<IProject>(src) {}
  TCOMIProjectT& operator=(const TCOMIProjectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PositionPeriod(long* pVal/*[out,retval]*/);
  long            __fastcall get_PositionPeriod(void);
  HRESULT         __fastcall set_PositionPeriod(long pVal/*[in]*/);
  HRESULT         __fastcall get_CompleteDegree(long* pVal/*[out,retval]*/);
  long            __fastcall get_CompleteDegree(void);
  HRESULT         __fastcall set_CompleteDegree(long pVal/*[in]*/);
  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_FinishDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FinishDate(void);
  HRESULT         __fastcall set_FinishDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_StartDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_StartDate(void);
  HRESULT         __fastcall set_StartDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerName(void);
  HRESULT         __fastcall set_TradeManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerIdea(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerIdea(void);
  HRESULT         __fastcall set_TradeManagerIdea(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TradeManagerConfirmed(void);
  HRESULT         __fastcall set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerName(void);
  HRESULT         __fastcall set_RiskManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerIdea(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerIdea(void);
  HRESULT         __fastcall set_RiskManagerIdea(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RiskManagerConfirmed(void);
  HRESULT         __fastcall set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerConfirmedDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerConfirmedDate(void);
  HRESULT         __fastcall get_RiskManagerConfirmedDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerConfirmedDate(void);
  HRESULT         __fastcall get_Priority(long* pVal/*[out,retval]*/);
  long            __fastcall get_Priority(void);
  HRESULT         __fastcall set_Priority(long pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcProjectStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcProjectStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddHedge(long ID/*[in]*/);
  HRESULT         __fastcall AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/);
  HRESULT         __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                       Ptssmolib_tlb::IHedges** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall Cancel(void);

  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            PositionPeriod = {read = get_PositionPeriod, write = set_PositionPeriod};
  __property   long            CompleteDegree = {read = get_CompleteDegree, write = set_CompleteDegree};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            FinishDate = {read = get_FinishDate, write = set_FinishDate};
  __property   BSTR            StartDate = {read = get_StartDate, write = set_StartDate};
  __property   BSTR            TradeManagerName = {read = get_TradeManagerName, write = set_TradeManagerName};
  __property   BSTR            TradeManagerIdea = {read = get_TradeManagerIdea, write = set_TradeManagerIdea};
  __property   VARIANT_BOOL    TradeManagerConfirmed = {read = get_TradeManagerConfirmed, write = set_TradeManagerConfirmed};
  __property   BSTR            RiskManagerName = {read = get_RiskManagerName, write = set_RiskManagerName};
  __property   BSTR            RiskManagerIdea = {read = get_RiskManagerIdea, write = set_RiskManagerIdea};
  __property   VARIANT_BOOL    RiskManagerConfirmed = {read = get_RiskManagerConfirmed, write = set_RiskManagerConfirmed};
  __property   BSTR            TradeManagerConfirmedDate = {read = get_TradeManagerConfirmedDate};
  __property   BSTR            RiskManagerConfirmedDate = {read = get_RiskManagerConfirmedDate};
  __property   long            Priority = {read = get_Priority, write = set_Priority};
  __property   Ptssmolib_tlb::TcProjectStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIProjectT<IProject> TCOMIProject;

// *********************************************************************//
// DispIntf:  IProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {92CF7599-E327-440D-B1D3-03942AFF591A}
// *********************************************************************//
template<class T>
class IProjectDispT : public TAutoDriver<IProject>
{
public:
  IProjectDispT(){}

  IProjectDispT(IProject *pintf)
  {
    TAutoDriver<IProject>::Bind(pintf, false);
  }

  IProjectDispT(IProjectPtr pintf)
  {
    TAutoDriver<IProject>::Bind(pintf, true);
  }

  IProjectDispT& operator=(IProject *pintf)
  {
    TAutoDriver<IProject>::Bind(pintf, false);
    return *this;
  }

  IProjectDispT& operator=(IProjectPtr pintf)
  {
    TAutoDriver<IProject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Project));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Project);
  }

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_PositionPeriod(long* pVal/*[out,retval]*/);
  long            __fastcall get_PositionPeriod(void);
  HRESULT         __fastcall set_PositionPeriod(long pVal/*[in]*/);
  HRESULT         __fastcall get_CompleteDegree(long* pVal/*[out,retval]*/);
  long            __fastcall get_CompleteDegree(void);
  HRESULT         __fastcall set_CompleteDegree(long pVal/*[in]*/);
  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_FinishDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_FinishDate(void);
  HRESULT         __fastcall set_FinishDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_StartDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_StartDate(void);
  HRESULT         __fastcall set_StartDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerName(void);
  HRESULT         __fastcall set_TradeManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerIdea(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerIdea(void);
  HRESULT         __fastcall set_TradeManagerIdea(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TradeManagerConfirmed(void);
  HRESULT         __fastcall set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerName(void);
  HRESULT         __fastcall set_RiskManagerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerIdea(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerIdea(void);
  HRESULT         __fastcall set_RiskManagerIdea(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_RiskManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RiskManagerConfirmed(void);
  HRESULT         __fastcall set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_TradeManagerConfirmedDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradeManagerConfirmedDate(void);
  HRESULT         __fastcall get_RiskManagerConfirmedDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_RiskManagerConfirmedDate(void);
  HRESULT         __fastcall get_Priority(long* pVal/*[out,retval]*/);
  long            __fastcall get_Priority(void);
  HRESULT         __fastcall set_Priority(long pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcProjectStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcProjectStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddHedge(long ID/*[in]*/);
  HRESULT         __fastcall AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/);
  HRESULT         __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                       Ptssmolib_tlb::IHedges** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                       Ptssmolib_tlb::IOrders** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   long            PositionPeriod = {read = get_PositionPeriod, write = set_PositionPeriod};
  __property   long            CompleteDegree = {read = get_CompleteDegree, write = set_CompleteDegree};
  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            FinishDate = {read = get_FinishDate, write = set_FinishDate};
  __property   BSTR            StartDate = {read = get_StartDate, write = set_StartDate};
  __property   BSTR            TradeManagerName = {read = get_TradeManagerName, write = set_TradeManagerName};
  __property   BSTR            TradeManagerIdea = {read = get_TradeManagerIdea, write = set_TradeManagerIdea};
  __property   VARIANT_BOOL    TradeManagerConfirmed = {read = get_TradeManagerConfirmed, write = set_TradeManagerConfirmed};
  __property   BSTR            RiskManagerName = {read = get_RiskManagerName, write = set_RiskManagerName};
  __property   BSTR            RiskManagerIdea = {read = get_RiskManagerIdea, write = set_RiskManagerIdea};
  __property   VARIANT_BOOL    RiskManagerConfirmed = {read = get_RiskManagerConfirmed, write = set_RiskManagerConfirmed};
  __property   BSTR            TradeManagerConfirmedDate = {read = get_TradeManagerConfirmedDate};
  __property   BSTR            RiskManagerConfirmedDate = {read = get_RiskManagerConfirmedDate};
  __property   long            Priority = {read = get_Priority, write = set_Priority};
  __property   Ptssmolib_tlb::TcProjectStatus Status = {read = get_Status};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IProjectDispT<IProject> IProjectDisp;

// *********************************************************************//
// SmartIntf: TCOMIPTSSession
// Interface: IPTSSession
// *********************************************************************//
template <class T /* IPTSSession */ >
class TCOMIPTSSessionT : public TComInterface<IPTSSession>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPTSSessionT() {}
  TCOMIPTSSessionT(IPTSSession *intf, bool addRef = false) : TComInterface<IPTSSession>(intf, addRef) {}
  TCOMIPTSSessionT(const TCOMIPTSSessionT& src) : TComInterface<IPTSSession>(src) {}
  TCOMIPTSSessionT& operator=(const TCOMIPTSSessionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  HRESULT         __fastcall get_DomainName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DomainName(void);
  HRESULT         __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall get_AuthnLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_AuthnLevel(void);
  HRESULT         __fastcall get_ImpLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImpLevel(void);
  HRESULT         __fastcall get_IsLogin(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsLogin(void);
  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/, 
                                   BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  HRESULT         __fastcall Logout(void);

  __property   BSTR            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogin = {read = get_IsLogin};
  __property   BSTR            ServerName = {read = get_ServerName};
};
typedef TCOMIPTSSessionT<IPTSSession> TCOMIPTSSession;

// *********************************************************************//
// DispIntf:  IPTSSession
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26A19C68-9CFB-4885-992E-B182B51AB593}
// *********************************************************************//
template<class T>
class IPTSSessionDispT : public TAutoDriver<IPTSSession>
{
public:
  IPTSSessionDispT(){}

  IPTSSessionDispT(IPTSSession *pintf)
  {
    TAutoDriver<IPTSSession>::Bind(pintf, false);
  }

  IPTSSessionDispT(IPTSSessionPtr pintf)
  {
    TAutoDriver<IPTSSession>::Bind(pintf, true);
  }

  IPTSSessionDispT& operator=(IPTSSession *pintf)
  {
    TAutoDriver<IPTSSession>::Bind(pintf, false);
    return *this;
  }

  IPTSSessionDispT& operator=(IPTSSessionPtr pintf)
  {
    TAutoDriver<IPTSSession>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PTSSession));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PTSSession);
  }

  HRESULT         __fastcall get_ID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ID(void);
  HRESULT         __fastcall get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  HRESULT         __fastcall get_DomainName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DomainName(void);
  HRESULT         __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall get_AuthnLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_AuthnLevel(void);
  HRESULT         __fastcall get_ImpLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImpLevel(void);
  HRESULT         __fastcall get_IsLogin(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsLogin(void);
  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/
                                   , BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  HRESULT         __fastcall Logout();

  __property   BSTR            ID = {read = get_ID};
  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogin = {read = get_IsLogin};
  __property   BSTR            ServerName = {read = get_ServerName};
};
typedef IPTSSessionDispT<IPTSSession> IPTSSessionDisp;

// *********************************************************************//
// SmartIntf: TCOMINewStockSet
// Interface: INewStockSet
// *********************************************************************//
template <class T /* INewStockSet */ >
class TCOMINewStockSetT : public TComInterface<INewStockSet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINewStockSetT() {}
  TCOMINewStockSetT(INewStockSet *intf, bool addRef = false) : TComInterface<INewStockSet>(intf, addRef) {}
  TCOMINewStockSetT(const TCOMINewStockSetT& src) : TComInterface<INewStockSet>(src) {}
  TCOMINewStockSetT& operator=(const TCOMINewStockSetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SubsCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsCode(void);
  HRESULT         __fastcall get_SecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SecID(void);
  HRESULT         __fastcall get_ExchID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_IssuePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_IssuePrice(void);
  HRESULT         __fastcall get_NetIssueQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_NetIssueQty(void);
  HRESULT         __fastcall get_IssueQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_IssueQty(void);
  HRESULT         __fastcall get_SubsStartDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsStartDate(void);
  HRESULT         __fastcall get_SubsEndDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsEndDate(void);
  HRESULT         __fastcall get_UnFreezeDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UnFreezeDate(void);
  HRESULT         __fastcall get_Status(short* pVal/*[out,retval]*/);
  short           __fastcall get_Status(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveNext(void);

  __property   BSTR            SubsCode = {read = get_SubsCode};
  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   BSTR            Name = {read = get_Name};
  __property   double          IssuePrice = {read = get_IssuePrice};
  __property   long            NetIssueQty = {read = get_NetIssueQty};
  __property   long            IssueQty = {read = get_IssueQty};
  __property   BSTR            SubsStartDate = {read = get_SubsStartDate};
  __property   BSTR            SubsEndDate = {read = get_SubsEndDate};
  __property   BSTR            UnFreezeDate = {read = get_UnFreezeDate};
  __property   short           Status = {read = get_Status};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef TCOMINewStockSetT<INewStockSet> TCOMINewStockSet;

// *********************************************************************//
// DispIntf:  INewStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F79527A-DDFC-4F56-A899-CB001A488CFD}
// *********************************************************************//
template<class T>
class INewStockSetDispT : public TAutoDriver<INewStockSet>
{
public:
  INewStockSetDispT(){}

  INewStockSetDispT(INewStockSet *pintf)
  {
    TAutoDriver<INewStockSet>::Bind(pintf, false);
  }

  INewStockSetDispT(INewStockSetPtr pintf)
  {
    TAutoDriver<INewStockSet>::Bind(pintf, true);
  }

  INewStockSetDispT& operator=(INewStockSet *pintf)
  {
    TAutoDriver<INewStockSet>::Bind(pintf, false);
    return *this;
  }

  INewStockSetDispT& operator=(INewStockSetPtr pintf)
  {
    TAutoDriver<INewStockSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NewStockSet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NewStockSet);
  }

  HRESULT         __fastcall get_SubsCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsCode(void);
  HRESULT         __fastcall get_SecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SecID(void);
  HRESULT         __fastcall get_ExchID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchID(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_IssuePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_IssuePrice(void);
  HRESULT         __fastcall get_NetIssueQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_NetIssueQty(void);
  HRESULT         __fastcall get_IssueQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_IssueQty(void);
  HRESULT         __fastcall get_SubsStartDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsStartDate(void);
  HRESULT         __fastcall get_SubsEndDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SubsEndDate(void);
  HRESULT         __fastcall get_UnFreezeDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UnFreezeDate(void);
  HRESULT         __fastcall get_Status(short* pVal/*[out,retval]*/);
  short           __fastcall get_Status(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveNext();

  __property   BSTR            SubsCode = {read = get_SubsCode};
  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   BSTR            Name = {read = get_Name};
  __property   double          IssuePrice = {read = get_IssuePrice};
  __property   long            NetIssueQty = {read = get_NetIssueQty};
  __property   long            IssueQty = {read = get_IssueQty};
  __property   BSTR            SubsStartDate = {read = get_SubsStartDate};
  __property   BSTR            SubsEndDate = {read = get_SubsEndDate};
  __property   BSTR            UnFreezeDate = {read = get_UnFreezeDate};
  __property   short           Status = {read = get_Status};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef INewStockSetDispT<INewStockSet> INewStockSetDisp;

// *********************************************************************//
// SmartIntf: TCOMINotTradingStockSet
// Interface: INotTradingStockSet
// *********************************************************************//
template <class T /* INotTradingStockSet */ >
class TCOMINotTradingStockSetT : public TComInterface<INotTradingStockSet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINotTradingStockSetT() {}
  TCOMINotTradingStockSetT(INotTradingStockSet *intf, bool addRef = false) : TComInterface<INotTradingStockSet>(intf, addRef) {}
  TCOMINotTradingStockSetT(const TCOMINotTradingStockSetT& src) : TComInterface<INotTradingStockSet>(src) {}
  TCOMINotTradingStockSetT& operator=(const TCOMINotTradingStockSetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SecID(void);
  HRESULT         __fastcall get_ExchID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchID(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_Date(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Date(void);
  HRESULT         __fastcall get_Time(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Time(void);
  HRESULT         __fastcall get_Reason(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Reason(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveNext(void);

  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            Date = {read = get_Date};
  __property   BSTR            Time = {read = get_Time};
  __property   BSTR            Reason = {read = get_Reason};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef TCOMINotTradingStockSetT<INotTradingStockSet> TCOMINotTradingStockSet;

// *********************************************************************//
// DispIntf:  INotTradingStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {074E7DCF-AA92-4BA9-9EDB-4DFB79C0C201}
// *********************************************************************//
template<class T>
class INotTradingStockSetDispT : public TAutoDriver<INotTradingStockSet>
{
public:
  INotTradingStockSetDispT(){}

  INotTradingStockSetDispT(INotTradingStockSet *pintf)
  {
    TAutoDriver<INotTradingStockSet>::Bind(pintf, false);
  }

  INotTradingStockSetDispT(INotTradingStockSetPtr pintf)
  {
    TAutoDriver<INotTradingStockSet>::Bind(pintf, true);
  }

  INotTradingStockSetDispT& operator=(INotTradingStockSet *pintf)
  {
    TAutoDriver<INotTradingStockSet>::Bind(pintf, false);
    return *this;
  }

  INotTradingStockSetDispT& operator=(INotTradingStockSetPtr pintf)
  {
    TAutoDriver<INotTradingStockSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_NotTradingStockSet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_NotTradingStockSet);
  }

  HRESULT         __fastcall get_SecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SecID(void);
  HRESULT         __fastcall get_ExchID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExchID(void);
  HRESULT         __fastcall get_Duration(long* pVal/*[out,retval]*/);
  long            __fastcall get_Duration(void);
  HRESULT         __fastcall get_Date(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Date(void);
  HRESULT         __fastcall get_Time(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Time(void);
  HRESULT         __fastcall get_Reason(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Reason(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveNext();

  __property   BSTR            SecID = {read = get_SecID};
  __property   long            ExchID = {read = get_ExchID};
  __property   long            Duration = {read = get_Duration};
  __property   BSTR            Date = {read = get_Date};
  __property   BSTR            Time = {read = get_Time};
  __property   BSTR            Reason = {read = get_Reason};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
};
typedef INotTradingStockSetDispT<INotTradingStockSet> INotTradingStockSetDisp;

// *********************************************************************//
// SmartIntf: TCOMIQuoteDetail
// Interface: IQuoteDetail
// *********************************************************************//
template <class T /* IQuoteDetail */ >
class TCOMIQuoteDetailT : public TComInterface<IQuoteDetail>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuoteDetailT() {}
  TCOMIQuoteDetailT(IQuoteDetail *intf, bool addRef = false) : TComInterface<IQuoteDetail>(intf, addRef) {}
  TCOMIQuoteDetailT(const TCOMIQuoteDetailT& src) : TComInterface<IQuoteDetail>(src) {}
  TCOMIQuoteDetailT& operator=(const TCOMIQuoteDetailT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Level(long* pVal/*[out,retval]*/);
  long            __fastcall get_Level(void);
  HRESULT         __fastcall get_AskQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(void);
  HRESULT         __fastcall get_AskPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(void);
  HRESULT         __fastcall get_BidQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(void);
  HRESULT         __fastcall get_BidPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(void);
  HRESULT         __fastcall get_AskOrderNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskOrderNum(void);
  HRESULT         __fastcall get_BidOrderNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidOrderNum(void);

  __property   long            Level = {read = get_Level};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   long            AskOrderNum = {read = get_AskOrderNum};
  __property   long            BidOrderNum = {read = get_BidOrderNum};
};
typedef TCOMIQuoteDetailT<IQuoteDetail> TCOMIQuoteDetail;

// *********************************************************************//
// DispIntf:  IQuoteDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BED76FDA-3A4F-41B4-81C6-43BBDF224E4D}
// *********************************************************************//
template<class T>
class IQuoteDetailDispT : public TAutoDriver<IQuoteDetail>
{
public:
  IQuoteDetailDispT(){}

  IQuoteDetailDispT(IQuoteDetail *pintf)
  {
    TAutoDriver<IQuoteDetail>::Bind(pintf, false);
  }

  IQuoteDetailDispT(IQuoteDetailPtr pintf)
  {
    TAutoDriver<IQuoteDetail>::Bind(pintf, true);
  }

  IQuoteDetailDispT& operator=(IQuoteDetail *pintf)
  {
    TAutoDriver<IQuoteDetail>::Bind(pintf, false);
    return *this;
  }

  IQuoteDetailDispT& operator=(IQuoteDetailPtr pintf)
  {
    TAutoDriver<IQuoteDetail>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QuoteDetail));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QuoteDetail);
  }

  HRESULT         __fastcall get_Level(long* pVal/*[out,retval]*/);
  long            __fastcall get_Level(void);
  HRESULT         __fastcall get_AskQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(void);
  HRESULT         __fastcall get_AskPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(void);
  HRESULT         __fastcall get_BidQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(void);
  HRESULT         __fastcall get_BidPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(void);
  HRESULT         __fastcall get_AskOrderNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_AskOrderNum(void);
  HRESULT         __fastcall get_BidOrderNum(long* pVal/*[out,retval]*/);
  long            __fastcall get_BidOrderNum(void);

  __property   long            Level = {read = get_Level};
  __property   long            AskQty = {read = get_AskQty};
  __property   double          AskPrice = {read = get_AskPrice};
  __property   long            BidQty = {read = get_BidQty};
  __property   double          BidPrice = {read = get_BidPrice};
  __property   long            AskOrderNum = {read = get_AskOrderNum};
  __property   long            BidOrderNum = {read = get_BidOrderNum};
};
typedef IQuoteDetailDispT<IQuoteDetail> IQuoteDetailDisp;

// *********************************************************************//
// DispIntf:  _ISubscriberEvents
// Flags:     (4096) Dispatchable
// GUID:      {AD3BD7A0-CD78-4280-B00F-F186F6B0FF53}
// *********************************************************************//
template <class T>
class _ISubscriberEventsDispT : public TAutoDriver<_ISubscriberEvents>
{
public:
  _ISubscriberEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall OnEvent(LPDISPATCH pEventHead/*[in]*/, LPDISPATCH pEventData/*[in]*/);
  HRESULT         __fastcall OnStatusChanged(Ptssmolib_tlb::TcSubscribeStatus Status/*[in]*/);
  HRESULT         __fastcall OnError(BSTR ErrMsg/*[in]*/);

};
typedef _ISubscriberEventsDispT<_ISubscriberEvents> _ISubscriberEventsDisp;

typedef TComInterface<ISubscriber2>  TCOMISubscriber2;

// *********************************************************************//
// DispIntf:  ISubscriber2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99DB1DEB-7470-4647-9645-560C888EFB06}
// *********************************************************************//
template<class T>
class ISubscriber2DispT : public TAutoDriver<ISubscriber2>
{
public:
  ISubscriber2DispT(){}

  ISubscriber2DispT(ISubscriber2 *pintf)
  {
    TAutoDriver<ISubscriber2>::Bind(pintf, false);
  }

  ISubscriber2DispT(ISubscriber2Ptr pintf)
  {
    TAutoDriver<ISubscriber2>::Bind(pintf, true);
  }

  ISubscriber2DispT& operator=(ISubscriber2 *pintf)
  {
    TAutoDriver<ISubscriber2>::Bind(pintf, false);
    return *this;
  }

  ISubscriber2DispT& operator=(ISubscriber2Ptr pintf)
  {
    TAutoDriver<ISubscriber2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_EventTopic(Ptssmolib_tlb::IEventTopic** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopicPtr __fastcall get_EventTopic(void);
  HRESULT         __fastcall Subscribe2(BSTR FilterString/*[in]*/);

  __property   Ptssmolib_tlb::IEventTopicPtr EventTopic = {read = get_EventTopic};
};
typedef ISubscriber2DispT<ISubscriber2> ISubscriber2Disp;

typedef TComInterface<IExchange2>  TCOMIExchange2;

// *********************************************************************//
// DispIntf:  IExchange2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {ADC2CEF5-C488-44CE-94B4-3634A8C0466E}
// *********************************************************************//
template<class T>
class IExchange2DispT : public TAutoDriver<IExchange2>
{
public:
  IExchange2DispT(){}

  IExchange2DispT(IExchange2 *pintf)
  {
    TAutoDriver<IExchange2>::Bind(pintf, false);
  }

  IExchange2DispT(IExchange2Ptr pintf)
  {
    TAutoDriver<IExchange2>::Bind(pintf, true);
  }

  IExchange2DispT& operator=(IExchange2 *pintf)
  {
    TAutoDriver<IExchange2>::Bind(pintf, false);
    return *this;
  }

  IExchange2DispT& operator=(IExchange2Ptr pintf)
  {
    TAutoDriver<IExchange2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/);
  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/);
  HRESULT         __fastcall GetNowQuote(BSTR InstID/*[in]*/, 
                                         Ptssmolib_tlb::IQuoteDataSet** ppQuote/*[out,retval]*/);
  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetNowQuote(BSTR InstID/*[in]*/);
  HRESULT         __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                               BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/
                                               , 
                                               Ptssmolib_tlb::IQuoteDataSet** ppTickData/*[out,retval]*/);
  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                             BSTR TradingDay/*[in]*/, 
                                                             BSTR FormTime/*[in]*/, 
                                                             BSTR ToTime/*[in]*/, 
                                                             long* pStartIndex/*[in,out]*/, 
                                                             long RowCount/*[in]*/);
  HRESULT         __fastcall GetHistoryQuotes(BSTR InstID/*[in]*/, BSTR FormDate/*[in]*/, 
                                              BSTR ToDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                              long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/);
  Ptssmolib_tlb::IQuoteDataSet* __fastcall GetHistoryQuotes(BSTR InstID/*[in]*/, 
                                                            BSTR FormDate/*[in]*/, 
                                                            BSTR ToDate/*[in]*/, 
                                                            long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/);
  HRESULT         __fastcall GetNewStocks(Ptssmolib_tlb::INewStockSet** ppData/*[out,retval]*/);
  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void);
  HRESULT         __fastcall GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/);
  Ptssmolib_tlb::INotTradingStockSet* __fastcall GetNotTradingStocks(void);

};
typedef IExchange2DispT<IExchange2> IExchange2Disp;

// *********************************************************************//
// SmartIntf: TCOMIQuoteDataSet
// Interface: IQuoteDataSet
// *********************************************************************//
template <class T /* IQuoteDataSet */ >
class TCOMIQuoteDataSetT : public TComInterface<IQuoteDataSet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuoteDataSetT() {}
  TCOMIQuoteDataSetT(IQuoteDataSet *intf, bool addRef = false) : TComInterface<IQuoteDataSet>(intf, addRef) {}
  TCOMIQuoteDataSetT(const TCOMIQuoteDataSetT& src) : TComInterface<IQuoteDataSet>(src) {}
  TCOMIQuoteDataSetT& operator=(const TCOMIQuoteDataSetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall get_AskQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_AskPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_AskOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskOrderNum(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidOrderNum(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Data(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Data(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall get_Index(long* pVal/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveNext(void);

  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            Count = {read = get_Count};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
  __property   long            Index = {read = get_Index};
};
typedef TCOMIQuoteDataSetT<IQuoteDataSet> TCOMIQuoteDataSet;

// *********************************************************************//
// DispIntf:  IQuoteDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4875FF1B-8357-4874-836F-C125B482F611}
// *********************************************************************//
template<class T>
class IQuoteDataSetDispT : public TAutoDriver<IQuoteDataSet>
{
public:
  IQuoteDataSetDispT(){}

  IQuoteDataSetDispT(IQuoteDataSet *pintf)
  {
    TAutoDriver<IQuoteDataSet>::Bind(pintf, false);
  }

  IQuoteDataSetDispT(IQuoteDataSetPtr pintf)
  {
    TAutoDriver<IQuoteDataSet>::Bind(pintf, true);
  }

  IQuoteDataSetDispT& operator=(IQuoteDataSet *pintf)
  {
    TAutoDriver<IQuoteDataSet>::Bind(pintf, false);
    return *this;
  }

  IQuoteDataSetDispT& operator=(IQuoteDataSetPtr pintf)
  {
    TAutoDriver<IQuoteDataSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QuoteDataSet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QuoteDataSet);
  }

  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall get_AskQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_AskPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_AskOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskOrderNum(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_BidOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidOrderNum(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Data(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_Data(void);
  HRESULT         __fastcall get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  HRESULT         __fastcall get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  HRESULT         __fastcall get_Index(long* pVal/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveNext();

  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            Count = {read = get_Count};
  __property   VARIANT_BOOL    DataBOF = {read = get_DataBOF};
  __property   VARIANT_BOOL    DataEOF = {read = get_DataEOF};
  __property   long            Index = {read = get_Index};
};
typedef IQuoteDataSetDispT<IQuoteDataSet> IQuoteDataSetDisp;

// *********************************************************************//
// SmartIntf: TCOMIQueryCondition
// Interface: IQueryCondition
// *********************************************************************//
template <class T /* IQueryCondition */ >
class TCOMIQueryConditionT : public TComInterface<IQueryCondition>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQueryConditionT() {}
  TCOMIQueryConditionT(IQueryCondition *intf, bool addRef = false) : TComInterface<IQueryCondition>(intf, addRef) {}
  TCOMIQueryConditionT(const TCOMIQueryConditionT& src) : TComInterface<IQueryCondition>(src) {}
  TCOMIQueryConditionT& operator=(const TCOMIQueryConditionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Property(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Property(void);
  HRESULT         __fastcall set_Property(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Operator(Ptssmolib_tlb::TcOperatorType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOperatorType __fastcall get_Operator(void);
  HRESULT         __fastcall set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/);
  HRESULT         __fastcall get_LeftValue(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_LeftValue(void);
  HRESULT         __fastcall set_LeftValue(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_RightValue(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_RightValue(void);
  HRESULT         __fastcall set_RightValue(VARIANT pVal/*[in]*/);

  __property   BSTR            Property = {read = get_Property, write = set_Property};
  __property   Ptssmolib_tlb::TcOperatorType Operator = {read = get_Operator, write = set_Operator};
};
typedef TCOMIQueryConditionT<IQueryCondition> TCOMIQueryCondition;

// *********************************************************************//
// DispIntf:  IQueryCondition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D74D5CE8-1B37-4E54-951E-03649A222646}
// *********************************************************************//
template<class T>
class IQueryConditionDispT : public TAutoDriver<IQueryCondition>
{
public:
  IQueryConditionDispT(){}

  IQueryConditionDispT(IQueryCondition *pintf)
  {
    TAutoDriver<IQueryCondition>::Bind(pintf, false);
  }

  IQueryConditionDispT(IQueryConditionPtr pintf)
  {
    TAutoDriver<IQueryCondition>::Bind(pintf, true);
  }

  IQueryConditionDispT& operator=(IQueryCondition *pintf)
  {
    TAutoDriver<IQueryCondition>::Bind(pintf, false);
    return *this;
  }

  IQueryConditionDispT& operator=(IQueryConditionPtr pintf)
  {
    TAutoDriver<IQueryCondition>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryCondition));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryCondition);
  }

  HRESULT         __fastcall get_Property(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Property(void);
  HRESULT         __fastcall set_Property(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Operator(Ptssmolib_tlb::TcOperatorType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcOperatorType __fastcall get_Operator(void);
  HRESULT         __fastcall set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/);
  HRESULT         __fastcall get_LeftValue(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_LeftValue(void);
  HRESULT         __fastcall set_LeftValue(VARIANT pVal/*[in]*/);
  HRESULT         __fastcall get_RightValue(VARIANT* pVal/*[out,retval]*/);
  VARIANT         __fastcall get_RightValue(void);
  HRESULT         __fastcall set_RightValue(VARIANT pVal/*[in]*/);

  __property   BSTR            Property = {read = get_Property, write = set_Property};
  __property   Ptssmolib_tlb::TcOperatorType Operator = {read = get_Operator, write = set_Operator};
};
typedef IQueryConditionDispT<IQueryCondition> IQueryConditionDisp;

// *********************************************************************//
// SmartIntf: TCOMIQueryConditions
// Interface: IQueryConditions
// *********************************************************************//
template <class T /* IQueryConditions */ >
class TCOMIQueryConditionsT : public TComInterface<IQueryConditions>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQueryConditionsT() {}
  TCOMIQueryConditionsT(IQueryConditions *intf, bool addRef = false) : TComInterface<IQueryConditions>(intf, addRef) {}
  TCOMIQueryConditionsT(const TCOMIQueryConditionsT& src) : TComInterface<IQueryConditions>(src) {}
  TCOMIQueryConditionsT& operator=(const TCOMIQueryConditionsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQueryCondition* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQueryCondition* __fastcall Add(void);
  HRESULT         __fastcall DeleteAll(void);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIQueryConditionsT<IQueryConditions> TCOMIQueryConditions;

// *********************************************************************//
// DispIntf:  IQueryConditions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C7E3C0C-8920-463F-8A40-3556A163ED4D}
// *********************************************************************//
template<class T>
class IQueryConditionsDispT : public TAutoDriver<IQueryConditions>
{
public:
  IQueryConditionsDispT(){}

  IQueryConditionsDispT(IQueryConditions *pintf)
  {
    TAutoDriver<IQueryConditions>::Bind(pintf, false);
  }

  IQueryConditionsDispT(IQueryConditionsPtr pintf)
  {
    TAutoDriver<IQueryConditions>::Bind(pintf, true);
  }

  IQueryConditionsDispT& operator=(IQueryConditions *pintf)
  {
    TAutoDriver<IQueryConditions>::Bind(pintf, false);
    return *this;
  }

  IQueryConditionsDispT& operator=(IQueryConditionsPtr pintf)
  {
    TAutoDriver<IQueryConditions>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QueryConditions));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QueryConditions);
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQueryCondition* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IQueryCondition* __fastcall Add(void);
  HRESULT         __fastcall DeleteAll();
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IQueryConditionsDispT<IQueryConditions> IQueryConditionsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPermission
// Interface: IPermission
// *********************************************************************//
template <class T /* IPermission */ >
class TCOMIPermissionT : public TComInterface<IPermission>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPermissionT() {}
  TCOMIPermissionT(IPermission *intf, bool addRef = false) : TComInterface<IPermission>(intf, addRef) {}
  TCOMIPermissionT(const TCOMIPermissionT& src) : TComInterface<IPermission>(src) {}
  TCOMIPermissionT& operator=(const TCOMIPermissionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  HRESULT         __fastcall get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  HRESULT         __fastcall get_ObjectID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ObjectID(void);
  HRESULT         __fastcall get_ObjectName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectName(void);
  HRESULT         __fastcall get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  HRESULT         __fastcall get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  HRESULT         __fastcall get_PrivilegeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PrivilegeName(void);

  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};
};
typedef TCOMIPermissionT<IPermission> TCOMIPermission;

// *********************************************************************//
// DispIntf:  IPermission
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F380C5C-47AA-45CD-92E7-BBF2045ACC7C}
// *********************************************************************//
template<class T>
class IPermissionDispT : public TAutoDriver<IPermission>
{
public:
  IPermissionDispT(){}

  IPermissionDispT(IPermission *pintf)
  {
    TAutoDriver<IPermission>::Bind(pintf, false);
  }

  IPermissionDispT(IPermissionPtr pintf)
  {
    TAutoDriver<IPermission>::Bind(pintf, true);
  }

  IPermissionDispT& operator=(IPermission *pintf)
  {
    TAutoDriver<IPermission>::Bind(pintf, false);
    return *this;
  }

  IPermissionDispT& operator=(IPermissionPtr pintf)
  {
    TAutoDriver<IPermission>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Permission));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Permission);
  }

  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  HRESULT         __fastcall get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  HRESULT         __fastcall get_ObjectID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ObjectID(void);
  HRESULT         __fastcall get_ObjectName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectName(void);
  HRESULT         __fastcall get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  HRESULT         __fastcall get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  HRESULT         __fastcall get_PrivilegeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PrivilegeName(void);

  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};
};
typedef IPermissionDispT<IPermission> IPermissionDisp;

// *********************************************************************//
// SmartIntf: TCOMIServers
// Interface: IServers
// *********************************************************************//
template <class T /* IServers */ >
class TCOMIServersT : public TComInterface<IServers>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIServersT() {}
  TCOMIServersT(IServers *intf, bool addRef = false) : TComInterface<IServers>(intf, addRef) {}
  TCOMIServersT(const TCOMIServersT& src) : TComInterface<IServers>(src) {}
  TCOMIServersT& operator=(const TCOMIServersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IServer* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IServer* __fastcall Add(void);

};
typedef TCOMIServersT<IServers> TCOMIServers;

// *********************************************************************//
// DispIntf:  IServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {834DA75C-BA20-490C-8ED6-4C074FE6850B}
// *********************************************************************//
template<class T>
class IServersDispT : public TAutoDriver<IServers>
{
public:
  IServersDispT(){}

  IServersDispT(IServers *pintf)
  {
    TAutoDriver<IServers>::Bind(pintf, false);
  }

  IServersDispT(IServersPtr pintf)
  {
    TAutoDriver<IServers>::Bind(pintf, true);
  }

  IServersDispT& operator=(IServers *pintf)
  {
    TAutoDriver<IServers>::Bind(pintf, false);
    return *this;
  }

  IServersDispT& operator=(IServersPtr pintf)
  {
    TAutoDriver<IServers>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Servers));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Servers);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IServer* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IServer* __fastcall Add(void);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IServersDispT<IServers> IServersDisp;

// *********************************************************************//
// SmartIntf: TCOMIServer
// Interface: IServer
// *********************************************************************//
template <class T /* IServer */ >
class TCOMIServerT : public TComInterface<IServer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIServerT() {}
  TCOMIServerT(IServer *intf, bool addRef = false) : TComInterface<IServer>(intf, addRef) {}
  TCOMIServerT(const TCOMIServerT& src) : TComInterface<IServer>(src) {}
  TCOMIServerT& operator=(const TCOMIServerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  HRESULT         __fastcall get_DomainName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DomainName(void);
  HRESULT         __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall get_Password(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall get_AuthnLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_AuthnLevel(void);
  HRESULT         __fastcall get_ImpLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImpLevel(void);
  HRESULT         __fastcall get_IsLogined(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsLogined(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcServerStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcServerStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_VersionMajor(long* pVal/*[out,retval]*/);
  long            __fastcall get_VersionMajor(void);
  HRESULT         __fastcall get_VersionMinor(long* pVal/*[out,retval]*/);
  long            __fastcall get_VersionMinor(void);
  HRESULT         __fastcall get_VersionString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VersionString(void);
  HRESULT         __fastcall get_InitializeDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InitializeDate(void);
  HRESULT         __fastcall get_BackupDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BackupDate(void);
  HRESULT         __fastcall get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  HRESULT         __fastcall get_Brokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokersPtr __fastcall get_Brokers(void);
  HRESULT         __fastcall get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  HRESULT         __fastcall get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  HRESULT         __fastcall get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  HRESULT         __fastcall get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  HRESULT         __fastcall get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  HRESULT         __fastcall get_Portfolios(Ptssmolib_tlb::IPortfolios** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfoliosPtr __fastcall get_Portfolios(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/);
  HRESULT         __fastcall CheckAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall CheckAccounts(void);
  HRESULT         __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                       VARIANT ObjectID/*[in]*/, 
                                       Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  HRESULT         __fastcall Initialize(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall Initialize(void);
  HRESULT         __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/, 
                                   BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  HRESULT         __fastcall Logout(void);
  HRESULT         __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                          long* pErrorIndex/*[out,retval]*/);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall Run(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall Pause(void);
  HRESULT         __fastcall SynchAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall SynchAccounts(void);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void);

  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Password = {read = get_Password};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogined = {read = get_IsLogined};
  __property   Ptssmolib_tlb::TcServerStatus Status = {read = get_Status};
  __property   long            VersionMajor = {read = get_VersionMajor};
  __property   long            VersionMinor = {read = get_VersionMinor};
  __property   BSTR            VersionString = {read = get_VersionString};
  __property   BSTR            InitializeDate = {read = get_InitializeDate};
  __property   BSTR            BackupDate = {read = get_BackupDate};
  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IBrokersPtr Brokers = {read = get_Brokers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};
  __property   Ptssmolib_tlb::IPortfoliosPtr Portfolios = {read = get_Portfolios};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
};
typedef TCOMIServerT<IServer> TCOMIServer;

// *********************************************************************//
// DispIntf:  IServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13C3CC10-4B55-4509-829B-92D846C59639}
// *********************************************************************//
template<class T>
class IServerDispT : public TAutoDriver<IServer>
{
public:
  IServerDispT(){}

  IServerDispT(IServer *pintf)
  {
    TAutoDriver<IServer>::Bind(pintf, false);
  }

  IServerDispT(IServerPtr pintf)
  {
    TAutoDriver<IServer>::Bind(pintf, true);
  }

  IServerDispT& operator=(IServer *pintf)
  {
    TAutoDriver<IServer>::Bind(pintf, false);
    return *this;
  }

  IServerDispT& operator=(IServerPtr pintf)
  {
    TAutoDriver<IServer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Server));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Server);
  }

  HRESULT         __fastcall get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  HRESULT         __fastcall get_DomainName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DomainName(void);
  HRESULT         __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall get_Password(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Password(void);
  HRESULT         __fastcall get_AuthnLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_AuthnLevel(void);
  HRESULT         __fastcall get_ImpLevel(long* pVal/*[out,retval]*/);
  long            __fastcall get_ImpLevel(void);
  HRESULT         __fastcall get_IsLogined(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsLogined(void);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcServerStatus* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcServerStatus __fastcall get_Status(void);
  HRESULT         __fastcall get_VersionMajor(long* pVal/*[out,retval]*/);
  long            __fastcall get_VersionMajor(void);
  HRESULT         __fastcall get_VersionMinor(long* pVal/*[out,retval]*/);
  long            __fastcall get_VersionMinor(void);
  HRESULT         __fastcall get_VersionString(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_VersionString(void);
  HRESULT         __fastcall get_InitializeDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InitializeDate(void);
  HRESULT         __fastcall get_BackupDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_BackupDate(void);
  HRESULT         __fastcall get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  HRESULT         __fastcall get_Brokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokersPtr __fastcall get_Brokers(void);
  HRESULT         __fastcall get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  HRESULT         __fastcall get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  HRESULT         __fastcall get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  HRESULT         __fastcall get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  HRESULT         __fastcall get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  HRESULT         __fastcall get_Portfolios(Ptssmolib_tlb::IPortfolios** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfoliosPtr __fastcall get_Portfolios(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  HRESULT         __fastcall CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/);
  HRESULT         __fastcall CheckAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall CheckAccounts(void);
  HRESULT         __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                       VARIANT ObjectID/*[in]*/, 
                                       Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  HRESULT         __fastcall Initialize(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall Initialize(void);
  HRESULT         __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/
                                   , BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  HRESULT         __fastcall Logout();
  HRESULT         __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                          long* pErrorIndex/*[out,retval]*/);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall Run();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall Pause();
  HRESULT         __fastcall SynchAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall SynchAccounts(void);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   Ptssmolib_tlb::TcLoginType LoginType = {read = get_LoginType};
  __property   BSTR            DomainName = {read = get_DomainName};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Password = {read = get_Password};
  __property   long            AuthnLevel = {read = get_AuthnLevel};
  __property   long            ImpLevel = {read = get_ImpLevel};
  __property   VARIANT_BOOL    IsLogined = {read = get_IsLogined};
  __property   Ptssmolib_tlb::TcServerStatus Status = {read = get_Status};
  __property   long            VersionMajor = {read = get_VersionMajor};
  __property   long            VersionMinor = {read = get_VersionMinor};
  __property   BSTR            VersionString = {read = get_VersionString};
  __property   BSTR            InitializeDate = {read = get_InitializeDate};
  __property   BSTR            BackupDate = {read = get_BackupDate};
  __property   Ptssmolib_tlb::ICustomersPtr Customers = {read = get_Customers};
  __property   Ptssmolib_tlb::IBrokersPtr Brokers = {read = get_Brokers};
  __property   Ptssmolib_tlb::IEventTopicsPtr EventTopics = {read = get_EventTopics};
  __property   Ptssmolib_tlb::IExchangesPtr Exchanges = {read = get_Exchanges};
  __property   Ptssmolib_tlb::ITasksPtr Tasks = {read = get_Tasks};
  __property   Ptssmolib_tlb::IRolesPtr Roles = {read = get_Roles};
  __property   Ptssmolib_tlb::IUsersPtr Users = {read = get_Users};
  __property   Ptssmolib_tlb::IPortfoliosPtr Portfolios = {read = get_Portfolios};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IChartsPtr Charts = {read = get_Charts};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IServerDispT<IServer> IServerDisp;

// *********************************************************************//
// SmartIntf: TCOMIBrokers
// Interface: IBrokers
// *********************************************************************//
template <class T /* IBrokers */ >
class TCOMIBrokersT : public TComInterface<IBrokers>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBrokersT() {}
  TCOMIBrokersT(IBrokers *intf, bool addRef = false) : TComInterface<IBrokers>(intf, addRef) {}
  TCOMIBrokersT(const TCOMIBrokersT& src) : TComInterface<IBrokers>(src) {}
  TCOMIBrokersT& operator=(const TCOMIBrokersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IBroker** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IBroker* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IBroker** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IBroker* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/);

};
typedef TCOMIBrokersT<IBrokers> TCOMIBrokers;

// *********************************************************************//
// DispIntf:  IBrokers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CB39F9E-FB59-4EB6-986D-A8DD23515A60}
// *********************************************************************//
template<class T>
class IBrokersDispT : public TAutoDriver<IBrokers>
{
public:
  IBrokersDispT(){}

  IBrokersDispT(IBrokers *pintf)
  {
    TAutoDriver<IBrokers>::Bind(pintf, false);
  }

  IBrokersDispT(IBrokersPtr pintf)
  {
    TAutoDriver<IBrokers>::Bind(pintf, true);
  }

  IBrokersDispT& operator=(IBrokers *pintf)
  {
    TAutoDriver<IBrokers>::Bind(pintf, false);
    return *this;
  }

  IBrokersDispT& operator=(IBrokersPtr pintf)
  {
    TAutoDriver<IBrokers>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Brokers));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Brokers);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IBroker** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IBroker* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IBroker** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IBroker* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IBrokersDispT<IBrokers> IBrokersDisp;

// *********************************************************************//
// SmartIntf: TCOMIBroker
// Interface: IBroker
// *********************************************************************//
template <class T /* IBroker */ >
class TCOMIBrokerT : public TComInterface<IBroker>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBrokerT() {}
  TCOMIBrokerT(IBroker *intf, bool addRef = false) : TComInterface<IBroker>(intf, addRef) {}
  TCOMIBrokerT(const TCOMIBrokerT& src) : TComInterface<IBroker>(src) {}
  TCOMIBrokerT& operator=(const TCOMIBrokerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_SystemName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SystemName(void);
  HRESULT         __fastcall set_SystemName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall set_ServerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ServerPort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ServerPort(void);
  HRESULT         __fastcall set_ServerPort(long pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddMember(long BrokerAccountID/*[in]*/);
  HRESULT         __fastcall Connect(void);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall DropMember(long BrokerAccountID/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::IObjectList** ppAccounts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListMembers(void);
  HRESULT         __fastcall RunOrderSyncJob(void);
  HRESULT         __fastcall StopOrderSyncJob(void);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            SystemName = {read = get_SystemName, write = set_SystemName};
  __property   BSTR            ServerName = {read = get_ServerName, write = set_ServerName};
  __property   long            ServerPort = {read = get_ServerPort, write = set_ServerPort};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
};
typedef TCOMIBrokerT<IBroker> TCOMIBroker;

// *********************************************************************//
// DispIntf:  IBroker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1C964C4C-73C5-47B5-986D-371A40256813}
// *********************************************************************//
template<class T>
class IBrokerDispT : public TAutoDriver<IBroker>
{
public:
  IBrokerDispT(){}

  IBrokerDispT(IBroker *pintf)
  {
    TAutoDriver<IBroker>::Bind(pintf, false);
  }

  IBrokerDispT(IBrokerPtr pintf)
  {
    TAutoDriver<IBroker>::Bind(pintf, true);
  }

  IBrokerDispT& operator=(IBroker *pintf)
  {
    TAutoDriver<IBroker>::Bind(pintf, false);
    return *this;
  }

  IBrokerDispT& operator=(IBrokerPtr pintf)
  {
    TAutoDriver<IBroker>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Broker));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Broker);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_SystemName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_SystemName(void);
  HRESULT         __fastcall set_SystemName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ServerName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ServerName(void);
  HRESULT         __fastcall set_ServerName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ServerPort(long* pVal/*[out,retval]*/);
  long            __fastcall get_ServerPort(void);
  HRESULT         __fastcall set_ServerPort(long pVal/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall AddMember(long BrokerAccountID/*[in]*/);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall DropMember(long BrokerAccountID/*[in]*/);
  HRESULT         __fastcall ListMembers(Ptssmolib_tlb::IObjectList** ppAccounts/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListMembers(void);
  HRESULT         __fastcall RunOrderSyncJob();
  HRESULT         __fastcall StopOrderSyncJob();
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            SystemName = {read = get_SystemName, write = set_SystemName};
  __property   BSTR            ServerName = {read = get_ServerName, write = set_ServerName};
  __property   long            ServerPort = {read = get_ServerPort, write = set_ServerPort};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts = {read = get_BrokerAccounts};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IBrokerDispT<IBroker> IBrokerDisp;

// *********************************************************************//
// SmartIntf: TCOMIPortfolios
// Interface: IPortfolios
// *********************************************************************//
template <class T /* IPortfolios */ >
class TCOMIPortfoliosT : public TComInterface<IPortfolios>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPortfoliosT() {}
  TCOMIPortfoliosT(IPortfolios *intf, bool addRef = false) : TComInterface<IPortfolios>(intf, addRef) {}
  TCOMIPortfoliosT(const TCOMIPortfoliosT& src) : TComInterface<IPortfolios>(src) {}
  TCOMIPortfoliosT& operator=(const TCOMIPortfoliosT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPortfolio** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolio* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IPortfolio** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolio* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/);

};
typedef TCOMIPortfoliosT<IPortfolios> TCOMIPortfolios;

// *********************************************************************//
// DispIntf:  IPortfolios
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5C1827B-C504-49B7-8722-4213A1B5039E}
// *********************************************************************//
template<class T>
class IPortfoliosDispT : public TAutoDriver<IPortfolios>
{
public:
  IPortfoliosDispT(){}

  IPortfoliosDispT(IPortfolios *pintf)
  {
    TAutoDriver<IPortfolios>::Bind(pintf, false);
  }

  IPortfoliosDispT(IPortfoliosPtr pintf)
  {
    TAutoDriver<IPortfolios>::Bind(pintf, true);
  }

  IPortfoliosDispT& operator=(IPortfolios *pintf)
  {
    TAutoDriver<IPortfolios>::Bind(pintf, false);
    return *this;
  }

  IPortfoliosDispT& operator=(IPortfoliosPtr pintf)
  {
    TAutoDriver<IPortfolios>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Portfolios));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Portfolios);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IPortfolio** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolio* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IPortfolio** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolio* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IPortfoliosDispT<IPortfolios> IPortfoliosDisp;

// *********************************************************************//
// SmartIntf: TCOMIPortfolio
// Interface: IPortfolio
// *********************************************************************//
template <class T /* IPortfolio */ >
class TCOMIPortfolioT : public TComInterface<IPortfolio>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPortfolioT() {}
  TCOMIPortfolioT(IPortfolio *intf, bool addRef = false) : TComInterface<IPortfolio>(intf, addRef) {}
  TCOMIPortfolioT(const TCOMIPortfolioT& src) : TComInterface<IPortfolio>(src) {}
  TCOMIPortfolioT& operator=(const TCOMIPortfolioT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_Items(Ptssmolib_tlb::IPortfolioItemSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall get_Items(void);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IPortfolioItemSetPtr Items = {read = get_Items};
};
typedef TCOMIPortfolioT<IPortfolio> TCOMIPortfolio;

// *********************************************************************//
// DispIntf:  IPortfolio
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBF4CF4A-47F2-4CFF-81A4-B8E26739AC25}
// *********************************************************************//
template<class T>
class IPortfolioDispT : public TAutoDriver<IPortfolio>
{
public:
  IPortfolioDispT(){}

  IPortfolioDispT(IPortfolio *pintf)
  {
    TAutoDriver<IPortfolio>::Bind(pintf, false);
  }

  IPortfolioDispT(IPortfolioPtr pintf)
  {
    TAutoDriver<IPortfolio>::Bind(pintf, true);
  }

  IPortfolioDispT& operator=(IPortfolio *pintf)
  {
    TAutoDriver<IPortfolio>::Bind(pintf, false);
    return *this;
  }

  IPortfolioDispT& operator=(IPortfolioPtr pintf)
  {
    TAutoDriver<IPortfolio>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Portfolio));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Portfolio);
  }

  HRESULT         __fastcall get_CreateDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateDate(void);
  HRESULT         __fastcall get_DateLastModified(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_DateLastModified(void);
  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall get_Description(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  HRESULT         __fastcall get_Items(Ptssmolib_tlb::IPortfolioItemSet** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall get_Items(void);
  HRESULT         __fastcall get_Name(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall get_Owner(BSTR* pRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Owner(void);
  HRESULT         __fastcall set_Owner(BSTR pRetVal/*[in]*/);
  HRESULT         __fastcall Refresh();
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);

  __property   BSTR            CreateDate = {read = get_CreateDate};
  __property   BSTR            DateLastModified = {read = get_DateLastModified};
  __property   long            ID = {read = get_ID};
  __property   BSTR            Description = {read = get_Description, write = set_Description};
  __property   Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties = {read = get_ExtendedProperties};
  __property   Ptssmolib_tlb::IPortfolioItemSetPtr Items = {read = get_Items};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Owner = {read = get_Owner, write = set_Owner};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IPortfolioDispT<IPortfolio> IPortfolioDisp;

// *********************************************************************//
// SmartIntf: TCOMIPortfolioItemSet
// Interface: IPortfolioItemSet
// *********************************************************************//
template <class T /* IPortfolioItemSet */ >
class TCOMIPortfolioItemSetT : public TComInterface<IPortfolioItemSet>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPortfolioItemSetT() {}
  TCOMIPortfolioItemSetT(IPortfolioItemSet *intf, bool addRef = false) : TComInterface<IPortfolioItemSet>(intf, addRef) {}
  TCOMIPortfolioItemSetT(const TCOMIPortfolioItemSetT& src) : TComInterface<IPortfolioItemSet>(src) {}
  TCOMIPortfolioItemSetT& operator=(const TCOMIPortfolioItemSetT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall set_InstID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall set_InstIDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Qty(long* pVal/*[out,retval]*/);
  long            __fastcall get_Qty(void);
  HRESULT         __fastcall set_Qty(long pVal/*[in]*/);
  HRESULT         __fastcall get_IsCrossTrade(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsCrossTrade(void);
  HRESULT         __fastcall set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ItemBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ItemBOF(void);
  HRESULT         __fastcall get_ItemEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ItemEOF(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall AddNew(void);
  HRESULT         __fastcall _Update(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveNext(void);

  __property   BSTR            InstID = {read = get_InstID, write = set_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   long            Qty = {read = get_Qty, write = set_Qty};
  __property   VARIANT_BOOL    IsCrossTrade = {read = get_IsCrossTrade, write = set_IsCrossTrade};
  __property   VARIANT_BOOL    ItemBOF = {read = get_ItemBOF};
  __property   VARIANT_BOOL    ItemEOF = {read = get_ItemEOF};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIPortfolioItemSetT<IPortfolioItemSet> TCOMIPortfolioItemSet;

// *********************************************************************//
// DispIntf:  IPortfolioItemSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E172085-8E32-4DC2-BFF3-10A96D192300}
// *********************************************************************//
template<class T>
class IPortfolioItemSetDispT : public TAutoDriver<IPortfolioItemSet>
{
public:
  IPortfolioItemSetDispT(){}

  IPortfolioItemSetDispT(IPortfolioItemSet *pintf)
  {
    TAutoDriver<IPortfolioItemSet>::Bind(pintf, false);
  }

  IPortfolioItemSetDispT(IPortfolioItemSetPtr pintf)
  {
    TAutoDriver<IPortfolioItemSet>::Bind(pintf, true);
  }

  IPortfolioItemSetDispT& operator=(IPortfolioItemSet *pintf)
  {
    TAutoDriver<IPortfolioItemSet>::Bind(pintf, false);
    return *this;
  }

  IPortfolioItemSetDispT& operator=(IPortfolioItemSetPtr pintf)
  {
    TAutoDriver<IPortfolioItemSet>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PortfolioItemSet));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PortfolioItemSet);
  }

  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall set_InstID(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall set_InstIDSource(long pVal/*[in]*/);
  HRESULT         __fastcall get_Qty(long* pVal/*[out,retval]*/);
  long            __fastcall get_Qty(void);
  HRESULT         __fastcall set_Qty(long pVal/*[in]*/);
  HRESULT         __fastcall get_IsCrossTrade(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsCrossTrade(void);
  HRESULT         __fastcall set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_ItemBOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ItemBOF(void);
  HRESULT         __fastcall get_ItemEOF(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ItemEOF(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall AddNew();
  HRESULT         __fastcall _Update();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveNext();

  __property   BSTR            InstID = {read = get_InstID, write = set_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource, write = set_InstIDSource};
  __property   long            Qty = {read = get_Qty, write = set_Qty};
  __property   VARIANT_BOOL    IsCrossTrade = {read = get_IsCrossTrade, write = set_IsCrossTrade};
  __property   VARIANT_BOOL    ItemBOF = {read = get_ItemBOF};
  __property   VARIANT_BOOL    ItemEOF = {read = get_ItemEOF};
  __property   long            Count = {read = get_Count};
};
typedef IPortfolioItemSetDispT<IPortfolioItemSet> IPortfolioItemSetDisp;

// *********************************************************************//
// SmartIntf: TCOMIDictionary
// Interface: IDictionary
// *********************************************************************//
template <class T /* IDictionary */ >
class TCOMIDictionaryT : public TComInterface<IDictionary>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDictionaryT() {}
  TCOMIDictionaryT(IDictionary *intf, bool addRef = false) : TComInterface<IDictionary>(intf, addRef) {}
  TCOMIDictionaryT(const TCOMIDictionaryT& src) : TComInterface<IDictionary>(src) {}
  TCOMIDictionaryT& operator=(const TCOMIDictionaryT& src) { Bind(src, true); return *this;}


};
typedef TCOMIDictionaryT<IDictionary> TCOMIDictionary;

// *********************************************************************//
// DispIntf:  IDictionary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5ACD7FF3-0AA0-4C15-AC34-E69BD3CC26C0}
// *********************************************************************//
template<class T>
class IDictionaryDispT : public TAutoDriver<IDictionary>
{
public:
  IDictionaryDispT(){}

  IDictionaryDispT(IDictionary *pintf)
  {
    TAutoDriver<IDictionary>::Bind(pintf, false);
  }

  IDictionaryDispT(IDictionaryPtr pintf)
  {
    TAutoDriver<IDictionary>::Bind(pintf, true);
  }

  IDictionaryDispT& operator=(IDictionary *pintf)
  {
    TAutoDriver<IDictionary>::Bind(pintf, false);
    return *this;
  }

  IDictionaryDispT& operator=(IDictionaryPtr pintf)
  {
    TAutoDriver<IDictionary>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Dictionary));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Dictionary);
  }

  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IDictionaryDispT<IDictionary> IDictionaryDisp;

// *********************************************************************//
// DispIntf:  _IBrokerEvents
// Flags:     (4096) Dispatchable
// GUID:      {3194185A-4DF4-4059-94AE-1F89CB3C9106}
// *********************************************************************//
template <class T>
class _IBrokerEventsDispT : public TAutoDriver<_IBrokerEvents>
{
public:
  _IBrokerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall OnConnected();
  HRESULT         __fastcall OnDisconnected();
  HRESULT         __fastcall OnSynchronize(Ptssmolib_tlb::TcMessageType Type/*[in]*/, 
                                           BSTR Message/*[in]*/);

};
typedef _IBrokerEventsDispT<_IBrokerEvents> _IBrokerEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIQuoteTickData
// Interface: IQuoteTickData
// *********************************************************************//
template <class T /* IQuoteTickData */ >
class TCOMIQuoteTickDataT : public TComInterface<IQuoteTickData>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuoteTickDataT() {}
  TCOMIQuoteTickDataT(IQuoteTickData *intf, bool addRef = false) : TComInterface<IQuoteTickData>(intf, addRef) {}
  TCOMIQuoteTickDataT(const TCOMIQuoteTickDataT& src) : TComInterface<IQuoteTickData>(src) {}
  TCOMIQuoteTickDataT& operator=(const TCOMIQuoteTickDataT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);

  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   long            DayQty = {read = get_DayQty};
  __property   BSTR            TradingDay = {read = get_TradingDay};
};
typedef TCOMIQuoteTickDataT<IQuoteTickData> TCOMIQuoteTickData;

// *********************************************************************//
// DispIntf:  IQuoteTickData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B24B576-EE54-4541-87CE-9B5DBC47CB7B}
// *********************************************************************//
template<class T>
class IQuoteTickDataDispT : public TAutoDriver<IQuoteTickData>
{
public:
  IQuoteTickDataDispT(){}

  IQuoteTickDataDispT(IQuoteTickData *pintf)
  {
    TAutoDriver<IQuoteTickData>::Bind(pintf, false);
  }

  IQuoteTickDataDispT(IQuoteTickDataPtr pintf)
  {
    TAutoDriver<IQuoteTickData>::Bind(pintf, true);
  }

  IQuoteTickDataDispT& operator=(IQuoteTickData *pintf)
  {
    TAutoDriver<IQuoteTickData>::Bind(pintf, false);
    return *this;
  }

  IQuoteTickDataDispT& operator=(IQuoteTickDataPtr pintf)
  {
    TAutoDriver<IQuoteTickData>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_QuoteTickData));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_QuoteTickData);
  }

  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);

  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   long            DayQty = {read = get_DayQty};
  __property   BSTR            TradingDay = {read = get_TradingDay};
};
typedef IQuoteTickDataDispT<IQuoteTickData> IQuoteTickDataDisp;

// *********************************************************************//
// SmartIntf: TCOMIOrderReport
// Interface: IOrderReport
// *********************************************************************//
template <class T /* IOrderReport */ >
class TCOMIOrderReportT : public TComInterface<IOrderReport>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOrderReportT() {}
  TCOMIOrderReportT(IOrderReport *intf, bool addRef = false) : TComInterface<IOrderReport>(intf, addRef) {}
  TCOMIOrderReportT(const TCOMIOrderReportT& src) : TComInterface<IOrderReport>(src) {}
  TCOMIOrderReportT& operator=(const TCOMIOrderReportT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_OrderID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderID(void);
  HRESULT         __fastcall get_ExecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExecID(void);
  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_CancelQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_CancelQty(void);
  HRESULT         __fastcall get_ExecQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExecQty(void);
  HRESULT         __fastcall get_ExecPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExecPrice(void);
  HRESULT         __fastcall get_ExecTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExecTime(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);

  __property   BSTR            OrderID = {read = get_OrderID};
  __property   BSTR            ExecID = {read = get_ExecID};
  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   long            CancelQty = {read = get_CancelQty};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecPrice = {read = get_ExecPrice};
  __property   BSTR            ExecTime = {read = get_ExecTime};
  __property   BSTR            Text = {read = get_Text};
};
typedef TCOMIOrderReportT<IOrderReport> TCOMIOrderReport;

// *********************************************************************//
// DispIntf:  IOrderReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AF6361AA-F62F-4CCA-90DA-FD92C54E3B12}
// *********************************************************************//
template<class T>
class IOrderReportDispT : public TAutoDriver<IOrderReport>
{
public:
  IOrderReportDispT(){}

  IOrderReportDispT(IOrderReport *pintf)
  {
    TAutoDriver<IOrderReport>::Bind(pintf, false);
  }

  IOrderReportDispT(IOrderReportPtr pintf)
  {
    TAutoDriver<IOrderReport>::Bind(pintf, true);
  }

  IOrderReportDispT& operator=(IOrderReport *pintf)
  {
    TAutoDriver<IOrderReport>::Bind(pintf, false);
    return *this;
  }

  IOrderReportDispT& operator=(IOrderReportPtr pintf)
  {
    TAutoDriver<IOrderReport>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_OrderReport));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_OrderReport);
  }

  HRESULT         __fastcall get_OrderID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrderID(void);
  HRESULT         __fastcall get_ExecID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExecID(void);
  HRESULT         __fastcall get_AccountID(long* pVal/*[out,retval]*/);
  long            __fastcall get_AccountID(void);
  HRESULT         __fastcall get_ExchAcctID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  HRESULT         __fastcall get_CancelQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_CancelQty(void);
  HRESULT         __fastcall get_ExecQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_ExecQty(void);
  HRESULT         __fastcall get_ExecPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ExecPrice(void);
  HRESULT         __fastcall get_ExecTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ExecTime(void);
  HRESULT         __fastcall get_Text(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);

  __property   BSTR            OrderID = {read = get_OrderID};
  __property   BSTR            ExecID = {read = get_ExecID};
  __property   long            AccountID = {read = get_AccountID};
  __property   BSTR            ExchAcctID = {read = get_ExchAcctID};
  __property   long            CancelQty = {read = get_CancelQty};
  __property   long            ExecQty = {read = get_ExecQty};
  __property   double          ExecPrice = {read = get_ExecPrice};
  __property   BSTR            ExecTime = {read = get_ExecTime};
  __property   BSTR            Text = {read = get_Text};
};
typedef IOrderReportDispT<IOrderReport> IOrderReportDisp;

// *********************************************************************//
// SmartIntf: TCOMIObjectPermissionInfo
// Interface: IObjectPermissionInfo
// *********************************************************************//
template <class T /* IObjectPermissionInfo */ >
class TCOMIObjectPermissionInfoT : public TComInterface<IObjectPermissionInfo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIObjectPermissionInfoT() {}
  TCOMIObjectPermissionInfoT(IObjectPermissionInfo *intf, bool addRef = false) : TComInterface<IObjectPermissionInfo>(intf, addRef) {}
  TCOMIObjectPermissionInfoT(const TCOMIObjectPermissionInfoT& src) : TComInterface<IObjectPermissionInfo>(src) {}
  TCOMIObjectPermissionInfoT& operator=(const TCOMIObjectPermissionInfoT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  HRESULT         __fastcall get_ObjectID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ObjectID(void);
  HRESULT         __fastcall get_ObjectName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectName(void);
  HRESULT         __fastcall get_ObjectOwner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectOwner(void);
  HRESULT         __fastcall get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  HRESULT         __fastcall get_ObjectTypeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectTypeName(void);
  HRESULT         __fastcall get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  HRESULT         __fastcall set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);
  HRESULT         __fastcall get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  HRESULT         __fastcall get_PrivilegeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PrivilegeName(void);

  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   BSTR            ObjectOwner = {read = get_ObjectOwner};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   BSTR            ObjectTypeName = {read = get_ObjectTypeName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState, write = set_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};
};
typedef TCOMIObjectPermissionInfoT<IObjectPermissionInfo> TCOMIObjectPermissionInfo;

// *********************************************************************//
// DispIntf:  IObjectPermissionInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {377F476A-98F5-4949-946D-9E8A5A55F59F}
// *********************************************************************//
template<class T>
class IObjectPermissionInfoDispT : public TAutoDriver<IObjectPermissionInfo>
{
public:
  IObjectPermissionInfoDispT(){}

  IObjectPermissionInfoDispT(IObjectPermissionInfo *pintf)
  {
    TAutoDriver<IObjectPermissionInfo>::Bind(pintf, false);
  }

  IObjectPermissionInfoDispT(IObjectPermissionInfoPtr pintf)
  {
    TAutoDriver<IObjectPermissionInfo>::Bind(pintf, true);
  }

  IObjectPermissionInfoDispT& operator=(IObjectPermissionInfo *pintf)
  {
    TAutoDriver<IObjectPermissionInfo>::Bind(pintf, false);
    return *this;
  }

  IObjectPermissionInfoDispT& operator=(IObjectPermissionInfoPtr pintf)
  {
    TAutoDriver<IObjectPermissionInfo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ObjectPermissionInfo));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ObjectPermissionInfo);
  }

  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  HRESULT         __fastcall get_ObjectID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ObjectID(void);
  HRESULT         __fastcall get_ObjectName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectName(void);
  HRESULT         __fastcall get_ObjectOwner(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectOwner(void);
  HRESULT         __fastcall get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  HRESULT         __fastcall get_ObjectTypeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ObjectTypeName(void);
  HRESULT         __fastcall get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  HRESULT         __fastcall set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);
  HRESULT         __fastcall get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  HRESULT         __fastcall get_PrivilegeName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_PrivilegeName(void);

  __property   BSTR            Grantee = {read = get_Grantee};
  __property   Ptssmolib_tlb::TcPrincipalType GranteeType = {read = get_GranteeType};
  __property   BSTR            Grantor = {read = get_Grantor};
  __property   Ptssmolib_tlb::TcPrincipalType GrantorType = {read = get_GrantorType};
  __property   long            ObjectID = {read = get_ObjectID};
  __property   BSTR            ObjectName = {read = get_ObjectName};
  __property   BSTR            ObjectOwner = {read = get_ObjectOwner};
  __property   Ptssmolib_tlb::TcObjectType ObjectType = {read = get_ObjectType};
  __property   BSTR            ObjectTypeName = {read = get_ObjectTypeName};
  __property   Ptssmolib_tlb::TcPermissionState PermissionState = {read = get_PermissionState, write = set_PermissionState};
  __property   Ptssmolib_tlb::TcPrivilegeType PrivilegeType = {read = get_PrivilegeType};
  __property   BSTR            PrivilegeName = {read = get_PrivilegeName};
};
typedef IObjectPermissionInfoDispT<IObjectPermissionInfo> IObjectPermissionInfoDisp;

// *********************************************************************//
// SmartIntf: TCOMIProjects
// Interface: IProjects
// *********************************************************************//
template <class T /* IProjects */ >
class TCOMIProjectsT : public TComInterface<IProjects>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIProjectsT() {}
  TCOMIProjectsT(IProjects *intf, bool addRef = false) : TComInterface<IProjects>(intf, addRef) {}
  TCOMIProjectsT(const TCOMIProjectsT& src) : TComInterface<IProjects>(src) {}
  TCOMIProjectsT& operator=(const TCOMIProjectsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IProject** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IProject* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IProject** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IProject* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IProject* pObject/*[in]*/);

};
typedef TCOMIProjectsT<IProjects> TCOMIProjects;

// *********************************************************************//
// DispIntf:  IProjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DBB31D07-06AA-4F42-9243-FF197C54F197}
// *********************************************************************//
template<class T>
class IProjectsDispT : public TAutoDriver<IProjects>
{
public:
  IProjectsDispT(){}

  IProjectsDispT(IProjects *pintf)
  {
    TAutoDriver<IProjects>::Bind(pintf, false);
  }

  IProjectsDispT(IProjectsPtr pintf)
  {
    TAutoDriver<IProjects>::Bind(pintf, true);
  }

  IProjectsDispT& operator=(IProjects *pintf)
  {
    TAutoDriver<IProjects>::Bind(pintf, false);
    return *this;
  }

  IProjectsDispT& operator=(IProjectsPtr pintf)
  {
    TAutoDriver<IProjects>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Projects));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Projects);
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IProject** ppObjVal/*[out,retval]*/);
  Ptssmolib_tlb::IProject* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_ItemByID(long ID/*[in]*/, 
                                          Ptssmolib_tlb::IProject** ppObjRet/*[out,retval]*/);
  Ptssmolib_tlb::IProject* __fastcall get_ItemByID(long ID/*[in]*/);
  HRESULT         __fastcall Add(Ptssmolib_tlb::IProject* pObject/*[in]*/);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Refresh(VARIANT ReleaseMemberObjects/*[in]*/);
  HRESULT         __fastcall RemoveAt(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBasePtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectState __fastcall get_State(void);
  HRESULT         __fastcall get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/);
  Ptssmolib_tlb::TcObjectType __fastcall get_TypeOf(void);
  HRESULT         __fastcall get_UserData(VARIANT* pRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_UserData(void);
  HRESULT         __fastcall set_UserData(VARIANT pRetVal/*[in]*/);


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

  __property   Ptssmolib_tlb::IObjectBasePtr Parent = {read = get_Parent};
  __property   Ptssmolib_tlb::TcObjectState State = {read = get_State};
  __property   Ptssmolib_tlb::TcObjectType TypeOf = {read = get_TypeOf};
};
typedef IProjectsDispT<IProjects> IProjectsDisp;

// *********************************************************************//
// SmartIntf: TCOMIOrder2
// Interface: IOrder2
// *********************************************************************//
template <class T /* IOrder2 */ >
class TCOMIOrder2T : public TComInterface<IOrder2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIOrder2T() {}
  TCOMIOrder2T(IOrder2 *intf, bool addRef = false) : TComInterface<IOrder2>(intf, addRef) {}
  TCOMIOrder2T(const TCOMIOrder2T& src) : TComInterface<IOrder2>(src) {}
  TCOMIOrder2T& operator=(const TCOMIOrder2T& src) { Bind(src, true); return *this;}


};
typedef TCOMIOrder2T<IOrder2> TCOMIOrder2;

// *********************************************************************//
// DispIntf:  IOrder2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0E181F33-772E-4689-897A-C2E473BF727E}
// *********************************************************************//
template<class T>
class IOrder2DispT : public TAutoDriver<IOrder2>
{
public:
  IOrder2DispT(){}

  IOrder2DispT(IOrder2 *pintf)
  {
    TAutoDriver<IOrder2>::Bind(pintf, false);
  }

  IOrder2DispT(IOrder2Ptr pintf)
  {
    TAutoDriver<IOrder2>::Bind(pintf, true);
  }

  IOrder2DispT& operator=(IOrder2 *pintf)
  {
    TAutoDriver<IOrder2>::Bind(pintf, false);
    return *this;
  }

  IOrder2DispT& operator=(IOrder2Ptr pintf)
  {
    TAutoDriver<IOrder2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Order2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Order2);
  }


};
typedef IOrder2DispT<IOrder2> IOrder2Disp;

// *********************************************************************//
// SmartIntf: TCOMIAuthInfo
// Interface: IAuthInfo
// *********************************************************************//
template <class T /* IAuthInfo */ >
class TCOMIAuthInfoT : public TComInterface<IAuthInfo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAuthInfoT() {}
  TCOMIAuthInfoT(IAuthInfo *intf, bool addRef = false) : TComInterface<IAuthInfo>(intf, addRef) {}
  TCOMIAuthInfoT(const TCOMIAuthInfoT& src) : TComInterface<IAuthInfo>(src) {}
  TCOMIAuthInfoT& operator=(const TCOMIAuthInfoT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Content(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Content(void);
  HRESULT         __fastcall set_Content(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall set_Grantee(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CreateTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateTime(void);
  HRESULT         __fastcall set_CreateTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall set_Grantor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_GrantTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_GrantTime(void);
  HRESULT         __fastcall set_GrantTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Abolisher(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Abolisher(void);
  HRESULT         __fastcall set_Abolisher(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AbolishTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AbolishTime(void);
  HRESULT         __fastcall set_AbolishTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);

  __property   long            ID = {read = get_ID, write = set_ID};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   BSTR            Content = {read = get_Content, write = set_Content};
  __property   BSTR            Grantee = {read = get_Grantee, write = set_Grantee};
  __property   BSTR            CreateTime = {read = get_CreateTime, write = set_CreateTime};
  __property   BSTR            Grantor = {read = get_Grantor, write = set_Grantor};
  __property   BSTR            GrantTime = {read = get_GrantTime, write = set_GrantTime};
  __property   BSTR            Abolisher = {read = get_Abolisher, write = set_Abolisher};
  __property   BSTR            AbolishTime = {read = get_AbolishTime, write = set_AbolishTime};
  __property   Ptssmolib_tlb::TcPermissionState Status = {read = get_Status, write = set_Status};
};
typedef TCOMIAuthInfoT<IAuthInfo> TCOMIAuthInfo;

// *********************************************************************//
// DispIntf:  IAuthInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B0FACE51-415C-4A01-BCBE-7E95CF27B39E}
// *********************************************************************//
template<class T>
class IAuthInfoDispT : public TAutoDriver<IAuthInfo>
{
public:
  IAuthInfoDispT(){}

  IAuthInfoDispT(IAuthInfo *pintf)
  {
    TAutoDriver<IAuthInfo>::Bind(pintf, false);
  }

  IAuthInfoDispT(IAuthInfoPtr pintf)
  {
    TAutoDriver<IAuthInfo>::Bind(pintf, true);
  }

  IAuthInfoDispT& operator=(IAuthInfo *pintf)
  {
    TAutoDriver<IAuthInfo>::Bind(pintf, false);
    return *this;
  }

  IAuthInfoDispT& operator=(IAuthInfoPtr pintf)
  {
    TAutoDriver<IAuthInfo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AuthInfo));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AuthInfo);
  }

  HRESULT         __fastcall get_ID(long* pVal/*[out,retval]*/);
  long            __fastcall get_ID(void);
  HRESULT         __fastcall set_ID(long pVal/*[in]*/);
  HRESULT         __fastcall get_CustomerID(long* pVal/*[out,retval]*/);
  long            __fastcall get_CustomerID(void);
  HRESULT         __fastcall set_CustomerID(long pVal/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Type(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Type(void);
  HRESULT         __fastcall set_Type(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Content(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Content(void);
  HRESULT         __fastcall set_Content(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Grantee(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantee(void);
  HRESULT         __fastcall set_Grantee(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_CreateTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_CreateTime(void);
  HRESULT         __fastcall set_CreateTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Grantor(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Grantor(void);
  HRESULT         __fastcall set_Grantor(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_GrantTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_GrantTime(void);
  HRESULT         __fastcall set_GrantTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Abolisher(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Abolisher(void);
  HRESULT         __fastcall set_Abolisher(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_AbolishTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_AbolishTime(void);
  HRESULT         __fastcall set_AbolishTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Status(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_Status(void);
  HRESULT         __fastcall set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);

  __property   long            ID = {read = get_ID, write = set_ID};
  __property   long            CustomerID = {read = get_CustomerID, write = set_CustomerID};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            Type = {read = get_Type, write = set_Type};
  __property   BSTR            Content = {read = get_Content, write = set_Content};
  __property   BSTR            Grantee = {read = get_Grantee, write = set_Grantee};
  __property   BSTR            CreateTime = {read = get_CreateTime, write = set_CreateTime};
  __property   BSTR            Grantor = {read = get_Grantor, write = set_Grantor};
  __property   BSTR            GrantTime = {read = get_GrantTime, write = set_GrantTime};
  __property   BSTR            Abolisher = {read = get_Abolisher, write = set_Abolisher};
  __property   BSTR            AbolishTime = {read = get_AbolishTime, write = set_AbolishTime};
  __property   Ptssmolib_tlb::TcPermissionState Status = {read = get_Status, write = set_Status};
};
typedef IAuthInfoDispT<IAuthInfo> IAuthInfoDisp;

// *********************************************************************//
// SmartIntf: TCOMIPTSManager
// Interface: IPTSManager
// *********************************************************************//
template <class T /* IPTSManager */ >
class TCOMIPTSManagerT : public TComInterface<IPTSManager>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPTSManagerT() {}
  TCOMIPTSManagerT(IPTSManager *intf, bool addRef = false) : TComInterface<IPTSManager>(intf, addRef) {}
  TCOMIPTSManagerT(const TCOMIPTSManagerT& src) : TComInterface<IPTSManager>(src) {}
  TCOMIPTSManagerT& operator=(const TCOMIPTSManagerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                       VARIANT ObjectID/*[in]*/, 
                                       Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall ListBrokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokers* __fastcall ListBrokers(void);
  HRESULT         __fastcall ListCharts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICharts* __fastcall ListCharts(void);
  HRESULT         __fastcall ListCustomers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomers* __fastcall ListCustomers(void);
  HRESULT         __fastcall ListEventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopics* __fastcall ListEventTopics(void);
  HRESULT         __fastcall ListExchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchanges* __fastcall ListExchanges(void);
  HRESULT         __fastcall ListRoles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRoles* __fastcall ListRoles(void);
  HRESULT         __fastcall ListTasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasks* __fastcall ListTasks(void);
  HRESULT         __fastcall ListUsers(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsers* __fastcall ListUsers(void);
  HRESULT         __fastcall Pause(void);
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall Run(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  HRESULT         __fastcall GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);

};
typedef TCOMIPTSManagerT<IPTSManager> TCOMIPTSManager;

// *********************************************************************//
// DispIntf:  IPTSManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DC08759-8A84-4495-8FC1-89B162062B0F}
// *********************************************************************//
template<class T>
class IPTSManagerDispT : public TAutoDriver<IPTSManager>
{
public:
  IPTSManagerDispT(){}

  IPTSManagerDispT(IPTSManager *pintf)
  {
    TAutoDriver<IPTSManager>::Bind(pintf, false);
  }

  IPTSManagerDispT(IPTSManagerPtr pintf)
  {
    TAutoDriver<IPTSManager>::Bind(pintf, true);
  }

  IPTSManagerDispT& operator=(IPTSManager *pintf)
  {
    TAutoDriver<IPTSManager>::Bind(pintf, false);
    return *this;
  }

  IPTSManagerDispT& operator=(IPTSManagerPtr pintf)
  {
    TAutoDriver<IPTSManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PTSManager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PTSManager);
  }

  HRESULT         __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  HRESULT         __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                       VARIANT ObjectID/*[in]*/, 
                                       Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  HRESULT         __fastcall GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  HRESULT         __fastcall GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  HRESULT         __fastcall ListBrokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IBrokers* __fastcall ListBrokers(void);
  HRESULT         __fastcall ListCharts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICharts* __fastcall ListCharts(void);
  HRESULT         __fastcall ListCustomers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ICustomers* __fastcall ListCustomers(void);
  HRESULT         __fastcall ListEventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IEventTopics* __fastcall ListEventTopics(void);
  HRESULT         __fastcall ListExchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IExchanges* __fastcall ListExchanges(void);
  HRESULT         __fastcall ListRoles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IRoles* __fastcall ListRoles(void);
  HRESULT         __fastcall ListTasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/);
  Ptssmolib_tlb::ITasks* __fastcall ListTasks(void);
  HRESULT         __fastcall ListUsers(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/);
  Ptssmolib_tlb::IUsers* __fastcall ListUsers(void);
  HRESULT         __fastcall Pause();
  HRESULT         __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                          BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                          long RowCount/*[in]*/, 
                                          Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  HRESULT         __fastcall Run();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  HRESULT         __fastcall GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);

};
typedef IPTSManagerDispT<IPTSManager> IPTSManagerDisp;

// *********************************************************************//
// DispIntf:  _IPTSSessionEvents
// Flags:     (4096) Dispatchable
// GUID:      {77E96BE0-BBD3-422B-8155-67140A755A67}
// *********************************************************************//
template <class T>
class _IPTSSessionEventsDispT : public TAutoDriver<_IPTSSessionEvents>
{
public:
  _IPTSSessionEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall OnLogin();
  HRESULT         __fastcall OnLogout();
  HRESULT         __fastcall OnError(BSTR ErrMsg/*[in]*/);

};
typedef _IPTSSessionEventsDispT<_IPTSSessionEvents> _IPTSSessionEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIOrder
// Interface: IOrder
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountID(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_AccountID(void)
{
  long pVal;
  OLECHECK(this->get_AccountID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_AccountID(long pVal/*[in]*/)
{
  return (*this)->set_AccountID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_HedgeID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_HedgeID(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_HedgeID(void)
{
  long pVal;
  OLECHECK(this->get_HedgeID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_HedgeID(long pVal/*[in]*/)
{
  return (*this)->set_HedgeID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchAcctID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_ExchAcctID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_OrderID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_OrderID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OrderID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_OrderStatus(Ptssmolib_tlb::TcOrderStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderStatus(pVal);
}

template <class T> Ptssmolib_tlb::TcOrderStatus __fastcall
TCOMIOrderT<T>::get_OrderStatus(void)
{
  Ptssmolib_tlb::TcOrderStatus pVal;
  OLECHECK(this->get_OrderStatus((Ptssmolib_tlb::TcOrderStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_OrderDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_OrderDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OrderDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_OrderTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_OrderTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OrderTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_OrderType(Ptssmolib_tlb::TcOrderType* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderType(pVal);
}

template <class T> Ptssmolib_tlb::TcOrderType __fastcall
TCOMIOrderT<T>::get_OrderType(void)
{
  Ptssmolib_tlb::TcOrderType pVal;
  OLECHECK(this->get_OrderType((Ptssmolib_tlb::TcOrderType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/)
{
  return (*this)->set_OrderType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType* pVal/*[out,retval]*/)
{
  return (*this)->get_NonTradingType(pVal);
}

template <class T> Ptssmolib_tlb::TcNonTradingOrderType __fastcall
TCOMIOrderT<T>::get_NonTradingType(void)
{
  Ptssmolib_tlb::TcNonTradingOrderType pVal;
  OLECHECK(this->get_NonTradingType((Ptssmolib_tlb::TcNonTradingOrderType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/)
{
  return (*this)->set_NonTradingType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_InstrumentID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstrumentID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_InstrumentID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstrumentID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_InstrumentID(BSTR pVal/*[in]*/)
{
  return (*this)->set_InstrumentID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_InstIDSource(long pVal/*[in]*/)
{
  return (*this)->set_InstIDSource(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_Side(Ptssmolib_tlb::TcOrderSide* pVal/*[out,retval]*/)
{
  return (*this)->get_Side(pVal);
}

template <class T> Ptssmolib_tlb::TcOrderSide __fastcall
TCOMIOrderT<T>::get_Side(void)
{
  Ptssmolib_tlb::TcOrderSide pVal;
  OLECHECK(this->get_Side((Ptssmolib_tlb::TcOrderSide*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/)
{
  return (*this)->set_Side(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Quantity(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_Quantity(void)
{
  long pVal;
  OLECHECK(this->get_Quantity((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_Quantity(long pVal/*[in]*/)
{
  return (*this)->set_Quantity(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_Price(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Price(pVal);
}

template <class T> double __fastcall
TCOMIOrderT<T>::get_Price(void)
{
  double pVal;
  OLECHECK(this->get_Price((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_Price(double pVal/*[in]*/)
{
  return (*this)->set_Price(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_StopPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_StopPrice(pVal);
}

template <class T> double __fastcall
TCOMIOrderT<T>::get_StopPrice(void)
{
  double pVal;
  OLECHECK(this->get_StopPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_StopPrice(double pVal/*[in]*/)
{
  return (*this)->set_StopPrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_TimeInForce(Ptssmolib_tlb::TcTimeInForce* pVal/*[out,retval]*/)
{
  return (*this)->get_TimeInForce(pVal);
}

template <class T> Ptssmolib_tlb::TcTimeInForce __fastcall
TCOMIOrderT<T>::get_TimeInForce(void)
{
  Ptssmolib_tlb::TcTimeInForce pVal;
  OLECHECK(this->get_TimeInForce((Ptssmolib_tlb::TcTimeInForce*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/)
{
  return (*this)->set_TimeInForce(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_ExpireTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExpireTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_ExpireTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExpireTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_ExpireTime(BSTR pVal/*[in]*/)
{
  return (*this)->set_ExpireTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_MaxFloor(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxFloor(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_MaxFloor(void)
{
  long pVal;
  OLECHECK(this->get_MaxFloor((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_MaxFloor(long pVal/*[in]*/)
{
  return (*this)->set_MaxFloor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_CreditTrading(Ptssmolib_tlb::TcCreditTrading* pVal/*[out,retval]*/)
{
  return (*this)->get_CreditTrading(pVal);
}

template <class T> Ptssmolib_tlb::TcCreditTrading __fastcall
TCOMIOrderT<T>::get_CreditTrading(void)
{
  Ptssmolib_tlb::TcCreditTrading pVal;
  OLECHECK(this->get_CreditTrading((Ptssmolib_tlb::TcCreditTrading*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/)
{
  return (*this)->set_CreditTrading(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_Restriction(Ptssmolib_tlb::TcOrderRestriction* pVal/*[out,retval]*/)
{
  return (*this)->get_Restriction(pVal);
}

template <class T> Ptssmolib_tlb::TcOrderRestriction __fastcall
TCOMIOrderT<T>::get_Restriction(void)
{
  Ptssmolib_tlb::TcOrderRestriction pVal;
  OLECHECK(this->get_Restriction((Ptssmolib_tlb::TcOrderRestriction*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/)
{
  return (*this)->set_Restriction(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_PositionEffect(Ptssmolib_tlb::TcPositionEffect* pVal/*[out,retval]*/)
{
  return (*this)->get_PositionEffect(pVal);
}

template <class T> Ptssmolib_tlb::TcPositionEffect __fastcall
TCOMIOrderT<T>::get_PositionEffect(void)
{
  Ptssmolib_tlb::TcPositionEffect pVal;
  OLECHECK(this->get_PositionEffect((Ptssmolib_tlb::TcPositionEffect*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/)
{
  return (*this)->set_PositionEffect(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_QtyCondition(Ptssmolib_tlb::TcQuantityCondition* pVal/*[out,retval]*/)
{
  return (*this)->get_QtyCondition(pVal);
}

template <class T> Ptssmolib_tlb::TcQuantityCondition __fastcall
TCOMIOrderT<T>::get_QtyCondition(void)
{
  Ptssmolib_tlb::TcQuantityCondition pVal;
  OLECHECK(this->get_QtyCondition((Ptssmolib_tlb::TcQuantityCondition*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/)
{
  return (*this)->set_QtyCondition(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinQty(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_MinQty(void)
{
  long pVal;
  OLECHECK(this->get_MinQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_MinQty(long pVal/*[in]*/)
{
  return (*this)->set_MinQty(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_RejectReason(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RejectReason(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_RejectReason(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RejectReason((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_ExecQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecQty(pVal);
}

template <class T> long __fastcall
TCOMIOrderT<T>::get_ExecQty(void)
{
  long pVal;
  OLECHECK(this->get_ExecQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_ExecAvgPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecAvgPrice(pVal);
}

template <class T> double __fastcall
TCOMIOrderT<T>::get_ExecAvgPrice(void)
{
  double pVal;
  OLECHECK(this->get_ExecAvgPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Text(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderT<T>::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Text((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::set_Text(BSTR pVal/*[in]*/)
{
  return (*this)->set_Text(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::Cancel(void)
{
  return (*this)->Cancel();
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::GetReports(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/)
{
  return (*this)->GetReports(pVal);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIOrderT<T>::GetReports(void)
{
  Ptssmolib_tlb::IObjectList* pVal;
  OLECHECK(this->GetReports((Ptssmolib_tlb::IObjectList**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::Modify(void)
{
  return (*this)->Modify();
}

template <class T> HRESULT __fastcall
TCOMIOrderT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

// *********************************************************************//
// DispIntf:  IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {787035B1-4164-4933-99E7-A88257F65AF0}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOrderDispT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_AccountID(void)
{
  long pVal;
  this->get_AccountID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_AccountID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_HedgeID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HedgeID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_HedgeID(void)
{
  long pVal;
  this->get_HedgeID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_HedgeID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HedgeID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchAcctID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_ExchAcctID(void)
{
  BSTR pVal;
  this->get_ExchAcctID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_OrderID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderID"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_OrderID(void)
{
  BSTR pVal;
  this->get_OrderID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_OrderStatus(Ptssmolib_tlb::TcOrderStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderStatus"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderStatus __fastcall
IOrderDispT<T>::get_OrderStatus(void)
{
  Ptssmolib_tlb::TcOrderStatus pVal;
  this->get_OrderStatus((Ptssmolib_tlb::TcOrderStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_OrderDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderDate"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_OrderDate(void)
{
  BSTR pVal;
  this->get_OrderDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_OrderTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderTime"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_OrderTime(void)
{
  BSTR pVal;
  this->get_OrderTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_OrderType(Ptssmolib_tlb::TcOrderType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderType"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderType __fastcall
IOrderDispT<T>::get_OrderType(void)
{
  Ptssmolib_tlb::TcOrderType pVal;
  this->get_OrderType((Ptssmolib_tlb::TcOrderType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderType"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NonTradingType"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcNonTradingOrderType __fastcall
IOrderDispT<T>::get_NonTradingType(void)
{
  Ptssmolib_tlb::TcNonTradingOrderType pVal;
  this->get_NonTradingType((Ptssmolib_tlb::TcNonTradingOrderType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NonTradingType"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_InstrumentID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstrumentID"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_InstrumentID(void)
{
  BSTR pVal;
  this->get_InstrumentID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_InstrumentID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstrumentID"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_InstIDSource(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_Side(Ptssmolib_tlb::TcOrderSide* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Side"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderSide __fastcall
IOrderDispT<T>::get_Side(void)
{
  Ptssmolib_tlb::TcOrderSide pVal;
  this->get_Side((Ptssmolib_tlb::TcOrderSide*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Side"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quantity"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_Quantity(void)
{
  long pVal;
  this->get_Quantity((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_Quantity(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quantity"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_Price(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Price"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_Price(void)
{
  double pVal;
  this->get_Price((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_Price(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Price"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_StopPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopPrice"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_StopPrice(void)
{
  double pVal;
  this->get_StopPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_StopPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopPrice"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_TimeInForce(Ptssmolib_tlb::TcTimeInForce* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeInForce"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcTimeInForce __fastcall
IOrderDispT<T>::get_TimeInForce(void)
{
  Ptssmolib_tlb::TcTimeInForce pVal;
  this->get_TimeInForce((Ptssmolib_tlb::TcTimeInForce*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeInForce"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ExpireTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpireTime"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_ExpireTime(void)
{
  BSTR pVal;
  this->get_ExpireTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_ExpireTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpireTime"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_MaxFloor(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxFloor"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_MaxFloor(void)
{
  long pVal;
  this->get_MaxFloor((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_MaxFloor(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxFloor"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_CreditTrading(Ptssmolib_tlb::TcCreditTrading* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreditTrading"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCreditTrading __fastcall
IOrderDispT<T>::get_CreditTrading(void)
{
  Ptssmolib_tlb::TcCreditTrading pVal;
  this->get_CreditTrading((Ptssmolib_tlb::TcCreditTrading*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreditTrading"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_Restriction(Ptssmolib_tlb::TcOrderRestriction* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Restriction"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderRestriction __fastcall
IOrderDispT<T>::get_Restriction(void)
{
  Ptssmolib_tlb::TcOrderRestriction pVal;
  this->get_Restriction((Ptssmolib_tlb::TcOrderRestriction*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Restriction"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_PositionEffect(Ptssmolib_tlb::TcPositionEffect* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionEffect"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPositionEffect __fastcall
IOrderDispT<T>::get_PositionEffect(void)
{
  Ptssmolib_tlb::TcPositionEffect pVal;
  this->get_PositionEffect((Ptssmolib_tlb::TcPositionEffect*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionEffect"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_QtyCondition(Ptssmolib_tlb::TcQuantityCondition* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QtyCondition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcQuantityCondition __fastcall
IOrderDispT<T>::get_QtyCondition(void)
{
  Ptssmolib_tlb::TcQuantityCondition pVal;
  this->get_QtyCondition((Ptssmolib_tlb::TcQuantityCondition*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("QtyCondition"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_RejectReason(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RejectReason"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_RejectReason(void)
{
  BSTR pVal;
  this->get_RejectReason((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ExecQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecQty"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_ExecQty(void)
{
  long pVal;
  this->get_ExecQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ExecAvgPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecAvgPrice"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_ExecAvgPrice(void)
{
  double pVal;
  this->get_ExecAvgPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_Text(void)
{
  BSTR pVal;
  this->get_Text((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_Text(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(50));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::GetReports(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetReports"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IOrderDispT<T>::GetReports(void)
{
  Ptssmolib_tlb::IObjectList* pVal;
  this->GetReports((Ptssmolib_tlb::IObjectList**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::Modify()
{
  _TDispID _dispid(*this, OLETEXT("Modify"), DISPID(52));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(53));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIObjectList
// Interface: IObjectList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIObjectListT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIObjectListT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIObjectListT<T>::get_Item(VARIANT Index/*[in]*/, LPDISPATCH* ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> LPDISPATCH __fastcall
TCOMIObjectListT<T>::get_Item(VARIANT Index/*[in]*/)
{
  LPDISPATCH ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (LPDISPATCH*)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectListT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIObjectListT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectListT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

// *********************************************************************//
// DispIntf:  IObjectList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6115E5B1-7E3D-4116-B3DF-DE153CB9278A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObjectListDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IObjectListDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IObjectListDispT<T>::get_Item(VARIANT Index/*[in]*/, LPDISPATCH* ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppObjVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IObjectListDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  LPDISPATCH ppObjVal;
  this->get_Item(Index, (LPDISPATCH*)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IObjectListDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IObjectListDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectListDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIOrders
// Interface: IOrders
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIOrdersT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
TCOMIOrdersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IOrder* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IOrder**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIOrdersT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::Add(Ptssmolib_tlb::IOrder** ppObject/*[out,retval]*/)
{
  return (*this)->Add(ppObject);
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
TCOMIOrdersT<T>::Add(void)
{
  Ptssmolib_tlb::IOrder* ppObject;
  OLECHECK(this->Add((Ptssmolib_tlb::IOrder**)&ppObject));
  return ppObject;
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::DeleteAll(void)
{
  return (*this)->DeleteAll();
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  return (*this)->RemoveAt(Index);
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, long* pErrorIndex/*[out]*/)
{
  return (*this)->Commit(Mode, pErrorIndex);
}

template <class T> HRESULT __fastcall
TCOMIOrdersT<T>::Find(BSTR OrderID/*[in]*/, Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/)
{
  return (*this)->Find(OrderID, ppObjVal);
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
TCOMIOrdersT<T>::Find(BSTR OrderID/*[in]*/)
{
  Ptssmolib_tlb::IOrder* ppObjVal;
  OLECHECK(this->Find(OrderID/*[in]*/, (Ptssmolib_tlb::IOrder**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IOrders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3669D4E3-2E08-4840-8311-91B952C43182}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOrdersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IOrdersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrder**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
IOrdersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IOrder* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IOrder**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrdersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::Add(Ptssmolib_tlb::IOrder** ppObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrder**)ppObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
IOrdersDispT<T>::Add(void)
{
  Ptssmolib_tlb::IOrder* ppObject;
  this->Add((Ptssmolib_tlb::IOrder**)&ppObject);
  return ppObject;
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::DeleteAll()
{
  _TDispID _dispid(*this, OLETEXT("DeleteAll"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, long* pErrorIndex/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Commit"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (int)Mode /*[VT_USERDEFINED:0]*/;
  _args[2] = pErrorIndex /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrdersDispT<T>::Find(BSTR OrderID/*[in]*/, Ptssmolib_tlb::IOrder** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = OrderID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrder**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
IOrdersDispT<T>::Find(BSTR OrderID/*[in]*/)
{
  Ptssmolib_tlb::IOrder* ppObjVal;
  this->Find(OrderID, (Ptssmolib_tlb::IOrder**)&ppObjVal);
  return ppObjVal;
}

// *********************************************************************//
// SmartIntf: TCOMIExecutionReport
// Interface: IExecutionReport
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExecutionReportT<T>::get_MsgType(Ptssmolib_tlb::TcMessageType* pVal/*[out,retval]*/)
{
  return (*this)->get_MsgType(pVal);
}

template <class T> Ptssmolib_tlb::TcMessageType __fastcall
TCOMIExecutionReportT<T>::get_MsgType(void)
{
  Ptssmolib_tlb::TcMessageType pVal;
  OLECHECK(this->get_MsgType((Ptssmolib_tlb::TcMessageType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExecutionReportT<T>::get_Message(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Message(pVal);
}

template <class T> BSTR __fastcall
TCOMIExecutionReportT<T>::get_Message(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Message((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IExecutionReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93E4BC77-26AF-4DB3-86A8-FBEAED97802C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExecutionReportDispT<T>::get_MsgType(Ptssmolib_tlb::TcMessageType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsgType"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcMessageType __fastcall
IExecutionReportDispT<T>::get_MsgType(void)
{
  Ptssmolib_tlb::TcMessageType pVal;
  this->get_MsgType((Ptssmolib_tlb::TcMessageType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionReportDispT<T>::get_Message(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionReportDispT<T>::get_Message(void)
{
  BSTR pVal;
  this->get_Message((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91E6AC95-A60B-4CB3-A177-4B6A39E99EC5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObjectBaseDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IObjectBaseDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectBaseDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IObjectBaseDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectBaseDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IObjectBaseDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectBaseDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IObjectBaseDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectBaseDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  INameObjectBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64A49DC7-630D-4ACC-8103-5BA643AC3F72}
// *********************************************************************//
template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INameObjectBaseDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INameObjectBaseDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
INameObjectBaseDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
INameObjectBaseDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
INameObjectBaseDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
INameObjectBaseDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameObjectBaseDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIInstrument
// Interface: IInstrument
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentT<T>::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_ID(BSTR pVal/*[in]*/)
{
  return (*this)->set_ID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_IDSource(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentT<T>::get_IDSource(void)
{
  long pVal;
  OLECHECK(this->get_IDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_IDSource(long pVal/*[in]*/)
{
  return (*this)->set_IDSource(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Symbol(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentT<T>::get_Symbol(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Symbol((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_Symbol(BSTR pVal/*[in]*/)
{
  return (*this)->set_Symbol(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_CFICode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CFICode(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentT<T>::get_CFICode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CFICode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_CFICode(BSTR pVal/*[in]*/)
{
  return (*this)->set_CFICode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_Type(Ptssmolib_tlb::TcInstrumentType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcInstrumentType __fastcall
TCOMIInstrumentT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcInstrumentType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcInstrumentType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_SubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/)
{
  return (*this)->get_SubType(pVal);
}

template <class T> Ptssmolib_tlb::TcInstrumentSubType __fastcall
TCOMIInstrumentT<T>::get_SubType(void)
{
  Ptssmolib_tlb::TcInstrumentSubType pVal;
  OLECHECK(this->get_SubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/)
{
  return (*this)->set_SubType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  return (*this)->get_Currency(pVal);
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
TCOMIInstrumentT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  return (*this)->set_Currency(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::get_Status(Ptssmolib_tlb::TcInstrumentStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcInstrumentStatus __fastcall
TCOMIInstrumentT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcInstrumentStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcInstrumentStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::GetDetail(Ptssmolib_tlb::IInstrumentDetail** ppInfo/*[out,retval]*/)
{
  return (*this)->GetDetail(ppInfo);
}

template <class T> Ptssmolib_tlb::IInstrumentDetail* __fastcall
TCOMIInstrumentT<T>::GetDetail(void)
{
  Ptssmolib_tlb::IInstrumentDetail* ppInfo;
  OLECHECK(this->GetDetail((Ptssmolib_tlb::IInstrumentDetail**)&ppInfo));
  return ppInfo;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::GetNowQuote(Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/)
{
  return (*this)->GetNowQuote(ppQuote);
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
TCOMIInstrumentT<T>::GetNowQuote(void)
{
  Ptssmolib_tlb::IQuote* ppQuote;
  OLECHECK(this->GetNowQuote((Ptssmolib_tlb::IQuote**)&ppQuote));
  return ppQuote;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                       BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                       long MaxRowCount/*[in]*/, 
                                       Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/)
{
  return (*this)->GetQuoteTickDatas(TradingDay, FormTime, ToTime, pStartIndex, MaxRowCount, 
                                    ppTickData);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIInstrumentT<T>::GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                       BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                       long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppTickData;
  OLECHECK(this->GetQuoteTickDatas(TradingDay/*[in]*/, FormTime/*[in]*/, ToTime/*[in]*/, 
                                   pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppTickData));
  return ppTickData;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentT<T>::SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/)
{
  return (*this)->SetDetail(pInfo);
}

// *********************************************************************//
// DispIntf:  IInstrument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A2ACE41D-DFE2-42E6-8A21-F3077455DACB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_ID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_IDSource(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Symbol"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_Symbol(void)
{
  BSTR pVal;
  this->get_Symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Symbol(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Symbol"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_CFICode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CFICode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_CFICode(void)
{
  BSTR pVal;
  this->get_CFICode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_CFICode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CFICode"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Type(Ptssmolib_tlb::TcInstrumentType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcInstrumentType __fastcall
IInstrumentDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcInstrumentType pVal;
  this->get_Type((Ptssmolib_tlb::TcInstrumentType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_SubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcInstrumentSubType __fastcall
IInstrumentDispT<T>::get_SubType(void)
{
  Ptssmolib_tlb::TcInstrumentSubType pVal;
  this->get_SubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubType"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IInstrumentDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Status(Ptssmolib_tlb::TcInstrumentStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcInstrumentStatus __fastcall
IInstrumentDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcInstrumentStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcInstrumentStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::GetDetail(Ptssmolib_tlb::IInstrumentDetail** ppInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDetail"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IInstrumentDetail**)ppInfo /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IInstrumentDetail* __fastcall
IInstrumentDispT<T>::GetDetail(void)
{
  Ptssmolib_tlb::IInstrumentDetail* ppInfo;
  this->GetDetail((Ptssmolib_tlb::IInstrumentDetail**)&ppInfo);
  return ppInfo;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::GetNowQuote(Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNowQuote"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuote**)ppQuote /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
IInstrumentDispT<T>::GetNowQuote(void)
{
  Ptssmolib_tlb::IQuote* ppQuote;
  this->GetNowQuote((Ptssmolib_tlb::IQuote**)&ppQuote);
  return ppQuote;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                       BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                       long MaxRowCount/*[in]*/, 
                                       Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteTickDatas"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = TradingDay /*[VT_BSTR:0]*/;
  _args[2] = FormTime /*[VT_BSTR:0]*/;
  _args[3] = ToTime /*[VT_BSTR:0]*/;
  _args[4] = pStartIndex /*[VT_I4:1]*/;
  _args[5] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppTickData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IInstrumentDispT<T>::GetQuoteTickDatas(BSTR TradingDay/*[in]*/, BSTR FormTime/*[in]*/, 
                                       BSTR ToTime/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                       long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppTickData;
  this->GetQuoteTickDatas(TradingDay, FormTime, ToTime, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IObjectList**)&ppTickData);
  return ppTickData;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDetail"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IInstrumentDetail*)pInfo /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IInstrumentDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IInstrumentDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IInstrumentDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IInstrumentDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IAlterable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {729089CB-BC7E-4F49-8881-1C6270257FE1}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAlterableDispT<T>::Alter()
{
  _TDispID _dispid(*this, OLETEXT("Alter"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIInstrumentDetail
// Interface: IInstrumentDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentDetailT<T>::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_IDSource(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_IDSource(void)
{
  long pVal;
  OLECHECK(this->get_IDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Prefix(pVal);
}

template <class T> BSTR __fastcall
TCOMIInstrumentDetailT<T>::get_Prefix(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Prefix((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  return (*this)->set_Prefix(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  return (*this)->get_LotLimitType(pVal);
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
TCOMIInstrumentDetailT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  OLECHECK(this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  return (*this)->set_LotLimitType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BuyLotQty(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_BuyLotQty(void)
{
  long pVal;
  OLECHECK(this->get_BuyLotQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  return (*this)->set_BuyLotQty(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_SellLotQty(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_SellLotQty(void)
{
  long pVal;
  OLECHECK(this->get_SellLotQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  return (*this)->set_SellLotQty(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinTradeUnit(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_MinTradeUnit(void)
{
  long pVal;
  OLECHECK(this->get_MinTradeUnit((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  return (*this)->set_MinTradeUnit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxOrderSize(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_MaxOrderSize(void)
{
  long pVal;
  OLECHECK(this->get_MaxOrderSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  return (*this)->set_MaxOrderSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinOrderSize(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_MinOrderSize(void)
{
  long pVal;
  OLECHECK(this->get_MinOrderSize((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  return (*this)->set_MinOrderSize(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MinQty(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_MinQty(void)
{
  long pVal;
  OLECHECK(this->get_MinQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_MinQty(long pVal/*[in]*/)
{
  return (*this)->set_MinQty(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderPxUpLimit(pVal);
}

template <class T> double __fastcall
TCOMIInstrumentDetailT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  OLECHECK(this->get_OrderPxUpLimit((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  return (*this)->set_OrderPxUpLimit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderPxLoLimit(pVal);
}

template <class T> double __fastcall
TCOMIInstrumentDetailT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  OLECHECK(this->get_OrderPxLoLimit((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  return (*this)->set_OrderPxLoLimit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsValidMarketOrder(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsValidMarketOrder(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsValidLimitOrder(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsValidLimitOrder(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsValidIcebergOrder(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIInstrumentDetailT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsValidIcebergOrder(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  return (*this)->get_FinancingIndicate(pVal);
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
TCOMIInstrumentDetailT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  OLECHECK(this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  return (*this)->set_FinancingIndicate(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ParValue(pVal);
}

template <class T> long __fastcall
TCOMIInstrumentDetailT<T>::get_ParValue(void)
{
  long pVal;
  OLECHECK(this->get_ParValue((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_ParValue(long pVal/*[in]*/)
{
  return (*this)->set_ParValue(pVal);
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  return (*this)->get_Currency(pVal);
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
TCOMIInstrumentDetailT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentDetailT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  return (*this)->set_Currency(pVal);
}

// *********************************************************************//
// DispIntf:  IInstrumentDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {37627738-EA0B-4857-A389-0A02868BE825}
// *********************************************************************//
template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDetailDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IInstrumentDetailDispT<T>::get_Prefix(void)
{
  BSTR pVal;
  this->get_Prefix((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
IInstrumentDetailDispT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_BuyLotQty(void)
{
  long pVal;
  this->get_BuyLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_SellLotQty(void)
{
  long pVal;
  this->get_SellLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_MinTradeUnit(void)
{
  long pVal;
  this->get_MinTradeUnit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_MaxOrderSize(void)
{
  long pVal;
  this->get_MaxOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_MinOrderSize(void)
{
  long pVal;
  this->get_MinOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IInstrumentDetailDispT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  this->get_OrderPxUpLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IInstrumentDetailDispT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  this->get_OrderPxLoLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IInstrumentDetailDispT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IInstrumentDetailDispT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IInstrumentDetailDispT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
IInstrumentDetailDispT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentDetailDispT<T>::get_ParValue(void)
{
  long pVal;
  this->get_ParValue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_ParValue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IInstrumentDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentDetailDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIQuote
// Interface: IQuote
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_SeqNo(long* pVal/*[out,retval]*/)
{
  return (*this)->get_SeqNo(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_SeqNo(void)
{
  long pVal;
  OLECHECK(this->get_SeqNo((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Symbol(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteT<T>::get_Symbol(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Symbol((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteT<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_LastQty(void)
{
  long pVal;
  OLECHECK(this->get_LastQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LastPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_LastPrice(void)
{
  double pVal;
  OLECHECK(this->get_LastPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LastTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteT<T>::get_LastTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LastTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PreClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_PreClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_PreClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_ClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_ClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_OpenPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_OpenPrice(void)
{
  double pVal;
  OLECHECK(this->get_OpenPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_SettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_SettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LowPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_LowPrice(void)
{
  double pVal;
  OLECHECK(this->get_LowPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_HighPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_HighPrice(void)
{
  double pVal;
  OLECHECK(this->get_HighPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Turnover(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_Turnover(void)
{
  double pVal;
  OLECHECK(this->get_Turnover((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DayQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_DayQty(void)
{
  long pVal;
  OLECHECK(this->get_DayQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_FixPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_FixPrice(void)
{
  double pVal;
  OLECHECK(this->get_FixPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_AskQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_AskQty(void)
{
  long pVal;
  OLECHECK(this->get_AskQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_AskPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_AskPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_AskPrice(void)
{
  double pVal;
  OLECHECK(this->get_AskPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_BidQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteT<T>::get_BidQty(void)
{
  long pVal;
  OLECHECK(this->get_BidQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_BidPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_BidPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteT<T>::get_BidPrice(void)
{
  double pVal;
  OLECHECK(this->get_BidPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteT<T>::get_TradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradingDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteT<T>::GetQuoteDetails(Ptssmolib_tlb::IObjectList** ppDetails/*[out,retval]*/)
{
  return (*this)->GetQuoteDetails(ppDetails);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIQuoteT<T>::GetQuoteDetails(void)
{
  Ptssmolib_tlb::IObjectList* ppDetails;
  OLECHECK(this->GetQuoteDetails((Ptssmolib_tlb::IObjectList**)&ppDetails));
  return ppDetails;
}

// *********************************************************************//
// DispIntf:  IQuote
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {75FB79D8-4BD7-476C-92BA-789FC673AA9B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_SeqNo(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeqNo"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_SeqNo(void)
{
  long pVal;
  this->get_SeqNo((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Symbol"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDispT<T>::get_Symbol(void)
{
  BSTR pVal;
  this->get_Symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_LastQty(void)
{
  long pVal;
  this->get_LastQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastPrice"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_LastPrice(void)
{
  double pVal;
  this->get_LastPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTime"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDispT<T>::get_LastTime(void)
{
  BSTR pVal;
  this->get_LastTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreClosePrice"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_PreClosePrice(void)
{
  double pVal;
  this->get_PreClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClosePrice"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_ClosePrice(void)
{
  double pVal;
  this->get_ClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenPrice"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_OpenPrice(void)
{
  double pVal;
  this->get_OpenPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_SettlPrice(void)
{
  double pVal;
  this->get_SettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LowPrice"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_LowPrice(void)
{
  double pVal;
  this->get_LowPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPrice"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_HighPrice(void)
{
  double pVal;
  this->get_HighPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Turnover"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_Turnover(void)
{
  double pVal;
  this->get_Turnover((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayQty"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_DayQty(void)
{
  long pVal;
  this->get_DayQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixPrice"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_FixPrice(void)
{
  double pVal;
  this->get_FixPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_AskQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskQty"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_AskQty(void)
{
  long pVal;
  this->get_AskQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_AskPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskPrice"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_AskPrice(void)
{
  double pVal;
  this->get_AskPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_BidQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidQty"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDispT<T>::get_BidQty(void)
{
  long pVal;
  this->get_BidQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_BidPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidPrice"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDispT<T>::get_BidPrice(void)
{
  double pVal;
  this->get_BidPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDispT<T>::get_TradingDay(void)
{
  BSTR pVal;
  this->get_TradingDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDispT<T>::GetQuoteDetails(Ptssmolib_tlb::IObjectList** ppDetails/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteDetails"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppDetails /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IQuoteDispT<T>::GetQuoteDetails(void)
{
  Ptssmolib_tlb::IObjectList* ppDetails;
  this->GetQuoteDetails((Ptssmolib_tlb::IObjectList**)&ppDetails);
  return ppDetails;
}

// *********************************************************************//
// DispIntf:  IDroppable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E54008FC-5C59-4F4F-8849-2CB2EEB60101}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDroppableDispT<T>::Drop()
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIAccount
// Interface: IAccount
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIAccountT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIAccountT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomerID(pVal);
}

template <class T> long __fastcall
TCOMIAccountT<T>::get_CustomerID(void)
{
  long pVal;
  OLECHECK(this->get_CustomerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TaskID(pVal);
}

template <class T> long __fastcall
TCOMIAccountT<T>::get_TaskID(void)
{
  long pVal;
  OLECHECK(this->get_TaskID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountID(pVal);
}

template <class T> long __fastcall
TCOMIAccountT<T>::get_AccountID(void)
{
  long pVal;
  OLECHECK(this->get_AccountID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_ParentAcctID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ParentAcctID(pVal);
}

template <class T> long __fastcall
TCOMIAccountT<T>::get_ParentAcctID(void)
{
  long pVal;
  OLECHECK(this->get_ParentAcctID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIAccountT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountType(pVal);
}

template <class T> Ptssmolib_tlb::TcAccountType __fastcall
TCOMIAccountT<T>::get_AccountType(void)
{
  Ptssmolib_tlb::TcAccountType pVal;
  OLECHECK(this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcAccountStatus __fastcall
TCOMIAccountT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcAccountStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIAccountT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                  double Amount/*[in]*/)
{
  return (*this)->AllocateBalance(Currency, Amount);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                   Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Quantity/*[in]*/)
{
  return (*this)->AllocatePosition(InstID, InstIDSource, Direction, Type, Quantity);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  return (*this)->FreeBalance(Currency, Amount);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                               Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                               Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Quantity/*[in]*/)
{
  return (*this)->FreePosition(InstID, InstIDSource, Direction, Type, Quantity);
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                            Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/)
{
  return (*this)->GetDetail(Currency, ppDetail);
}

template <class T> Ptssmolib_tlb::IAccountDetail* __fastcall
TCOMIAccountT<T>::GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
{
  Ptssmolib_tlb::IAccountDetail* ppDetail;
  OLECHECK(this->GetDetail(Currency/*[in]*/, (Ptssmolib_tlb::IAccountDetail**)&ppDetail));
  return ppDetail;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                              Ptssmolib_tlb::IPosition** Position/*[out,retval]*/)
{
  return (*this)->GetPosition(InstID, InstIDSource, Direction, Position);
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
TCOMIAccountT<T>::GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
{
  Ptssmolib_tlb::IPosition* Position;
  OLECHECK(this->GetPosition(InstID/*[in]*/, InstIDSource/*[in]*/, Direction/*[in]*/, (Ptssmolib_tlb::IPosition**)&Position));
  return Position;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                               Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/)
{
  return (*this)->GetPositions(pStartIndex, MaxRowCount, Positions);
}

template <class T> Ptssmolib_tlb::IPositions* __fastcall
TCOMIAccountT<T>::GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IPositions* Positions;
  OLECHECK(this->GetPositions(pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IPositions**)&Positions));
  return Positions;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                  Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/)
{
  return (*this)->GetFilledOrders(TradeDate, FromTime, ToTime, pStartIndex, RowCount, ppOrders);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIAccountT<T>::GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppOrders;
  OLECHECK(this->GetFilledOrders(TradeDate/*[in]*/, FromTime/*[in]*/, ToTime/*[in]*/, 
                                 pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IOrders**)&ppOrders));
  return ppOrders;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                   Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/)
{
  return (*this)->GetWorkingOrders(pStartIndex, MaxRowCount, ppOrders);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIAccountT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppOrders;
  OLECHECK(this->GetWorkingOrders(pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IOrders**)&ppOrders));
  return ppOrders;
}

template <class T> HRESULT __fastcall
TCOMIAccountT<T>::NewOrders(Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  return (*this)->NewOrders(pVal);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIAccountT<T>::NewOrders(void)
{
  Ptssmolib_tlb::IOrders* pVal;
  OLECHECK(this->NewOrders((Ptssmolib_tlb::IOrders**)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DE4CE813-5AD2-4915-B831-65FA3B40FE2B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAccountDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccountDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccountDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccountDispT<T>::get_CustomerID(void)
{
  long pVal;
  this->get_CustomerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaskID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccountDispT<T>::get_TaskID(void)
{
  long pVal;
  this->get_TaskID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountID"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccountDispT<T>::get_AccountID(void)
{
  long pVal;
  this->get_AccountID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_ParentAcctID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentAcctID"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccountDispT<T>::get_ParentAcctID(void)
{
  long pVal;
  this->get_ParentAcctID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccountDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcAccountType __fastcall
IAccountDispT<T>::get_AccountType(void)
{
  Ptssmolib_tlb::TcAccountType pVal;
  this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcAccountStatus __fastcall
IAccountDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcAccountStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IAccountDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                  double Amount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllocateBalance"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Currency /*[VT_USERDEFINED:0]*/;
  _args[2] = Amount /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                   Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Quantity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllocatePosition"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[5] = Quantity /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreeBalance"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = (int)Currency /*[VT_USERDEFINED:0]*/;
  _args[2] = Amount /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                               Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                               Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Quantity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FreePosition"), DISPID(20));
  TAutoArgs<5> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[5] = Quantity /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                            Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDetail"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int)Currency /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccountDetail**)ppDetail /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccountDetail* __fastcall
IAccountDispT<T>::GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
{
  Ptssmolib_tlb::IAccountDetail* ppDetail;
  this->GetDetail(Currency, (Ptssmolib_tlb::IAccountDetail**)&ppDetail);
  return ppDetail;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                              Ptssmolib_tlb::IPosition** Position/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPosition"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPosition**)Position /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
IAccountDispT<T>::GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
{
  Ptssmolib_tlb::IPosition* Position;
  this->GetPosition(InstID, InstIDSource, Direction, (Ptssmolib_tlb::IPosition**)&Position);
  return Position;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                               Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPositions"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPositions**)Positions /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPositions* __fastcall
IAccountDispT<T>::GetPositions(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IPositions* Positions;
  this->GetPositions(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IPositions**)&Positions);
  return Positions;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, BSTR ToTime/*[in]*/
                                  , long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                  Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFilledOrders"), DISPID(24));
  TAutoArgs<5> _args;
  _args[1] = TradeDate /*[VT_BSTR:0]*/;
  _args[2] = FromTime /*[VT_BSTR:0]*/;
  _args[3] = ToTime /*[VT_BSTR:0]*/;
  _args[4] = pStartIndex /*[VT_I4:1]*/;
  _args[5] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)ppOrders /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IAccountDispT<T>::GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppOrders;
  this->GetFilledOrders(TradeDate, FromTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IOrders**)&ppOrders);
  return ppOrders;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                   Ptssmolib_tlb::IOrders** ppOrders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWorkingOrders"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)ppOrders /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IAccountDispT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppOrders;
  this->GetWorkingOrders(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&ppOrders);
  return ppOrders;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::NewOrders(Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewOrders"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IAccountDispT<T>::NewOrders(void)
{
  Ptssmolib_tlb::IOrders* pVal;
  this->NewOrders((Ptssmolib_tlb::IOrders**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccountDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccountDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IAccountDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IAccountDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IAccountDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccountDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRenamable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B5FD7832-C964-4441-8E22-7A420D1E2A3D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRenamableDispT<T>::Rename(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rename"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IObjectCollectionBase
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {060B063E-85DA-4EBE-9A8D-30AD7C2437BE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IObjectCollectionBaseDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IObjectCollectionBaseDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IObjectCollectionBaseDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IObjectCollectionBaseDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IObjectCollectionBaseDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IObjectCollectionBaseDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IObjectCollectionBaseDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExtendedProperties
// Interface: IExtendedProperties
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExtendedPropertiesT<T>::get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExtendedProperty** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IExtendedProperty* __fastcall
TCOMIExtendedPropertiesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExtendedProperty* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IExtendedProperty**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIExtendedPropertiesT<T>::Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/)
{
  return (*this)->Add(pVal);
}

// *********************************************************************//
// DispIntf:  IExtendedProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0003CB5-0751-4480-833D-5DB3F380D4E2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                      Ptssmolib_tlb::IExtendedProperty** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperty**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedProperty* __fastcall
IExtendedPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExtendedProperty* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IExtendedProperty**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IExtendedProperty*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IExtendedPropertiesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExtendedPropertiesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExtendedPropertiesDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExtendedPropertiesDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExtendedPropertiesDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExtendedPropertiesDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertiesDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExtendedProperty
// Interface: IExtendedProperty
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExtendedPropertyT<T>::get_Value(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_Value(pVal);
}

template <class T> VARIANT __fastcall
TCOMIExtendedPropertyT<T>::get_Value(void)
{
  VARIANT pVal;
  OLECHECK(this->get_Value((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExtendedPropertyT<T>::set_Value(VARIANT pVal/*[in]*/)
{
  return (*this)->set_Value(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExtendedPropertyT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIExtendedPropertyT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExtendedPropertyT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExtendedPropertyT<T>::get_IsFixed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsFixed(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIExtendedPropertyT<T>::get_IsFixed(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsFixed((VARIANT_BOOL*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IExtendedProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C23AC92B-D9DA-43B4-AC24-04F1517F55D2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_Value(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExtendedPropertyDispT<T>::get_Value(void)
{
  VARIANT pVal;
  this->get_Value((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::set_Value(VARIANT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExtendedPropertyDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_IsFixed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFixed"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IExtendedPropertyDispT<T>::get_IsFixed(void)
{
  VARIANT_BOOL pVal;
  this->get_IsFixed((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExtendedPropertyDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExtendedPropertyDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExtendedPropertyDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExtendedPropertyDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExtendedPropertyDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExtendedPropertyDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExtendedPropertyDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIAccountDetail
// Interface: IAccountDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Initial(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Initial(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Initial(void)
{
  double pVal;
  OLECHECK(this->get_Initial((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Available(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Available(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Available(void)
{
  double pVal;
  OLECHECK(this->get_Available((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Yesterday(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Yesterday(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Yesterday(void)
{
  double pVal;
  OLECHECK(this->get_Yesterday((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Credited(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Credited(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Credited(void)
{
  double pVal;
  OLECHECK(this->get_Credited((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Debited(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Debited(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Debited(void)
{
  double pVal;
  OLECHECK(this->get_Debited((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Frozen(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Frozen(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Frozen(void)
{
  double pVal;
  OLECHECK(this->get_Frozen((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_MaintenanceMargin(double* pVal/*[out,retval]*/)
{
  return (*this)->get_MaintenanceMargin(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_MaintenanceMargin(void)
{
  double pVal;
  OLECHECK(this->get_MaintenanceMargin((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Fee(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Fee(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Fee(void)
{
  double pVal;
  OLECHECK(this->get_Fee((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Interest(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Interest(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Interest(void)
{
  double pVal;
  OLECHECK(this->get_Interest((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_PositionCost(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PositionCost(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_PositionCost(void)
{
  double pVal;
  OLECHECK(this->get_PositionCost((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_PositionValue(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PositionValue(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_PositionValue(void)
{
  double pVal;
  OLECHECK(this->get_PositionValue((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  return (*this)->get_Currency(pVal);
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
TCOMIAccountDetailT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  OLECHECK(this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountDetailT<T>::get_Equity(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Equity(pVal);
}

template <class T> double __fastcall
TCOMIAccountDetailT<T>::get_Equity(void)
{
  double pVal;
  OLECHECK(this->get_Equity((double*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IAccountDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D2EC8E61-48C3-4C8E-A0C8-1035A7C81CBF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Initial(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Initial"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Initial(void)
{
  double pVal;
  this->get_Initial((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Available(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Available"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Available(void)
{
  double pVal;
  this->get_Available((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Yesterday(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Yesterday"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Yesterday(void)
{
  double pVal;
  this->get_Yesterday((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Credited(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Credited"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Credited(void)
{
  double pVal;
  this->get_Credited((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Debited(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debited"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Debited(void)
{
  double pVal;
  this->get_Debited((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Frozen(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Frozen"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Frozen(void)
{
  double pVal;
  this->get_Frozen((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_MaintenanceMargin(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaintenanceMargin"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_MaintenanceMargin(void)
{
  double pVal;
  this->get_MaintenanceMargin((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Fee(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fee"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Fee(void)
{
  double pVal;
  this->get_Fee((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Interest(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Interest"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Interest(void)
{
  double pVal;
  this->get_Interest((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_PositionCost(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionCost"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_PositionCost(void)
{
  double pVal;
  this->get_PositionCost((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_PositionValue(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionValue"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_PositionValue(void)
{
  double pVal;
  this->get_PositionValue((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IAccountDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountDetailDispT<T>::get_Equity(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Equity"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IAccountDetailDispT<T>::get_Equity(void)
{
  double pVal;
  this->get_Equity((double*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIPosition
// Interface: IPosition
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountID(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_AccountID(void)
{
  long pVal;
  OLECHECK(this->get_AccountID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchAcctID(pVal);
}

template <class T> BSTR __fastcall
TCOMIPositionT<T>::get_ExchAcctID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIPositionT<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_Direction(Ptssmolib_tlb::TcPositionDirection* pVal/*[out,retval]*/)
{
  return (*this)->get_Direction(pVal);
}

template <class T> Ptssmolib_tlb::TcPositionDirection __fastcall
TCOMIPositionT<T>::get_Direction(void)
{
  Ptssmolib_tlb::TcPositionDirection pVal;
  OLECHECK(this->get_Direction((Ptssmolib_tlb::TcPositionDirection*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_Position(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Position(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_Position(void)
{
  long pVal;
  OLECHECK(this->get_Position((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_ForSale(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ForSale(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_ForSale(void)
{
  long pVal;
  OLECHECK(this->get_ForSale((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_ForETFCR(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ForETFCR(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_ForETFCR(void)
{
  long pVal;
  OLECHECK(this->get_ForETFCR((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_ForExercise(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ForExercise(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_ForExercise(void)
{
  long pVal;
  OLECHECK(this->get_ForExercise((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_ForClose(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ForClose(pVal);
}

template <class T> long __fastcall
TCOMIPositionT<T>::get_ForClose(void)
{
  long pVal;
  OLECHECK(this->get_ForClose((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_PositionCost(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PositionCost(pVal);
}

template <class T> double __fastcall
TCOMIPositionT<T>::get_PositionCost(void)
{
  double pVal;
  OLECHECK(this->get_PositionCost((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_UsedMargin(double* pVal/*[out,retval]*/)
{
  return (*this)->get_UsedMargin(pVal);
}

template <class T> double __fastcall
TCOMIPositionT<T>::get_UsedMargin(void)
{
  double pVal;
  OLECHECK(this->get_UsedMargin((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::get_BuyAvgPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_BuyAvgPrice(pVal);
}

template <class T> double __fastcall
TCOMIPositionT<T>::get_BuyAvgPrice(void)
{
  double pVal;
  OLECHECK(this->get_BuyAvgPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionT<T>::GetPositionQtys(Ptssmolib_tlb::IPositionQtys** pVal/*[out,retval]*/)
{
  return (*this)->GetPositionQtys(pVal);
}

template <class T> Ptssmolib_tlb::IPositionQtys* __fastcall
TCOMIPositionT<T>::GetPositionQtys(void)
{
  Ptssmolib_tlb::IPositionQtys* pVal;
  OLECHECK(this->GetPositionQtys((Ptssmolib_tlb::IPositionQtys**)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPosition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6505206C-C307-47AC-A54B-7847A8F0D791}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPositionDispT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_AccountID(void)
{
  long pVal;
  this->get_AccountID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchAcctID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPositionDispT<T>::get_ExchAcctID(void)
{
  BSTR pVal;
  this->get_ExchAcctID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPositionDispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_Direction(Ptssmolib_tlb::TcPositionDirection* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Direction"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPositionDirection __fastcall
IPositionDispT<T>::get_Direction(void)
{
  Ptssmolib_tlb::TcPositionDirection pVal;
  this->get_Direction((Ptssmolib_tlb::TcPositionDirection*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_Position(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_Position(void)
{
  long pVal;
  this->get_Position((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_ForSale(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForSale"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_ForSale(void)
{
  long pVal;
  this->get_ForSale((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_ForETFCR(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForETFCR"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_ForETFCR(void)
{
  long pVal;
  this->get_ForETFCR((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_ForExercise(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForExercise"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_ForExercise(void)
{
  long pVal;
  this->get_ForExercise((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_ForClose(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForClose"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionDispT<T>::get_ForClose(void)
{
  long pVal;
  this->get_ForClose((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_PositionCost(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionCost"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPositionDispT<T>::get_PositionCost(void)
{
  double pVal;
  this->get_PositionCost((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_UsedMargin(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsedMargin"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPositionDispT<T>::get_UsedMargin(void)
{
  double pVal;
  this->get_UsedMargin((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::get_BuyAvgPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyAvgPrice"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPositionDispT<T>::get_BuyAvgPrice(void)
{
  double pVal;
  this->get_BuyAvgPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionDispT<T>::GetPositionQtys(Ptssmolib_tlb::IPositionQtys** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPositionQtys"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPositionQtys**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPositionQtys* __fastcall
IPositionDispT<T>::GetPositionQtys(void)
{
  Ptssmolib_tlb::IPositionQtys* pVal;
  this->GetPositionQtys((Ptssmolib_tlb::IPositionQtys**)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIPositionQtys
// Interface: IPositionQtys
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPositionQtysT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIPositionQtysT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIPositionQtysT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Ptssmolib_tlb::IPositionQty** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IPositionQty* __fastcall
TCOMIPositionQtysT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPositionQty* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IPositionQty**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionQtysT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIPositionQtysT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPositionQtys
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EDA0A35-9565-493F-9C35-A8DD67DF3A4F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPositionQtysDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IPositionQtysDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IPositionQtysDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Ptssmolib_tlb::IPositionQty** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPositionQty**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPositionQty* __fastcall
IPositionQtysDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPositionQty* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IPositionQty**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IPositionQtysDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionQtysDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIPositionQty
// Interface: IPositionQty
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPositionQtyT<T>::get_Type(Ptssmolib_tlb::TcPositionType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcPositionType __fastcall
TCOMIPositionQtyT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcPositionType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcPositionType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionQtyT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Quantity(pVal);
}

template <class T> long __fastcall
TCOMIPositionQtyT<T>::get_Quantity(void)
{
  long pVal;
  OLECHECK(this->get_Quantity((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionQtyT<T>::get_FrozenQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_FrozenQty(pVal);
}

template <class T> long __fastcall
TCOMIPositionQtyT<T>::get_FrozenQty(void)
{
  long pVal;
  OLECHECK(this->get_FrozenQty((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPositionQty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EA20B86-1C3A-4CC7-A2FA-AEDE6A8A558B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPositionQtyDispT<T>::get_Type(Ptssmolib_tlb::TcPositionType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPositionType __fastcall
IPositionQtyDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcPositionType pVal;
  this->get_Type((Ptssmolib_tlb::TcPositionType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionQtyDispT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quantity"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionQtyDispT<T>::get_Quantity(void)
{
  long pVal;
  this->get_Quantity((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPositionQtyDispT<T>::get_FrozenQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrozenQty"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionQtyDispT<T>::get_FrozenQty(void)
{
  long pVal;
  this->get_FrozenQty((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIPositions
// Interface: IPositions
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPositionsT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIPositionsT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIPositionsT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::IPosition** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
TCOMIPositionsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPosition* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IPosition**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIPositionsT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIPositionsT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPositions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {86769964-1C01-447B-B025-E844BCB42C48}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPositionsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IPositionsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IPositionsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::IPosition** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPosition**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
IPositionsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPosition* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IPosition**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IPositionsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPositionsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IObjectPermission
// Flags:     (448) Dual NonExtensible OleAutomation
// GUID:      {38669BFB-21BF-4FFC-BFB3-26A9A70A02BC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObjectPermissionDispT<T>::Deny(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                BSTR GranteeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Deny"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  TAutoArgs<2> _args;
  _args[1] = (int)Privilege /*[VT_USERDEFINED:0]*/;
  _args[2] = GranteeName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectPermissionDispT<T>::Grant(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                 BSTR GranteeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grant"), DISPID(DISPID_UNKNOWN/*[1610678273]*/));
  TAutoArgs<2> _args;
  _args[1] = (int)Privilege /*[VT_USERDEFINED:0]*/;
  _args[2] = GranteeName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectPermissionDispT<T>::Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                  BSTR GranteeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Revoke"), DISPID(DISPID_UNKNOWN/*[1610678274]*/));
  TAutoArgs<2> _args;
  _args[1] = (int)Privilege /*[VT_USERDEFINED:0]*/;
  _args[2] = GranteeName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectPermissionDispT<T>::ListPermissions(Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListPermissions"), DISPID(DISPID_UNKNOWN/*[1610678275]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IObjectPermissionDispT<T>::ListPermissions(void)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  this->ListPermissions((Ptssmolib_tlb::IObjectList**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IObjectPermissionDispT<T>::ListUserPermissions(BSTR UserName/*[in]*/, 
                                               Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListUserPermissions"), DISPID(DISPID_UNKNOWN/*[1610678276]*/));
  TAutoArgs<1> _args;
  _args[1] = UserName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IObjectPermissionDispT<T>::ListUserPermissions(BSTR UserName/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  this->ListUserPermissions(UserName, (Ptssmolib_tlb::IObjectList**)&ppObjRet);
  return ppObjRet;
}

// *********************************************************************//
// SmartIntf: TCOMIFutureDetail
// Interface: IFutureDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_Multiple(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Multiple(pVal);
}

template <class T> long __fastcall
TCOMIFutureDetailT<T>::get_Multiple(void)
{
  long pVal;
  OLECHECK(this->get_Multiple((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_Multiple(long pVal/*[in]*/)
{
  return (*this)->set_Multiple(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_MarginRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_MarginRatio(pVal);
}

template <class T> double __fastcall
TCOMIFutureDetailT<T>::get_MarginRatio(void)
{
  double pVal;
  OLECHECK(this->get_MarginRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_MarginRatio(double pVal/*[in]*/)
{
  return (*this)->set_MarginRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Underlying(pVal);
}

template <class T> BSTR __fastcall
TCOMIFutureDetailT<T>::get_Underlying(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Underlying((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  return (*this)->set_Underlying(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_Month(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Month(pVal);
}

template <class T> BSTR __fastcall
TCOMIFutureDetailT<T>::get_Month(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Month((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_Month(BSTR pVal/*[in]*/)
{
  return (*this)->set_Month(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_LastTradeDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LastTradeDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIFutureDetailT<T>::get_LastTradeDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LastTradeDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_LastTradeDay(BSTR pVal/*[in]*/)
{
  return (*this)->set_LastTradeDay(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_SettlDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIFutureDetailT<T>::get_SettlDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SettlDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_SettlDay(BSTR pVal/*[in]*/)
{
  return (*this)->set_SettlDay(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  return (*this)->get_UnderlyingSrc(pVal);
}

template <class T> long __fastcall
TCOMIFutureDetailT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  return (*this)->set_UnderlyingSrc(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIFutureDetailT<T>::get_SettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_SettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_SettlPrice(double pVal/*[in]*/)
{
  return (*this)->set_SettlPrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_PreSettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PreSettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIFutureDetailT<T>::get_PreSettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_PreSettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_PreSettlPrice(double pVal/*[in]*/)
{
  return (*this)->set_PreSettlPrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/)
{
  return (*this)->get_DeliveryStyle(pVal);
}

template <class T> Ptssmolib_tlb::TcDeliveryStyle __fastcall
TCOMIFutureDetailT<T>::get_DeliveryStyle(void)
{
  Ptssmolib_tlb::TcDeliveryStyle pVal;
  OLECHECK(this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFutureDetailT<T>::set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/)
{
  return (*this)->set_DeliveryStyle(pVal);
}

// *********************************************************************//
// DispIntf:  IFutureDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {59A40B13-1DA3-41F7-BE52-2B4F62E2A393}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_Multiple(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Multiple"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_Multiple(void)
{
  long pVal;
  this->get_Multiple((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_Multiple(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Multiple"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_MarginRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRatio"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFutureDetailDispT<T>::get_MarginRatio(void)
{
  double pVal;
  this->get_MarginRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_MarginRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRatio"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_Underlying(void)
{
  BSTR pVal;
  this->get_Underlying((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_Month(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Month"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_Month(void)
{
  BSTR pVal;
  this->get_Month((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_Month(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Month"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_LastTradeDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTradeDay"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_LastTradeDay(void)
{
  BSTR pVal;
  this->get_LastTradeDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_LastTradeDay(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTradeDay"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_SettlDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlDay"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_SettlDay(void)
{
  BSTR pVal;
  this->get_SettlDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_SettlDay(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlDay"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  this->get_UnderlyingSrc((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFutureDetailDispT<T>::get_SettlPrice(void)
{
  double pVal;
  this->get_SettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_SettlPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_PreSettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreSettlPrice"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFutureDetailDispT<T>::get_PreSettlPrice(void)
{
  double pVal;
  this->get_PreSettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_PreSettlPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreSettlPrice"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryStyle"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcDeliveryStyle __fastcall
IFutureDetailDispT<T>::get_DeliveryStyle(void)
{
  Ptssmolib_tlb::TcDeliveryStyle pVal;
  this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryStyle"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFutureDetailDispT<T>::get_Prefix(void)
{
  BSTR pVal;
  this->get_Prefix((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
IFutureDetailDispT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_BuyLotQty(void)
{
  long pVal;
  this->get_BuyLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_SellLotQty(void)
{
  long pVal;
  this->get_SellLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_MinTradeUnit(void)
{
  long pVal;
  this->get_MinTradeUnit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_MaxOrderSize(void)
{
  long pVal;
  this->get_MaxOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_MinOrderSize(void)
{
  long pVal;
  this->get_MinOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFutureDetailDispT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  this->get_OrderPxUpLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFutureDetailDispT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  this->get_OrderPxLoLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFutureDetailDispT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFutureDetailDispT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFutureDetailDispT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
IFutureDetailDispT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFutureDetailDispT<T>::get_ParValue(void)
{
  long pVal;
  this->get_ParValue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_ParValue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IFutureDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFutureDetailDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIFundDetail
// Interface: IFundDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_Unit(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Unit(pVal);
}

template <class T> long __fastcall
TCOMIFundDetailT<T>::get_Unit(void)
{
  long pVal;
  OLECHECK(this->get_Unit((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_Unit(long pVal/*[in]*/)
{
  return (*this)->set_Unit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_MaxCashRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxCashRatio(pVal);
}

template <class T> double __fastcall
TCOMIFundDetailT<T>::get_MaxCashRatio(void)
{
  double pVal;
  OLECHECK(this->get_MaxCashRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_MaxCashRatio(double pVal/*[in]*/)
{
  return (*this)->set_MaxCashRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_IsPublish(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsPublish(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIFundDetailT<T>::get_IsPublish(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsPublish((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_IsPublish(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsPublish(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_IsAllowCreation(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsAllowCreation(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIFundDetailT<T>::get_IsAllowCreation(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsAllowCreation((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsAllowCreation(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_IsAllowRedemption(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsAllowRedemption(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIFundDetailT<T>::get_IsAllowRedemption(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsAllowRedemption((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsAllowRedemption(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_RecordNum(long* pVal/*[out,retval]*/)
{
  return (*this)->get_RecordNum(pVal);
}

template <class T> long __fastcall
TCOMIFundDetailT<T>::get_RecordNum(void)
{
  long pVal;
  OLECHECK(this->get_RecordNum((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_RecordNum(long pVal/*[in]*/)
{
  return (*this)->set_RecordNum(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_EstimateCash(double* pVal/*[out,retval]*/)
{
  return (*this)->get_EstimateCash(pVal);
}

template <class T> double __fastcall
TCOMIFundDetailT<T>::get_EstimateCash(void)
{
  double pVal;
  OLECHECK(this->get_EstimateCash((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_EstimateCash(double pVal/*[in]*/)
{
  return (*this)->set_EstimateCash(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIFundDetailT<T>::get_TradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradingDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_TradingDay(BSTR pVal/*[in]*/)
{
  return (*this)->set_TradingDay(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_PreTradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PreTradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIFundDetailT<T>::get_PreTradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PreTradingDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_PreTradingDay(BSTR pVal/*[in]*/)
{
  return (*this)->set_PreTradingDay(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::get_CashComponent(double* pVal/*[out,retval]*/)
{
  return (*this)->get_CashComponent(pVal);
}

template <class T> double __fastcall
TCOMIFundDetailT<T>::get_CashComponent(void)
{
  double pVal;
  OLECHECK(this->get_CashComponent((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::set_CashComponent(double pVal/*[in]*/)
{
  return (*this)->set_CashComponent(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::AddMember(BSTR InstID/*[in]*/, 
                               Ptssmolib_tlb::IFundMember** ppFundMember/*[out,retval]*/)
{
  return (*this)->AddMember(InstID, ppFundMember);
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
TCOMIFundDetailT<T>::AddMember(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppFundMember;
  OLECHECK(this->AddMember(InstID/*[in]*/, (Ptssmolib_tlb::IFundMember**)&ppFundMember));
  return ppFundMember;
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::DropMember(BSTR InstID/*[in]*/)
{
  return (*this)->DropMember(InstID);
}

template <class T> HRESULT __fastcall
TCOMIFundDetailT<T>::GetMembers(Ptssmolib_tlb::IFundMembers** ppMembers/*[out,retval]*/)
{
  return (*this)->GetMembers(ppMembers);
}

template <class T> Ptssmolib_tlb::IFundMembers* __fastcall
TCOMIFundDetailT<T>::GetMembers(void)
{
  Ptssmolib_tlb::IFundMembers* ppMembers;
  OLECHECK(this->GetMembers((Ptssmolib_tlb::IFundMembers**)&ppMembers));
  return ppMembers;
}

// *********************************************************************//
// DispIntf:  IFundDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9374C88C-99EB-463E-869C-60F1A5F1D3AD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_Unit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Unit"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_Unit(void)
{
  long pVal;
  this->get_Unit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_Unit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Unit"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_MaxCashRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxCashRatio"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundDetailDispT<T>::get_MaxCashRatio(void)
{
  double pVal;
  this->get_MaxCashRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_MaxCashRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxCashRatio"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsPublish(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPublish"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsPublish(void)
{
  VARIANT_BOOL pVal;
  this->get_IsPublish((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsPublish(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPublish"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsAllowCreation(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAllowCreation"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsAllowCreation(void)
{
  VARIANT_BOOL pVal;
  this->get_IsAllowCreation((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAllowCreation"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsAllowRedemption(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAllowRedemption"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsAllowRedemption(void)
{
  VARIANT_BOOL pVal;
  this->get_IsAllowRedemption((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAllowRedemption"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_RecordNum(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNum"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_RecordNum(void)
{
  long pVal;
  this->get_RecordNum((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_RecordNum(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordNum"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_EstimateCash(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EstimateCash"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundDetailDispT<T>::get_EstimateCash(void)
{
  double pVal;
  this->get_EstimateCash((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_EstimateCash(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EstimateCash"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundDetailDispT<T>::get_TradingDay(void)
{
  BSTR pVal;
  this->get_TradingDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_TradingDay(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_PreTradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreTradingDay"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundDetailDispT<T>::get_PreTradingDay(void)
{
  BSTR pVal;
  this->get_PreTradingDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_PreTradingDay(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreTradingDay"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_CashComponent(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CashComponent"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundDetailDispT<T>::get_CashComponent(void)
{
  double pVal;
  this->get_CashComponent((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_CashComponent(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CashComponent"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::AddMember(BSTR InstID/*[in]*/, 
                               Ptssmolib_tlb::IFundMember** ppFundMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMember"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IFundMember**)ppFundMember /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
IFundDetailDispT<T>::AddMember(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppFundMember;
  this->AddMember(InstID, (Ptssmolib_tlb::IFundMember**)&ppFundMember);
  return ppFundMember;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::DropMember(BSTR InstID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropMember"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::GetMembers(Ptssmolib_tlb::IFundMembers** ppMembers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMembers"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IFundMembers**)ppMembers /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IFundMembers* __fastcall
IFundDetailDispT<T>::GetMembers(void)
{
  Ptssmolib_tlb::IFundMembers* ppMembers;
  this->GetMembers((Ptssmolib_tlb::IFundMembers**)&ppMembers);
  return ppMembers;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundDetailDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundDetailDispT<T>::get_Prefix(void)
{
  BSTR pVal;
  this->get_Prefix((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
IFundDetailDispT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_BuyLotQty(void)
{
  long pVal;
  this->get_BuyLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_SellLotQty(void)
{
  long pVal;
  this->get_SellLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_MinTradeUnit(void)
{
  long pVal;
  this->get_MinTradeUnit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_MaxOrderSize(void)
{
  long pVal;
  this->get_MaxOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_MinOrderSize(void)
{
  long pVal;
  this->get_MinOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundDetailDispT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  this->get_OrderPxUpLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundDetailDispT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  this->get_OrderPxLoLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFundDetailDispT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
IFundDetailDispT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundDetailDispT<T>::get_ParValue(void)
{
  long pVal;
  this->get_ParValue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_ParValue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IFundDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundDetailDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIFundMember
// Interface: IFundMember
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> BSTR __fastcall
TCOMIFundMemberT<T>::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMIFundMemberT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::set_Name(BSTR pVal/*[in]*/)
{
  return (*this)->set_Name(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Quantity(pVal);
}

template <class T> long __fastcall
TCOMIFundMemberT<T>::get_Quantity(void)
{
  long pVal;
  OLECHECK(this->get_Quantity((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::set_Quantity(long pVal/*[in]*/)
{
  return (*this)->set_Quantity(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag* pVal/*[out,retval]*/)
{
  return (*this)->get_ReplaceFlag(pVal);
}

template <class T> Ptssmolib_tlb::TcCashReplaceFlag __fastcall
TCOMIFundMemberT<T>::get_ReplaceFlag(void)
{
  Ptssmolib_tlb::TcCashReplaceFlag pVal;
  OLECHECK(this->get_ReplaceFlag((Ptssmolib_tlb::TcCashReplaceFlag*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/)
{
  return (*this)->set_ReplaceFlag(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_ReplaceRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ReplaceRatio(pVal);
}

template <class T> double __fastcall
TCOMIFundMemberT<T>::get_ReplaceRatio(void)
{
  double pVal;
  OLECHECK(this->get_ReplaceRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::set_ReplaceRatio(double pVal/*[in]*/)
{
  return (*this)->set_ReplaceRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::get_ReplaceCash(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ReplaceCash(pVal);
}

template <class T> double __fastcall
TCOMIFundMemberT<T>::get_ReplaceCash(void)
{
  double pVal;
  OLECHECK(this->get_ReplaceCash((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMemberT<T>::set_ReplaceCash(double pVal/*[in]*/)
{
  return (*this)->set_ReplaceCash(pVal);
}

// *********************************************************************//
// DispIntf:  IFundMember
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {490175F2-5CF2-41B9-BF31-9F9D0A99C0B6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundMemberDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFundMemberDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::set_Name(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_Quantity(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quantity"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundMemberDispT<T>::get_Quantity(void)
{
  long pVal;
  this->get_Quantity((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::set_Quantity(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quantity"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceFlag"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCashReplaceFlag __fastcall
IFundMemberDispT<T>::get_ReplaceFlag(void)
{
  Ptssmolib_tlb::TcCashReplaceFlag pVal;
  this->get_ReplaceFlag((Ptssmolib_tlb::TcCashReplaceFlag*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceFlag"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_ReplaceRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceRatio"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundMemberDispT<T>::get_ReplaceRatio(void)
{
  double pVal;
  this->get_ReplaceRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::set_ReplaceRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceRatio"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::get_ReplaceCash(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceCash"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IFundMemberDispT<T>::get_ReplaceCash(void)
{
  double pVal;
  this->get_ReplaceCash((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMemberDispT<T>::set_ReplaceCash(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceCash"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIFundMembers
// Interface: IFundMembers
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFundMembersT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIFundMembersT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIFundMembersT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
TCOMIFundMembersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IFundMember**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMembersT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIFundMembersT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIFundMembersT<T>::get_ItemByID(BSTR ID/*[in]*/, 
                                   Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjVal);
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
TCOMIFundMembersT<T>::get_ItemByID(BSTR ID/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppObjVal;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IFundMember**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IFundMembers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0B921350-7518-4F0D-BD8F-9866FF54EF99}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFundMembersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IFundMembersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IFundMembersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IFundMember**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
IFundMembersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IFundMember**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IFundMembersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFundMembersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IFundMembersDispT<T>::get_ItemByID(BSTR ID/*[in]*/, 
                                   Ptssmolib_tlb::IFundMember** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IFundMember**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IFundMember* __fastcall
IFundMembersDispT<T>::get_ItemByID(BSTR ID/*[in]*/)
{
  Ptssmolib_tlb::IFundMember* ppObjVal;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IFundMember**)&ppObjVal);
  return ppObjVal;
}

// *********************************************************************//
// SmartIntf: TCOMIOptionDetail
// Interface: IOptionDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_Multiple(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Multiple(pVal);
}

template <class T> long __fastcall
TCOMIOptionDetailT<T>::get_Multiple(void)
{
  long pVal;
  OLECHECK(this->get_Multiple((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_Multiple(long pVal/*[in]*/)
{
  return (*this)->set_Multiple(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIOptionDetailT<T>::get_SettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_SettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_SettlPrice(double pVal/*[in]*/)
{
  return (*this)->set_SettlPrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_Month(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Month(pVal);
}

template <class T> BSTR __fastcall
TCOMIOptionDetailT<T>::get_Month(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Month((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_Month(BSTR pVal/*[in]*/)
{
  return (*this)->set_Month(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Underlying(pVal);
}

template <class T> BSTR __fastcall
TCOMIOptionDetailT<T>::get_Underlying(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Underlying((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  return (*this)->set_Underlying(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_OptionType(Ptssmolib_tlb::TcOptionType* pVal/*[out,retval]*/)
{
  return (*this)->get_OptionType(pVal);
}

template <class T> Ptssmolib_tlb::TcOptionType __fastcall
TCOMIOptionDetailT<T>::get_OptionType(void)
{
  Ptssmolib_tlb::TcOptionType pVal;
  OLECHECK(this->get_OptionType((Ptssmolib_tlb::TcOptionType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/)
{
  return (*this)->set_OptionType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  return (*this)->get_UnderlyingSrc(pVal);
}

template <class T> long __fastcall
TCOMIOptionDetailT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  return (*this)->set_UnderlyingSrc(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/)
{
  return (*this)->get_ExerciseStyle(pVal);
}

template <class T> Ptssmolib_tlb::TcExerciseStyle __fastcall
TCOMIOptionDetailT<T>::get_ExerciseStyle(void)
{
  Ptssmolib_tlb::TcExerciseStyle pVal;
  OLECHECK(this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/)
{
  return (*this)->set_ExerciseStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::get_ExpiryDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExpiryDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIOptionDetailT<T>::get_ExpiryDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExpiryDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOptionDetailT<T>::set_ExpiryDay(BSTR pVal/*[in]*/)
{
  return (*this)->set_ExpiryDay(pVal);
}

// *********************************************************************//
// DispIntf:  IOptionDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BCD8BC2D-A7EE-4242-8A43-5AFEB778099F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_Multiple(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Multiple"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_Multiple(void)
{
  long pVal;
  this->get_Multiple((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_Multiple(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Multiple"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOptionDetailDispT<T>::get_SettlPrice(void)
{
  double pVal;
  this->get_SettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_SettlPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_Month(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Month"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionDetailDispT<T>::get_Month(void)
{
  BSTR pVal;
  this->get_Month((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_Month(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Month"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionDetailDispT<T>::get_Underlying(void)
{
  BSTR pVal;
  this->get_Underlying((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_OptionType(Ptssmolib_tlb::TcOptionType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionType"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOptionType __fastcall
IOptionDetailDispT<T>::get_OptionType(void)
{
  Ptssmolib_tlb::TcOptionType pVal;
  this->get_OptionType((Ptssmolib_tlb::TcOptionType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionType"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  this->get_UnderlyingSrc((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseStyle"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcExerciseStyle __fastcall
IOptionDetailDispT<T>::get_ExerciseStyle(void)
{
  Ptssmolib_tlb::TcExerciseStyle pVal;
  this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseStyle"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_ExpiryDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDay"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionDetailDispT<T>::get_ExpiryDay(void)
{
  BSTR pVal;
  this->get_ExpiryDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_ExpiryDay(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpiryDay"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionDetailDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOptionDetailDispT<T>::get_Prefix(void)
{
  BSTR pVal;
  this->get_Prefix((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
IOptionDetailDispT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_BuyLotQty(void)
{
  long pVal;
  this->get_BuyLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_SellLotQty(void)
{
  long pVal;
  this->get_SellLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_MinTradeUnit(void)
{
  long pVal;
  this->get_MinTradeUnit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_MaxOrderSize(void)
{
  long pVal;
  this->get_MaxOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_MinOrderSize(void)
{
  long pVal;
  this->get_MinOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOptionDetailDispT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  this->get_OrderPxUpLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOptionDetailDispT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  this->get_OrderPxLoLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionDetailDispT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionDetailDispT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IOptionDetailDispT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
IOptionDetailDispT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOptionDetailDispT<T>::get_ParValue(void)
{
  long pVal;
  this->get_ParValue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_ParValue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IOptionDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOptionDetailDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIWarrantDetail
// Interface: IWarrantDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Underlying(pVal);
}

template <class T> BSTR __fastcall
TCOMIWarrantDetailT<T>::get_Underlying(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Underlying((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  return (*this)->set_Underlying(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_WarrantType(Ptssmolib_tlb::TcWarrantType* pVal/*[out,retval]*/)
{
  return (*this)->get_WarrantType(pVal);
}

template <class T> Ptssmolib_tlb::TcWarrantType __fastcall
TCOMIWarrantDetailT<T>::get_WarrantType(void)
{
  Ptssmolib_tlb::TcWarrantType pVal;
  OLECHECK(this->get_WarrantType((Ptssmolib_tlb::TcWarrantType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/)
{
  return (*this)->set_WarrantType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_ExercisePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ExercisePrice(pVal);
}

template <class T> double __fastcall
TCOMIWarrantDetailT<T>::get_ExercisePrice(void)
{
  double pVal;
  OLECHECK(this->get_ExercisePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_ExercisePrice(double pVal/*[in]*/)
{
  return (*this)->set_ExercisePrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ExerciseRatio(pVal);
}

template <class T> double __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseRatio(void)
{
  double pVal;
  OLECHECK(this->get_ExerciseRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_ExerciseRatio(double pVal/*[in]*/)
{
  return (*this)->set_ExerciseRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/)
{
  return (*this)->get_ExerciseStyle(pVal);
}

template <class T> Ptssmolib_tlb::TcExerciseStyle __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseStyle(void)
{
  Ptssmolib_tlb::TcExerciseStyle pVal;
  OLECHECK(this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/)
{
  return (*this)->set_ExerciseStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/)
{
  return (*this)->get_DeliveryStyle(pVal);
}

template <class T> Ptssmolib_tlb::TcDeliveryStyle __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryStyle(void)
{
  Ptssmolib_tlb::TcDeliveryStyle pVal;
  OLECHECK(this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/)
{
  return (*this)->set_DeliveryStyle(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_DeliveryPrice(pVal);
}

template <class T> double __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryPrice(void)
{
  double pVal;
  OLECHECK(this->get_DeliveryPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_DeliveryPrice(double pVal/*[in]*/)
{
  return (*this)->set_DeliveryPrice(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DeliveryDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIWarrantDetailT<T>::get_DeliveryDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DeliveryDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_DeliveryDate(BSTR pVal/*[in]*/)
{
  return (*this)->set_DeliveryDate(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  return (*this)->get_UnderlyingSrc(pVal);
}

template <class T> long __fastcall
TCOMIWarrantDetailT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  OLECHECK(this->get_UnderlyingSrc((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  return (*this)->set_UnderlyingSrc(pVal);
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExerciseCode(pVal);
}

template <class T> BSTR __fastcall
TCOMIWarrantDetailT<T>::get_ExerciseCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExerciseCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIWarrantDetailT<T>::set_ExerciseCode(BSTR pVal/*[in]*/)
{
  return (*this)->set_ExerciseCode(pVal);
}

// *********************************************************************//
// DispIntf:  IWarrantDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3007FB97-9481-414F-BEDD-8408BD85CF0D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_Underlying(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWarrantDetailDispT<T>::get_Underlying(void)
{
  BSTR pVal;
  this->get_Underlying((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_Underlying(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Underlying"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_WarrantType(Ptssmolib_tlb::TcWarrantType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WarrantType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcWarrantType __fastcall
IWarrantDetailDispT<T>::get_WarrantType(void)
{
  Ptssmolib_tlb::TcWarrantType pVal;
  this->get_WarrantType((Ptssmolib_tlb::TcWarrantType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WarrantType"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ExercisePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExercisePrice"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWarrantDetailDispT<T>::get_ExercisePrice(void)
{
  double pVal;
  this->get_ExercisePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_ExercisePrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExercisePrice"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ExerciseRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseRatio"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWarrantDetailDispT<T>::get_ExerciseRatio(void)
{
  double pVal;
  this->get_ExerciseRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_ExerciseRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseRatio"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseStyle"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcExerciseStyle __fastcall
IWarrantDetailDispT<T>::get_ExerciseStyle(void)
{
  Ptssmolib_tlb::TcExerciseStyle pVal;
  this->get_ExerciseStyle((Ptssmolib_tlb::TcExerciseStyle*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseStyle"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryStyle"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcDeliveryStyle __fastcall
IWarrantDetailDispT<T>::get_DeliveryStyle(void)
{
  Ptssmolib_tlb::TcDeliveryStyle pVal;
  this->get_DeliveryStyle((Ptssmolib_tlb::TcDeliveryStyle*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryStyle"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_DeliveryPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryPrice"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWarrantDetailDispT<T>::get_DeliveryPrice(void)
{
  double pVal;
  this->get_DeliveryPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_DeliveryPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryPrice"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_DeliveryDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryDate"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWarrantDetailDispT<T>::get_DeliveryDate(void)
{
  BSTR pVal;
  this->get_DeliveryDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_DeliveryDate(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeliveryDate"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_UnderlyingSrc(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_UnderlyingSrc(void)
{
  long pVal;
  this->get_UnderlyingSrc((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_UnderlyingSrc(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingSrc"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ExerciseCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseCode"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWarrantDetailDispT<T>::get_ExerciseCode(void)
{
  BSTR pVal;
  this->get_ExerciseCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_ExerciseCode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExerciseCode"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWarrantDetailDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_IDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_IDSource(void)
{
  long pVal;
  this->get_IDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_Prefix(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IWarrantDetailDispT<T>::get_Prefix(void)
{
  BSTR pVal;
  this->get_Prefix((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_Prefix(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prefix"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOrderLotLimitType __fastcall
IWarrantDetailDispT<T>::get_LotLimitType(void)
{
  Ptssmolib_tlb::TcOrderLotLimitType pVal;
  this->get_LotLimitType((Ptssmolib_tlb::TcOrderLotLimitType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LotLimitType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_BuyLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_BuyLotQty(void)
{
  long pVal;
  this->get_BuyLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_BuyLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuyLotQty"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_SellLotQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_SellLotQty(void)
{
  long pVal;
  this->get_SellLotQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_SellLotQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SellLotQty"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_MinTradeUnit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_MinTradeUnit(void)
{
  long pVal;
  this->get_MinTradeUnit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_MinTradeUnit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinTradeUnit"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_MaxOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_MaxOrderSize(void)
{
  long pVal;
  this->get_MaxOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_MaxOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxOrderSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_MinOrderSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_MinOrderSize(void)
{
  long pVal;
  this->get_MinOrderSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_MinOrderSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinOrderSize"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_MinQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_MinQty(void)
{
  long pVal;
  this->get_MinQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_MinQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinQty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_OrderPxUpLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWarrantDetailDispT<T>::get_OrderPxUpLimit(void)
{
  double pVal;
  this->get_OrderPxUpLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_OrderPxUpLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxUpLimit"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_OrderPxLoLimit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IWarrantDetailDispT<T>::get_OrderPxLoLimit(void)
{
  double pVal;
  this->get_OrderPxLoLimit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_OrderPxLoLimit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderPxLoLimit"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_IsValidMarketOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWarrantDetailDispT<T>::get_IsValidMarketOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidMarketOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidMarketOrder"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_IsValidLimitOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWarrantDetailDispT<T>::get_IsValidLimitOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidLimitOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidLimitOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_IsValidIcebergOrder(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IWarrantDetailDispT<T>::get_IsValidIcebergOrder(void)
{
  VARIANT_BOOL pVal;
  this->get_IsValidIcebergOrder((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsValidIcebergOrder"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcFinancingIndicate __fastcall
IWarrantDetailDispT<T>::get_FinancingIndicate(void)
{
  Ptssmolib_tlb::TcFinancingIndicate pVal;
  this->get_FinancingIndicate((Ptssmolib_tlb::TcFinancingIndicate*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinancingIndicate"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_ParValue(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IWarrantDetailDispT<T>::get_ParValue(void)
{
  long pVal;
  this->get_ParValue((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_ParValue(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParValue"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::get_Currency(Ptssmolib_tlb::TcCurrencyType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcCurrencyType __fastcall
IWarrantDetailDispT<T>::get_Currency(void)
{
  Ptssmolib_tlb::TcCurrencyType pVal;
  this->get_Currency((Ptssmolib_tlb::TcCurrencyType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IWarrantDetailDispT<T>::set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMICustomer
// Interface: ICustomer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMICustomerT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FullName(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_FullName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FullName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_FullName(BSTR pVal/*[in]*/)
{
  return (*this)->set_FullName(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_CompanyName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CompanyName(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_CompanyName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CompanyName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_CompanyName(BSTR pVal/*[in]*/)
{
  return (*this)->set_CompanyName(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_JobTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_JobTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_JobTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_JobTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_JobTitle(BSTR pVal/*[in]*/)
{
  return (*this)->set_JobTitle(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_Email(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Email(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_Email(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Email((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_Email(BSTR pVal/*[in]*/)
{
  return (*this)->set_Email(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_Email1(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Email1(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_Email1(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Email1((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_Email1(BSTR pVal/*[in]*/)
{
  return (*this)->set_Email1(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_Email2(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Email2(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_Email2(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Email2((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_Email2(BSTR pVal/*[in]*/)
{
  return (*this)->set_Email2(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_Website(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Website(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_Website(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Website((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_Website(BSTR pVal/*[in]*/)
{
  return (*this)->set_Website(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_IM(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_IM(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::get_IM(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_IM((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::set_IM(BSTR pVal/*[in]*/)
{
  return (*this)->set_IM(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_ExchangeAccounts(Ptssmolib_tlb::IExchangeAccounts** ppRetVal/*[out,retval]*/)
{
  return (*this)->get_ExchangeAccounts(ppRetVal);
}

template <class T> Ptssmolib_tlb::IExchangeAccountsPtr __fastcall
TCOMICustomerT<T>::get_ExchangeAccounts(void)
{
  Ptssmolib_tlb::IExchangeAccountsPtr ppRetVal;
  OLECHECK(this->get_ExchangeAccounts((Ptssmolib_tlb::IExchangeAccountsPtr*)&ppRetVal));
  return ppRetVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/)
{
  return (*this)->get_BrokerAccounts(ppRetVal);
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
TCOMICustomerT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
  OLECHECK(this->get_BrokerAccounts((Ptssmolib_tlb::IBrokerAccountsPtr*)&ppRetVal));
  return ppRetVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** ppRetVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(ppRetVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMICustomerT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr ppRetVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&ppRetVal));
  return ppRetVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/)
{
  return (*this)->GetAccounts(pVal);
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
TCOMICustomerT<T>::GetAccounts(void)
{
  Ptssmolib_tlb::IAccounts* pVal;
  OLECHECK(this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::GetDetails(Ptssmolib_tlb::ICustomerDetail** pVal/*[out,retval]*/)
{
  return (*this)->GetDetails(pVal);
}

template <class T> Ptssmolib_tlb::ICustomerDetail* __fastcall
TCOMICustomerT<T>::GetDetails(void)
{
  Ptssmolib_tlb::ICustomerDetail* pVal;
  OLECHECK(this->GetDetails((Ptssmolib_tlb::ICustomerDetail**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                  BSTR* pVal/*[out,retval]*/)
{
  return (*this)->GetPhoneNumber(Type, pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerT<T>::GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->GetPhoneNumber(Type/*[in]*/, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                    Ptssmolib_tlb::IPostalAddress** pVal/*[out,retval]*/)
{
  return (*this)->GetPostalAddress(Type, pVal);
}

template <class T> Ptssmolib_tlb::IPostalAddress* __fastcall
TCOMICustomerT<T>::GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/)
{
  Ptssmolib_tlb::IPostalAddress* pVal;
  OLECHECK(this->GetPostalAddress(Type/*[in]*/, (Ptssmolib_tlb::IPostalAddress**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/)
{
  return (*this)->SetDetails(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, BSTR newVal/*[in]*/)
{
  return (*this)->SetPhoneNumber(Type, newVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                    Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/)
{
  return (*this)->SetPostalAddress(Type, pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/, 
                               long* pID/*[out,retval]*/)
{
  return (*this)->AddAuthInfo(Name, Type, Content, pID);
}

template <class T> long __fastcall
TCOMICustomerT<T>::AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/)
{
  long pID;
  OLECHECK(this->AddAuthInfo(Name/*[in]*/, Type/*[in]*/, Content/*[in]*/, (long*)&pID));
  return pID;
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::DropAuthInfo(long AuthID/*[in]*/)
{
  return (*this)->DropAuthInfo(AuthID);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::DenyAuth(long AuthID/*[in]*/)
{
  return (*this)->DenyAuth(AuthID);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::GrantAuth(long AuthID/*[in]*/)
{
  return (*this)->GrantAuth(AuthID);
}

template <class T> HRESULT __fastcall
TCOMICustomerT<T>::ListAuthInfo(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/)
{
  return (*this)->ListAuthInfo(pVal);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMICustomerT<T>::ListAuthInfo(void)
{
  Ptssmolib_tlb::IObjectList* pVal;
  OLECHECK(this->ListAuthInfo((Ptssmolib_tlb::IObjectList**)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  ICustomer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B457138-0D6B-4BF1-951A-18CB86093855}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICustomerDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_FullName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_FullName(void)
{
  BSTR pVal;
  this->get_FullName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_FullName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullName"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_CompanyName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompanyName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_CompanyName(void)
{
  BSTR pVal;
  this->get_CompanyName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_CompanyName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompanyName"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_JobTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JobTitle"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_JobTitle(void)
{
  BSTR pVal;
  this->get_JobTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_JobTitle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JobTitle"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Email(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Email(void)
{
  BSTR pVal;
  this->get_Email((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Email(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Email1(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email1"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Email1(void)
{
  BSTR pVal;
  this->get_Email1((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Email1(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email1"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Email2(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email2"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Email2(void)
{
  BSTR pVal;
  this->get_Email2((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Email2(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email2"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Website(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Website"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Website(void)
{
  BSTR pVal;
  this->get_Website((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Website(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Website"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_IM(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IM"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_IM(void)
{
  BSTR pVal;
  this->get_IM((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_IM(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IM"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_ExchangeAccounts(Ptssmolib_tlb::IExchangeAccounts** ppRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchangeAccounts"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchangeAccounts**)ppRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchangeAccountsPtr __fastcall
ICustomerDispT<T>::get_ExchangeAccounts(void)
{
  Ptssmolib_tlb::IExchangeAccountsPtr ppRetVal;
  this->get_ExchangeAccounts(&ppRetVal);
  return ppRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerAccounts"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokerAccounts**)ppRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
ICustomerDispT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
  this->get_BrokerAccounts(&ppRetVal);
  return ppRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** ppRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)ppRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
ICustomerDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr ppRetVal;
  this->get_ExtendedProperties(&ppRetVal);
  return ppRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAccounts"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccounts**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
ICustomerDispT<T>::GetAccounts(void)
{
  Ptssmolib_tlb::IAccounts* pVal;
  this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::GetDetails(Ptssmolib_tlb::ICustomerDetail** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDetails"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomerDetail**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomerDetail* __fastcall
ICustomerDispT<T>::GetDetails(void)
{
  Ptssmolib_tlb::ICustomerDetail* pVal;
  this->GetDetails((Ptssmolib_tlb::ICustomerDetail**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                  BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPhoneNumber"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/)
{
  BSTR pVal;
  this->GetPhoneNumber(Type, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                    Ptssmolib_tlb::IPostalAddress** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPostalAddress"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPostalAddress**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPostalAddress* __fastcall
ICustomerDispT<T>::GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/)
{
  Ptssmolib_tlb::IPostalAddress* pVal;
  this->GetPostalAddress(Type, (Ptssmolib_tlb::IPostalAddress**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetDetails"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::ICustomerDetail*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPhoneNumber"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                    Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPostalAddress"), DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = (LPDISPATCH)(Ptssmolib_tlb::IPostalAddress*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/, 
                               long* pID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAuthInfo"), DISPID(27));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Type /*[VT_BSTR:0]*/;
  _args[3] = Content /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICustomerDispT<T>::AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/)
{
  long pID;
  this->AddAuthInfo(Name, Type, Content, (long*)&pID);
  return pID;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::DropAuthInfo(long AuthID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropAuthInfo"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = AuthID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::DenyAuth(long AuthID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DenyAuth"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = AuthID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::GrantAuth(long AuthID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantAuth"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = AuthID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::ListAuthInfo(Ptssmolib_tlb::IObjectList** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListAuthInfo"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
ICustomerDispT<T>::ListAuthInfo(void)
{
  Ptssmolib_tlb::IObjectList* pVal;
  this->ListAuthInfo((Ptssmolib_tlb::IObjectList**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
ICustomerDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
ICustomerDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
ICustomerDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ICustomerDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomerDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExchangeAccounts
// Interface: IExchangeAccounts
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExchangeAccountsT<T>::get_Item(VARIANT Index/*[in]*/, 
                                    Ptssmolib_tlb::IExchangeAccount** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IExchangeAccount* __fastcall
TCOMIExchangeAccountsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExchangeAccount* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IExchangeAccount**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountsT<T>::get_ItemByID(long ID/*[in]*/, 
                                        Ptssmolib_tlb::IExchangeAccount** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IExchangeAccount* __fastcall
TCOMIExchangeAccountsT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IExchangeAccount* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IExchangeAccount**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountsT<T>::Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  IExchangeAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {94E79ADE-2C31-492C-97F3-6E987D38FDD3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                    Ptssmolib_tlb::IExchangeAccount** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchangeAccount**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchangeAccount* __fastcall
IExchangeAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExchangeAccount* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IExchangeAccount**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_ItemByID(long ID/*[in]*/, 
                                        Ptssmolib_tlb::IExchangeAccount** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchangeAccount**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchangeAccount* __fastcall
IExchangeAccountsDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IExchangeAccount* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IExchangeAccount**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IExchangeAccount*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IExchangeAccountsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeAccountsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExchangeAccountsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExchangeAccountsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExchangeAccountsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExchangeAccountsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExchangeAccount
// Interface: IExchangeAccount
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeAccountT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeAccountT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIExchangeAccountT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_BrokerAcctID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BrokerAcctID(pVal);
}

template <class T> long __fastcall
TCOMIExchangeAccountT<T>::get_BrokerAcctID(void)
{
  long pVal;
  OLECHECK(this->get_BrokerAcctID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_Number(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Number(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeAccountT<T>::get_Number(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Number((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_Number(BSTR pVal/*[in]*/)
{
  return (*this)->set_Number(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_Type(Ptssmolib_tlb::TcExchangeAccountType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcExchangeAccountType __fastcall
TCOMIExchangeAccountT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcExchangeAccountType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcExchangeAccountType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomerID(pVal);
}

template <class T> long __fastcall
TCOMIExchangeAccountT<T>::get_CustomerID(void)
{
  long pVal;
  OLECHECK(this->get_CustomerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_CustomerID(long pVal/*[in]*/)
{
  return (*this)->set_CustomerID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_ExchangeID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchangeID(pVal);
}

template <class T> long __fastcall
TCOMIExchangeAccountT<T>::get_ExchangeID(void)
{
  long pVal;
  OLECHECK(this->get_ExchangeID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_ExchangeID(long pVal/*[in]*/)
{
  return (*this)->set_ExchangeID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_Status(Ptssmolib_tlb::TcExchangeAccountStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcExchangeAccountStatus __fastcall
TCOMIExchangeAccountT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcExchangeAccountStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcExchangeAccountStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeAccountT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIExchangeAccountT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::GetPosition(BSTR InstID, long InstIDSource, 
                                      Ptssmolib_tlb::TcPositionDirection Direction, 
                                      Ptssmolib_tlb::IPosition** Position)
{
  return (*this)->GetPosition(InstID, InstIDSource, Direction, Position);
}

template <class T> HRESULT __fastcall
TCOMIExchangeAccountT<T>::GetPositions(long* pStartIndex, long MaxRowCount, 
                                       Ptssmolib_tlb::IPositions** Positions)
{
  return (*this)->GetPositions(pStartIndex, MaxRowCount, Positions);
}

// *********************************************************************//
// DispIntf:  IExchangeAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CBF526B8-6CCF-4D98-B562-C78DF25E9807}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeAccountDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_BrokerAcctID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerAcctID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeAccountDispT<T>::get_BrokerAcctID(void)
{
  long pVal;
  this->get_BrokerAcctID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Number(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Number"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_Number(void)
{
  BSTR pVal;
  this->get_Number((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Number(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Number"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Type(Ptssmolib_tlb::TcExchangeAccountType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcExchangeAccountType __fastcall
IExchangeAccountDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcExchangeAccountType pVal;
  this->get_Type((Ptssmolib_tlb::TcExchangeAccountType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeAccountDispT<T>::get_CustomerID(void)
{
  long pVal;
  this->get_CustomerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_CustomerID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_ExchangeID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchangeID"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeAccountDispT<T>::get_ExchangeID(void)
{
  long pVal;
  this->get_ExchangeID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_ExchangeID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchangeID"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Status(Ptssmolib_tlb::TcExchangeAccountStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcExchangeAccountStatus __fastcall
IExchangeAccountDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcExchangeAccountStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcExchangeAccountStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IExchangeAccountDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::GetPosition(BSTR InstID, long InstIDSource, 
                                      Ptssmolib_tlb::TcPositionDirection Direction, 
                                      Ptssmolib_tlb::IPosition** Position)
{
  _TDispID _dispid(*this, OLETEXT("GetPosition"), DISPID(22));
  TAutoArgs<4> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[4] = (LPDISPATCH*)(Ptssmolib_tlb::IPosition**)Position /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::GetPositions(long* pStartIndex, long MaxRowCount, 
                                       Ptssmolib_tlb::IPositions** Positions)
{
  _TDispID _dispid(*this, OLETEXT("GetPositions"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = MaxRowCount /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH*)(Ptssmolib_tlb::IPositions**)Positions /*[VT_USERDEFINED:2]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeAccountDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExchangeAccountDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExchangeAccountDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExchangeAccountDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExchangeAccountDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeAccountDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIBrokerAccounts
// Interface: IBrokerAccounts
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBrokerAccountsT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Ptssmolib_tlb::IBrokerAccount** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IBrokerAccount* __fastcall
TCOMIBrokerAccountsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IBrokerAccount* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IBrokerAccount**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountsT<T>::get_ItemByID(long ID/*[in]*/, 
                                      Ptssmolib_tlb::IBrokerAccount** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IBrokerAccount* __fastcall
TCOMIBrokerAccountsT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IBrokerAccount* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IBrokerAccount**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountsT<T>::Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  IBrokerAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76ED517D-70F7-4548-860D-E3661E063616}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                  Ptssmolib_tlb::IBrokerAccount** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokerAccount**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokerAccount* __fastcall
IBrokerAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IBrokerAccount* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IBrokerAccount**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_ItemByID(long ID/*[in]*/, 
                                      Ptssmolib_tlb::IBrokerAccount** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokerAccount**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokerAccount* __fastcall
IBrokerAccountsDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IBrokerAccount* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IBrokerAccount**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IBrokerAccount*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IBrokerAccountsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerAccountsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IBrokerAccountsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IBrokerAccountsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IBrokerAccountsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBrokerAccountsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIBrokerAccount
// Interface: IBrokerAccount
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerAccountT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerAccountT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomerID(pVal);
}

template <class T> long __fastcall
TCOMIBrokerAccountT<T>::get_CustomerID(void)
{
  long pVal;
  OLECHECK(this->get_CustomerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::set_CustomerID(long pVal/*[in]*/)
{
  return (*this)->set_CustomerID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_BrokerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BrokerID(pVal);
}

template <class T> long __fastcall
TCOMIBrokerAccountT<T>::get_BrokerID(void)
{
  long pVal;
  OLECHECK(this->get_BrokerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::set_BrokerID(long pVal/*[in]*/)
{
  return (*this)->set_BrokerID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIBrokerAccountT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_IDFromBroker(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_IDFromBroker(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerAccountT<T>::get_IDFromBroker(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_IDFromBroker((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::set_IDFromBroker(BSTR pVal/*[in]*/)
{
  return (*this)->set_IDFromBroker(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerAccountT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountType(pVal);
}

template <class T> Ptssmolib_tlb::TcAccountType __fastcall
TCOMIBrokerAccountT<T>::get_AccountType(void)
{
  Ptssmolib_tlb::TcAccountType pVal;
  OLECHECK(this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/)
{
  return (*this)->set_AccountType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcAccountStatus __fastcall
TCOMIBrokerAccountT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcAccountStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/)
{
  return (*this)->get_MiscFees(pVal);
}

template <class T> Ptssmolib_tlb::IMiscFeesPtr __fastcall
TCOMIBrokerAccountT<T>::get_MiscFees(void)
{
  Ptssmolib_tlb::IMiscFeesPtr pVal;
  OLECHECK(this->get_MiscFees((Ptssmolib_tlb::IMiscFeesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIBrokerAccountT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Qty/*[in]*/, 
                                    double CostPrice/*[in]*/)
{
  return (*this)->AddPosition(InstID, InstIDSource, Direction, Type, Qty, CostPrice);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::AddLogicalAccount(BSTR Name/*[in]*/, 
                                          Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                          BSTR Description/*[in]*/, 
                                          Ptssmolib_tlb::IAccount** ppObject/*[out,retval]*/)
{
  return (*this)->AddLogicalAccount(Name, Status, Description, ppObject);
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
TCOMIBrokerAccountT<T>::AddLogicalAccount(BSTR Name/*[in]*/, 
                                          Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                          BSTR Description/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObject;
  OLECHECK(this->AddLogicalAccount(Name/*[in]*/, Status/*[in]*/, Description/*[in]*/, (Ptssmolib_tlb::IAccount**)&ppObject));
  return ppObject;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  return (*this)->Credit(Currency, Amount);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  return (*this)->Debit(Currency, Amount);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                     Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                     Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Qty/*[in]*/)
{
  return (*this)->DropPosition(InstID, InstIDSource, Direction, Type, Qty);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::DropLogicalAccount(long AccountID/*[in]*/)
{
  return (*this)->DropLogicalAccount(AccountID);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                  Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                  Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/)
{
  return (*this)->GetDetail(IncludeChildAccount, Currency, ppDetail);
}

template <class T> Ptssmolib_tlb::IAccountDetail* __fastcall
TCOMIBrokerAccountT<T>::GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                  Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
{
  Ptssmolib_tlb::IAccountDetail* ppDetail;
  OLECHECK(this->GetDetail(IncludeChildAccount/*[in]*/, Currency/*[in]*/, (Ptssmolib_tlb::IAccountDetail**)&ppDetail));
  return ppDetail;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, BSTR InstID/*[in]*/, 
                                    long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                    Ptssmolib_tlb::IPosition** Position/*[out,retval]*/)
{
  return (*this)->GetPosition(IncludeChildAccount, InstID, InstIDSource, Direction, Position);
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
TCOMIBrokerAccountT<T>::GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, BSTR InstID/*[in]*/, 
                                    long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
{
  Ptssmolib_tlb::IPosition* Position;
  OLECHECK(this->GetPosition(IncludeChildAccount/*[in]*/, InstID/*[in]*/, InstIDSource/*[in]*/, 
                             Direction/*[in]*/, (Ptssmolib_tlb::IPosition**)&Position));
  return Position;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                     Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/)
{
  return (*this)->GetPositions(IncludeChildAccount, pStartIndex, MaxRowCount, Positions);
}

template <class T> Ptssmolib_tlb::IPositions* __fastcall
TCOMIBrokerAccountT<T>::GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IPositions* Positions;
  OLECHECK(this->GetPositions(IncludeChildAccount/*[in]*/, pStartIndex/*[in,out]*/, 
                              MaxRowCount/*[in]*/, (Ptssmolib_tlb::IPositions**)&Positions));
  return Positions;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  return (*this)->SetPassword(OldPassword, NewPassword);
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::ListLogicalAccounts(Ptssmolib_tlb::IAccounts** ppAccounts/*[out,retval]*/)
{
  return (*this)->ListLogicalAccounts(ppAccounts);
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
TCOMIBrokerAccountT<T>::ListLogicalAccounts(void)
{
  Ptssmolib_tlb::IAccounts* ppAccounts;
  OLECHECK(this->ListLogicalAccounts((Ptssmolib_tlb::IAccounts**)&ppAccounts));
  return ppAccounts;
}

template <class T> HRESULT __fastcall
TCOMIBrokerAccountT<T>::Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                 double Amount)
{
  return (*this)->Transfer(ToAcctID, Currency, Amount);
}

// *********************************************************************//
// DispIntf:  IBrokerAccount
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2EFF1224-3127-4C55-9D4E-A8394734A421}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerAccountDispT<T>::get_CustomerID(void)
{
  long pVal;
  this->get_CustomerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_CustomerID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_BrokerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerAccountDispT<T>::get_BrokerID(void)
{
  long pVal;
  this->get_BrokerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_BrokerID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerID"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerAccountDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_IDFromBroker(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDFromBroker"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_IDFromBroker(void)
{
  BSTR pVal;
  this->get_IDFromBroker((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_IDFromBroker(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IDFromBroker"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_AccountType(Ptssmolib_tlb::TcAccountType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcAccountType __fastcall
IBrokerAccountDispT<T>::get_AccountType(void)
{
  Ptssmolib_tlb::TcAccountType pVal;
  this->get_AccountType((Ptssmolib_tlb::TcAccountType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountType"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_Status(Ptssmolib_tlb::TcAccountStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcAccountStatus __fastcall
IBrokerAccountDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcAccountStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcAccountStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MiscFees"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IMiscFees**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IMiscFeesPtr __fastcall
IBrokerAccountDispT<T>::get_MiscFees(void)
{
  Ptssmolib_tlb::IMiscFeesPtr pVal;
  this->get_MiscFees(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IBrokerAccountDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Qty/*[in]*/, 
                                    double CostPrice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPosition"), DISPID(13));
  TAutoArgs<6> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[5] = Qty /*[VT_I4:0]*/;
  _args[6] = CostPrice /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::AddLogicalAccount(BSTR Name/*[in]*/, 
                                          Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                          BSTR Description/*[in]*/, 
                                          Ptssmolib_tlb::IAccount** ppObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLogicalAccount"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Status /*[VT_USERDEFINED:0]*/;
  _args[3] = Description /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccount**)ppObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
IBrokerAccountDispT<T>::AddLogicalAccount(BSTR Name/*[in]*/, 
                                          Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                          BSTR Description/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObject;
  this->AddLogicalAccount(Name, Status, Description, (Ptssmolib_tlb::IAccount**)&ppObject);
  return ppObject;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Credit"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Currency /*[VT_USERDEFINED:0]*/;
  _args[2] = Amount /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, double Amount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debit"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = (int)Currency /*[VT_USERDEFINED:0]*/;
  _args[2] = Amount /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                     Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                     Ptssmolib_tlb::TcPositionType Type/*[in]*/, long Qty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropPosition"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = InstIDSource /*[VT_I4:0]*/;
  _args[3] = (int)Direction /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[5] = Qty /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::DropLogicalAccount(long AccountID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropLogicalAccount"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                  Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                  Ptssmolib_tlb::IAccountDetail** ppDetail/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDetail"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = IncludeChildAccount /*[VT_BOOL:0]*/;
  _args[2] = (int)Currency /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccountDetail**)ppDetail /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccountDetail* __fastcall
IBrokerAccountDispT<T>::GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                  Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/)
{
  Ptssmolib_tlb::IAccountDetail* ppDetail;
  this->GetDetail(IncludeChildAccount, Currency, (Ptssmolib_tlb::IAccountDetail**)&ppDetail);
  return ppDetail;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, BSTR InstID/*[in]*/, 
                                    long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                    Ptssmolib_tlb::IPosition** Position/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPosition"), DISPID(22));
  TAutoArgs<4> _args;
  _args[1] = IncludeChildAccount /*[VT_BOOL:0]*/;
  _args[2] = InstID /*[VT_BSTR:0]*/;
  _args[3] = InstIDSource /*[VT_I4:0]*/;
  _args[4] = (int)Direction /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPosition**)Position /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPosition* __fastcall
IBrokerAccountDispT<T>::GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, BSTR InstID/*[in]*/, 
                                    long InstIDSource/*[in]*/, 
                                    Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/)
{
  Ptssmolib_tlb::IPosition* Position;
  this->GetPosition(IncludeChildAccount, InstID, InstIDSource, Direction, (Ptssmolib_tlb::IPosition**)&Position);
  return Position;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                     Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPositions"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = IncludeChildAccount /*[VT_BOOL:0]*/;
  _args[2] = pStartIndex /*[VT_I4:1]*/;
  _args[3] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPositions**)Positions /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPositions* __fastcall
IBrokerAccountDispT<T>::GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IPositions* Positions;
  this->GetPositions(IncludeChildAccount, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IPositions**)&Positions);
  return Positions;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPassword"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = OldPassword /*[VT_BSTR:0]*/;
  _args[2] = NewPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::ListLogicalAccounts(Ptssmolib_tlb::IAccounts** ppAccounts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListLogicalAccounts"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccounts**)ppAccounts /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
IBrokerAccountDispT<T>::ListLogicalAccounts(void)
{
  Ptssmolib_tlb::IAccounts* ppAccounts;
  this->ListLogicalAccounts((Ptssmolib_tlb::IAccounts**)&ppAccounts);
  return ppAccounts;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                 double Amount)
{
  _TDispID _dispid(*this, OLETEXT("Transfer"), DISPID(27));
  TAutoArgs<3> _args;
  _args[1] = ToAcctID /*[VT_I4:0]*/;
  _args[2] = (int)Currency /*[VT_USERDEFINED:0]*/;
  _args[3] = Amount /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerAccountDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IBrokerAccountDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IBrokerAccountDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IBrokerAccountDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBrokerAccountDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerAccountDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMiscFees
// Interface: IMiscFees
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMiscFeesT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IMiscFee** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IMiscFee* __fastcall
TCOMIMiscFeesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IMiscFee* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IMiscFee**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeesT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IMiscFee** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IMiscFee* __fastcall
TCOMIMiscFeesT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IMiscFee* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IMiscFee**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeesT<T>::Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  IMiscFees
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {82D3574A-FAB0-4037-8DF7-C9357131839C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IMiscFee** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IMiscFee**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IMiscFee* __fastcall
IMiscFeesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IMiscFee* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IMiscFee**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IMiscFee** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IMiscFee**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IMiscFee* __fastcall
IMiscFeesDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IMiscFee* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IMiscFee**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IMiscFee*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IMiscFeesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMiscFeesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IMiscFeesDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IMiscFeesDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IMiscFeesDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMiscFeesDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeesDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMiscFee
// Interface: IMiscFee
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIMiscFeeT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_OwnerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_OwnerID(pVal);
}

template <class T> long __fastcall
TCOMIMiscFeeT<T>::get_OwnerID(void)
{
  long pVal;
  OLECHECK(this->get_OwnerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_Type(Ptssmolib_tlb::TcMiscFeeType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcMiscFeeType __fastcall
TCOMIMiscFeeT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcMiscFeeType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcMiscFeeType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_BusinessType(Ptssmolib_tlb::TcBusinessType* pVal/*[out,retval]*/)
{
  return (*this)->get_BusinessType(pVal);
}

template <class T> Ptssmolib_tlb::TcBusinessType __fastcall
TCOMIMiscFeeT<T>::get_BusinessType(void)
{
  Ptssmolib_tlb::TcBusinessType pVal;
  OLECHECK(this->get_BusinessType((Ptssmolib_tlb::TcBusinessType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/)
{
  return (*this)->set_BusinessType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/)
{
  return (*this)->get_InstrumentSubType(pVal);
}

template <class T> Ptssmolib_tlb::TcInstrumentSubType __fastcall
TCOMIMiscFeeT<T>::get_InstrumentSubType(void)
{
  Ptssmolib_tlb::TcInstrumentSubType pVal;
  OLECHECK(this->get_InstrumentSubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/)
{
  return (*this)->set_InstrumentSubType(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_AmountRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_AmountRatio(pVal);
}

template <class T> double __fastcall
TCOMIMiscFeeT<T>::get_AmountRatio(void)
{
  double pVal;
  OLECHECK(this->get_AmountRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_AmountRatio(double pVal/*[in]*/)
{
  return (*this)->set_AmountRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_ParRatio(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ParRatio(pVal);
}

template <class T> double __fastcall
TCOMIMiscFeeT<T>::get_ParRatio(void)
{
  double pVal;
  OLECHECK(this->get_ParRatio((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_ParRatio(double pVal/*[in]*/)
{
  return (*this)->set_ParRatio(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_FixedValue(double* pVal/*[out,retval]*/)
{
  return (*this)->get_FixedValue(pVal);
}

template <class T> double __fastcall
TCOMIMiscFeeT<T>::get_FixedValue(void)
{
  double pVal;
  OLECHECK(this->get_FixedValue((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_FixedValue(double pVal/*[in]*/)
{
  return (*this)->set_FixedValue(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIMiscFeeT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMiscFeeT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

// *********************************************************************//
// DispIntf:  IMiscFee
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6778946F-1874-4747-A246-DE3DFA9826E5}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMiscFeeDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_OwnerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OwnerID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMiscFeeDispT<T>::get_OwnerID(void)
{
  long pVal;
  this->get_OwnerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_Type(Ptssmolib_tlb::TcMiscFeeType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcMiscFeeType __fastcall
IMiscFeeDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcMiscFeeType pVal;
  this->get_Type((Ptssmolib_tlb::TcMiscFeeType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_BusinessType(Ptssmolib_tlb::TcBusinessType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BusinessType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcBusinessType __fastcall
IMiscFeeDispT<T>::get_BusinessType(void)
{
  Ptssmolib_tlb::TcBusinessType pVal;
  this->get_BusinessType((Ptssmolib_tlb::TcBusinessType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BusinessType"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstrumentSubType"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcInstrumentSubType __fastcall
IMiscFeeDispT<T>::get_InstrumentSubType(void)
{
  Ptssmolib_tlb::TcInstrumentSubType pVal;
  this->get_InstrumentSubType((Ptssmolib_tlb::TcInstrumentSubType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstrumentSubType"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_AmountRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AmountRatio"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMiscFeeDispT<T>::get_AmountRatio(void)
{
  double pVal;
  this->get_AmountRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_AmountRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AmountRatio"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_ParRatio(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParRatio"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMiscFeeDispT<T>::get_ParRatio(void)
{
  double pVal;
  this->get_ParRatio((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_ParRatio(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParRatio"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_FixedValue(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedValue"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMiscFeeDispT<T>::get_FixedValue(void)
{
  double pVal;
  this->get_FixedValue((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_FixedValue(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixedValue"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMiscFeeDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMiscFeeDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMiscFeeDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IMiscFeeDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IMiscFeeDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IMiscFeeDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMiscFeeDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IMiscFeeDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIAccounts
// Interface: IAccounts
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAccountsT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
TCOMIAccountsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IAccount**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIAccountsT<T>::Find(long AccountID/*[in]*/, Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/)
{
  return (*this)->Find(AccountID, ppObjVal);
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
TCOMIAccountsT<T>::Find(long AccountID/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObjVal;
  OLECHECK(this->Find(AccountID/*[in]*/, (Ptssmolib_tlb::IAccount**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IAccounts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E132D92-431E-4D45-8FEA-3B51357C8E0D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccount**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
IAccountsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IAccount**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::Find(long AccountID/*[in]*/, Ptssmolib_tlb::IAccount** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccount**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccount* __fastcall
IAccountsDispT<T>::Find(long AccountID/*[in]*/)
{
  Ptssmolib_tlb::IAccount* ppObjVal;
  this->Find(AccountID, (Ptssmolib_tlb::IAccount**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IAccountsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccountsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IAccountsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IAccountsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IAccountsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccountsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IAccountsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMICustomerDetail
// Interface: ICustomerDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_Department(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Department(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_Department(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Department((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_Department(BSTR pVal/*[in]*/)
{
  return (*this)->set_Department(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_Office(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Office(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_Office(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Office((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_Office(BSTR pVal/*[in]*/)
{
  return (*this)->set_Office(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_Profession(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Profession(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_Profession(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Profession((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_Profession(BSTR pVal/*[in]*/)
{
  return (*this)->set_Profession(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_ManagerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ManagerName(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_ManagerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ManagerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_ManagerName(BSTR pVal/*[in]*/)
{
  return (*this)->set_ManagerName(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_AssistantName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AssistantName(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_AssistantName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AssistantName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_AssistantName(BSTR pVal/*[in]*/)
{
  return (*this)->set_AssistantName(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_NickName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_NickName(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_NickName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_NickName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_NickName(BSTR pVal/*[in]*/)
{
  return (*this)->set_NickName(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_GenderType(Ptssmolib_tlb::TcGenderType* pVal/*[out,retval]*/)
{
  return (*this)->get_GenderType(pVal);
}

template <class T> Ptssmolib_tlb::TcGenderType __fastcall
TCOMICustomerDetailT<T>::get_GenderType(void)
{
  Ptssmolib_tlb::TcGenderType pVal;
  OLECHECK(this->get_GenderType((Ptssmolib_tlb::TcGenderType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/)
{
  return (*this)->set_GenderType(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_Birthday(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Birthday(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_Birthday(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Birthday((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_Birthday(BSTR pVal/*[in]*/)
{
  return (*this)->set_Birthday(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_EnglishTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_EnglishTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_EnglishTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_EnglishTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_EnglishTitle(BSTR pVal/*[in]*/)
{
  return (*this)->set_EnglishTitle(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_ChineseTitle(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ChineseTitle(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_ChineseTitle(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ChineseTitle((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_ChineseTitle(BSTR pVal/*[in]*/)
{
  return (*this)->set_ChineseTitle(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType* pVal/*[out,retval]*/)
{
  return (*this)->get_IdentifiedCardType(pVal);
}

template <class T> Ptssmolib_tlb::TcIdentifiedCardType __fastcall
TCOMICustomerDetailT<T>::get_IdentifiedCardType(void)
{
  Ptssmolib_tlb::TcIdentifiedCardType pVal;
  OLECHECK(this->get_IdentifiedCardType((Ptssmolib_tlb::TcIdentifiedCardType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/)
{
  return (*this)->set_IdentifiedCardType(pVal);
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::get_IdentifiedCard(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_IdentifiedCard(pVal);
}

template <class T> BSTR __fastcall
TCOMICustomerDetailT<T>::get_IdentifiedCard(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_IdentifiedCard((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMICustomerDetailT<T>::set_IdentifiedCard(BSTR pVal/*[in]*/)
{
  return (*this)->set_IdentifiedCard(pVal);
}

// *********************************************************************//
// DispIntf:  ICustomerDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2214C787-5A58-4C98-B298-019191BA0EC9}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_Department(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Department"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_Department(void)
{
  BSTR pVal;
  this->get_Department((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_Department(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Department"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_Office(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Office"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_Office(void)
{
  BSTR pVal;
  this->get_Office((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_Office(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Office"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_Profession(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profession"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_Profession(void)
{
  BSTR pVal;
  this->get_Profession((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_Profession(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Profession"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_ManagerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManagerName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_ManagerName(void)
{
  BSTR pVal;
  this->get_ManagerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_ManagerName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ManagerName"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_AssistantName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistantName"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_AssistantName(void)
{
  BSTR pVal;
  this->get_AssistantName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_AssistantName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistantName"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_NickName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NickName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_NickName(void)
{
  BSTR pVal;
  this->get_NickName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_NickName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NickName"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_GenderType(Ptssmolib_tlb::TcGenderType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GenderType"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcGenderType __fastcall
ICustomerDetailDispT<T>::get_GenderType(void)
{
  Ptssmolib_tlb::TcGenderType pVal;
  this->get_GenderType((Ptssmolib_tlb::TcGenderType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GenderType"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_Birthday(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Birthday"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_Birthday(void)
{
  BSTR pVal;
  this->get_Birthday((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_Birthday(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Birthday"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_EnglishTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnglishTitle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_EnglishTitle(void)
{
  BSTR pVal;
  this->get_EnglishTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_EnglishTitle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnglishTitle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_ChineseTitle(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChineseTitle"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_ChineseTitle(void)
{
  BSTR pVal;
  this->get_ChineseTitle((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_ChineseTitle(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChineseTitle"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdentifiedCardType"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcIdentifiedCardType __fastcall
ICustomerDetailDispT<T>::get_IdentifiedCardType(void)
{
  Ptssmolib_tlb::TcIdentifiedCardType pVal;
  this->get_IdentifiedCardType((Ptssmolib_tlb::TcIdentifiedCardType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdentifiedCardType"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::get_IdentifiedCard(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdentifiedCard"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICustomerDetailDispT<T>::get_IdentifiedCard(void)
{
  BSTR pVal;
  this->get_IdentifiedCard((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomerDetailDispT<T>::set_IdentifiedCard(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IdentifiedCard"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPostalAddress
// Interface: IPostalAddress
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Country(pVal);
}

template <class T> BSTR __fastcall
TCOMIPostalAddressT<T>::get_Country(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Country((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_Country(BSTR pVal/*[in]*/)
{
  return (*this)->set_Country(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_City(pVal);
}

template <class T> BSTR __fastcall
TCOMIPostalAddressT<T>::get_City(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_City((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_City(BSTR pVal/*[in]*/)
{
  return (*this)->set_City(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Province(pVal);
}

template <class T> BSTR __fastcall
TCOMIPostalAddressT<T>::get_Province(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Province((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_Province(BSTR pVal/*[in]*/)
{
  return (*this)->set_Province(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_Street(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Street(pVal);
}

template <class T> BSTR __fastcall
TCOMIPostalAddressT<T>::get_Street(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Street((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_Street(BSTR pVal/*[in]*/)
{
  return (*this)->set_Street(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_Type(Ptssmolib_tlb::TcAddressType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcAddressType __fastcall
TCOMIPostalAddressT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcAddressType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcAddressType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::get_ZipCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ZipCode(pVal);
}

template <class T> BSTR __fastcall
TCOMIPostalAddressT<T>::get_ZipCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ZipCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPostalAddressT<T>::set_ZipCode(BSTR pVal/*[in]*/)
{
  return (*this)->set_ZipCode(pVal);
}

// *********************************************************************//
// DispIntf:  IPostalAddress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EBC81E1B-A963-44C2-B710-E9510524A0AA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_Country(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Country"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPostalAddressDispT<T>::get_Country(void)
{
  BSTR pVal;
  this->get_Country((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_Country(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Country"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_City(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("City"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPostalAddressDispT<T>::get_City(void)
{
  BSTR pVal;
  this->get_City((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_City(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("City"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_Province(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Province"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPostalAddressDispT<T>::get_Province(void)
{
  BSTR pVal;
  this->get_Province((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_Province(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Province"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_Street(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Street"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPostalAddressDispT<T>::get_Street(void)
{
  BSTR pVal;
  this->get_Street((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_Street(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Street"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_Type(Ptssmolib_tlb::TcAddressType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcAddressType __fastcall
IPostalAddressDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcAddressType pVal;
  this->get_Type((Ptssmolib_tlb::TcAddressType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::get_ZipCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZipCode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPostalAddressDispT<T>::get_ZipCode(void)
{
  BSTR pVal;
  this->get_ZipCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPostalAddressDispT<T>::set_ZipCode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZipCode"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMICustomers
// Interface: ICustomers
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICustomersT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::ICustomer** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::ICustomer* __fastcall
TCOMICustomersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::ICustomer* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::ICustomer**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMICustomersT<T>::get_ItemByID(long ID/*[in]*/, 
                                 Ptssmolib_tlb::ICustomer** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::ICustomer* __fastcall
TCOMICustomersT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::ICustomer* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::ICustomer**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMICustomersT<T>::Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  ICustomers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {319F2830-9A48-4B6C-BB07-C83BEF91A06F}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::ICustomer** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomer**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomer* __fastcall
ICustomersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::ICustomer* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::ICustomer**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_ItemByID(long ID/*[in]*/, 
                                 Ptssmolib_tlb::ICustomer** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomer**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomer* __fastcall
ICustomersDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::ICustomer* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::ICustomer**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::ICustomer*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ICustomersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICustomersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
ICustomersDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
ICustomersDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
ICustomersDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ICustomersDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ICustomersDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMITask
// Interface: ITask
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMITaskT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMITaskT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TaskID(pVal);
}

template <class T> long __fastcall
TCOMITaskT<T>::get_TaskID(void)
{
  long pVal;
  OLECHECK(this->get_TaskID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_Type(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> BSTR __fastcall
TCOMITaskT<T>::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Type((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::set_Type(BSTR pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_Status(Ptssmolib_tlb::TcTaskStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcTaskStatus __fastcall
TCOMITaskT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcTaskStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcTaskStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMITaskT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/)
{
  return (*this)->Open(OpenMode);
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                 long RowCount/*[in]*/, 
                                 Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/)
{
  return (*this)->GetCompleteHedges(EndDate, pStartIndex, RowCount, ppHedges);
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
TCOMITaskT<T>::GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                 long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* ppHedges;
  OLECHECK(this->GetCompleteHedges(EndDate/*[in]*/, pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IHedges**)&ppHedges));
  return ppHedges;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::GetWorkingHedges(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/)
{
  return (*this)->GetWorkingHedges(pStartIndex, MaxRowCount, ppHedges);
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
TCOMITaskT<T>::GetWorkingHedges(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* ppHedges;
  OLECHECK(this->GetWorkingHedges(pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IHedges**)&ppHedges));
  return ppHedges;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::NewHedge(BSTR HedgeName/*[in]*/, Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/)
{
  return (*this)->NewHedge(HedgeName, ppHedge);
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
TCOMITaskT<T>::NewHedge(BSTR HedgeName/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppHedge;
  OLECHECK(this->NewHedge(HedgeName/*[in]*/, (Ptssmolib_tlb::IHedge**)&ppHedge));
  return ppHedge;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::AssignAccount(long AccountID/*[in]*/)
{
  return (*this)->AssignAccount(AccountID);
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::DetachAccount(long AccountID/*[in]*/)
{
  return (*this)->DetachAccount(AccountID);
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/)
{
  return (*this)->GetAccounts(pVal);
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
TCOMITaskT<T>::GetAccounts(void)
{
  Ptssmolib_tlb::IAccounts* pVal;
  OLECHECK(this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITaskT<T>::GetHedge(long HedgeID/*[in]*/, Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/)
{
  return (*this)->GetHedge(HedgeID, ppHedge);
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
TCOMITaskT<T>::GetHedge(long HedgeID/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppHedge;
  OLECHECK(this->GetHedge(HedgeID/*[in]*/, (Ptssmolib_tlb::IHedge**)&ppHedge));
  return ppHedge;
}

// *********************************************************************//
// DispIntf:  ITask
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {730A7110-5812-4CFC-899E-72A875B78552}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITaskDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITaskDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITaskDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaskID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ITaskDispT<T>::get_TaskID(void)
{
  long pVal;
  this->get_TaskID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_Type(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITaskDispT<T>::get_Type(void)
{
  BSTR pVal;
  this->get_Type((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::set_Type(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_Status(Ptssmolib_tlb::TcTaskStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcTaskStatus __fastcall
ITaskDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcTaskStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcTaskStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
ITaskDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)OpenMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                 long RowCount/*[in]*/, 
                                 Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCompleteHedges"), DISPID(12));
  TAutoArgs<3> _args;
  _args[1] = EndDate /*[VT_BSTR:0]*/;
  _args[2] = pStartIndex /*[VT_I4:1]*/;
  _args[3] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedges**)ppHedges /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
ITaskDispT<T>::GetCompleteHedges(BSTR EndDate/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                 long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* ppHedges;
  this->GetCompleteHedges(EndDate, pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&ppHedges);
  return ppHedges;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::GetWorkingHedges(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWorkingHedges"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedges**)ppHedges /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
ITaskDispT<T>::GetWorkingHedges(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* ppHedges;
  this->GetWorkingHedges(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IHedges**)&ppHedges);
  return ppHedges;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::NewHedge(BSTR HedgeName/*[in]*/, Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewHedge"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = HedgeName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedge**)ppHedge /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
ITaskDispT<T>::NewHedge(BSTR HedgeName/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppHedge;
  this->NewHedge(HedgeName, (Ptssmolib_tlb::IHedge**)&ppHedge);
  return ppHedge;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::AssignAccount(long AccountID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssignAccount"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::DetachAccount(long AccountID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DetachAccount"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAccounts"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccounts**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
ITaskDispT<T>::GetAccounts(void)
{
  Ptssmolib_tlb::IAccounts* pVal;
  this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::GetHedge(long HedgeID/*[in]*/, Ptssmolib_tlb::IHedge** ppHedge/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetHedge"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = HedgeID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedge**)ppHedge /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
ITaskDispT<T>::GetHedge(long HedgeID/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppHedge;
  this->GetHedge(HedgeID, (Ptssmolib_tlb::IHedge**)&ppHedge);
  return ppHedge;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITaskDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITaskDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
ITaskDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
ITaskDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
ITaskDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITaskDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITaskDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIHedges
// Interface: IHedges
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIHedgesT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIHedgesT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIHedgesT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
TCOMIHedgesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IHedge**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgesT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIHedgesT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgesT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjVal);
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
TCOMIHedgesT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppObjVal;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IHedge**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IHedges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C70EAC5-AE26-4BBD-95F2-B516AF28F9BC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IHedgesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IHedgesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IHedgesDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedge**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
IHedgesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IHedge**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IHedgesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHedgesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgesDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IHedge** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedge**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedge* __fastcall
IHedgesDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IHedge* ppObjVal;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IHedge**)&ppObjVal);
  return ppObjVal;
}

// *********************************************************************//
// SmartIntf: TCOMIHedge
// Interface: IHedge
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TaskID(pVal);
}

template <class T> long __fastcall
TCOMIHedgeT<T>::get_TaskID(void)
{
  long pVal;
  OLECHECK(this->get_TaskID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_HedgeID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_HedgeID(pVal);
}

template <class T> long __fastcall
TCOMIHedgeT<T>::get_HedgeID(void)
{
  long pVal;
  OLECHECK(this->get_HedgeID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMIHedgeT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_Name(BSTR pVal/*[in]*/)
{
  return (*this)->set_Name(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_ExpectProfit(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ExpectProfit(pVal);
}

template <class T> double __fastcall
TCOMIHedgeT<T>::get_ExpectProfit(void)
{
  double pVal;
  OLECHECK(this->get_ExpectProfit((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_ExpectProfit(double pVal/*[in]*/)
{
  return (*this)->set_ExpectProfit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_RealProfit(double* pVal/*[out,retval]*/)
{
  return (*this)->get_RealProfit(pVal);
}

template <class T> double __fastcall
TCOMIHedgeT<T>::get_RealProfit(void)
{
  double pVal;
  OLECHECK(this->get_RealProfit((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_RealProfit(double pVal/*[in]*/)
{
  return (*this)->set_RealProfit(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_Cost(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Cost(pVal);
}

template <class T> double __fastcall
TCOMIHedgeT<T>::get_Cost(void)
{
  double pVal;
  OLECHECK(this->get_Cost((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_Cost(double pVal/*[in]*/)
{
  return (*this)->set_Cost(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIHedgeT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_CreateTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIHedgeT<T>::get_CreateTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_EndDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_EndDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIHedgeT<T>::get_EndDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_EndDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_EndDate(BSTR pVal/*[in]*/)
{
  return (*this)->set_EndDate(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_EndTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_EndTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIHedgeT<T>::get_EndTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_EndTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_EndTime(BSTR pVal/*[in]*/)
{
  return (*this)->set_EndTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::get_Status(Ptssmolib_tlb::TcHedgeStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcHedgeStatus __fastcall
TCOMIHedgeT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcHedgeStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcHedgeStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::Alter(void)
{
  return (*this)->Alter();
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::LoadConfigure(VARIANT* pConfigure/*[out,retval]*/)
{
  return (*this)->LoadConfigure(pConfigure);
}

template <class T> VARIANT __fastcall
TCOMIHedgeT<T>::LoadConfigure(void)
{
  VARIANT pConfigure;
  OLECHECK(this->LoadConfigure((VARIANT*)&pConfigure));
  return pConfigure;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::SaveConfigure(VARIANT Configure/*[in]*/)
{
  return (*this)->SaveConfigure(Configure);
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::NewOrders(long AccountID/*[in]*/, Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  return (*this)->NewOrders(AccountID, pVal);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIHedgeT<T>::NewOrders(long AccountID/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  OLECHECK(this->NewOrders(AccountID/*[in]*/, (Ptssmolib_tlb::IOrders**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                 Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  return (*this)->GetWorkingOrders(pStartIndex, MaxRowCount, pVal);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIHedgeT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  OLECHECK(this->GetWorkingOrders(pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IOrders**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, long* pStartIndex/*[in,out]*/, 
                          long MaxRowCount/*[in]*/, Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  return (*this)->GetOrders(FindInHistory, pStartIndex, MaxRowCount, pVal);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIHedgeT<T>::GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, long* pStartIndex/*[in,out]*/, 
                          long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  OLECHECK(this->GetOrders(FindInHistory/*[in]*/, pStartIndex/*[in,out]*/, MaxRowCount/*[in]*/, (Ptssmolib_tlb::IOrders**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIHedgeT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

// *********************************************************************//
// DispIntf:  IHedge
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5DCB97F4-E99F-4629-97EF-371566CC4C45}
// *********************************************************************//
template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_TaskID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TaskID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHedgeDispT<T>::get_TaskID(void)
{
  long pVal;
  this->get_TaskID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_HedgeID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HedgeID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IHedgeDispT<T>::get_HedgeID(void)
{
  long pVal;
  this->get_HedgeID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHedgeDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_Name(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_ExpectProfit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpectProfit"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IHedgeDispT<T>::get_ExpectProfit(void)
{
  double pVal;
  this->get_ExpectProfit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_ExpectProfit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpectProfit"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_RealProfit(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RealProfit"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IHedgeDispT<T>::get_RealProfit(void)
{
  double pVal;
  this->get_RealProfit((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_RealProfit(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RealProfit"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_Cost(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cost"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IHedgeDispT<T>::get_Cost(void)
{
  double pVal;
  this->get_Cost((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_Cost(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cost"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHedgeDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_CreateTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateTime"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHedgeDispT<T>::get_CreateTime(void)
{
  BSTR pVal;
  this->get_CreateTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_EndDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHedgeDispT<T>::get_EndDate(void)
{
  BSTR pVal;
  this->get_EndDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_EndDate(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndDate"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_EndTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndTime"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IHedgeDispT<T>::get_EndTime(void)
{
  BSTR pVal;
  this->get_EndTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_EndTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndTime"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::get_Status(Ptssmolib_tlb::TcHedgeStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcHedgeStatus __fastcall
IHedgeDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcHedgeStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcHedgeStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::Alter()
{
  _TDispID _dispid(*this, OLETEXT("Alter"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::LoadConfigure(VARIANT* pConfigure/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadConfigure"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConfigure /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IHedgeDispT<T>::LoadConfigure(void)
{
  VARIANT pConfigure;
  this->LoadConfigure((VARIANT*)&pConfigure);
  return pConfigure;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::SaveConfigure(VARIANT Configure/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveConfigure"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Configure /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::NewOrders(long AccountID/*[in]*/, Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewOrders"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IHedgeDispT<T>::NewOrders(long AccountID/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  this->NewOrders(AccountID, (Ptssmolib_tlb::IOrders**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/, 
                                 Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWorkingOrders"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IHedgeDispT<T>::GetWorkingOrders(long* pStartIndex/*[in,out]*/, long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  this->GetWorkingOrders(pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, long* pStartIndex/*[in,out]*/, 
                          long MaxRowCount/*[in]*/, Ptssmolib_tlb::IOrders** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOrders"), DISPID(16));
  TAutoArgs<3> _args;
  _args[1] = FindInHistory /*[VT_BOOL:0]*/;
  _args[2] = pStartIndex /*[VT_I4:1]*/;
  _args[3] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IHedgeDispT<T>::GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, long* pStartIndex/*[in,out]*/, 
                          long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* pVal;
  this->GetOrders(FindInHistory, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IOrders**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IHedgeDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(17));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMITasks
// Interface: ITasks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITasksT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
TCOMITasksT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::ITask**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMITasksT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::ITask** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
TCOMITasksT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::ITask**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMITasksT<T>::Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/, 
                    Ptssmolib_tlb::ITask** ppObject/*[out,retval]*/)
{
  return (*this)->Add(TaskName, TaskType, ppObject);
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
TCOMITasksT<T>::Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObject;
  OLECHECK(this->Add(TaskName/*[in]*/, TaskType/*[in]*/, (Ptssmolib_tlb::ITask**)&ppObject));
  return ppObject;
}

template <class T> HRESULT __fastcall
TCOMITasksT<T>::Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/)
{
  return (*this)->Add2(pObject);
}

template <class T> HRESULT __fastcall
TCOMITasksT<T>::Find(long TaskID/*[in]*/, Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/)
{
  return (*this)->Find(TaskID, ppObjVal);
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
TCOMITasksT<T>::Find(long TaskID/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjVal;
  OLECHECK(this->Find(TaskID/*[in]*/, (Ptssmolib_tlb::ITask**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  ITasks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64856AF0-84F6-42D4-A2F8-4E05B9B545CE}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITasksDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITask**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
ITasksDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::ITask**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::ITask** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITask**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
ITasksDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::ITask**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/, 
                    Ptssmolib_tlb::ITask** ppObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = TaskName /*[VT_BSTR:0]*/;
  _args[2] = TaskType /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITask**)ppObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
ITasksDispT<T>::Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObject;
  this->Add(TaskName, TaskType, (Ptssmolib_tlb::ITask**)&ppObject);
  return ppObject;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add2"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::ITask*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::Find(long TaskID/*[in]*/, Ptssmolib_tlb::ITask** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = TaskID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITask**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITask* __fastcall
ITasksDispT<T>::Find(long TaskID/*[in]*/)
{
  Ptssmolib_tlb::ITask* ppObjVal;
  this->Find(TaskID, (Ptssmolib_tlb::ITask**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ITasksDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ITasksDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
ITasksDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
ITasksDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
ITasksDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITasksDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
ITasksDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMITradeCoreSvc
// Interface: ITradeCoreSvc
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  return (*this)->get_Customers(pVal);
}

template <class T> Ptssmolib_tlb::ICustomersPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Customers(void)
{
  Ptssmolib_tlb::ICustomersPtr pVal;
  OLECHECK(this->get_Customers((Ptssmolib_tlb::ICustomersPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  return (*this)->get_EventTopics(pVal);
}

template <class T> Ptssmolib_tlb::IEventTopicsPtr __fastcall
TCOMITradeCoreSvcT<T>::get_EventTopics(void)
{
  Ptssmolib_tlb::IEventTopicsPtr pVal;
  OLECHECK(this->get_EventTopics((Ptssmolib_tlb::IEventTopicsPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  return (*this)->get_Tasks(pVal);
}

template <class T> Ptssmolib_tlb::ITasksPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Tasks(void)
{
  Ptssmolib_tlb::ITasksPtr pVal;
  OLECHECK(this->get_Tasks((Ptssmolib_tlb::ITasksPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  return (*this)->get_Exchanges(pVal);
}

template <class T> Ptssmolib_tlb::IExchangesPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Exchanges(void)
{
  Ptssmolib_tlb::IExchangesPtr pVal;
  OLECHECK(this->get_Exchanges((Ptssmolib_tlb::IExchangesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  return (*this)->get_Charts(pVal);
}

template <class T> Ptssmolib_tlb::IChartsPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Charts(void)
{
  Ptssmolib_tlb::IChartsPtr pVal;
  OLECHECK(this->get_Charts((Ptssmolib_tlb::IChartsPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  return (*this)->get_Roles(pVal);
}

template <class T> Ptssmolib_tlb::IRolesPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Roles(void)
{
  Ptssmolib_tlb::IRolesPtr pVal;
  OLECHECK(this->get_Roles((Ptssmolib_tlb::IRolesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  return (*this)->get_Users(pVal);
}

template <class T> Ptssmolib_tlb::IUsersPtr __fastcall
TCOMITradeCoreSvcT<T>::get_Users(void)
{
  Ptssmolib_tlb::IUsersPtr pVal;
  OLECHECK(this->get_Users((Ptssmolib_tlb::IUsersPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  return (*this)->ChangePassword(OldPassword, NewPassword);
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                    BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                    long RowCount/*[in]*/, 
                                    Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  return (*this)->QueryObjects(Type, Conditions, pStartIndex, RowCount, ppObjects);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMITradeCoreSvcT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                    BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                    long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  OLECHECK(this->QueryObjects(Type/*[in]*/, Conditions/*[in]*/, pStartIndex/*[in,out]*/, 
                              RowCount/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppObjects));
  return ppObjects;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::CommitOrders(long AccountID/*[in]*/, 
                                    Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                    long* pErrorIndex/*[out,retval]*/)
{
  return (*this)->CommitOrders(AccountID, Mode, pOrders, pErrorIndex);
}

template <class T> long __fastcall
TCOMITradeCoreSvcT<T>::CommitOrders(long AccountID/*[in]*/, 
                                    Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
{
  long pErrorIndex;
  OLECHECK(this->CommitOrders(AccountID/*[in]*/, Mode/*[in]*/, pOrders/*[in]*/, (long*)&pErrorIndex));
  return pErrorIndex;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetOnlineUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMITradeCoreSvcT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetAllUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMITradeCoreSvcT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  return (*this)->AddProject(p);
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/)
{
  return (*this)->SetSession(Session);
}

template <class T> HRESULT __fastcall
TCOMITradeCoreSvcT<T>::GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/)
{
  return (*this)->GetSession(ppSession);
}

template <class T> Ptssmolib_tlb::IPTSSession* __fastcall
TCOMITradeCoreSvcT<T>::GetSession(void)
{
  Ptssmolib_tlb::IPTSSession* ppSession;
  OLECHECK(this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession));
  return ppSession;
}

// *********************************************************************//
// DispIntf:  ITradeCoreSvc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31E87ABB-7FA1-41B9-B53E-B0A76C0A3028}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Customers"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomers**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomersPtr __fastcall
ITradeCoreSvcDispT<T>::get_Customers(void)
{
  Ptssmolib_tlb::ICustomersPtr pVal;
  this->get_Customers(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventTopics"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventTopics**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventTopicsPtr __fastcall
ITradeCoreSvcDispT<T>::get_EventTopics(void)
{
  Ptssmolib_tlb::IEventTopicsPtr pVal;
  this->get_EventTopics(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tasks"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITasks**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITasksPtr __fastcall
ITradeCoreSvcDispT<T>::get_Tasks(void)
{
  Ptssmolib_tlb::ITasksPtr pVal;
  this->get_Tasks(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Exchanges"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchanges**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchangesPtr __fastcall
ITradeCoreSvcDispT<T>::get_Exchanges(void)
{
  Ptssmolib_tlb::IExchangesPtr pVal;
  this->get_Exchanges(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Charts"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICharts**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IChartsPtr __fastcall
ITradeCoreSvcDispT<T>::get_Charts(void)
{
  Ptssmolib_tlb::IChartsPtr pVal;
  this->get_Charts(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Roles"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IRoles**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IRolesPtr __fastcall
ITradeCoreSvcDispT<T>::get_Roles(void)
{
  Ptssmolib_tlb::IRolesPtr pVal;
  this->get_Roles(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Users"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IUsers**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IUsersPtr __fastcall
ITradeCoreSvcDispT<T>::get_Users(void)
{
  Ptssmolib_tlb::IUsersPtr pVal;
  this->get_Users(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangePassword"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = OldPassword /*[VT_BSTR:0]*/;
  _args[2] = NewPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                    BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                    long RowCount/*[in]*/, 
                                    Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryObjects"), DISPID(26));
  TAutoArgs<4> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Conditions /*[VT_BSTR:0]*/;
  _args[3] = pStartIndex /*[VT_I4:1]*/;
  _args[4] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjects /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
ITradeCoreSvcDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                    BSTR Conditions/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                    long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects);
  return ppObjects;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::CommitOrders(long AccountID/*[in]*/, 
                                    Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                                    long* pErrorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommitOrders"), DISPID(28));
  TAutoArgs<3> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  _args[2] = (int)Mode /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Ptssmolib_tlb::IOrders*)pOrders /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pErrorIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ITradeCoreSvcDispT<T>::CommitOrders(long AccountID/*[in]*/, 
                                    Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
{
  long pErrorIndex;
  this->CommitOrders(AccountID, Mode, pOrders, (long*)&pErrorIndex);
  return pErrorIndex;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOnlineUserNames"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
ITradeCoreSvcDispT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllUserNames"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
ITradeCoreSvcDispT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddProject"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IProject*)p /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSession"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IPTSSession*)Session /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITradeCoreSvcDispT<T>::GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSession"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPTSSession**)ppSession /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPTSSession* __fastcall
ITradeCoreSvcDispT<T>::GetSession(void)
{
  Ptssmolib_tlb::IPTSSession* ppSession;
  this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession);
  return ppSession;
}

// *********************************************************************//
// DispIntf:  ITradeCoreSvc2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AC2D6E0E-7F89-4CD3-8A9B-3CEEEC668EE2}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetAccounts(Ptssmolib_tlb::IAccounts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAccounts"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IAccounts**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IAccounts* __fastcall
ITradeCoreSvc2DispT<T>::GetAccounts(void)
{
  Ptssmolib_tlb::IAccounts* pVal;
  this->GetAccounts((Ptssmolib_tlb::IAccounts**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetOrder(BSTR OrderID/*[in]*/, Ptssmolib_tlb::IOrder** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOrder"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = OrderID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrder**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrder* __fastcall
ITradeCoreSvc2DispT<T>::GetOrder(BSTR OrderID/*[in]*/)
{
  Ptssmolib_tlb::IOrder* pVal;
  this->GetOrder(OrderID, (Ptssmolib_tlb::IOrder**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNewStocks"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INewStockSet**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INewStockSet* __fastcall
ITradeCoreSvc2DispT<T>::GetNewStocks(void)
{
  Ptssmolib_tlb::INewStockSet* pVal;
  this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNotTradingStocks"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INotTradingStockSet**)ppData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INotTradingStockSet* __fastcall
ITradeCoreSvc2DispT<T>::GetNotTradingStocks(void)
{
  Ptssmolib_tlb::INotTradingStockSet* ppData;
  this->GetNotTradingStocks((Ptssmolib_tlb::INotTradingStockSet**)&ppData);
  return ppData;
}

template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                           BSTR EndDate/*[in]*/, 
                                           Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                           long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                           Ptssmolib_tlb::IHedges** ppHedges/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetHedgeFromETFTrd"), DISPID(5));
  TAutoArgs<6> _args;
  _args[1] = CustID /*[VT_I4:0]*/;
  _args[2] = StartDate /*[VT_BSTR:0]*/;
  _args[3] = EndDate /*[VT_BSTR:0]*/;
  _args[4] = (int)Status /*[VT_USERDEFINED:0]*/;
  _args[5] = pStartIndex /*[VT_I4:1]*/;
  _args[6] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedges**)ppHedges /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
ITradeCoreSvc2DispT<T>::GetHedgeFromETFTrd(long CustID/*[in]*/, BSTR StartDate/*[in]*/, 
                                           BSTR EndDate/*[in]*/, 
                                           Ptssmolib_tlb::TcHedgeStatus Status/*[in]*/, 
                                           long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* ppHedges;
  this->GetHedgeFromETFTrd(CustID, StartDate, EndDate, Status, pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&ppHedges);
  return ppHedges;
}

template <class T> HRESULT __fastcall
ITradeCoreSvc2DispT<T>::GetPositionFromETFTrd(long CustID/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                              long RowCount/*[in]*/, 
                                              Ptssmolib_tlb::IPositions** Positions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPositionFromETFTrd"), DISPID(6));
  TAutoArgs<3> _args;
  _args[1] = CustID /*[VT_I4:0]*/;
  _args[2] = pStartIndex /*[VT_I4:1]*/;
  _args[3] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPositions**)Positions /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPositions* __fastcall
ITradeCoreSvc2DispT<T>::GetPositionFromETFTrd(long CustID/*[in]*/, long* pStartIndex/*[in,out]*/, 
                                              long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IPositions* Positions;
  this->GetPositionFromETFTrd(CustID, pStartIndex, RowCount, (Ptssmolib_tlb::IPositions**)&Positions);
  return Positions;
}

// *********************************************************************//
// SmartIntf: TCOMIEventTopics
// Interface: IEventTopics
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEventTopicsT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IEventTopic** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IEventTopic* __fastcall
TCOMIEventTopicsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IEventTopic* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IEventTopic**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IEventTopics
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {15D74C5B-AF5E-4DE2-86A4-DAC7A0F1B013}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IEventTopic** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventTopic**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventTopic* __fastcall
IEventTopicsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IEventTopic* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IEventTopic**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IEventTopicsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IEventTopicsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IEventTopicsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IEventTopicsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IEventTopicsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IEventTopicsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIEventTopic
// Interface: IEventTopic
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIEventTopicT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_Type(Ptssmolib_tlb::TcEventTopicType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcEventTopicType __fastcall
TCOMIEventTopicT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcEventTopicType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcEventTopicType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_Publisher(Ptssmolib_tlb::IEventPublisher** ppVal/*[out,retval]*/)
{
  return (*this)->get_Publisher(ppVal);
}

template <class T> Ptssmolib_tlb::IEventPublisherPtr __fastcall
TCOMIEventTopicT<T>::get_Publisher(void)
{
  Ptssmolib_tlb::IEventPublisherPtr ppVal;
  OLECHECK(this->get_Publisher((Ptssmolib_tlb::IEventPublisherPtr*)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_Filter(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Filter(pVal);
}

template <class T> BSTR __fastcall
TCOMIEventTopicT<T>::get_Filter(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Filter((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_Config(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Config(pVal);
}

template <class T> BSTR __fastcall
TCOMIEventTopicT<T>::get_Config(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Config((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIEventTopicT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventTopicT<T>::NewSubscriber(Ptssmolib_tlb::ISubscriber** ppSubscriber/*[out,retval]*/)
{
  return (*this)->NewSubscriber(ppSubscriber);
}

template <class T> Ptssmolib_tlb::ISubscriber* __fastcall
TCOMIEventTopicT<T>::NewSubscriber(void)
{
  Ptssmolib_tlb::ISubscriber* ppSubscriber;
  OLECHECK(this->NewSubscriber((Ptssmolib_tlb::ISubscriber**)&ppSubscriber));
  return ppSubscriber;
}

// *********************************************************************//
// DispIntf:  IEventTopic
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B7B1EC5-1278-4BD7-8687-6D74712F4A28}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IEventTopicDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Type(Ptssmolib_tlb::TcEventTopicType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcEventTopicType __fastcall
IEventTopicDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcEventTopicType pVal;
  this->get_Type((Ptssmolib_tlb::TcEventTopicType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Publisher(Ptssmolib_tlb::IEventPublisher** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Publisher"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventPublisher**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventPublisherPtr __fastcall
IEventTopicDispT<T>::get_Publisher(void)
{
  Ptssmolib_tlb::IEventPublisherPtr ppVal;
  this->get_Publisher(&ppVal);
  return ppVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Filter(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventTopicDispT<T>::get_Filter(void)
{
  BSTR pVal;
  this->get_Filter((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Config(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Config"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventTopicDispT<T>::get_Config(void)
{
  BSTR pVal;
  this->get_Config((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventTopicDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::NewSubscriber(Ptssmolib_tlb::ISubscriber** ppSubscriber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewSubscriber"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ISubscriber**)ppSubscriber /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ISubscriber* __fastcall
IEventTopicDispT<T>::NewSubscriber(void)
{
  Ptssmolib_tlb::ISubscriber* ppSubscriber;
  this->NewSubscriber((Ptssmolib_tlb::ISubscriber**)&ppSubscriber);
  return ppSubscriber;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventTopicDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventTopicDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IEventTopicDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IEventTopicDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IEventTopicDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IEventTopicDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IEventTopicDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIEventPublisher
// Interface: IEventPublisher
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEventPublisherT<T>::get_ProgID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgID(pVal);
}

template <class T> BSTR __fastcall
TCOMIEventPublisherT<T>::get_ProgID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ProgID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIEventPublisherT<T>::set_ProgID(BSTR pVal/*[in]*/)
{
  return (*this)->set_ProgID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIEventPublisherT<T>::Publish(BSTR XML/*[in]*/)
{
  return (*this)->Publish(XML);
}

// *********************************************************************//
// DispIntf:  IEventPublisher
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2833B8CC-4560-42BE-826F-E940BC186FAF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IEventPublisherDispT<T>::get_ProgID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IEventPublisherDispT<T>::get_ProgID(void)
{
  BSTR pVal;
  this->get_ProgID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IEventPublisherDispT<T>::set_ProgID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventPublisherDispT<T>::Publish(BSTR XML/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Publish"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = XML /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMISubscriber
// Interface: ISubscriber
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ServerName(pVal);
}

template <class T> BSTR __fastcall
TCOMISubscriberT<T>::get_ServerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ServerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_ServerPort(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ServerPort(pVal);
}

template <class T> long __fastcall
TCOMISubscriberT<T>::get_ServerPort(void)
{
  long pVal;
  OLECHECK(this->get_ServerPort((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_TopicID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TopicID(pVal);
}

template <class T> long __fastcall
TCOMISubscriberT<T>::get_TopicID(void)
{
  long pVal;
  OLECHECK(this->get_TopicID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_TopicName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TopicName(pVal);
}

template <class T> BSTR __fastcall
TCOMISubscriberT<T>::get_TopicName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TopicName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_FilterString(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FilterString(pVal);
}

template <class T> BSTR __fastcall
TCOMISubscriberT<T>::get_FilterString(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FilterString((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_Status(Ptssmolib_tlb::TcSubscribeStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcSubscribeStatus __fastcall
TCOMISubscriberT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcSubscribeStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcSubscribeStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_AuthCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AuthCode(pVal);
}

template <class T> BSTR __fastcall
TCOMISubscriberT<T>::get_AuthCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AuthCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::get_SocketWndHandle(long* pVal/*[out,retval]*/)
{
  return (*this)->get_SocketWndHandle(pVal);
}

template <class T> long __fastcall
TCOMISubscriberT<T>::get_SocketWndHandle(void)
{
  long pVal;
  OLECHECK(this->get_SocketWndHandle((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::Connect(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/)
{
  return (*this)->Connect(ServerName, ServerPort);
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::Subscribe(BSTR FilterString/*[in]*/)
{
  return (*this)->Subscribe(FilterString);
}

template <class T> HRESULT __fastcall
TCOMISubscriberT<T>::Unsubscribe(void)
{
  return (*this)->Unsubscribe();
}

// *********************************************************************//
// DispIntf:  ISubscriber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFC4DDEC-16E5-4850-A50D-E1231C3CD077}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISubscriberDispT<T>::get_ServerName(void)
{
  BSTR pVal;
  this->get_ServerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_ServerPort(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerPort"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISubscriberDispT<T>::get_ServerPort(void)
{
  long pVal;
  this->get_ServerPort((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_TopicID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopicID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISubscriberDispT<T>::get_TopicID(void)
{
  long pVal;
  this->get_TopicID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_TopicName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopicName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISubscriberDispT<T>::get_TopicName(void)
{
  BSTR pVal;
  this->get_TopicName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_FilterString(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterString"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISubscriberDispT<T>::get_FilterString(void)
{
  BSTR pVal;
  this->get_FilterString((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_Status(Ptssmolib_tlb::TcSubscribeStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcSubscribeStatus __fastcall
ISubscriberDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcSubscribeStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcSubscribeStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_AuthCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthCode"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISubscriberDispT<T>::get_AuthCode(void)
{
  BSTR pVal;
  this->get_AuthCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::get_SocketWndHandle(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SocketWndHandle"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISubscriberDispT<T>::get_SocketWndHandle(void)
{
  long pVal;
  this->get_SocketWndHandle((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::Connect(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = ServerName /*[VT_BSTR:0]*/;
  _args[2] = ServerPort /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::Subscribe(BSTR FilterString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscribe"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = FilterString /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISubscriberDispT<T>::Unsubscribe()
{
  _TDispID _dispid(*this, OLETEXT("Unsubscribe"), DISPID(13));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIExchanges
// Interface: IExchanges
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExchangesT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::IExchange** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IExchange* __fastcall
TCOMIExchangesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExchange* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IExchange**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangesT<T>::get_ItemByID(long ID/*[in]*/, 
                                 Ptssmolib_tlb::IExchange** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IExchange* __fastcall
TCOMIExchangesT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IExchange* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IExchange**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIExchangesT<T>::Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  IExchanges
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE30AF8B-C1B1-4FEF-ADB2-0C466298BCEA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Ptssmolib_tlb::IExchange** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchange**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchange* __fastcall
IExchangesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IExchange* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IExchange**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_ItemByID(long ID/*[in]*/, 
                                 Ptssmolib_tlb::IExchange** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchange**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchange* __fastcall
IExchangesDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IExchange* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IExchange**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IExchange*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IExchangesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExchangesDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExchangesDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExchangesDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExchangesDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangesDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExchange
// Interface: IExchange
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIExchangeT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_Status(Ptssmolib_tlb::TcExchangeStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcExchangeStatus __fastcall
TCOMIExchangeT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcExchangeStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcExchangeStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_MarketCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_MarketCode(pVal);
}

template <class T> BSTR __fastcall
TCOMIExchangeT<T>::get_MarketCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_MarketCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::set_MarketCode(BSTR pVal/*[in]*/)
{
  return (*this)->set_MarketCode(pVal);
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/)
{
  return (*this)->get_MiscFees(pVal);
}

template <class T> Ptssmolib_tlb::IMiscFeesPtr __fastcall
TCOMIExchangeT<T>::get_MiscFees(void)
{
  Ptssmolib_tlb::IMiscFeesPtr pVal;
  OLECHECK(this->get_MiscFees((Ptssmolib_tlb::IMiscFeesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIExchangeT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::GetInstrument(BSTR InstID/*[in]*/, 
                                 Ptssmolib_tlb::IInstrument** Instrument/*[out,retval]*/)
{
  return (*this)->GetInstrument(InstID, Instrument);
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
TCOMIExchangeT<T>::GetInstrument(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* Instrument;
  OLECHECK(this->GetInstrument(InstID/*[in]*/, (Ptssmolib_tlb::IInstrument**)&Instrument));
  return Instrument;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IInstruments** Instruments/*[out,retval]*/)
{
  return (*this)->GetAllInstruments(pStartIndex, RowCount, Instruments);
}

template <class T> Ptssmolib_tlb::IInstruments* __fastcall
TCOMIExchangeT<T>::GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IInstruments* Instruments;
  OLECHECK(this->GetAllInstruments(pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IInstruments**)&Instruments));
  return Instruments;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                    Ptssmolib_tlb::IQuotes** ppQuotes/*[out,retval]*/)
{
  return (*this)->GetQuoteSnapshot(pStartIndex, RowCount, ppQuotes);
}

template <class T> Ptssmolib_tlb::IQuotes* __fastcall
TCOMIExchangeT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IQuotes* ppQuotes;
  OLECHECK(this->GetQuoteSnapshot(pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IQuotes**)&ppQuotes));
  return ppQuotes;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::GetNowQuote(BSTR InstID/*[in]*/, Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/)
{
  return (*this)->GetNowQuote(InstID, ppQuote);
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
TCOMIExchangeT<T>::GetNowQuote(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IQuote* ppQuote;
  OLECHECK(this->GetNowQuote(InstID/*[in]*/, (Ptssmolib_tlb::IQuote**)&ppQuote));
  return ppQuote;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                     BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/)
{
  return (*this)->GetQuoteTickDatas(InstID, TradingDay, FormTime, ToTime, pStartIndex, RowCount, 
                                    ppTickData);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIExchangeT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                     BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppTickData;
  OLECHECK(this->GetQuoteTickDatas(InstID/*[in]*/, TradingDay/*[in]*/, FormTime/*[in]*/, 
                                   ToTime/*[in]*/, pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppTickData));
  return ppTickData;
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::Alter(void)
{
  return (*this)->Alter();
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/)
{
  return (*this)->AddInstrument(pInstrument);
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::Drop(void)
{
  return (*this)->Drop();
}

template <class T> HRESULT __fastcall
TCOMIExchangeT<T>::DropInstrument(BSTR InstID/*[in]*/)
{
  return (*this)->DropInstrument(InstID);
}

// *********************************************************************//
// DispIntf:  IExchange
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6ED6CC68-10E3-4A9C-AC55-73C3FCF781B8}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExchangeDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_Status(Ptssmolib_tlb::TcExchangeStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcExchangeStatus __fastcall
IExchangeDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcExchangeStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcExchangeStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_MarketCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarketCode"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_MarketCode(void)
{
  BSTR pVal;
  this->get_MarketCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_MarketCode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarketCode"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_MiscFees(Ptssmolib_tlb::IMiscFees** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MiscFees"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IMiscFees**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IMiscFeesPtr __fastcall
IExchangeDispT<T>::get_MiscFees(void)
{
  Ptssmolib_tlb::IMiscFeesPtr pVal;
  this->get_MiscFees(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IExchangeDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::GetInstrument(BSTR InstID/*[in]*/, 
                                 Ptssmolib_tlb::IInstrument** Instrument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetInstrument"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IInstrument**)Instrument /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
IExchangeDispT<T>::GetInstrument(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* Instrument;
  this->GetInstrument(InstID, (Ptssmolib_tlb::IInstrument**)&Instrument);
  return Instrument;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IInstruments** Instruments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllInstruments"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IInstruments**)Instruments /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IInstruments* __fastcall
IExchangeDispT<T>::GetAllInstruments(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IInstruments* Instruments;
  this->GetAllInstruments(pStartIndex, RowCount, (Ptssmolib_tlb::IInstruments**)&Instruments);
  return Instruments;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                    Ptssmolib_tlb::IQuotes** ppQuotes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteSnapshot"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuotes**)ppQuotes /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuotes* __fastcall
IExchangeDispT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IQuotes* ppQuotes;
  this->GetQuoteSnapshot(pStartIndex, RowCount, (Ptssmolib_tlb::IQuotes**)&ppQuotes);
  return ppQuotes;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::GetNowQuote(BSTR InstID/*[in]*/, Ptssmolib_tlb::IQuote** ppQuote/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNowQuote"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuote**)ppQuote /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
IExchangeDispT<T>::GetNowQuote(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IQuote* ppQuote;
  this->GetNowQuote(InstID, (Ptssmolib_tlb::IQuote**)&ppQuote);
  return ppQuote;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                     BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IObjectList** ppTickData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteTickDatas"), DISPID(19));
  TAutoArgs<6> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = TradingDay /*[VT_BSTR:0]*/;
  _args[3] = FormTime /*[VT_BSTR:0]*/;
  _args[4] = ToTime /*[VT_BSTR:0]*/;
  _args[5] = pStartIndex /*[VT_I4:1]*/;
  _args[6] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppTickData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IExchangeDispT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                     BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppTickData;
  this->GetQuoteTickDatas(InstID, TradingDay, FormTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppTickData);
  return ppTickData;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::Alter()
{
  _TDispID _dispid(*this, OLETEXT("Alter"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddInstrument"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IInstrument*)pInstrument /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::Drop()
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::DropInstrument(BSTR InstID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropInstrument"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExchangeDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IExchangeDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IExchangeDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IExchangeDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IExchangeDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IExchangeDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIInstruments
// Interface: IInstruments
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIInstrumentsT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
TCOMIInstrumentsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IInstrument**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIInstrumentsT<T>::get_ItemByID(BSTR ID/*[in]*/, 
                                   Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjVal);
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
TCOMIInstrumentsT<T>::get_ItemByID(BSTR ID/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* ppObjVal;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IInstrument**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IInstruments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E18E14F-C1A6-48FA-8A6D-8C28929F83BC}
// *********************************************************************//
template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IInstrument**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
IInstrumentsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IInstrument**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_ItemByID(BSTR ID/*[in]*/, 
                                   Ptssmolib_tlb::IInstrument** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IInstrument**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IInstrument* __fastcall
IInstrumentsDispT<T>::get_ItemByID(BSTR ID/*[in]*/)
{
  Ptssmolib_tlb::IInstrument* ppObjVal;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IInstrument**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IInstrumentsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IInstrumentsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IInstrumentsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IInstrumentsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IInstrumentsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IInstrumentsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IInstrumentsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIQuotes
// Interface: IQuotes
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuotesT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIQuotesT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIQuotesT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IQuote** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
TCOMIQuotesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IQuote* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IQuote**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIQuotesT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIQuotesT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IQuotes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B153FD3B-7DCA-4C6C-8597-ED851F190A30}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuotesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IQuotesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IQuotesDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IQuote** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuote**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuote* __fastcall
IQuotesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IQuote* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IQuote**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IQuotesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuotesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMICharts
// Interface: ICharts
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChartsT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IChart** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IChart* __fastcall
TCOMIChartsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IChart* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IChart**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIChartsT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IChart** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IChart* __fastcall
TCOMIChartsT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IChart* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IChart**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIChartsT<T>::Add(Ptssmolib_tlb::IChart* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  ICharts
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {219BD7C5-FD75-493F-9EA5-A4415F617FC7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChartsDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IChart** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IChart**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IChart* __fastcall
IChartsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IChart* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IChart**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IChart** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IChart**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IChart* __fastcall
IChartsDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IChart* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IChart**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::Add(Ptssmolib_tlb::IChart* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IChart*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IChartsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChartsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IChartsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IChartsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IChartsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IChartsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIChart
// Interface: IChart
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChartT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIChartT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIChartT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIChartT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIChartT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIChartT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::AddChartData(long ObjectID/*[in]*/, Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/)
{
  return (*this)->AddChartData(ObjectID, newVal);
}

template <class T> HRESULT __fastcall
TCOMIChartT<T>::GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                             double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                             double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                             long MaxRowCount/*[in]*/, 
                             Ptssmolib_tlb::IChartDataSet** pVal/*[out,retval]*/)
{
  return (*this)->GetChartData(ObjectID, FromXValue, ToXValue, FromYValue, ToYValue, pStartIndex, 
                               MaxRowCount, pVal);
}

template <class T> Ptssmolib_tlb::IChartDataSet* __fastcall
TCOMIChartT<T>::GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                             double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                             double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                             long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IChartDataSet* pVal;
  OLECHECK(this->GetChartData(ObjectID/*[in]*/, FromXValue/*[in]*/, ToXValue/*[in]*/, 
                              FromYValue/*[in]*/, ToYValue/*[in]*/, pStartIndex/*[in,out]*/, 
                              MaxRowCount/*[in]*/, (Ptssmolib_tlb::IChartDataSet**)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IChart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {43ACB6F1-5D0D-4457-AB14-7FC808143C35}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChartDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChartDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChartDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IChartDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChartDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IChartDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::AddChartData(long ObjectID/*[in]*/, Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChartData"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = ObjectID /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Ptssmolib_tlb::IChartDataSet*)newVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDispT<T>::GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                             double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                             double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                             long MaxRowCount/*[in]*/, 
                             Ptssmolib_tlb::IChartDataSet** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetChartData"), DISPID(21));
  TAutoArgs<7> _args;
  _args[1] = ObjectID /*[VT_I4:0]*/;
  _args[2] = FromXValue /*[VT_R8:0]*/;
  _args[3] = ToXValue /*[VT_R8:0]*/;
  _args[4] = FromYValue /*[VT_R8:0]*/;
  _args[5] = ToYValue /*[VT_R8:0]*/;
  _args[6] = pStartIndex /*[VT_I4:1]*/;
  _args[7] = MaxRowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IChartDataSet**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IChartDataSet* __fastcall
IChartDispT<T>::GetChartData(long ObjectID/*[in]*/, double FromXValue/*[in]*/, 
                             double ToXValue/*[in]*/, double FromYValue/*[in]*/, 
                             double ToYValue/*[in]*/, long* pStartIndex/*[in,out]*/, 
                             long MaxRowCount/*[in]*/)
{
  Ptssmolib_tlb::IChartDataSet* pVal;
  this->GetChartData(ObjectID, FromXValue, ToXValue, FromYValue, ToYValue, pStartIndex, MaxRowCount, (Ptssmolib_tlb::IChartDataSet**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChartDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IChartDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IChartDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IChartDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IChartDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IChartDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IChartDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIChartDataSet
// Interface: IChartDataSet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::get_XVal(double* pVal/*[out,retval]*/)
{
  return (*this)->get_XVal(pVal);
}

template <class T> double __fastcall
TCOMIChartDataSetT<T>::get_XVal(void)
{
  double pVal;
  OLECHECK(this->get_XVal((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::set_XVal(double pVal/*[in]*/)
{
  return (*this)->set_XVal(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::get_YVal(double* pVal/*[out,retval]*/)
{
  return (*this)->get_YVal(pVal);
}

template <class T> double __fastcall
TCOMIChartDataSetT<T>::get_YVal(void)
{
  double pVal;
  OLECHECK(this->get_YVal((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::set_YVal(double pVal/*[in]*/)
{
  return (*this)->set_YVal(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::get_ZVal(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ZVal(pVal);
}

template <class T> double __fastcall
TCOMIChartDataSetT<T>::get_ZVal(void)
{
  double pVal;
  OLECHECK(this->get_ZVal((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::set_ZVal(double pVal/*[in]*/)
{
  return (*this)->set_ZVal(pVal);
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataBOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIChartDataSetT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataEOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIChartDataSetT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::AddNew(void)
{
  return (*this)->AddNew();
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMIChartDataSetT<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

// *********************************************************************//
// DispIntf:  IChartDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {19746063-A291-4F96-8FCD-4D33A8DC9741}
// *********************************************************************//
template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::get_XVal(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XVal"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IChartDataSetDispT<T>::get_XVal(void)
{
  double pVal;
  this->get_XVal((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::set_XVal(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XVal"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::get_YVal(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("YVal"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IChartDataSetDispT<T>::get_YVal(void)
{
  double pVal;
  this->get_YVal((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::set_YVal(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("YVal"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::get_ZVal(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZVal"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IChartDataSetDispT<T>::get_ZVal(void)
{
  double pVal;
  this->get_ZVal((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::set_ZVal(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZVal"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataBOF"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChartDataSetDispT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataBOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEOF"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IChartDataSetDispT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataEOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::AddNew()
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IChartDataSetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(15));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIRoles
// Interface: IRoles
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRolesT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IRole** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IRole* __fastcall
TCOMIRolesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IRole* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IRole**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIRolesT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IRole** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IRole* __fastcall
TCOMIRolesT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IRole* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IRole**)&ppObjRet));
  return ppObjRet;
}

// *********************************************************************//
// DispIntf:  IRoles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F2F6D70-D913-478E-B2CF-2ED9D45C85A7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRolesDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IRole** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IRole**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IRole* __fastcall
IRolesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IRole* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IRole**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IRole** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IRole**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IRole* __fastcall
IRolesDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IRole* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IRole**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IRolesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRolesDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IRolesDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IRolesDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IRolesDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IRolesDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRolesDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRole
// Interface: IRole
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRoleT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIRoleT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIRoleT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIRoleT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIRoleT<T>::AddMember(BSTR UserName/*[in]*/)
{
  return (*this)->AddMember(UserName);
}

template <class T> HRESULT __fastcall
TCOMIRoleT<T>::DropMember(BSTR UserName/*[in]*/)
{
  return (*this)->DropMember(UserName);
}

template <class T> HRESULT __fastcall
TCOMIRoleT<T>::ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/)
{
  return (*this)->ListMembers(ppObjRet);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIRoleT<T>::ListMembers(void)
{
  Ptssmolib_tlb::INameList* ppObjRet;
  OLECHECK(this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet));
  return ppObjRet;
}

// *********************************************************************//
// DispIntf:  IRole
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6C75FA7F-A62F-4D71-B371-824BAC04BBCB}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRoleDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRoleDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRoleDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::AddMember(BSTR UserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMember"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = UserName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::DropMember(BSTR UserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropMember"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = UserName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListMembers"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IRoleDispT<T>::ListMembers(void)
{
  Ptssmolib_tlb::INameList* ppObjRet;
  this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRoleDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRoleDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IRoleDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IRoleDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IRoleDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IRoleDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IRoleDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMINameList
// Interface: INameList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINameListT<T>::get_Item(VARIANT Index/*[in]*/, BSTR* pRetVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, pRetVal);
}

template <class T> BSTR __fastcall
TCOMINameListT<T>::get_Item(VARIANT Index/*[in]*/)
{
  BSTR pRetVal = 0;
  OLECHECK(this->get_Item(Index/*[in]*/, (BSTR*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMINameListT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMINameListT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINameListT<T>::FindName(BSTR Name/*[in]*/, long* pIndex/*[out,retval]*/)
{
  return (*this)->FindName(Name, pIndex);
}

template <class T> long __fastcall
TCOMINameListT<T>::FindName(BSTR Name/*[in]*/)
{
  long pIndex;
  OLECHECK(this->FindName(Name/*[in]*/, (long*)&pIndex));
  return pIndex;
}

// *********************************************************************//
// DispIntf:  INameList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0DC2FA20-B26E-4625-A317-3D6E4D926F58}
// *********************************************************************//
template <class T> HRESULT __fastcall
INameListDispT<T>::get_Item(VARIANT Index/*[in]*/, BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INameListDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  BSTR pRetVal;
  this->get_Item(Index, (BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
INameListDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INameListDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INameListDispT<T>::FindName(BSTR Name/*[in]*/, long* pIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindName"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
INameListDispT<T>::FindName(BSTR Name/*[in]*/)
{
  long pIndex;
  this->FindName(Name, (long*)&pIndex);
  return pIndex;
}

// *********************************************************************//
// SmartIntf: TCOMIUsers
// Interface: IUsers
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIUsersT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IUser** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IUser* __fastcall
TCOMIUsersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IUser* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IUser**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIUsersT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IUser** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IUser* __fastcall
TCOMIUsersT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IUser* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IUser**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIUsersT<T>::Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/)
{
  return (*this)->Add(pObjVal);
}

// *********************************************************************//
// DispIntf:  IUsers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {798E8869-944E-43D3-9FBA-0057C316E3A9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUsersDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IUser** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IUser**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IUser* __fastcall
IUsersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IUser* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IUser**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IUser** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IUser**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IUser* __fastcall
IUsersDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IUser* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IUser**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IUser*)pObjVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IUsersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUsersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IUsersDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IUsersDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IUsersDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IUsersDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUsersDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIUser
// Interface: IUser
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIUserT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_DenyLogin(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DenyLogin(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_DenyLogin(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DenyLogin((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_DenyLogin(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DenyLogin(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Type(Ptssmolib_tlb::TcUserType* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> Ptssmolib_tlb::TcUserType __fastcall
TCOMIUserT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcUserType pVal;
  OLECHECK(this->get_Type((Ptssmolib_tlb::TcUserType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsPasswordExpired(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsPasswordExpired(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_IsPasswordExpired(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsPasswordExpired((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_IsSystemObject(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsSystemObject(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_IsSystemObject(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsSystemObject((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_MustChangePassword(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MustChangePassword(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_MustChangePassword(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MustChangePassword((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_MustChangePassword(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_PasswordPolicyEnforced(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_PasswordPolicyEnforced(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_PasswordPolicyEnforced(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_PasswordPolicyEnforced((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_PasswordPolicyEnforced(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_PasswordExpirationEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_PasswordExpirationEnabled(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::get_PasswordExpirationEnabled(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_PasswordExpirationEnabled((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_PasswordExpirationEnabled(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_Email(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Email(pVal);
}

template <class T> BSTR __fastcall
TCOMIUserT<T>::get_Email(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Email((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::set_Email(BSTR pVal/*[in]*/)
{
  return (*this)->set_Email(pVal);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pRetVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIUserT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::AddToRole(BSTR RoleName/*[in]*/)
{
  return (*this)->AddToRole(RoleName);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  return (*this)->ChangePassword(OldPassword, NewPassword);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, long ObjectID/*[in]*/, 
                    VARIANT GrantGrant/*[in,opt]*/)
{
  return (*this)->Deny(Privileges, ObjectID, GrantGrant);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, long ObjectID/*[in]*/, 
                     VARIANT GrantGrant/*[in,opt]*/)
{
  return (*this)->Grant(Privileges, ObjectID, GrantGrant);
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::IsMember(BSTR RoleName/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->IsMember(RoleName, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIUserT<T>::IsMember(BSTR RoleName/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->IsMember(RoleName/*[in]*/, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/)
{
  return (*this)->ListMembers(ppObjRet);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIUserT<T>::ListMembers(void)
{
  Ptssmolib_tlb::INameList* ppObjRet;
  OLECHECK(this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/, 
                                Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  return (*this)->ListOwnedObjects(ObjectTypes, SortBy, ppObjRet);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIUserT<T>::ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  OLECHECK(this->ListOwnedObjects(ObjectTypes/*[in]*/, SortBy/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::ListObjectPermissions(long ObjectID/*[in]*/, 
                                     Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  return (*this)->ListObjectPermissions(ObjectID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIUserT<T>::ListObjectPermissions(long ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  OLECHECK(this->ListObjectPermissions(ObjectID/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIUserT<T>::Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, long ObjectID/*[in]*/)
{
  return (*this)->Revoke(Privilege, ObjectID);
}

// *********************************************************************//
// DispIntf:  IUser
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D437A996-1B09-4600-B911-B9DCA680C068}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUserDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUserDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_DenyLogin(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DenyLogin"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_DenyLogin(void)
{
  VARIANT_BOOL pVal;
  this->get_DenyLogin((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_DenyLogin(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DenyLogin"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Type(Ptssmolib_tlb::TcUserType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcUserType __fastcall
IUserDispT<T>::get_Type(void)
{
  Ptssmolib_tlb::TcUserType pVal;
  this->get_Type((Ptssmolib_tlb::TcUserType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsPasswordExpired(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPasswordExpired"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsPasswordExpired(void)
{
  VARIANT_BOOL pVal;
  this->get_IsPasswordExpired((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_IsSystemObject(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSystemObject"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_IsSystemObject(void)
{
  VARIANT_BOOL pVal;
  this->get_IsSystemObject((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_MustChangePassword(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MustChangePassword"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_MustChangePassword(void)
{
  VARIANT_BOOL pVal;
  this->get_MustChangePassword((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MustChangePassword"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_PasswordPolicyEnforced(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordPolicyEnforced"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_PasswordPolicyEnforced(void)
{
  VARIANT_BOOL pVal;
  this->get_PasswordPolicyEnforced((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordPolicyEnforced"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_PasswordExpirationEnabled(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordExpirationEnabled"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::get_PasswordExpirationEnabled(void)
{
  VARIANT_BOOL pVal;
  this->get_PasswordExpirationEnabled((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PasswordExpirationEnabled"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Email(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Email(void)
{
  BSTR pVal;
  this->get_Email((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_Email(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Email"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IUserDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
  this->get_ExtendedProperties(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::AddToRole(BSTR RoleName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddToRole"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = RoleName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangePassword"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = OldPassword /*[VT_BSTR:0]*/;
  _args[2] = NewPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, long ObjectID/*[in]*/, 
                    VARIANT GrantGrant/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Deny"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = (int)Privileges /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectID /*[VT_I4:0]*/;
  _args[3] = GrantGrant /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, long ObjectID/*[in]*/, 
                     VARIANT GrantGrant/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grant"), DISPID(25));
  TAutoArgs<3> _args;
  _args[1] = (int)Privileges /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectID /*[VT_I4:0]*/;
  _args[3] = GrantGrant /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::IsMember(BSTR RoleName/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsMember"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = RoleName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IUserDispT<T>::IsMember(BSTR RoleName/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->IsMember(RoleName, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::ListMembers(Ptssmolib_tlb::INameList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListMembers"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IUserDispT<T>::ListMembers(void)
{
  Ptssmolib_tlb::INameList* ppObjRet;
  this->ListMembers((Ptssmolib_tlb::INameList**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/, 
                                Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListOwnedObjects"), DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = (int)ObjectTypes /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)SortBy /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IUserDispT<T>::ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  this->ListOwnedObjects(ObjectTypes, SortBy, (Ptssmolib_tlb::IObjectList**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::ListObjectPermissions(long ObjectID/*[in]*/, 
                                     Ptssmolib_tlb::IObjectList** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListObjectPermissions"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = ObjectID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IUserDispT<T>::ListObjectPermissions(long ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjRet;
  this->ListObjectPermissions(ObjectID, (Ptssmolib_tlb::IObjectList**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, long ObjectID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Revoke"), DISPID(30));
  TAutoArgs<2> _args;
  _args[1] = (int)Privilege /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IUserDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IUserDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IUserDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IUserDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IUserDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IUserDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIProject
// Interface: IProject
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIProjectT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_PositionPeriod(long* pVal/*[out,retval]*/)
{
  return (*this)->get_PositionPeriod(pVal);
}

template <class T> long __fastcall
TCOMIProjectT<T>::get_PositionPeriod(void)
{
  long pVal;
  OLECHECK(this->get_PositionPeriod((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_PositionPeriod(long pVal/*[in]*/)
{
  return (*this)->set_PositionPeriod(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_CompleteDegree(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CompleteDegree(pVal);
}

template <class T> long __fastcall
TCOMIProjectT<T>::get_CompleteDegree(void)
{
  long pVal;
  OLECHECK(this->get_CompleteDegree((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_CompleteDegree(long pVal/*[in]*/)
{
  return (*this)->set_CompleteDegree(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_FinishDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_FinishDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_FinishDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_FinishDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_FinishDate(BSTR pVal/*[in]*/)
{
  return (*this)->set_FinishDate(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_StartDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_StartDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_StartDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_StartDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_StartDate(BSTR pVal/*[in]*/)
{
  return (*this)->set_StartDate(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_TradeManagerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradeManagerName(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_TradeManagerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradeManagerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_TradeManagerName(BSTR pVal/*[in]*/)
{
  return (*this)->set_TradeManagerName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_TradeManagerIdea(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradeManagerIdea(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_TradeManagerIdea(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradeManagerIdea((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_TradeManagerIdea(BSTR pVal/*[in]*/)
{
  return (*this)->set_TradeManagerIdea(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_TradeManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_TradeManagerConfirmed(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIProjectT<T>::get_TradeManagerConfirmed(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_TradeManagerConfirmed((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_TradeManagerConfirmed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_RiskManagerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RiskManagerName(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_RiskManagerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RiskManagerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_RiskManagerName(BSTR pVal/*[in]*/)
{
  return (*this)->set_RiskManagerName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_RiskManagerIdea(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RiskManagerIdea(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_RiskManagerIdea(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RiskManagerIdea((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_RiskManagerIdea(BSTR pVal/*[in]*/)
{
  return (*this)->set_RiskManagerIdea(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_RiskManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_RiskManagerConfirmed(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIProjectT<T>::get_RiskManagerConfirmed(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_RiskManagerConfirmed((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_RiskManagerConfirmed(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_TradeManagerConfirmedDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradeManagerConfirmedDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_TradeManagerConfirmedDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradeManagerConfirmedDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_RiskManagerConfirmedDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_RiskManagerConfirmedDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIProjectT<T>::get_RiskManagerConfirmedDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_RiskManagerConfirmedDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_Priority(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Priority(pVal);
}

template <class T> long __fastcall
TCOMIProjectT<T>::get_Priority(void)
{
  long pVal;
  OLECHECK(this->get_Priority((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::set_Priority(long pVal/*[in]*/)
{
  return (*this)->set_Priority(pVal);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_Status(Ptssmolib_tlb::TcProjectStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcProjectStatus __fastcall
TCOMIProjectT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcProjectStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcProjectStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIProjectT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::AddHedge(long ID/*[in]*/)
{
  return (*this)->AddHedge(ID);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/)
{
  return (*this)->AddOrder(bstrOrderID, bstrTradeDate);
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                            Ptssmolib_tlb::IHedges** pRetVal/*[out,retval]*/)
{
  return (*this)->GetHedges(pStartIndex, RowCount, pRetVal);
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
TCOMIProjectT<T>::GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* pRetVal;
  OLECHECK(this->GetHedges(pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IHedges**)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                            Ptssmolib_tlb::IOrders** ppRetVal/*[out,retval]*/)
{
  return (*this)->GetOrders(pStartIndex, RowCount, ppRetVal);
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
TCOMIProjectT<T>::GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppRetVal;
  OLECHECK(this->GetOrders(pStartIndex/*[in,out]*/, RowCount/*[in]*/, (Ptssmolib_tlb::IOrders**)&ppRetVal));
  return ppRetVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectT<T>::Cancel(void)
{
  return (*this)->Cancel();
}

// *********************************************************************//
// DispIntf:  IProject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {92CF7599-E327-440D-B1D3-03942AFF591A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IProjectDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProjectDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_PositionPeriod(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionPeriod"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProjectDispT<T>::get_PositionPeriod(void)
{
  long pVal;
  this->get_PositionPeriod((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_PositionPeriod(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PositionPeriod"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_CompleteDegree(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompleteDegree"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProjectDispT<T>::get_CompleteDegree(void)
{
  long pVal;
  this->get_CompleteDegree((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_CompleteDegree(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompleteDegree"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_FinishDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinishDate"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_FinishDate(void)
{
  BSTR pVal;
  this->get_FinishDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_FinishDate(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FinishDate"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_StartDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_StartDate(void)
{
  BSTR pVal;
  this->get_StartDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_StartDate(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDate"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_TradeManagerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerName"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_TradeManagerName(void)
{
  BSTR pVal;
  this->get_TradeManagerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_TradeManagerName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerName"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_TradeManagerIdea(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerIdea"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_TradeManagerIdea(void)
{
  BSTR pVal;
  this->get_TradeManagerIdea((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_TradeManagerIdea(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerIdea"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_TradeManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerConfirmed"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProjectDispT<T>::get_TradeManagerConfirmed(void)
{
  VARIANT_BOOL pVal;
  this->get_TradeManagerConfirmed((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerConfirmed"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_RiskManagerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerName"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_RiskManagerName(void)
{
  BSTR pVal;
  this->get_RiskManagerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_RiskManagerName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerName"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_RiskManagerIdea(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerIdea"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_RiskManagerIdea(void)
{
  BSTR pVal;
  this->get_RiskManagerIdea((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_RiskManagerIdea(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerIdea"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_RiskManagerConfirmed(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerConfirmed"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProjectDispT<T>::get_RiskManagerConfirmed(void)
{
  VARIANT_BOOL pVal;
  this->get_RiskManagerConfirmed((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerConfirmed"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_TradeManagerConfirmedDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradeManagerConfirmedDate"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_TradeManagerConfirmedDate(void)
{
  BSTR pVal;
  this->get_TradeManagerConfirmedDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_RiskManagerConfirmedDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RiskManagerConfirmedDate"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_RiskManagerConfirmedDate(void)
{
  BSTR pVal;
  this->get_RiskManagerConfirmedDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Priority(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProjectDispT<T>::get_Priority(void)
{
  long pVal;
  this->get_Priority((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_Priority(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Status(Ptssmolib_tlb::TcProjectStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcProjectStatus __fastcall
IProjectDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcProjectStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcProjectStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IProjectDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::AddHedge(long ID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddHedge"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddOrder"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = bstrOrderID /*[VT_BSTR:0]*/;
  _args[2] = bstrTradeDate /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                            Ptssmolib_tlb::IHedges** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetHedges"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IHedges**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IHedges* __fastcall
IProjectDispT<T>::GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IHedges* pRetVal;
  this->GetHedges(pStartIndex, RowCount, (Ptssmolib_tlb::IHedges**)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                            Ptssmolib_tlb::IOrders** ppRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOrders"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IOrders**)ppRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IOrders* __fastcall
IProjectDispT<T>::GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IOrders* ppRetVal;
  this->GetOrders(pStartIndex, RowCount, (Ptssmolib_tlb::IOrders**)&ppRetVal);
  return ppRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IProjectDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IProjectDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IProjectDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IProjectDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IProjectDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPTSSession
// Interface: IPTSSession
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> BSTR __fastcall
TCOMIPTSSessionT<T>::get_ID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/)
{
  return (*this)->get_LoginType(pVal);
}

template <class T> Ptssmolib_tlb::TcLoginType __fastcall
TCOMIPTSSessionT<T>::get_LoginType(void)
{
  Ptssmolib_tlb::TcLoginType pVal;
  OLECHECK(this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_DomainName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DomainName(pVal);
}

template <class T> BSTR __fastcall
TCOMIPTSSessionT<T>::get_DomainName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DomainName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_UserName(pVal);
}

template <class T> BSTR __fastcall
TCOMIPTSSessionT<T>::get_UserName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_UserName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_AuthnLevel(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AuthnLevel(pVal);
}

template <class T> long __fastcall
TCOMIPTSSessionT<T>::get_AuthnLevel(void)
{
  long pVal;
  OLECHECK(this->get_AuthnLevel((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_ImpLevel(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ImpLevel(pVal);
}

template <class T> long __fastcall
TCOMIPTSSessionT<T>::get_ImpLevel(void)
{
  long pVal;
  OLECHECK(this->get_ImpLevel((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_IsLogin(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsLogin(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPTSSessionT<T>::get_IsLogin(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsLogin((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ServerName(pVal);
}

template <class T> BSTR __fastcall
TCOMIPTSSessionT<T>::get_ServerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ServerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, BSTR UserName/*[in]*/, 
                           BSTR Domain/*[in]*/, BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                           long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/)
{
  return (*this)->Login(LoginType, UserName, Domain, Password, ServerName, AuthnLevel, ImpLevel);
}

template <class T> HRESULT __fastcall
TCOMIPTSSessionT<T>::Logout(void)
{
  return (*this)->Logout();
}

// *********************************************************************//
// DispIntf:  IPTSSession
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26A19C68-9CFB-4885-992E-B182B51AB593}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_ID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPTSSessionDispT<T>::get_ID(void)
{
  BSTR pVal;
  this->get_ID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoginType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcLoginType __fastcall
IPTSSessionDispT<T>::get_LoginType(void)
{
  Ptssmolib_tlb::TcLoginType pVal;
  this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_DomainName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DomainName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPTSSessionDispT<T>::get_DomainName(void)
{
  BSTR pVal;
  this->get_DomainName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPTSSessionDispT<T>::get_UserName(void)
{
  BSTR pVal;
  this->get_UserName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_AuthnLevel(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthnLevel"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPTSSessionDispT<T>::get_AuthnLevel(void)
{
  long pVal;
  this->get_AuthnLevel((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_ImpLevel(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImpLevel"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPTSSessionDispT<T>::get_ImpLevel(void)
{
  long pVal;
  this->get_ImpLevel((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_IsLogin(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsLogin"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPTSSessionDispT<T>::get_IsLogin(void)
{
  VARIANT_BOOL pVal;
  this->get_IsLogin((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerName"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPTSSessionDispT<T>::get_ServerName(void)
{
  BSTR pVal;
  this->get_ServerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, BSTR UserName/*[in]*/, 
                           BSTR Domain/*[in]*/, BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                           long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Login"), DISPID(13));
  TAutoArgs<7> _args;
  _args[1] = (int)LoginType /*[VT_USERDEFINED:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Domain /*[VT_BSTR:0]*/;
  _args[4] = Password /*[VT_BSTR:0]*/;
  _args[5] = ServerName /*[VT_BSTR:0]*/;
  _args[6] = AuthnLevel /*[VT_I4:0]*/;
  _args[7] = ImpLevel /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPTSSessionDispT<T>::Logout()
{
  _TDispID _dispid(*this, OLETEXT("Logout"), DISPID(14));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMINewStockSet
// Interface: INewStockSet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_SubsCode(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SubsCode(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_SubsCode(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SubsCode((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_SecID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SecID(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_SecID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SecID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_ExchID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchID(pVal);
}

template <class T> long __fastcall
TCOMINewStockSetT<T>::get_ExchID(void)
{
  long pVal;
  OLECHECK(this->get_ExchID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_IssuePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_IssuePrice(pVal);
}

template <class T> double __fastcall
TCOMINewStockSetT<T>::get_IssuePrice(void)
{
  double pVal;
  OLECHECK(this->get_IssuePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_NetIssueQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_NetIssueQty(pVal);
}

template <class T> long __fastcall
TCOMINewStockSetT<T>::get_NetIssueQty(void)
{
  long pVal;
  OLECHECK(this->get_NetIssueQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_IssueQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_IssueQty(pVal);
}

template <class T> long __fastcall
TCOMINewStockSetT<T>::get_IssueQty(void)
{
  long pVal;
  OLECHECK(this->get_IssueQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_SubsStartDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SubsStartDate(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_SubsStartDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SubsStartDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_SubsEndDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SubsEndDate(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_SubsEndDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SubsEndDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_UnFreezeDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_UnFreezeDate(pVal);
}

template <class T> BSTR __fastcall
TCOMINewStockSetT<T>::get_UnFreezeDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_UnFreezeDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_Status(short* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> short __fastcall
TCOMINewStockSetT<T>::get_Status(void)
{
  short pVal;
  OLECHECK(this->get_Status((short*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataBOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINewStockSetT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataEOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINewStockSetT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMINewStockSetT<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

// *********************************************************************//
// DispIntf:  INewStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F79527A-DDFC-4F56-A899-CB001A488CFD}
// *********************************************************************//
template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_SubsCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubsCode"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_SubsCode(void)
{
  BSTR pVal;
  this->get_SubsCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_SecID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_SecID(void)
{
  BSTR pVal;
  this->get_SecID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_ExchID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INewStockSetDispT<T>::get_ExchID(void)
{
  long pVal;
  this->get_ExchID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_IssuePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IssuePrice"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
INewStockSetDispT<T>::get_IssuePrice(void)
{
  double pVal;
  this->get_IssuePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_NetIssueQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetIssueQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INewStockSetDispT<T>::get_NetIssueQty(void)
{
  long pVal;
  this->get_NetIssueQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_IssueQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IssueQty"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INewStockSetDispT<T>::get_IssueQty(void)
{
  long pVal;
  this->get_IssueQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_SubsStartDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubsStartDate"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_SubsStartDate(void)
{
  BSTR pVal;
  this->get_SubsStartDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_SubsEndDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubsEndDate"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_SubsEndDate(void)
{
  BSTR pVal;
  this->get_SubsEndDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_UnFreezeDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnFreezeDate"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INewStockSetDispT<T>::get_UnFreezeDate(void)
{
  BSTR pVal;
  this->get_UnFreezeDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_Status(short* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
INewStockSetDispT<T>::get_Status(void)
{
  short pVal;
  this->get_Status((short*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataBOF"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INewStockSetDispT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataBOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEOF"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INewStockSetDispT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataEOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INewStockSetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(25));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMINotTradingStockSet
// Interface: INotTradingStockSet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_SecID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SecID(pVal);
}

template <class T> BSTR __fastcall
TCOMINotTradingStockSetT<T>::get_SecID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SecID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_ExchID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchID(pVal);
}

template <class T> long __fastcall
TCOMINotTradingStockSetT<T>::get_ExchID(void)
{
  long pVal;
  OLECHECK(this->get_ExchID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Duration(pVal);
}

template <class T> long __fastcall
TCOMINotTradingStockSetT<T>::get_Duration(void)
{
  long pVal;
  OLECHECK(this->get_Duration((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_Date(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Date(pVal);
}

template <class T> BSTR __fastcall
TCOMINotTradingStockSetT<T>::get_Date(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Date((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_Time(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Time(pVal);
}

template <class T> BSTR __fastcall
TCOMINotTradingStockSetT<T>::get_Time(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Time((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_Reason(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Reason(pVal);
}

template <class T> BSTR __fastcall
TCOMINotTradingStockSetT<T>::get_Reason(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Reason((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataBOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINotTradingStockSetT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataEOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINotTradingStockSetT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMINotTradingStockSetT<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

// *********************************************************************//
// DispIntf:  INotTradingStockSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {074E7DCF-AA92-4BA9-9EDB-4DFB79C0C201}
// *********************************************************************//
template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_SecID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INotTradingStockSetDispT<T>::get_SecID(void)
{
  BSTR pVal;
  this->get_SecID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_ExchID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INotTradingStockSetDispT<T>::get_ExchID(void)
{
  long pVal;
  this->get_ExchID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_Duration(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
INotTradingStockSetDispT<T>::get_Duration(void)
{
  long pVal;
  this->get_Duration((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_Date(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Date"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INotTradingStockSetDispT<T>::get_Date(void)
{
  BSTR pVal;
  this->get_Date((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_Time(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Time"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INotTradingStockSetDispT<T>::get_Time(void)
{
  BSTR pVal;
  this->get_Time((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_Reason(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reason"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INotTradingStockSetDispT<T>::get_Reason(void)
{
  BSTR pVal;
  this->get_Reason((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataBOF"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INotTradingStockSetDispT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataBOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEOF"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INotTradingStockSetDispT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataEOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
INotTradingStockSetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(16));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIQuoteDetail
// Interface: IQuoteDetail
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_Level(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Level(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDetailT<T>::get_Level(void)
{
  long pVal;
  OLECHECK(this->get_Level((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_AskQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDetailT<T>::get_AskQty(void)
{
  long pVal;
  OLECHECK(this->get_AskQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_AskPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_AskPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDetailT<T>::get_AskPrice(void)
{
  double pVal;
  OLECHECK(this->get_AskPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_BidQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDetailT<T>::get_BidQty(void)
{
  long pVal;
  OLECHECK(this->get_BidQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_BidPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_BidPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDetailT<T>::get_BidPrice(void)
{
  double pVal;
  OLECHECK(this->get_BidPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_AskOrderNum(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskOrderNum(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDetailT<T>::get_AskOrderNum(void)
{
  long pVal;
  OLECHECK(this->get_AskOrderNum((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDetailT<T>::get_BidOrderNum(long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidOrderNum(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDetailT<T>::get_BidOrderNum(void)
{
  long pVal;
  OLECHECK(this->get_BidOrderNum((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IQuoteDetail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BED76FDA-3A4F-41B4-81C6-43BBDF224E4D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_Level(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Level"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDetailDispT<T>::get_Level(void)
{
  long pVal;
  this->get_Level((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_AskQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskQty"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDetailDispT<T>::get_AskQty(void)
{
  long pVal;
  this->get_AskQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_AskPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskPrice"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDetailDispT<T>::get_AskPrice(void)
{
  double pVal;
  this->get_AskPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_BidQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidQty"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDetailDispT<T>::get_BidQty(void)
{
  long pVal;
  this->get_BidQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_BidPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidPrice"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDetailDispT<T>::get_BidPrice(void)
{
  double pVal;
  this->get_BidPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_AskOrderNum(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskOrderNum"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDetailDispT<T>::get_AskOrderNum(void)
{
  long pVal;
  this->get_AskOrderNum((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDetailDispT<T>::get_BidOrderNum(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidOrderNum"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDetailDispT<T>::get_BidOrderNum(void)
{
  long pVal;
  this->get_BidOrderNum((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  _ISubscriberEvents
// Flags:     (4096) Dispatchable
// GUID:      {AD3BD7A0-CD78-4280-B00F-F186F6B0FF53}
// *********************************************************************//
template <class T> HRESULT __fastcall
_ISubscriberEventsDispT<T>::OnEvent(LPDISPATCH pEventHead/*[in]*/, LPDISPATCH pEventData/*[in]*/)
{
  _TDispID _dispid(/* OnEvent */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = pEventHead /*[VT_DISPATCH:0]*/;
  _args[2] = pEventData /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISubscriberEventsDispT<T>::OnStatusChanged(Ptssmolib_tlb::TcSubscribeStatus Status/*[in]*/)
{
  _TDispID _dispid(/* OnStatusChanged */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)Status /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_ISubscriberEventsDispT<T>::OnError(BSTR ErrMsg/*[in]*/)
{
  _TDispID _dispid(/* OnError */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ErrMsg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISubscriber2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99DB1DEB-7470-4647-9645-560C888EFB06}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISubscriber2DispT<T>::get_EventTopic(Ptssmolib_tlb::IEventTopic** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventTopic"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventTopic**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventTopicPtr __fastcall
ISubscriber2DispT<T>::get_EventTopic(void)
{
  Ptssmolib_tlb::IEventTopicPtr pVal;
  this->get_EventTopic(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ISubscriber2DispT<T>::Subscribe2(BSTR FilterString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subscribe2"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FilterString /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IExchange2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {ADC2CEF5-C488-44CE-94B4-3634A8C0466E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteSnapshot"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = pStartIndex /*[VT_I4:1]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuoteDataSet**)ppQuotes /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuoteDataSet* __fastcall
IExchange2DispT<T>::GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IQuoteDataSet* ppQuotes;
  this->GetQuoteSnapshot(pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuotes);
  return ppQuotes;
}

template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetNowQuote(BSTR InstID/*[in]*/, 
                                Ptssmolib_tlb::IQuoteDataSet** ppQuote/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNowQuote"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuoteDataSet**)ppQuote /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuoteDataSet* __fastcall
IExchange2DispT<T>::GetNowQuote(BSTR InstID/*[in]*/)
{
  Ptssmolib_tlb::IQuoteDataSet* ppQuote;
  this->GetNowQuote(InstID, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuote);
  return ppQuote;
}

template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                      BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                      long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                      Ptssmolib_tlb::IQuoteDataSet** ppTickData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuoteTickDatas"), DISPID(3));
  TAutoArgs<6> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = TradingDay /*[VT_BSTR:0]*/;
  _args[3] = FormTime /*[VT_BSTR:0]*/;
  _args[4] = ToTime /*[VT_BSTR:0]*/;
  _args[5] = pStartIndex /*[VT_I4:1]*/;
  _args[6] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuoteDataSet**)ppTickData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuoteDataSet* __fastcall
IExchange2DispT<T>::GetQuoteTickDatas(BSTR InstID/*[in]*/, BSTR TradingDay/*[in]*/, 
                                      BSTR FormTime/*[in]*/, BSTR ToTime/*[in]*/, 
                                      long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IQuoteDataSet* ppTickData;
  this->GetQuoteTickDatas(InstID, TradingDay, FormTime, ToTime, pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppTickData);
  return ppTickData;
}

template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetHistoryQuotes(BSTR InstID/*[in]*/, BSTR FormDate/*[in]*/, BSTR ToDate/*[in]*/
                                     , long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                     Ptssmolib_tlb::IQuoteDataSet** ppQuotes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetHistoryQuotes"), DISPID(4));
  TAutoArgs<5> _args;
  _args[1] = InstID /*[VT_BSTR:0]*/;
  _args[2] = FormDate /*[VT_BSTR:0]*/;
  _args[3] = ToDate /*[VT_BSTR:0]*/;
  _args[4] = pStartIndex /*[VT_I4:1]*/;
  _args[5] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQuoteDataSet**)ppQuotes /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQuoteDataSet* __fastcall
IExchange2DispT<T>::GetHistoryQuotes(BSTR InstID/*[in]*/, BSTR FormDate/*[in]*/, BSTR ToDate/*[in]*/, 
                                     long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IQuoteDataSet* ppQuotes;
  this->GetHistoryQuotes(InstID, FormDate, ToDate, pStartIndex, RowCount, (Ptssmolib_tlb::IQuoteDataSet**)&ppQuotes);
  return ppQuotes;
}

template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetNewStocks(Ptssmolib_tlb::INewStockSet** ppData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNewStocks"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INewStockSet**)ppData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INewStockSet* __fastcall
IExchange2DispT<T>::GetNewStocks(void)
{
  Ptssmolib_tlb::INewStockSet* ppData;
  this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&ppData);
  return ppData;
}

template <class T> HRESULT __fastcall
IExchange2DispT<T>::GetNotTradingStocks(Ptssmolib_tlb::INotTradingStockSet** ppData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNotTradingStocks"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INotTradingStockSet**)ppData /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INotTradingStockSet* __fastcall
IExchange2DispT<T>::GetNotTradingStocks(void)
{
  Ptssmolib_tlb::INotTradingStockSet* ppData;
  this->GetNotTradingStocks((Ptssmolib_tlb::INotTradingStockSet**)&ppData);
  return ppData;
}

// *********************************************************************//
// SmartIntf: TCOMIQuoteDataSet
// Interface: IQuoteDataSet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Symbol(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteDataSetT<T>::get_Symbol(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Symbol((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteDataSetT<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_LastQty(void)
{
  long pVal;
  OLECHECK(this->get_LastQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LastPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_LastPrice(void)
{
  double pVal;
  OLECHECK(this->get_LastPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LastTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteDataSetT<T>::get_LastTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LastTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PreClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_PreClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_PreClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_ClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_ClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_OpenPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_OpenPrice(void)
{
  double pVal;
  OLECHECK(this->get_OpenPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_SettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_SettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LowPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_LowPrice(void)
{
  double pVal;
  OLECHECK(this->get_LowPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_HighPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_HighPrice(void)
{
  double pVal;
  OLECHECK(this->get_HighPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Turnover(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_Turnover(void)
{
  double pVal;
  OLECHECK(this->get_Turnover((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DayQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_DayQty(void)
{
  long pVal;
  OLECHECK(this->get_DayQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_FixPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_FixPrice(void)
{
  double pVal;
  OLECHECK(this->get_FixPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteDataSetT<T>::get_TradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradingDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_AskQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskQty(Index, pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_AskQty(VARIANT Index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_AskQty(Index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_AskPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_AskPrice(Index, pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_AskPrice(VARIANT Index/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_AskPrice(Index/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_AskOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskOrderNum(Index, pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_AskOrderNum(VARIANT Index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_AskOrderNum(Index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_BidQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidQty(Index, pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_BidQty(VARIANT Index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_BidQty(Index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_BidPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_BidPrice(Index, pVal);
}

template <class T> double __fastcall
TCOMIQuoteDataSetT<T>::get_BidPrice(VARIANT Index/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_BidPrice(Index/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_BidOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidOrderNum(Index, pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_BidOrderNum(VARIANT Index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_BidOrderNum(Index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_Data(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_Data(pVal);
}

template <class T> VARIANT __fastcall
TCOMIQuoteDataSetT<T>::get_Data(void)
{
  VARIANT pVal;
  OLECHECK(this->get_Data((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataBOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIQuoteDataSetT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataBOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataEOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIQuoteDataSetT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataEOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::get_Index(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Index(pVal);
}

template <class T> long __fastcall
TCOMIQuoteDataSetT<T>::get_Index(void)
{
  long pVal;
  OLECHECK(this->get_Index((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMIQuoteDataSetT<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

// *********************************************************************//
// DispIntf:  IQuoteDataSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4875FF1B-8357-4874-836F-C125B482F611}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Symbol"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDataSetDispT<T>::get_Symbol(void)
{
  BSTR pVal;
  this->get_Symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDataSetDispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastQty"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_LastQty(void)
{
  long pVal;
  this->get_LastQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastPrice"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_LastPrice(void)
{
  double pVal;
  this->get_LastPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTime"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDataSetDispT<T>::get_LastTime(void)
{
  BSTR pVal;
  this->get_LastTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreClosePrice"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_PreClosePrice(void)
{
  double pVal;
  this->get_PreClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClosePrice"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_ClosePrice(void)
{
  double pVal;
  this->get_ClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenPrice"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_OpenPrice(void)
{
  double pVal;
  this->get_OpenPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_SettlPrice(void)
{
  double pVal;
  this->get_SettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LowPrice"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_LowPrice(void)
{
  double pVal;
  this->get_LowPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPrice"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_HighPrice(void)
{
  double pVal;
  this->get_HighPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Turnover"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_Turnover(void)
{
  double pVal;
  this->get_Turnover((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayQty"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_DayQty(void)
{
  long pVal;
  this->get_DayQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixPrice"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_FixPrice(void)
{
  double pVal;
  this->get_FixPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteDataSetDispT<T>::get_TradingDay(void)
{
  BSTR pVal;
  this->get_TradingDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_AskQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskQty"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_AskQty(VARIANT Index/*[in]*/)
{
  long pVal;
  this->get_AskQty(Index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_AskPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskPrice"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_AskPrice(VARIANT Index/*[in]*/)
{
  double pVal;
  this->get_AskPrice(Index, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_AskOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskOrderNum"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_AskOrderNum(VARIANT Index/*[in]*/)
{
  long pVal;
  this->get_AskOrderNum(Index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_BidQty(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidQty"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_BidQty(VARIANT Index/*[in]*/)
{
  long pVal;
  this->get_BidQty(Index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_BidPrice(VARIANT Index/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidPrice"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteDataSetDispT<T>::get_BidPrice(VARIANT Index/*[in]*/)
{
  double pVal;
  this->get_BidPrice(Index, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_BidOrderNum(VARIANT Index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidOrderNum"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_BidOrderNum(VARIANT Index/*[in]*/)
{
  long pVal;
  this->get_BidOrderNum(Index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_Data(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IQuoteDataSetDispT<T>::get_Data(void)
{
  VARIANT pVal;
  this->get_Data((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_DataBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataBOF"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IQuoteDataSetDispT<T>::get_DataBOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataBOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_DataEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEOF"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IQuoteDataSetDispT<T>::get_DataEOF(void)
{
  VARIANT_BOOL pVal;
  this->get_DataEOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::get_Index(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteDataSetDispT<T>::get_Index(void)
{
  long pVal;
  this->get_Index((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(35));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(36));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(37));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQuoteDataSetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(38));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIQueryCondition
// Interface: IQueryCondition
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::get_Property(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Property(pVal);
}

template <class T> BSTR __fastcall
TCOMIQueryConditionT<T>::get_Property(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Property((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::set_Property(BSTR pVal/*[in]*/)
{
  return (*this)->set_Property(pVal);
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::get_Operator(Ptssmolib_tlb::TcOperatorType* pVal/*[out,retval]*/)
{
  return (*this)->get_Operator(pVal);
}

template <class T> Ptssmolib_tlb::TcOperatorType __fastcall
TCOMIQueryConditionT<T>::get_Operator(void)
{
  Ptssmolib_tlb::TcOperatorType pVal;
  OLECHECK(this->get_Operator((Ptssmolib_tlb::TcOperatorType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/)
{
  return (*this)->set_Operator(pVal);
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::get_LeftValue(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_LeftValue(pVal);
}

template <class T> VARIANT __fastcall
TCOMIQueryConditionT<T>::get_LeftValue(void)
{
  VARIANT pVal;
  OLECHECK(this->get_LeftValue((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::set_LeftValue(VARIANT pVal/*[in]*/)
{
  return (*this)->set_LeftValue(pVal);
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::get_RightValue(VARIANT* pVal/*[out,retval]*/)
{
  return (*this)->get_RightValue(pVal);
}

template <class T> VARIANT __fastcall
TCOMIQueryConditionT<T>::get_RightValue(void)
{
  VARIANT pVal;
  OLECHECK(this->get_RightValue((VARIANT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionT<T>::set_RightValue(VARIANT pVal/*[in]*/)
{
  return (*this)->set_RightValue(pVal);
}

// *********************************************************************//
// DispIntf:  IQueryCondition
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D74D5CE8-1B37-4E54-951E-03649A222646}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::get_Property(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQueryConditionDispT<T>::get_Property(void)
{
  BSTR pVal;
  this->get_Property((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::set_Property(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Property"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::get_Operator(Ptssmolib_tlb::TcOperatorType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Operator"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcOperatorType __fastcall
IQueryConditionDispT<T>::get_Operator(void)
{
  Ptssmolib_tlb::TcOperatorType pVal;
  this->get_Operator((Ptssmolib_tlb::TcOperatorType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Operator"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::get_LeftValue(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IQueryConditionDispT<T>::get_LeftValue(void)
{
  VARIANT pVal;
  this->get_LeftValue((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::set_LeftValue(VARIANT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LeftValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::get_RightValue(VARIANT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightValue"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IQueryConditionDispT<T>::get_RightValue(void)
{
  VARIANT pVal;
  this->get_RightValue((VARIANT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQueryConditionDispT<T>::set_RightValue(VARIANT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RightValue"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIQueryConditions
// Interface: IQueryConditions
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIQueryConditionsT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IQueryCondition* __fastcall
TCOMIQueryConditionsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IQueryCondition* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IQueryCondition**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIQueryConditionsT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::Add(Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/)
{
  return (*this)->Add(ppObjVal);
}

template <class T> Ptssmolib_tlb::IQueryCondition* __fastcall
TCOMIQueryConditionsT<T>::Add(void)
{
  Ptssmolib_tlb::IQueryCondition* ppObjVal;
  OLECHECK(this->Add((Ptssmolib_tlb::IQueryCondition**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::DeleteAll(void)
{
  return (*this)->DeleteAll();
}

template <class T> HRESULT __fastcall
TCOMIQueryConditionsT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  return (*this)->RemoveAt(Index);
}

// *********************************************************************//
// DispIntf:  IQueryConditions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C7E3C0C-8920-463F-8A40-3556A163ED4D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IQueryConditionsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                   Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQueryCondition**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQueryCondition* __fastcall
IQueryConditionsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IQueryCondition* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IQueryCondition**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQueryConditionsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::Add(Ptssmolib_tlb::IQueryCondition** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IQueryCondition**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IQueryCondition* __fastcall
IQueryConditionsDispT<T>::Add(void)
{
  Ptssmolib_tlb::IQueryCondition* ppObjVal;
  this->Add((Ptssmolib_tlb::IQueryCondition**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::DeleteAll()
{
  _TDispID _dispid(*this, OLETEXT("DeleteAll"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IQueryConditionsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPermission
// Interface: IPermission
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantee(pVal);
}

template <class T> BSTR __fastcall
TCOMIPermissionT<T>::get_Grantee(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantee((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  return (*this)->get_GranteeType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
TCOMIPermissionT<T>::get_GranteeType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  OLECHECK(this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantor(pVal);
}

template <class T> BSTR __fastcall
TCOMIPermissionT<T>::get_Grantor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  return (*this)->get_GrantorType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
TCOMIPermissionT<T>::get_GrantorType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  OLECHECK(this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectType(pVal);
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
TCOMIPermissionT<T>::get_ObjectType(void)
{
  Ptssmolib_tlb::TcObjectType pVal;
  OLECHECK(this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_ObjectID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectID(pVal);
}

template <class T> long __fastcall
TCOMIPermissionT<T>::get_ObjectID(void)
{
  long pVal;
  OLECHECK(this->get_ObjectID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_ObjectName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectName(pVal);
}

template <class T> BSTR __fastcall
TCOMIPermissionT<T>::get_ObjectName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ObjectName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  return (*this)->get_PermissionState(pVal);
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
TCOMIPermissionT<T>::get_PermissionState(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  OLECHECK(this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/)
{
  return (*this)->get_PrivilegeType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrivilegeType __fastcall
TCOMIPermissionT<T>::get_PrivilegeType(void)
{
  Ptssmolib_tlb::TcPrivilegeType pVal;
  OLECHECK(this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPermissionT<T>::get_PrivilegeName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PrivilegeName(pVal);
}

template <class T> BSTR __fastcall
TCOMIPermissionT<T>::get_PrivilegeName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PrivilegeName((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPermission
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F380C5C-47AA-45CD-92E7-BBF2045ACC7C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantee"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPermissionDispT<T>::get_Grantee(void)
{
  BSTR pVal;
  this->get_Grantee((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GranteeType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
IPermissionDispT<T>::get_GranteeType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantor"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPermissionDispT<T>::get_Grantor(void)
{
  BSTR pVal;
  this->get_Grantor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantorType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
IPermissionDispT<T>::get_GrantorType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IPermissionDispT<T>::get_ObjectType(void)
{
  Ptssmolib_tlb::TcObjectType pVal;
  this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_ObjectID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectID"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPermissionDispT<T>::get_ObjectID(void)
{
  long pVal;
  this->get_ObjectID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_ObjectName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectName"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPermissionDispT<T>::get_ObjectName(void)
{
  BSTR pVal;
  this->get_ObjectName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PermissionState"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
IPermissionDispT<T>::get_PermissionState(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrivilegeType"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrivilegeType __fastcall
IPermissionDispT<T>::get_PrivilegeType(void)
{
  Ptssmolib_tlb::TcPrivilegeType pVal;
  this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPermissionDispT<T>::get_PrivilegeName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrivilegeName"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPermissionDispT<T>::get_PrivilegeName(void)
{
  BSTR pVal;
  this->get_PrivilegeName((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIServers
// Interface: IServers
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIServersT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IServer* __fastcall
TCOMIServersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IServer* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IServer**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIServersT<T>::Add(Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/)
{
  return (*this)->Add(ppObjVal);
}

template <class T> Ptssmolib_tlb::IServer* __fastcall
TCOMIServersT<T>::Add(void)
{
  Ptssmolib_tlb::IServer* ppObjVal;
  OLECHECK(this->Add((Ptssmolib_tlb::IServer**)&ppObjVal));
  return ppObjVal;
}

// *********************************************************************//
// DispIntf:  IServers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {834DA75C-BA20-490C-8ED6-4C074FE6850B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IServersDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IServer**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IServer* __fastcall
IServersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IServer* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IServer**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::Add(Ptssmolib_tlb::IServer** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IServer**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IServer* __fastcall
IServersDispT<T>::Add(void)
{
  Ptssmolib_tlb::IServer* ppObjVal;
  this->Add((Ptssmolib_tlb::IServer**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IServersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServersDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IServersDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IServersDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IServersDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IServersDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServersDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIServer
// Interface: IServer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/)
{
  return (*this)->get_LoginType(pVal);
}

template <class T> Ptssmolib_tlb::TcLoginType __fastcall
TCOMIServerT<T>::get_LoginType(void)
{
  Ptssmolib_tlb::TcLoginType pVal;
  OLECHECK(this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_DomainName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DomainName(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_DomainName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DomainName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_UserName(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_UserName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_UserName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Password(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Password(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_Password(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Password((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_AuthnLevel(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AuthnLevel(pVal);
}

template <class T> long __fastcall
TCOMIServerT<T>::get_AuthnLevel(void)
{
  long pVal;
  OLECHECK(this->get_AuthnLevel((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_ImpLevel(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ImpLevel(pVal);
}

template <class T> long __fastcall
TCOMIServerT<T>::get_ImpLevel(void)
{
  long pVal;
  OLECHECK(this->get_ImpLevel((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_IsLogined(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsLogined(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIServerT<T>::get_IsLogined(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsLogined((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Status(Ptssmolib_tlb::TcServerStatus* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcServerStatus __fastcall
TCOMIServerT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcServerStatus pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcServerStatus*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_VersionMajor(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VersionMajor(pVal);
}

template <class T> long __fastcall
TCOMIServerT<T>::get_VersionMajor(void)
{
  long pVal;
  OLECHECK(this->get_VersionMajor((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_VersionMinor(long* pVal/*[out,retval]*/)
{
  return (*this)->get_VersionMinor(pVal);
}

template <class T> long __fastcall
TCOMIServerT<T>::get_VersionMinor(void)
{
  long pVal;
  OLECHECK(this->get_VersionMinor((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_VersionString(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_VersionString(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_VersionString(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_VersionString((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_InitializeDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InitializeDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_InitializeDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InitializeDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_BackupDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_BackupDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIServerT<T>::get_BackupDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_BackupDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  return (*this)->get_Customers(pVal);
}

template <class T> Ptssmolib_tlb::ICustomersPtr __fastcall
TCOMIServerT<T>::get_Customers(void)
{
  Ptssmolib_tlb::ICustomersPtr pVal;
  OLECHECK(this->get_Customers((Ptssmolib_tlb::ICustomersPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Brokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/)
{
  return (*this)->get_Brokers(pVal);
}

template <class T> Ptssmolib_tlb::IBrokersPtr __fastcall
TCOMIServerT<T>::get_Brokers(void)
{
  Ptssmolib_tlb::IBrokersPtr pVal;
  OLECHECK(this->get_Brokers((Ptssmolib_tlb::IBrokersPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  return (*this)->get_EventTopics(pVal);
}

template <class T> Ptssmolib_tlb::IEventTopicsPtr __fastcall
TCOMIServerT<T>::get_EventTopics(void)
{
  Ptssmolib_tlb::IEventTopicsPtr pVal;
  OLECHECK(this->get_EventTopics((Ptssmolib_tlb::IEventTopicsPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  return (*this)->get_Exchanges(pVal);
}

template <class T> Ptssmolib_tlb::IExchangesPtr __fastcall
TCOMIServerT<T>::get_Exchanges(void)
{
  Ptssmolib_tlb::IExchangesPtr pVal;
  OLECHECK(this->get_Exchanges((Ptssmolib_tlb::IExchangesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  return (*this)->get_Tasks(pVal);
}

template <class T> Ptssmolib_tlb::ITasksPtr __fastcall
TCOMIServerT<T>::get_Tasks(void)
{
  Ptssmolib_tlb::ITasksPtr pVal;
  OLECHECK(this->get_Tasks((Ptssmolib_tlb::ITasksPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  return (*this)->get_Roles(pVal);
}

template <class T> Ptssmolib_tlb::IRolesPtr __fastcall
TCOMIServerT<T>::get_Roles(void)
{
  Ptssmolib_tlb::IRolesPtr pVal;
  OLECHECK(this->get_Roles((Ptssmolib_tlb::IRolesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  return (*this)->get_Users(pVal);
}

template <class T> Ptssmolib_tlb::IUsersPtr __fastcall
TCOMIServerT<T>::get_Users(void)
{
  Ptssmolib_tlb::IUsersPtr pVal;
  OLECHECK(this->get_Users((Ptssmolib_tlb::IUsersPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Portfolios(Ptssmolib_tlb::IPortfolios** pVal/*[out,retval]*/)
{
  return (*this)->get_Portfolios(pVal);
}

template <class T> Ptssmolib_tlb::IPortfoliosPtr __fastcall
TCOMIServerT<T>::get_Portfolios(void)
{
  Ptssmolib_tlb::IPortfoliosPtr pVal;
  OLECHECK(this->get_Portfolios((Ptssmolib_tlb::IPortfoliosPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIServerT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  return (*this)->get_Charts(pVal);
}

template <class T> Ptssmolib_tlb::IChartsPtr __fastcall
TCOMIServerT<T>::get_Charts(void)
{
  Ptssmolib_tlb::IChartsPtr pVal;
  OLECHECK(this->get_Charts((Ptssmolib_tlb::IChartsPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** pVal/*[out,retval]*/)
{
  return (*this)->get_BrokerAccounts(pVal);
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
TCOMIServerT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr pVal;
  OLECHECK(this->get_BrokerAccounts((Ptssmolib_tlb::IBrokerAccountsPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  return (*this)->ChangePassword(OldPassword, NewPassword);
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/)
{
  return (*this)->CollectData(Type);
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::CheckAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  return (*this)->CheckAccounts(ppExecReoprts);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIServerT<T>::CheckAccounts(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  OLECHECK(this->CheckAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/, 
                           Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/)
{
  return (*this)->GetObject(Type, ObjectID, ppObject);
}

template <class T> Ptssmolib_tlb::IObjectBase* __fastcall
TCOMIServerT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectBase* ppObject;
  OLECHECK(this->GetObject(Type/*[in]*/, ObjectID/*[in]*/, (Ptssmolib_tlb::IObjectBase**)&ppObject));
  return ppObject;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Initialize(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  return (*this)->Initialize(ppExecReoprts);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIServerT<T>::Initialize(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  OLECHECK(this->Initialize((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, BSTR UserName/*[in]*/, 
                       BSTR Domain/*[in]*/, BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                       long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/)
{
  return (*this)->Login(LoginType, UserName, Domain, Password, ServerName, AuthnLevel, ImpLevel);
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Logout(void)
{
  return (*this)->Logout();
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                              Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                              long* pErrorIndex/*[out,retval]*/)
{
  return (*this)->CommitOrders(AccountID, Mode, pOrders, pErrorIndex);
}

template <class T> long __fastcall
TCOMIServerT<T>::CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                              Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
{
  long pErrorIndex;
  OLECHECK(this->CommitOrders(AccountID/*[in]*/, Mode/*[in]*/, pOrders/*[in]*/, (long*)&pErrorIndex));
  return pErrorIndex;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                              long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                              Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  return (*this)->QueryObjects(Type, Conditions, pStartIndex, RowCount, ppObjects);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIServerT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                              long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  OLECHECK(this->QueryObjects(Type/*[in]*/, Conditions/*[in]*/, pStartIndex/*[in,out]*/, 
                              RowCount/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppObjects));
  return ppObjects;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Run(void)
{
  return (*this)->Run();
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::Pause(void)
{
  return (*this)->Pause();
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::SynchAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  return (*this)->SynchAccounts(ppExecReoprts);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIServerT<T>::SynchAccounts(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  OLECHECK(this->SynchAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts));
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetOnlineUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIServerT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetAllUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIServerT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  return (*this)->AddProject(p);
}

template <class T> HRESULT __fastcall
TCOMIServerT<T>::GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/)
{
  return (*this)->GetNewStocks(pVal);
}

template <class T> Ptssmolib_tlb::INewStockSet* __fastcall
TCOMIServerT<T>::GetNewStocks(void)
{
  Ptssmolib_tlb::INewStockSet* pVal;
  OLECHECK(this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13C3CC10-4B55-4509-829B-92D846C59639}
// *********************************************************************//
template <class T> HRESULT __fastcall
IServerDispT<T>::get_LoginType(Ptssmolib_tlb::TcLoginType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoginType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcLoginType __fastcall
IServerDispT<T>::get_LoginType(void)
{
  Ptssmolib_tlb::TcLoginType pVal;
  this->get_LoginType((Ptssmolib_tlb::TcLoginType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_DomainName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DomainName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_DomainName(void)
{
  BSTR pVal;
  this->get_DomainName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_UserName(void)
{
  BSTR pVal;
  this->get_UserName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Password(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Password"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_Password(void)
{
  BSTR pVal;
  this->get_Password((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_AuthnLevel(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthnLevel"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerDispT<T>::get_AuthnLevel(void)
{
  long pVal;
  this->get_AuthnLevel((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_ImpLevel(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImpLevel"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerDispT<T>::get_ImpLevel(void)
{
  long pVal;
  this->get_ImpLevel((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_IsLogined(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsLogined"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IServerDispT<T>::get_IsLogined(void)
{
  VARIANT_BOOL pVal;
  this->get_IsLogined((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Status(Ptssmolib_tlb::TcServerStatus* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcServerStatus __fastcall
IServerDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcServerStatus pVal;
  this->get_Status((Ptssmolib_tlb::TcServerStatus*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_VersionMajor(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionMajor"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerDispT<T>::get_VersionMajor(void)
{
  long pVal;
  this->get_VersionMajor((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_VersionMinor(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionMinor"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IServerDispT<T>::get_VersionMinor(void)
{
  long pVal;
  this->get_VersionMinor((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_VersionString(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionString"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_VersionString(void)
{
  BSTR pVal;
  this->get_VersionString((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_InitializeDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitializeDate"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_InitializeDate(void)
{
  BSTR pVal;
  this->get_InitializeDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_BackupDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackupDate"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_BackupDate(void)
{
  BSTR pVal;
  this->get_BackupDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Customers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Customers"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomers**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomersPtr __fastcall
IServerDispT<T>::get_Customers(void)
{
  Ptssmolib_tlb::ICustomersPtr pVal;
  this->get_Customers(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Brokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brokers"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokers**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokersPtr __fastcall
IServerDispT<T>::get_Brokers(void)
{
  Ptssmolib_tlb::IBrokersPtr pVal;
  this->get_Brokers(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_EventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventTopics"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventTopics**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventTopicsPtr __fastcall
IServerDispT<T>::get_EventTopics(void)
{
  Ptssmolib_tlb::IEventTopicsPtr pVal;
  this->get_EventTopics(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Exchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Exchanges"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchanges**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchangesPtr __fastcall
IServerDispT<T>::get_Exchanges(void)
{
  Ptssmolib_tlb::IExchangesPtr pVal;
  this->get_Exchanges(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Tasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tasks"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITasks**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITasksPtr __fastcall
IServerDispT<T>::get_Tasks(void)
{
  Ptssmolib_tlb::ITasksPtr pVal;
  this->get_Tasks(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Roles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Roles"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IRoles**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IRolesPtr __fastcall
IServerDispT<T>::get_Roles(void)
{
  Ptssmolib_tlb::IRolesPtr pVal;
  this->get_Roles(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Users(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Users"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IUsers**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IUsersPtr __fastcall
IServerDispT<T>::get_Users(void)
{
  Ptssmolib_tlb::IUsersPtr pVal;
  this->get_Users(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Portfolios(Ptssmolib_tlb::IPortfolios** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Portfolios"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPortfolios**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPortfoliosPtr __fastcall
IServerDispT<T>::get_Portfolios(void)
{
  Ptssmolib_tlb::IPortfoliosPtr pVal;
  this->get_Portfolios(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IServerDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Charts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Charts"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICharts**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IChartsPtr __fastcall
IServerDispT<T>::get_Charts(void)
{
  Ptssmolib_tlb::IChartsPtr pVal;
  this->get_Charts(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerAccounts"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokerAccounts**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
IServerDispT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr pVal;
  this->get_BrokerAccounts(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChangePassword"), DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = OldPassword /*[VT_BSTR:0]*/;
  _args[2] = NewPassword /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CollectData"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::CheckAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckAccounts"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppExecReoprts /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IServerDispT<T>::CheckAccounts(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  this->CheckAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts);
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/, 
                           Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectID /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)ppObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBase* __fastcall
IServerDispT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectBase* ppObject;
  this->GetObject(Type, ObjectID, (Ptssmolib_tlb::IObjectBase**)&ppObject);
  return ppObject;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Initialize(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Initialize"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppExecReoprts /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IServerDispT<T>::Initialize(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  this->Initialize((Ptssmolib_tlb::IObjectList**)&ppExecReoprts);
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, BSTR UserName/*[in]*/, 
                       BSTR Domain/*[in]*/, BSTR Password/*[in]*/, BSTR ServerName/*[in]*/, 
                       long AuthnLevel/*[in]*/, long ImpLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Login"), DISPID(38));
  TAutoArgs<7> _args;
  _args[1] = (int)LoginType /*[VT_USERDEFINED:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Domain /*[VT_BSTR:0]*/;
  _args[4] = Password /*[VT_BSTR:0]*/;
  _args[5] = ServerName /*[VT_BSTR:0]*/;
  _args[6] = AuthnLevel /*[VT_I4:0]*/;
  _args[7] = ImpLevel /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Logout()
{
  _TDispID _dispid(*this, OLETEXT("Logout"), DISPID(39));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/
                              , Ptssmolib_tlb::IOrders* pOrders/*[in]*/, 
                              long* pErrorIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommitOrders"), DISPID(40));
  TAutoArgs<3> _args;
  _args[1] = AccountID /*[VT_I4:0]*/;
  _args[2] = (int)Mode /*[VT_USERDEFINED:0]*/;
  _args[3] = (LPDISPATCH)(Ptssmolib_tlb::IOrders*)pOrders /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pErrorIndex /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IServerDispT<T>::CommitOrders(long AccountID/*[in]*/, Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                              Ptssmolib_tlb::IOrders* pOrders/*[in]*/)
{
  long pErrorIndex;
  this->CommitOrders(AccountID, Mode, pOrders, (long*)&pErrorIndex);
  return pErrorIndex;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                              long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                              Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryObjects"), DISPID(41));
  TAutoArgs<4> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Conditions /*[VT_BSTR:0]*/;
  _args[3] = pStartIndex /*[VT_I4:1]*/;
  _args[4] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjects /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IServerDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                              long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects);
  return ppObjects;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Run()
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(42));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(43));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Pause()
{
  _TDispID _dispid(*this, OLETEXT("Pause"), DISPID(44));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::SynchAccounts(Ptssmolib_tlb::IObjectList** ppExecReoprts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SynchAccounts"), DISPID(45));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppExecReoprts /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IServerDispT<T>::SynchAccounts(void)
{
  Ptssmolib_tlb::IObjectList* ppExecReoprts;
  this->SynchAccounts((Ptssmolib_tlb::IObjectList**)&ppExecReoprts);
  return ppExecReoprts;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOnlineUserNames"), DISPID(47));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IServerDispT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllUserNames"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IServerDispT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddProject"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IProject*)p /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::GetNewStocks(Ptssmolib_tlb::INewStockSet** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNewStocks"), DISPID(50));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INewStockSet**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INewStockSet* __fastcall
IServerDispT<T>::GetNewStocks(void)
{
  Ptssmolib_tlb::INewStockSet* pVal;
  this->GetNewStocks((Ptssmolib_tlb::INewStockSet**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IServerDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IServerDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IServerDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IServerDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IServerDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IServerDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIBrokers
// Interface: IBrokers
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBrokersT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IBroker** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IBroker* __fastcall
TCOMIBrokersT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IBroker* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IBroker**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokersT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IBroker** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IBroker* __fastcall
TCOMIBrokersT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IBroker* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IBroker**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIBrokersT<T>::Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/)
{
  return (*this)->Add(pObjVal);
}

// *********************************************************************//
// DispIntf:  IBrokers
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CB39F9E-FB59-4EB6-986D-A8DD23515A60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_Item(VARIANT Index/*[in]*/, Ptssmolib_tlb::IBroker** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBroker**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBroker* __fastcall
IBrokersDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IBroker* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IBroker**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IBroker** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBroker**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBroker* __fastcall
IBrokersDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IBroker* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IBroker**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IBroker*)pObjVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IBrokersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokersDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IBrokersDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IBrokersDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IBrokersDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBrokersDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokersDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIBroker
// Interface: IBroker
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIBrokerT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_SystemName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_SystemName(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerT<T>::get_SystemName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_SystemName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::set_SystemName(BSTR pVal/*[in]*/)
{
  return (*this)->set_SystemName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ServerName(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerT<T>::get_ServerName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ServerName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::set_ServerName(BSTR pVal/*[in]*/)
{
  return (*this)->set_ServerName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_ServerPort(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ServerPort(pVal);
}

template <class T> long __fastcall
TCOMIBrokerT<T>::get_ServerPort(void)
{
  long pVal;
  OLECHECK(this->get_ServerPort((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::set_ServerPort(long pVal/*[in]*/)
{
  return (*this)->set_ServerPort(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIBrokerT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/)
{
  return (*this)->get_BrokerAccounts(ppRetVal);
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
TCOMIBrokerT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
  OLECHECK(this->get_BrokerAccounts((Ptssmolib_tlb::IBrokerAccountsPtr*)&ppRetVal));
  return ppRetVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIBrokerT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::AddMember(long BrokerAccountID/*[in]*/)
{
  return (*this)->AddMember(BrokerAccountID);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::Connect(void)
{
  return (*this)->Connect();
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::DropMember(long BrokerAccountID/*[in]*/)
{
  return (*this)->DropMember(BrokerAccountID);
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::ListMembers(Ptssmolib_tlb::IObjectList** ppAccounts/*[out,retval]*/)
{
  return (*this)->ListMembers(ppAccounts);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIBrokerT<T>::ListMembers(void)
{
  Ptssmolib_tlb::IObjectList* ppAccounts;
  OLECHECK(this->ListMembers((Ptssmolib_tlb::IObjectList**)&ppAccounts));
  return ppAccounts;
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::RunOrderSyncJob(void)
{
  return (*this)->RunOrderSyncJob();
}

template <class T> HRESULT __fastcall
TCOMIBrokerT<T>::StopOrderSyncJob(void)
{
  return (*this)->StopOrderSyncJob();
}

// *********************************************************************//
// DispIntf:  IBroker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1C964C4C-73C5-47B5-986D-371A40256813}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_SystemName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SystemName"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_SystemName(void)
{
  BSTR pVal;
  this->get_SystemName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_SystemName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SystemName"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_ServerName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_ServerName(void)
{
  BSTR pVal;
  this->get_ServerName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_ServerName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerName"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_ServerPort(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerPort"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrokerDispT<T>::get_ServerPort(void)
{
  long pVal;
  this->get_ServerPort((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_ServerPort(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerPort"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_BrokerAccounts(Ptssmolib_tlb::IBrokerAccounts** ppRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrokerAccounts"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokerAccounts**)ppRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokerAccountsPtr __fastcall
IBrokerDispT<T>::get_BrokerAccounts(void)
{
  Ptssmolib_tlb::IBrokerAccountsPtr ppRetVal;
  this->get_BrokerAccounts(&ppRetVal);
  return ppRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IBrokerDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pVal;
  this->get_ExtendedProperties(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::AddMember(long BrokerAccountID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMember"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = BrokerAccountID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::DropMember(long BrokerAccountID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropMember"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = BrokerAccountID /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::ListMembers(Ptssmolib_tlb::IObjectList** ppAccounts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListMembers"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppAccounts /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IBrokerDispT<T>::ListMembers(void)
{
  Ptssmolib_tlb::IObjectList* ppAccounts;
  this->ListMembers((Ptssmolib_tlb::IObjectList**)&ppAccounts);
  return ppAccounts;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::RunOrderSyncJob()
{
  _TDispID _dispid(*this, OLETEXT("RunOrderSyncJob"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::StopOrderSyncJob()
{
  _TDispID _dispid(*this, OLETEXT("StopOrderSyncJob"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrokerDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IBrokerDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IBrokerDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IBrokerDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IBrokerDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IBrokerDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPortfolios
// Interface: IPortfolios
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPortfoliosT<T>::get_Item(VARIANT Index/*[in]*/, 
                              Ptssmolib_tlb::IPortfolio** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IPortfolio* __fastcall
TCOMIPortfoliosT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPortfolio* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IPortfolio**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfoliosT<T>::get_ItemByID(long ID/*[in]*/, 
                                  Ptssmolib_tlb::IPortfolio** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IPortfolio* __fastcall
TCOMIPortfoliosT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IPortfolio* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IPortfolio**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIPortfoliosT<T>::Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/)
{
  return (*this)->Add(pObjVal);
}

// *********************************************************************//
// DispIntf:  IPortfolios
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5C1827B-C504-49B7-8722-4213A1B5039E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                              Ptssmolib_tlb::IPortfolio** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPortfolio**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPortfolio* __fastcall
IPortfoliosDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IPortfolio* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IPortfolio**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_ItemByID(long ID/*[in]*/, 
                                  Ptssmolib_tlb::IPortfolio** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPortfolio**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPortfolio* __fastcall
IPortfoliosDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IPortfolio* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IPortfolio**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IPortfolio*)pObjVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IPortfoliosDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPortfoliosDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IPortfoliosDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IPortfoliosDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IPortfoliosDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IPortfoliosDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfoliosDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPortfolio
// Interface: IPortfolio
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateDate(pVal);
}

template <class T> BSTR __fastcall
TCOMIPortfolioT<T>::get_CreateDate(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateDate((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_DateLastModified(pVal);
}

template <class T> BSTR __fastcall
TCOMIPortfolioT<T>::get_DateLastModified(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_DateLastModified((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIPortfolioT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Description(pVal);
}

template <class T> BSTR __fastcall
TCOMIPortfolioT<T>::get_Description(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Description((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::set_Description(BSTR pVal/*[in]*/)
{
  return (*this)->set_Description(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/)
{
  return (*this)->get_ExtendedProperties(pRetVal);
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
TCOMIPortfolioT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
  OLECHECK(this->get_ExtendedProperties((Ptssmolib_tlb::IExtendedPropertiesPtr*)&pRetVal));
  return pRetVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioT<T>::get_Items(Ptssmolib_tlb::IPortfolioItemSet** pVal/*[out,retval]*/)
{
  return (*this)->get_Items(pVal);
}

template <class T> Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall
TCOMIPortfolioT<T>::get_Items(void)
{
  Ptssmolib_tlb::IPortfolioItemSetPtr pVal;
  OLECHECK(this->get_Items((Ptssmolib_tlb::IPortfolioItemSetPtr*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPortfolio
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BBF4CF4A-47F2-4CFF-81A4-B8E26739AC25}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_CreateDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDate"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioDispT<T>::get_CreateDate(void)
{
  BSTR pVal;
  this->get_CreateDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_DateLastModified(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateLastModified"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioDispT<T>::get_DateLastModified(void)
{
  BSTR pVal;
  this->get_DateLastModified((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPortfolioDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_Description(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioDispT<T>::get_Description(void)
{
  BSTR pVal;
  this->get_Description((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::set_Description(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_ExtendedProperties(Ptssmolib_tlb::IExtendedProperties** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedProperties"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExtendedProperties**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall
IPortfolioDispT<T>::get_ExtendedProperties(void)
{
  Ptssmolib_tlb::IExtendedPropertiesPtr pRetVal;
  this->get_ExtendedProperties(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_Items(Ptssmolib_tlb::IPortfolioItemSet** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Items"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPortfolioItemSet**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall
IPortfolioDispT<T>::get_Items(void)
{
  Ptssmolib_tlb::IPortfolioItemSetPtr pVal;
  this->get_Items(&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_Name(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioDispT<T>::get_Name(void)
{
  BSTR pRetVal;
  this->get_Name((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::set_Name(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809344));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_Owner(BSTR* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioDispT<T>::get_Owner(void)
{
  BSTR pRetVal;
  this->get_Owner((BSTR*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::set_Owner(BSTR pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Owner"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(1610809348));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IPortfolioDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IPortfolioDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IPortfolioDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IPortfolioDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IPortfolioDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPortfolioItemSet
// Interface: IPortfolioItemSet
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIPortfolioItemSetT<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::set_InstID(BSTR pVal/*[in]*/)
{
  return (*this)->set_InstID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIPortfolioItemSetT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::set_InstIDSource(long pVal/*[in]*/)
{
  return (*this)->set_InstIDSource(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_Qty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Qty(pVal);
}

template <class T> long __fastcall
TCOMIPortfolioItemSetT<T>::get_Qty(void)
{
  long pVal;
  OLECHECK(this->get_Qty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::set_Qty(long pVal/*[in]*/)
{
  return (*this)->set_Qty(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_IsCrossTrade(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsCrossTrade(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortfolioItemSetT<T>::get_IsCrossTrade(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsCrossTrade((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsCrossTrade(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_ItemBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ItemBOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortfolioItemSetT<T>::get_ItemBOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ItemBOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_ItemEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ItemEOF(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPortfolioItemSetT<T>::get_ItemEOF(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ItemEOF((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIPortfolioItemSetT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::AddNew(void)
{
  return (*this)->AddNew();
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::_Update(void)
{
  return (*this)->_Update();
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMIPortfolioItemSetT<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

// *********************************************************************//
// DispIntf:  IPortfolioItemSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E172085-8E32-4DC2-BFF3-10A96D192300}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPortfolioItemSetDispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::set_InstID(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPortfolioItemSetDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::set_InstIDSource(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_Qty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Qty"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPortfolioItemSetDispT<T>::get_Qty(void)
{
  long pVal;
  this->get_Qty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::set_Qty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Qty"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_IsCrossTrade(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsCrossTrade"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortfolioItemSetDispT<T>::get_IsCrossTrade(void)
{
  VARIANT_BOOL pVal;
  this->get_IsCrossTrade((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsCrossTrade"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_ItemBOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemBOF"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortfolioItemSetDispT<T>::get_ItemBOF(void)
{
  VARIANT_BOOL pVal;
  this->get_ItemBOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_ItemEOF(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemEOF"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPortfolioItemSetDispT<T>::get_ItemEOF(void)
{
  VARIANT_BOOL pVal;
  this->get_ItemEOF((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPortfolioItemSetDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::AddNew()
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::_Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPortfolioItemSetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(13));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIDictionary
// Interface: IDictionary
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IDictionary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5ACD7FF3-0AA0-4C15-AC34-E69BD3CC26C0}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDictionaryDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IDictionaryDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDictionaryDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IDictionaryDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDictionaryDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IDictionaryDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDictionaryDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IDictionaryDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IDictionaryDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IBrokerEvents
// Flags:     (4096) Dispatchable
// GUID:      {3194185A-4DF4-4059-94AE-1F89CB3C9106}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IBrokerEventsDispT<T>::OnConnected()
{
  _TDispID _dispid(/* OnConnected */ DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_IBrokerEventsDispT<T>::OnDisconnected()
{
  _TDispID _dispid(/* OnDisconnected */ DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_IBrokerEventsDispT<T>::OnSynchronize(Ptssmolib_tlb::TcMessageType Type/*[in]*/, 
                                      BSTR Message/*[in]*/)
{
  _TDispID _dispid(/* OnSynchronize */ DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Message /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIQuoteTickData
// Interface: IQuoteTickData
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteTickDataT<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIQuoteTickDataT<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteTickDataT<T>::get_LastQty(void)
{
  long pVal;
  OLECHECK(this->get_LastQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LastPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuoteTickDataT<T>::get_LastPrice(void)
{
  double pVal;
  OLECHECK(this->get_LastPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LastTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteTickDataT<T>::get_LastTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LastTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DayQty(pVal);
}

template <class T> long __fastcall
TCOMIQuoteTickDataT<T>::get_DayQty(void)
{
  long pVal;
  OLECHECK(this->get_DayQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuoteTickDataT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuoteTickDataT<T>::get_TradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradingDay((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IQuoteTickData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9B24B576-EE54-4541-87CE-9B5DBC47CB7B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteTickDataDispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteTickDataDispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastQty"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteTickDataDispT<T>::get_LastQty(void)
{
  long pVal;
  this->get_LastQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastPrice"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuoteTickDataDispT<T>::get_LastPrice(void)
{
  double pVal;
  this->get_LastPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTime"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteTickDataDispT<T>::get_LastTime(void)
{
  BSTR pVal;
  this->get_LastTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuoteTickDataDispT<T>::get_DayQty(void)
{
  long pVal;
  this->get_DayQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuoteTickDataDispT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuoteTickDataDispT<T>::get_TradingDay(void)
{
  BSTR pVal;
  this->get_TradingDay((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIOrderReport
// Interface: IOrderReport
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_OrderID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OrderID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderReportT<T>::get_OrderID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OrderID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_ExecID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderReportT<T>::get_ExecID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExecID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_AccountID(pVal);
}

template <class T> long __fastcall
TCOMIOrderReportT<T>::get_AccountID(void)
{
  long pVal;
  OLECHECK(this->get_AccountID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExchAcctID(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderReportT<T>::get_ExchAcctID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExchAcctID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_CancelQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CancelQty(pVal);
}

template <class T> long __fastcall
TCOMIOrderReportT<T>::get_CancelQty(void)
{
  long pVal;
  OLECHECK(this->get_CancelQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_ExecQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecQty(pVal);
}

template <class T> long __fastcall
TCOMIOrderReportT<T>::get_ExecQty(void)
{
  long pVal;
  OLECHECK(this->get_ExecQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_ExecPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecPrice(pVal);
}

template <class T> double __fastcall
TCOMIOrderReportT<T>::get_ExecPrice(void)
{
  double pVal;
  OLECHECK(this->get_ExecPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_ExecTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ExecTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderReportT<T>::get_ExecTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ExecTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIOrderReportT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Text(pVal);
}

template <class T> BSTR __fastcall
TCOMIOrderReportT<T>::get_Text(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Text((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IOrderReport
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AF6361AA-F62F-4CCA-90DA-FD92C54E3B12}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_OrderID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderReportDispT<T>::get_OrderID(void)
{
  BSTR pVal;
  this->get_OrderID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_ExecID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderReportDispT<T>::get_ExecID(void)
{
  BSTR pVal;
  this->get_ExecID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_AccountID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccountID"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderReportDispT<T>::get_AccountID(void)
{
  long pVal;
  this->get_AccountID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_ExchAcctID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExchAcctID"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderReportDispT<T>::get_ExchAcctID(void)
{
  BSTR pVal;
  this->get_ExchAcctID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_CancelQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelQty"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderReportDispT<T>::get_CancelQty(void)
{
  long pVal;
  this->get_CancelQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_ExecQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecQty"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderReportDispT<T>::get_ExecQty(void)
{
  long pVal;
  this->get_ExecQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_ExecPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecPrice"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderReportDispT<T>::get_ExecPrice(void)
{
  double pVal;
  this->get_ExecPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_ExecTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecTime"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderReportDispT<T>::get_ExecTime(void)
{
  BSTR pVal;
  this->get_ExecTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderReportDispT<T>::get_Text(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderReportDispT<T>::get_Text(void)
{
  BSTR pVal;
  this->get_Text((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIObjectPermissionInfo
// Interface: IObjectPermissionInfo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantee(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_Grantee(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantee((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  return (*this)->get_GranteeType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
TCOMIObjectPermissionInfoT<T>::get_GranteeType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  OLECHECK(this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantor(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_Grantor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  return (*this)->get_GrantorType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
TCOMIObjectPermissionInfoT<T>::get_GrantorType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  OLECHECK(this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectID(pVal);
}

template <class T> long __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectID(void)
{
  long pVal;
  OLECHECK(this->get_ObjectID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectName(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ObjectName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectOwner(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectOwner(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectOwner(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ObjectOwner((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectType(pVal);
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectType(void)
{
  Ptssmolib_tlb::TcObjectType pVal;
  OLECHECK(this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectTypeName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_ObjectTypeName(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_ObjectTypeName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_ObjectTypeName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  return (*this)->get_PermissionState(pVal);
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
TCOMIObjectPermissionInfoT<T>::get_PermissionState(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  OLECHECK(this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/)
{
  return (*this)->set_PermissionState(pVal);
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/)
{
  return (*this)->get_PrivilegeType(pVal);
}

template <class T> Ptssmolib_tlb::TcPrivilegeType __fastcall
TCOMIObjectPermissionInfoT<T>::get_PrivilegeType(void)
{
  Ptssmolib_tlb::TcPrivilegeType pVal;
  OLECHECK(this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIObjectPermissionInfoT<T>::get_PrivilegeName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_PrivilegeName(pVal);
}

template <class T> BSTR __fastcall
TCOMIObjectPermissionInfoT<T>::get_PrivilegeName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_PrivilegeName((BSTR*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IObjectPermissionInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {377F476A-98F5-4949-946D-9E8A5A55F59F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantee"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_Grantee(void)
{
  BSTR pVal;
  this->get_Grantee((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_GranteeType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GranteeType"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
IObjectPermissionInfoDispT<T>::get_GranteeType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  this->get_GranteeType((Ptssmolib_tlb::TcPrincipalType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantor"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_Grantor(void)
{
  BSTR pVal;
  this->get_Grantor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_GrantorType(Ptssmolib_tlb::TcPrincipalType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantorType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrincipalType __fastcall
IObjectPermissionInfoDispT<T>::get_GrantorType(void)
{
  Ptssmolib_tlb::TcPrincipalType pVal;
  this->get_GrantorType((Ptssmolib_tlb::TcPrincipalType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectID"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectID(void)
{
  long pVal;
  this->get_ObjectID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectName(void)
{
  BSTR pVal;
  this->get_ObjectName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectOwner(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectOwner"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectOwner(void)
{
  BSTR pVal;
  this->get_ObjectOwner((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectType(Ptssmolib_tlb::TcObjectType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectType"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectType(void)
{
  Ptssmolib_tlb::TcObjectType pVal;
  this->get_ObjectType((Ptssmolib_tlb::TcObjectType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectTypeName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectTypeName"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_ObjectTypeName(void)
{
  BSTR pVal;
  this->get_ObjectTypeName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_PermissionState(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PermissionState"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
IObjectPermissionInfoDispT<T>::get_PermissionState(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  this->get_PermissionState((Ptssmolib_tlb::TcPermissionState*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PermissionState"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_PrivilegeType(Ptssmolib_tlb::TcPrivilegeType* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrivilegeType"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPrivilegeType __fastcall
IObjectPermissionInfoDispT<T>::get_PrivilegeType(void)
{
  Ptssmolib_tlb::TcPrivilegeType pVal;
  this->get_PrivilegeType((Ptssmolib_tlb::TcPrivilegeType*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IObjectPermissionInfoDispT<T>::get_PrivilegeName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrivilegeName"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObjectPermissionInfoDispT<T>::get_PrivilegeName(void)
{
  BSTR pVal;
  this->get_PrivilegeName((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIProjects
// Interface: IProjects
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIProjectsT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IProject** ppObjVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppObjVal);
}

template <class T> Ptssmolib_tlb::IProject* __fastcall
TCOMIProjectsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IProject* ppObjVal;
  OLECHECK(this->get_Item(Index/*[in]*/, (Ptssmolib_tlb::IProject**)&ppObjVal));
  return ppObjVal;
}

template <class T> HRESULT __fastcall
TCOMIProjectsT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IProject** ppObjRet/*[out,retval]*/)
{
  return (*this)->get_ItemByID(ID, ppObjRet);
}

template <class T> Ptssmolib_tlb::IProject* __fastcall
TCOMIProjectsT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IProject* ppObjRet;
  OLECHECK(this->get_ItemByID(ID/*[in]*/, (Ptssmolib_tlb::IProject**)&ppObjRet));
  return ppObjRet;
}

template <class T> HRESULT __fastcall
TCOMIProjectsT<T>::Add(Ptssmolib_tlb::IProject* pObject/*[in]*/)
{
  return (*this)->Add(pObject);
}

// *********************************************************************//
// DispIntf:  IProjects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DBB31D07-06AA-4F42-9243-FF197C54F197}
// *********************************************************************//
template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                            Ptssmolib_tlb::IProject** ppObjVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IProject**)ppObjVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IProject* __fastcall
IProjectsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ptssmolib_tlb::IProject* ppObjVal;
  this->get_Item(Index, (Ptssmolib_tlb::IProject**)&ppObjVal);
  return ppObjVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_ItemByID(long ID/*[in]*/, Ptssmolib_tlb::IProject** ppObjRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemByID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = ID /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IProject**)ppObjRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IProject* __fastcall
IProjectsDispT<T>::get_ItemByID(long ID/*[in]*/)
{
  Ptssmolib_tlb::IProject* ppObjRet;
  this->get_ItemByID(ID, (Ptssmolib_tlb::IProject**)&ppObjRet);
  return ppObjRet;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::Add(Ptssmolib_tlb::IProject* pObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IProject*)pObject /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get__NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IProjectsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IProjectsDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::Refresh(VARIANT ReleaseMemberObjects/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = ReleaseMemberObjects /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::RemoveAt(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveAt"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_Parent(Ptssmolib_tlb::IObjectBase** pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)pRetVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBasePtr __fastcall
IProjectsDispT<T>::get_Parent(void)
{
  Ptssmolib_tlb::IObjectBasePtr pRetVal;
  this->get_Parent(&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_State(Ptssmolib_tlb::TcObjectState* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectState __fastcall
IProjectsDispT<T>::get_State(void)
{
  Ptssmolib_tlb::TcObjectState pRetVal;
  this->get_State((Ptssmolib_tlb::TcObjectState*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_TypeOf(Ptssmolib_tlb::TcObjectType* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TypeOf"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcObjectType __fastcall
IProjectsDispT<T>::get_TypeOf(void)
{
  Ptssmolib_tlb::TcObjectType pRetVal;
  this->get_TypeOf((Ptssmolib_tlb::TcObjectType*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::get_UserData(VARIANT* pRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IProjectsDispT<T>::get_UserData(void)
{
  VARIANT pRetVal;
  this->get_UserData((VARIANT*)&pRetVal);
  return pRetVal;
}

template <class T> HRESULT __fastcall
IProjectsDispT<T>::set_UserData(VARIANT pRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pRetVal /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIOrder2
// Interface: IOrder2
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IOrder2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0E181F33-772E-4689-897A-C2E473BF727E}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIAuthInfo
// Interface: IAuthInfo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ID(pVal);
}

template <class T> long __fastcall
TCOMIAuthInfoT<T>::get_ID(void)
{
  long pVal;
  OLECHECK(this->get_ID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_ID(long pVal/*[in]*/)
{
  return (*this)->set_ID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  return (*this)->get_CustomerID(pVal);
}

template <class T> long __fastcall
TCOMIAuthInfoT<T>::get_CustomerID(void)
{
  long pVal;
  OLECHECK(this->get_CustomerID((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_CustomerID(long pVal/*[in]*/)
{
  return (*this)->set_CustomerID(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Name(BSTR pVal/*[in]*/)
{
  return (*this)->set_Name(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Type(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Type(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Type(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Type((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Type(BSTR pVal/*[in]*/)
{
  return (*this)->set_Type(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Content(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Content(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Content(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Content((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Content(BSTR pVal/*[in]*/)
{
  return (*this)->set_Content(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantee(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Grantee(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantee((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Grantee(BSTR pVal/*[in]*/)
{
  return (*this)->set_Grantee(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_CreateTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_CreateTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_CreateTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_CreateTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_CreateTime(BSTR pVal/*[in]*/)
{
  return (*this)->set_CreateTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Grantor(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Grantor(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Grantor((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Grantor(BSTR pVal/*[in]*/)
{
  return (*this)->set_Grantor(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_GrantTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_GrantTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_GrantTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_GrantTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_GrantTime(BSTR pVal/*[in]*/)
{
  return (*this)->set_GrantTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Abolisher(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Abolisher(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_Abolisher(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Abolisher((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Abolisher(BSTR pVal/*[in]*/)
{
  return (*this)->set_Abolisher(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_AbolishTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_AbolishTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIAuthInfoT<T>::get_AbolishTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_AbolishTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_AbolishTime(BSTR pVal/*[in]*/)
{
  return (*this)->set_AbolishTime(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::get_Status(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  return (*this)->get_Status(pVal);
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
TCOMIAuthInfoT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  OLECHECK(this->get_Status((Ptssmolib_tlb::TcPermissionState*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAuthInfoT<T>::set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/)
{
  return (*this)->set_Status(pVal);
}

// *********************************************************************//
// DispIntf:  IAuthInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B0FACE51-415C-4A01-BCBE-7E95CF27B39E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_ID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAuthInfoDispT<T>::get_ID(void)
{
  long pVal;
  this->get_ID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_ID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ID"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_CustomerID(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAuthInfoDispT<T>::get_CustomerID(void)
{
  long pVal;
  this->get_CustomerID((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_CustomerID(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomerID"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Name(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Type(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Type(void)
{
  BSTR pVal;
  this->get_Type((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Type(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Content(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Content"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Content(void)
{
  BSTR pVal;
  this->get_Content((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Content(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Content"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Grantee(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantee"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Grantee(void)
{
  BSTR pVal;
  this->get_Grantee((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Grantee(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantee"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_CreateTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateTime"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_CreateTime(void)
{
  BSTR pVal;
  this->get_CreateTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_CreateTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateTime"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Grantor(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Grantor(void)
{
  BSTR pVal;
  this->get_Grantor((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Grantor(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Grantor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_GrantTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantTime"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_GrantTime(void)
{
  BSTR pVal;
  this->get_GrantTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_GrantTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrantTime"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Abolisher(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Abolisher"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_Abolisher(void)
{
  BSTR pVal;
  this->get_Abolisher((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Abolisher(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Abolisher"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_AbolishTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbolishTime"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAuthInfoDispT<T>::get_AbolishTime(void)
{
  BSTR pVal;
  this->get_AbolishTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_AbolishTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbolishTime"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::get_Status(Ptssmolib_tlb::TcPermissionState* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ptssmolib_tlb::TcPermissionState __fastcall
IAuthInfoDispT<T>::get_Status(void)
{
  Ptssmolib_tlb::TcPermissionState pVal;
  this->get_Status((Ptssmolib_tlb::TcPermissionState*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAuthInfoDispT<T>::set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPTSManager
// Interface: IPTSManager
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  return (*this)->AddProject(p);
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/, 
                               Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/)
{
  return (*this)->GetObject(Type, ObjectID, ppObject);
}

template <class T> Ptssmolib_tlb::IObjectBase* __fastcall
TCOMIPTSManagerT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectBase* ppObject;
  OLECHECK(this->GetObject(Type/*[in]*/, ObjectID/*[in]*/, (Ptssmolib_tlb::IObjectBase**)&ppObject));
  return ppObject;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetOnlineUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIPTSManagerT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  return (*this)->GetAllUserNames(Names);
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
TCOMIPTSManagerT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  OLECHECK(this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names));
  return Names;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListBrokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/)
{
  return (*this)->ListBrokers(pVal);
}

template <class T> Ptssmolib_tlb::IBrokers* __fastcall
TCOMIPTSManagerT<T>::ListBrokers(void)
{
  Ptssmolib_tlb::IBrokers* pVal;
  OLECHECK(this->ListBrokers((Ptssmolib_tlb::IBrokers**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListCharts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  return (*this)->ListCharts(pVal);
}

template <class T> Ptssmolib_tlb::ICharts* __fastcall
TCOMIPTSManagerT<T>::ListCharts(void)
{
  Ptssmolib_tlb::ICharts* pVal;
  OLECHECK(this->ListCharts((Ptssmolib_tlb::ICharts**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListCustomers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  return (*this)->ListCustomers(pVal);
}

template <class T> Ptssmolib_tlb::ICustomers* __fastcall
TCOMIPTSManagerT<T>::ListCustomers(void)
{
  Ptssmolib_tlb::ICustomers* pVal;
  OLECHECK(this->ListCustomers((Ptssmolib_tlb::ICustomers**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListEventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  return (*this)->ListEventTopics(pVal);
}

template <class T> Ptssmolib_tlb::IEventTopics* __fastcall
TCOMIPTSManagerT<T>::ListEventTopics(void)
{
  Ptssmolib_tlb::IEventTopics* pVal;
  OLECHECK(this->ListEventTopics((Ptssmolib_tlb::IEventTopics**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListExchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  return (*this)->ListExchanges(pVal);
}

template <class T> Ptssmolib_tlb::IExchanges* __fastcall
TCOMIPTSManagerT<T>::ListExchanges(void)
{
  Ptssmolib_tlb::IExchanges* pVal;
  OLECHECK(this->ListExchanges((Ptssmolib_tlb::IExchanges**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListRoles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  return (*this)->ListRoles(pVal);
}

template <class T> Ptssmolib_tlb::IRoles* __fastcall
TCOMIPTSManagerT<T>::ListRoles(void)
{
  Ptssmolib_tlb::IRoles* pVal;
  OLECHECK(this->ListRoles((Ptssmolib_tlb::IRoles**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListTasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  return (*this)->ListTasks(pVal);
}

template <class T> Ptssmolib_tlb::ITasks* __fastcall
TCOMIPTSManagerT<T>::ListTasks(void)
{
  Ptssmolib_tlb::ITasks* pVal;
  OLECHECK(this->ListTasks((Ptssmolib_tlb::ITasks**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::ListUsers(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  return (*this)->ListUsers(pVal);
}

template <class T> Ptssmolib_tlb::IUsers* __fastcall
TCOMIPTSManagerT<T>::ListUsers(void)
{
  Ptssmolib_tlb::IUsers* pVal;
  OLECHECK(this->ListUsers((Ptssmolib_tlb::IUsers**)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::Pause(void)
{
  return (*this)->Pause();
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                  Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  return (*this)->QueryObjects(Type, Conditions, pStartIndex, RowCount, ppObjects);
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
TCOMIPTSManagerT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  OLECHECK(this->QueryObjects(Type/*[in]*/, Conditions/*[in]*/, pStartIndex/*[in,out]*/, 
                              RowCount/*[in]*/, (Ptssmolib_tlb::IObjectList**)&ppObjects));
  return ppObjects;
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::Run(void)
{
  return (*this)->Run();
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/)
{
  return (*this)->SetSession(Session);
}

template <class T> HRESULT __fastcall
TCOMIPTSManagerT<T>::GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/)
{
  return (*this)->GetSession(ppSession);
}

template <class T> Ptssmolib_tlb::IPTSSession* __fastcall
TCOMIPTSManagerT<T>::GetSession(void)
{
  Ptssmolib_tlb::IPTSSession* ppSession;
  OLECHECK(this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession));
  return ppSession;
}

// *********************************************************************//
// DispIntf:  IPTSManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DC08759-8A84-4495-8FC1-89B162062B0F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::AddProject(Ptssmolib_tlb::IProject* p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddProject"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IProject*)p /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/, 
                               Ptssmolib_tlb::IObjectBase** ppObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetObject"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectID /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectBase**)ppObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectBase* __fastcall
IPTSManagerDispT<T>::GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, VARIANT ObjectID/*[in]*/)
{
  Ptssmolib_tlb::IObjectBase* ppObject;
  this->GetObject(Type, ObjectID, (Ptssmolib_tlb::IObjectBase**)&ppObject);
  return ppObject;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::GetOnlineUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOnlineUserNames"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IPTSManagerDispT<T>::GetOnlineUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetOnlineUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::GetAllUserNames(Ptssmolib_tlb::INameList** Names/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllUserNames"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::INameList**)Names /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::INameList* __fastcall
IPTSManagerDispT<T>::GetAllUserNames(void)
{
  Ptssmolib_tlb::INameList* Names;
  this->GetAllUserNames((Ptssmolib_tlb::INameList**)&Names);
  return Names;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListBrokers(Ptssmolib_tlb::IBrokers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBrokers"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IBrokers**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IBrokers* __fastcall
IPTSManagerDispT<T>::ListBrokers(void)
{
  Ptssmolib_tlb::IBrokers* pVal;
  this->ListBrokers((Ptssmolib_tlb::IBrokers**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListCharts(Ptssmolib_tlb::ICharts** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCharts"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICharts**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICharts* __fastcall
IPTSManagerDispT<T>::ListCharts(void)
{
  Ptssmolib_tlb::ICharts* pVal;
  this->ListCharts((Ptssmolib_tlb::ICharts**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListCustomers(Ptssmolib_tlb::ICustomers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCustomers"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ICustomers**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ICustomers* __fastcall
IPTSManagerDispT<T>::ListCustomers(void)
{
  Ptssmolib_tlb::ICustomers* pVal;
  this->ListCustomers((Ptssmolib_tlb::ICustomers**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListEventTopics(Ptssmolib_tlb::IEventTopics** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListEventTopics"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IEventTopics**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IEventTopics* __fastcall
IPTSManagerDispT<T>::ListEventTopics(void)
{
  Ptssmolib_tlb::IEventTopics* pVal;
  this->ListEventTopics((Ptssmolib_tlb::IEventTopics**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListExchanges(Ptssmolib_tlb::IExchanges** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListExchanges"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IExchanges**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IExchanges* __fastcall
IPTSManagerDispT<T>::ListExchanges(void)
{
  Ptssmolib_tlb::IExchanges* pVal;
  this->ListExchanges((Ptssmolib_tlb::IExchanges**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListRoles(Ptssmolib_tlb::IRoles** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRoles"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IRoles**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IRoles* __fastcall
IPTSManagerDispT<T>::ListRoles(void)
{
  Ptssmolib_tlb::IRoles* pVal;
  this->ListRoles((Ptssmolib_tlb::IRoles**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListTasks(Ptssmolib_tlb::ITasks** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListTasks"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::ITasks**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::ITasks* __fastcall
IPTSManagerDispT<T>::ListTasks(void)
{
  Ptssmolib_tlb::ITasks* pVal;
  this->ListTasks((Ptssmolib_tlb::ITasks**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::ListUsers(Ptssmolib_tlb::IUsers** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListUsers"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IUsers**)pVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IUsers* __fastcall
IPTSManagerDispT<T>::ListUsers(void)
{
  Ptssmolib_tlb::IUsers* pVal;
  this->ListUsers((Ptssmolib_tlb::IUsers**)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::Pause()
{
  _TDispID _dispid(*this, OLETEXT("Pause"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/
                                  , long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/, 
                                  Ptssmolib_tlb::IObjectList** ppObjects/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("QueryObjects"), DISPID(17));
  TAutoArgs<4> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Conditions /*[VT_BSTR:0]*/;
  _args[3] = pStartIndex /*[VT_I4:1]*/;
  _args[4] = RowCount /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IObjectList**)ppObjects /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IObjectList* __fastcall
IPTSManagerDispT<T>::QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, BSTR Conditions/*[in]*/, 
                                  long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/)
{
  Ptssmolib_tlb::IObjectList* ppObjects;
  this->QueryObjects(Type, Conditions, pStartIndex, RowCount, (Ptssmolib_tlb::IObjectList**)&ppObjects);
  return ppObjects;
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::Run()
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSession"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Ptssmolib_tlb::IPTSSession*)Session /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPTSManagerDispT<T>::GetSession(Ptssmolib_tlb::IPTSSession** ppSession/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSession"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ptssmolib_tlb::IPTSSession**)ppSession /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ptssmolib_tlb::IPTSSession* __fastcall
IPTSManagerDispT<T>::GetSession(void)
{
  Ptssmolib_tlb::IPTSSession* ppSession;
  this->GetSession((Ptssmolib_tlb::IPTSSession**)&ppSession);
  return ppSession;
}

// *********************************************************************//
// DispIntf:  _IPTSSessionEvents
// Flags:     (4096) Dispatchable
// GUID:      {77E96BE0-BBD3-422B-8155-67140A755A67}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IPTSSessionEventsDispT<T>::OnLogin()
{
  _TDispID _dispid(/* OnLogin */ DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_IPTSSessionEventsDispT<T>::OnLogout()
{
  _TDispID _dispid(/* OnLogout */ DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_IPTSSessionEventsDispT<T>::OnError(BSTR ErrMsg/*[in]*/)
{
  _TDispID _dispid(/* OnError */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ErrMsg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Order
// Interface: TCOMIOrder
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOrder, IOrder, &CLSID_Order, &IID_IOrder> CoOrder;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Orders
// Interface: TCOMIOrders
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOrders, IOrders, &CLSID_Orders, &IID_IOrders> CoOrders;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExecutionReport
// Interface: TCOMIExecutionReport
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExecutionReport, IExecutionReport, &CLSID_ExecutionReport, &IID_IExecutionReport> CoExecutionReport;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Instrument
// Interface: TCOMIInstrument
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIInstrument, IInstrument, &CLSID_Instrument, &IID_IInstrument> CoInstrument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Account
// Interface: TCOMIAccount
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAccount, IAccount, &CLSID_Account, &IID_IAccount> CoAccount;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Positions
// Interface: TCOMIPositions
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPositions, IPositions, &CLSID_Positions, &IID_IPositions> CoPositions;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Position
// Interface: TCOMIPosition
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPosition, IPosition, &CLSID_Position, &IID_IPosition> CoPosition;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FutureDetail
// Interface: TCOMIFutureDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFutureDetail, IFutureDetail, &CLSID_FutureDetail, &IID_IFutureDetail> CoFutureDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FundDetail
// Interface: TCOMIFundDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFundDetail, IFundDetail, &CLSID_FundDetail, &IID_IFundDetail> CoFundDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OptionDetail
// Interface: TCOMIOptionDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOptionDetail, IOptionDetail, &CLSID_OptionDetail, &IID_IOptionDetail> CoOptionDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WarrantDetail
// Interface: TCOMIWarrantDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIWarrantDetail, IWarrantDetail, &CLSID_WarrantDetail, &IID_IWarrantDetail> CoWarrantDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Customer
// Interface: TCOMICustomer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICustomer, ICustomer, &CLSID_Customer, &IID_ICustomer> CoCustomer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Customers
// Interface: TCOMICustomers
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICustomers, ICustomers, &CLSID_Customers, &IID_ICustomers> CoCustomers;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Task
// Interface: TCOMITask
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITask, ITask, &CLSID_Task, &IID_ITask> CoTask;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Tasks
// Interface: TCOMITasks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITasks, ITasks, &CLSID_Tasks, &IID_ITasks> CoTasks;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Hedge
// Interface: TCOMIHedge
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIHedge, IHedge, &CLSID_Hedge, &IID_IHedge> CoHedge;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Hedges
// Interface: TCOMIHedges
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIHedges, IHedges, &CLSID_Hedges, &IID_IHedges> CoHedges;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TradeCoreSvc
// Interface: TCOMITradeCoreSvc
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITradeCoreSvc, ITradeCoreSvc, &CLSID_TradeCoreSvc, &IID_ITradeCoreSvc> CoTradeCoreSvc;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Accounts
// Interface: TCOMIAccounts
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAccounts, IAccounts, &CLSID_Accounts, &IID_IAccounts> CoAccounts;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Quote
// Interface: TCOMIQuote
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuote, IQuote, &CLSID_Quote, &IID_IQuote> CoQuote;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventTopic
// Interface: TCOMIEventTopic
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEventTopic, IEventTopic, &CLSID_EventTopic, &IID_IEventTopic> CoEventTopic;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventTopics
// Interface: TCOMIEventTopics
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEventTopics, IEventTopics, &CLSID_EventTopics, &IID_IEventTopics> CoEventTopics;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Quotes
// Interface: TCOMIQuotes
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuotes, IQuotes, &CLSID_Quotes, &IID_IQuotes> CoQuotes;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QuoteDetail
// Interface: TCOMIQuoteDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuoteDetail, IQuoteDetail, &CLSID_QuoteDetail, &IID_IQuoteDetail> CoQuoteDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FundMember
// Interface: TCOMIFundMember
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFundMember, IFundMember, &CLSID_FundMember, &IID_IFundMember> CoFundMember;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FundMembers
// Interface: TCOMIFundMembers
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFundMembers, IFundMembers, &CLSID_FundMembers, &IID_IFundMembers> CoFundMembers;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Subscriber
// Interface: TCOMISubscriber
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISubscriber, ISubscriber, &CLSID_Subscriber, &IID_ISubscriber> CoSubscriber;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Exchange
// Interface: TCOMIExchange
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExchange, IExchange, &CLSID_Exchange, &IID_IExchange> CoExchange;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Exchanges
// Interface: TCOMIExchanges
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExchanges, IExchanges, &CLSID_Exchanges, &IID_IExchanges> CoExchanges;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : InstrumentDetail
// Interface: TCOMIInstrumentDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIInstrumentDetail, IInstrumentDetail, &CLSID_InstrumentDetail, &IID_IInstrumentDetail> CoInstrumentDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PositionQtys
// Interface: TCOMIPositionQtys
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPositionQtys, IPositionQtys, &CLSID_PositionQtys, &IID_IPositionQtys> CoPositionQtys;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PositionQty
// Interface: TCOMIPositionQty
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPositionQty, IPositionQty, &CLSID_PositionQty, &IID_IPositionQty> CoPositionQty;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryCondition
// Interface: TCOMIQueryCondition
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQueryCondition, IQueryCondition, &CLSID_QueryCondition, &IID_IQueryCondition> CoQueryCondition;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QueryConditions
// Interface: TCOMIQueryConditions
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQueryConditions, IQueryConditions, &CLSID_QueryConditions, &IID_IQueryConditions> CoQueryConditions;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccountDetail
// Interface: TCOMIAccountDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAccountDetail, IAccountDetail, &CLSID_AccountDetail, &IID_IAccountDetail> CoAccountDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Instruments
// Interface: TCOMIInstruments
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIInstruments, IInstruments, &CLSID_Instruments, &IID_IInstruments> CoInstruments;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CustomerDetail
// Interface: TCOMICustomerDetail
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICustomerDetail, ICustomerDetail, &CLSID_CustomerDetail, &IID_ICustomerDetail> CoCustomerDetail;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExchangeAccount
// Interface: TCOMIExchangeAccount
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExchangeAccount, IExchangeAccount, &CLSID_ExchangeAccount, &IID_IExchangeAccount> CoExchangeAccount;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExchangeAccounts
// Interface: TCOMIExchangeAccounts
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExchangeAccounts, IExchangeAccounts, &CLSID_ExchangeAccounts, &IID_IExchangeAccounts> CoExchangeAccounts;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : User
// Interface: TCOMIUser
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIUser, IUser, &CLSID_User, &IID_IUser> CoUser;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Users
// Interface: TCOMIUsers
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIUsers, IUsers, &CLSID_Users, &IID_IUsers> CoUsers;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NameList
// Interface: TCOMINameList
// *********************************************************************//
typedef TCoClassCreatorT<TCOMINameList, INameList, &CLSID_NameList, &IID_INameList> CoNameList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ObjectList
// Interface: TCOMIObjectList
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIObjectList, IObjectList, &CLSID_ObjectList, &IID_IObjectList> CoObjectList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Permission
// Interface: TCOMIPermission
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPermission, IPermission, &CLSID_Permission, &IID_IPermission> CoPermission;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Role
// Interface: TCOMIRole
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRole, IRole, &CLSID_Role, &IID_IRole> CoRole;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Roles
// Interface: TCOMIRoles
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRoles, IRoles, &CLSID_Roles, &IID_IRoles> CoRoles;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Servers
// Interface: TCOMIServers
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIServers, IServers, &CLSID_Servers, &IID_IServers> CoServers;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Server
// Interface: TCOMIServer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIServer, IServer, &CLSID_Server, &IID_IServer> CoServer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : EventPublisher
// Interface: TCOMIEventPublisher
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEventPublisher, IEventPublisher, &CLSID_EventPublisher, &IID_IEventPublisher> CoEventPublisher;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Portfolio
// Interface: TCOMIPortfolio
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPortfolio, IPortfolio, &CLSID_Portfolio, &IID_IPortfolio> CoPortfolio;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Portfolios
// Interface: TCOMIPortfolios
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPortfolios, IPortfolios, &CLSID_Portfolios, &IID_IPortfolios> CoPortfolios;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Dictionary
// Interface: TCOMIDictionary
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDictionary, IDictionary, &CLSID_Dictionary, &IID_IDictionary> CoDictionary;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MiscFee
// Interface: TCOMIMiscFee
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMiscFee, IMiscFee, &CLSID_MiscFee, &IID_IMiscFee> CoMiscFee;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Broker
// Interface: TCOMIBroker
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBroker, IBroker, &CLSID_Broker, &IID_IBroker> CoBroker;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Brokers
// Interface: TCOMIBrokers
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBrokers, IBrokers, &CLSID_Brokers, &IID_IBrokers> CoBrokers;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BrokerAccount
// Interface: TCOMIBrokerAccount
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBrokerAccount, IBrokerAccount, &CLSID_BrokerAccount, &IID_IBrokerAccount> CoBrokerAccount;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BrokerAccounts
// Interface: TCOMIBrokerAccounts
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBrokerAccounts, IBrokerAccounts, &CLSID_BrokerAccounts, &IID_IBrokerAccounts> CoBrokerAccounts;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ChartDataSet
// Interface: TCOMIChartDataSet
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChartDataSet, IChartDataSet, &CLSID_ChartDataSet, &IID_IChartDataSet> CoChartDataSet;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Chart
// Interface: TCOMIChart
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIChart, IChart, &CLSID_Chart, &IID_IChart> CoChart;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Charts
// Interface: TCOMICharts
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICharts, ICharts, &CLSID_Charts, &IID_ICharts> CoCharts;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExtendedProperty
// Interface: TCOMIExtendedProperty
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExtendedProperty, IExtendedProperty, &CLSID_ExtendedProperty, &IID_IExtendedProperty> CoExtendedProperty;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExtendedProperties
// Interface: TCOMIExtendedProperties
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExtendedProperties, IExtendedProperties, &CLSID_ExtendedProperties, &IID_IExtendedProperties> CoExtendedProperties;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PostalAddress
// Interface: TCOMIPostalAddress
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPostalAddress, IPostalAddress, &CLSID_PostalAddress, &IID_IPostalAddress> CoPostalAddress;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QuoteTickData
// Interface: TCOMIQuoteTickData
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuoteTickData, IQuoteTickData, &CLSID_QuoteTickData, &IID_IQuoteTickData> CoQuoteTickData;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MiscFees
// Interface: TCOMIMiscFees
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMiscFees, IMiscFees, &CLSID_MiscFees, &IID_IMiscFees> CoMiscFees;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OrderReport
// Interface: TCOMIOrderReport
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOrderReport, IOrderReport, &CLSID_OrderReport, &IID_IOrderReport> CoOrderReport;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : QuoteDataSet
// Interface: TCOMIQuoteDataSet
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuoteDataSet, IQuoteDataSet, &CLSID_QuoteDataSet, &IID_IQuoteDataSet> CoQuoteDataSet;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ObjectPermissionInfo
// Interface: TCOMIObjectPermissionInfo
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIObjectPermissionInfo, IObjectPermissionInfo, &CLSID_ObjectPermissionInfo, &IID_IObjectPermissionInfo> CoObjectPermissionInfo;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Project
// Interface: TCOMIProject
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIProject, IProject, &CLSID_Project, &IID_IProject> CoProject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Projects
// Interface: TCOMIProjects
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIProjects, IProjects, &CLSID_Projects, &IID_IProjects> CoProjects;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PortfolioItemSet
// Interface: TCOMIPortfolioItemSet
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPortfolioItemSet, IPortfolioItemSet, &CLSID_PortfolioItemSet, &IID_IPortfolioItemSet> CoPortfolioItemSet;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Order2
// Interface: TCOMIOrder2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIOrder2, IOrder2, &CLSID_Order2, &IID_IOrder2> CoOrder2;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NewStockSet
// Interface: TCOMINewStockSet
// *********************************************************************//
typedef TCoClassCreatorT<TCOMINewStockSet, INewStockSet, &CLSID_NewStockSet, &IID_INewStockSet> CoNewStockSet;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : NotTradingStockSet
// Interface: TCOMINotTradingStockSet
// *********************************************************************//
typedef TCoClassCreatorT<TCOMINotTradingStockSet, INotTradingStockSet, &CLSID_NotTradingStockSet, &IID_INotTradingStockSet> CoNotTradingStockSet;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AuthInfo
// Interface: TCOMIAuthInfo
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAuthInfo, IAuthInfo, &CLSID_AuthInfo, &IID_IAuthInfo> CoAuthInfo;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PTSManager
// Interface: TCOMIPTSManager
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPTSManager, IPTSManager, &CLSID_PTSManager, &IID_IPTSManager> CoPTSManager;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PTSSession
// Interface: TCOMIPTSSession
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPTSSession, IPTSSession, &CLSID_PTSSession, &IID_IPTSSession> CoPTSSession;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Subscriber
// Event Interface : _ISubscriberEvents
// *********************************************************************//
template <class T>
class TEvents_Subscriber : public IConnectionPointImpl<T,
                                                 &DIID__ISubscriberEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_OnEvent(LPDISPATCH pEventHead, LPDISPATCH pEventData);
  HRESULT         Fire_OnStatusChanged(Ptssmolib_tlb::TcSubscribeStatus Status);
  HRESULT         Fire_OnError(BSTR ErrMsg);
protected:
  _ISubscriberEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_Subscriber<T>::Fire_OnEvent(LPDISPATCH pEventHead, LPDISPATCH pEventData)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEvent(pEventHead, pEventData);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_Subscriber<T>::Fire_OnStatusChanged(Ptssmolib_tlb::TcSubscribeStatus Status)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnStatusChanged(Status);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_Subscriber<T>::Fire_OnError(BSTR ErrMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnError(ErrMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Broker
// Event Interface : _IBrokerEvents
// *********************************************************************//
template <class T>
class TEvents_Broker : public IConnectionPointImpl<T,
                                                 &DIID__IBrokerEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_OnConnected(void);
  HRESULT         Fire_OnDisconnected(void);
  HRESULT         Fire_OnSynchronize(Ptssmolib_tlb::TcMessageType Type, BSTR Message);
protected:
  _IBrokerEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_Broker<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_Broker<T>::Fire_OnDisconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_Broker<T>::Fire_OnSynchronize(Ptssmolib_tlb::TcMessageType Type, BSTR Message)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnSynchronize(Type, Message);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PTSSession
// Event Interface : _IPTSSessionEvents
// *********************************************************************//
template <class T>
class TEvents_PTSSession : public IConnectionPointImpl<T,
                                                 &DIID__IPTSSessionEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_OnLogin(void);
  HRESULT         Fire_OnLogout(void);
  HRESULT         Fire_OnError(BSTR ErrMsg);
protected:
  _IPTSSessionEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_PTSSession<T>::Fire_OnLogin(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogin();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_PTSSession<T>::Fire_OnLogout(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogout();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_PTSSession<T>::Fire_OnError(BSTR ErrMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnError(ErrMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Ptssmolib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ptssmolib_tlb;
#endif

#pragma option pop

#endif // PTSSMOLib_TLBH
