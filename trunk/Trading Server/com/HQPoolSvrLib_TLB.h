// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 2009-5-6 10:00:16 from Type Library described below.

// ************************************************************************  //
// Type Lib: g:\PTS\trunk\Bin\PTS HOST\HQPoolSvr.exe (1)
// LIBID: {808C9377-A154-4906-8C0E-DBCC0CCCF48B}
// LCID: 0
// Helpfile: 
// HelpString: HQPoolSvr 1.0 类型库
// DepndLst: 
//   (1) v2.0 stdole, (K:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   HQPoolSvrLib_TLBH
#define   HQPoolSvrLib_TLBH

#pragma option push -b -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Hqpoolsvrlib_tlb
{

// *********************************************************************//
// HelpString: HQPoolSvr 1.0 类型库
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_HQPoolSvrLib;
extern __declspec (package) const GUID IID_IPool;
extern __declspec (package) const GUID CLSID_Pool;
extern __declspec (package) const GUID IID_IQuote2;
extern __declspec (package) const GUID DIID__IManagerEvents;
extern __declspec (package) const GUID IID_IManager;
extern __declspec (package) const GUID CLSID_Manager;
extern __declspec (package) const GUID CLSID_Quote2;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{FED4F00B-DDEE-4946-A5F1-E7DB3DBB3835}") IPool;
typedef TComInterface<IPool, &IID_IPool> IPoolPtr;

interface DECLSPEC_UUID("{6FB6B31B-2105-4CAB-975A-22F4341C0BDD}") IQuote2;
typedef TComInterface<IQuote2, &IID_IQuote2> IQuote2Ptr;

interface DECLSPEC_UUID("{4D5CEC59-3360-4909-87E8-4B03D7593800}") _IManagerEvents;
typedef TComInterface<_IManagerEvents, &DIID__IManagerEvents> _IManagerEventsPtr;

interface DECLSPEC_UUID("{8B524A3D-0A75-462D-A36C-BAD4538D2210}") IManager;
typedef TComInterface<IManager, &IID_IManager> IManagerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IPool Pool;
typedef IPoolPtr PoolPtr;
typedef IManager Manager;
typedef IManagerPtr ManagerPtr;
typedef IQuote2 Quote2;
typedef IQuote2Ptr Quote2Ptr;

#define LIBID_OF_Pool (&LIBID_HQPoolSvrLib)
#define LIBID_OF_Manager (&LIBID_HQPoolSvrLib)
#define LIBID_OF_Quote2 (&LIBID_HQPoolSvrLib)
// *********************************************************************//
// Interface: IPool
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FED4F00B-DDEE-4946-A5F1-E7DB3DBB3835}
// *********************************************************************//
interface IPool  : public IDispatch
{
public:
  // [1] 方法Find
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR code/*[in]*/, long src/*[in]*/, 
                                         long* index/*[out,retval]*/) = 0;
  // [3] 方法GetItem
  virtual HRESULT STDMETHODCALLTYPE GetItem(long index/*[in]*/, 
                                            Hqpoolsvrlib_tlb::IQuote2** quote/*[out,retval]*/) = 0;
  // [4] 返回行情个数
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/)
  {
    long index;
    OLECHECK(this->Find(code, src, (long*)&index));
    return index;
  }

  Hqpoolsvrlib_tlb::IQuote2* __fastcall GetItem(long index/*[in]*/)
  {
    Hqpoolsvrlib_tlb::IQuote2* quote = 0;
    OLECHECK(this->GetItem(index, (Hqpoolsvrlib_tlb::IQuote2**)&quote));
    return quote;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IQuote2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6FB6B31B-2105-4CAB-975A-22F4341C0BDD}
// *********************************************************************//
interface IQuote2  : public IDispatch
{
public:
  // [1] 序号
  virtual HRESULT STDMETHODCALLTYPE get_SeqNo(long* pVal/*[out,retval]*/) = 0;
  // [2] 产品名称
  virtual HRESULT STDMETHODCALLTYPE get_Symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] 产品标识
  virtual HRESULT STDMETHODCALLTYPE get_InstID(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] 产品市场来源
  virtual HRESULT STDMETHODCALLTYPE get_InstIDSource(long* pVal/*[out,retval]*/) = 0;
  // [5] 最后一笔交易数量
  virtual HRESULT STDMETHODCALLTYPE get_LastQty(long* pVal/*[out,retval]*/) = 0;
  // [6] 最后一笔交易价格
  virtual HRESULT STDMETHODCALLTYPE get_LastPrice(double* pVal/*[out,retval]*/) = 0;
  // [7] 最后一笔交易时间
  virtual HRESULT STDMETHODCALLTYPE get_LastTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] 前收盘价
  virtual HRESULT STDMETHODCALLTYPE get_PreClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [9] 收盘价格
  virtual HRESULT STDMETHODCALLTYPE get_ClosePrice(double* pVal/*[out,retval]*/) = 0;
  // [10] 开盘价
  virtual HRESULT STDMETHODCALLTYPE get_OpenPrice(double* pVal/*[out,retval]*/) = 0;
  // [11] 结算价
  virtual HRESULT STDMETHODCALLTYPE get_SettlPrice(double* pVal/*[out,retval]*/) = 0;
  // [12] 最低价
  virtual HRESULT STDMETHODCALLTYPE get_LowPrice(double* pVal/*[out,retval]*/) = 0;
  // [13] 最高价
  virtual HRESULT STDMETHODCALLTYPE get_HighPrice(double* pVal/*[out,retval]*/) = 0;
  // [14] 交易量
  virtual HRESULT STDMETHODCALLTYPE get_Turnover(double* pVal/*[out,retval]*/) = 0;
  // [15] 日成交量
  virtual HRESULT STDMETHODCALLTYPE get_DayQty(long* pVal/*[out,retval]*/) = 0;
  // [16] 在固定竞价时段内的执行价格
  virtual HRESULT STDMETHODCALLTYPE get_FixPrice(double* pVal/*[out,retval]*/) = 0;
  // [17] 最好卖方数量
  virtual HRESULT STDMETHODCALLTYPE get_AskQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [18] 最好卖方价格
  virtual HRESULT STDMETHODCALLTYPE get_AskPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/) = 0;
  // [19] 最好买方数量
  virtual HRESULT STDMETHODCALLTYPE get_BidQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [20] 最好买方价格
  virtual HRESULT STDMETHODCALLTYPE get_BidPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/) = 0;
  // [21] 交易日
  virtual HRESULT STDMETHODCALLTYPE get_TradingDay(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] 深度数据档数
  virtual HRESULT STDMETHODCALLTYPE get_LevelCount(long* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_SeqNo(void)
  {
    long pVal;
    OLECHECK(this->get_SeqNo((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_InstID(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_InstID((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_InstIDSource(void)
  {
    long pVal;
    OLECHECK(this->get_InstIDSource((long*)&pVal));
    return pVal;
  }

  long __fastcall get_LastQty(void)
  {
    long pVal;
    OLECHECK(this->get_LastQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_LastPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LastPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_LastTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LastTime((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_PreClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_PreClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_ClosePrice(void)
  {
    double pVal;
    OLECHECK(this->get_ClosePrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_OpenPrice(void)
  {
    double pVal;
    OLECHECK(this->get_OpenPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_SettlPrice(void)
  {
    double pVal;
    OLECHECK(this->get_SettlPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_LowPrice(void)
  {
    double pVal;
    OLECHECK(this->get_LowPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_HighPrice(void)
  {
    double pVal;
    OLECHECK(this->get_HighPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_Turnover(void)
  {
    double pVal;
    OLECHECK(this->get_Turnover((double*)&pVal));
    return pVal;
  }

  long __fastcall get_DayQty(void)
  {
    long pVal;
    OLECHECK(this->get_DayQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_FixPrice(void)
  {
    double pVal;
    OLECHECK(this->get_FixPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_AskQty(VARIANT index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_AskQty(index, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_AskPrice(VARIANT index/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_AskPrice(index, (double*)&pVal));
    return pVal;
  }

  long __fastcall get_BidQty(VARIANT index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_BidQty(index, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_BidPrice(VARIANT index/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_BidPrice(index, (double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_TradingDay(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_TradingDay((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_LevelCount(void)
  {
    long pVal;
    OLECHECK(this->get_LevelCount((long*)&pVal));
    return pVal;
  }


  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            LevelCount = {read = get_LevelCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {4D5CEC59-3360-4909-87E8-4B03D7593800}
// *********************************************************************//
interface _IManagerEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall OnError(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, BSTR ErrMessage)
  {
    _TDispID _dispid(/* OnError */ DISPID(1));
    TAutoArgs<3> _args;
    _args[1] = TopicName /*[VT_BSTR:0]*/;
    _args[2] = TopicID /*[VT_I4:0]*/;
    _args[3] = ErrMessage /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall OnEvent(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, LPDISPATCH EventHead, 
                             LPDISPATCH EventData)
  {
    _TDispID _dispid(/* OnEvent */ DISPID(2));
    TAutoArgs<4> _args;
    _args[1] = TopicName /*[VT_BSTR:0]*/;
    _args[2] = TopicID /*[VT_I4:0]*/;
    _args[3] = EventHead /*[VT_DISPATCH:0]*/;
    _args[4] = EventData /*[VT_DISPATCH:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B524A3D-0A75-462D-A36C-BAD4538D2210}
// *********************************************************************//
interface IManager  : public IDispatch
{
public:
  // [1] 方法Start
  virtual HRESULT STDMETHODCALLTYPE Start(void) = 0;
  // [2] 方法Stop
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [3] 方法ShowProperty
  virtual HRESULT STDMETHODCALLTYPE ShowProperty(OLE_HANDLE ParentWnd/*[in]*/) = 0;
  // [4] 是否启动
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [5] 属性 ActiveTopic
  virtual HRESULT STDMETHODCALLTYPE get_ActiveTopic(long* pVal/*[out,retval]*/) = 0;
  // [6] 主题个数
  virtual HRESULT STDMETHODCALLTYPE get_TopicCount(long* pVal/*[out,retval]*/) = 0;
  // [7] 获取事件个数统计
  virtual HRESULT STDMETHODCALLTYPE get_EventCount(long index/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [8] 方法Reset
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0;
  // [9] 设置PTS Session
  virtual HRESULT STDMETHODCALLTYPE SetPTSSession(LPDISPATCH Session/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_ActiveTopic(void)
  {
    long pVal;
    OLECHECK(this->get_ActiveTopic((long*)&pVal));
    return pVal;
  }

  long __fastcall get_TopicCount(void)
  {
    long pVal;
    OLECHECK(this->get_TopicCount((long*)&pVal));
    return pVal;
  }

  long __fastcall get_EventCount(long index/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_EventCount(index, (long*)&pVal));
    return pVal;
  }


  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   long            ActiveTopic = {read = get_ActiveTopic};
  __property   long            TopicCount = {read = get_TopicCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIPool
// Interface: IPool
// *********************************************************************//
template <class T /* IPool */ >
class TCOMIPoolT : public TComInterface<IPool>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPoolT() {}
  TCOMIPoolT(IPool *intf, bool addRef = false) : TComInterface<IPool>(intf, addRef) {}
  TCOMIPoolT(const TCOMIPoolT& src) : TComInterface<IPool>(src) {}
  TCOMIPoolT& operator=(const TCOMIPoolT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/, long* index/*[out,retval]*/);
  long            __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/);
  HRESULT         __fastcall GetItem(long index/*[in]*/, 
                                     Hqpoolsvrlib_tlb::IQuote2** quote/*[out,retval]*/);
  Hqpoolsvrlib_tlb::IQuote2* __fastcall GetItem(long index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIPoolT<IPool> TCOMIPool;

// *********************************************************************//
// DispIntf:  IPool
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FED4F00B-DDEE-4946-A5F1-E7DB3DBB3835}
// *********************************************************************//
template<class T>
class IPoolDispT : public TAutoDriver<IPool>
{
public:
  IPoolDispT(){}

  IPoolDispT(IPool *pintf)
  {
    TAutoDriver<IPool>::Bind(pintf, false);
  }

  IPoolDispT(IPoolPtr pintf)
  {
    TAutoDriver<IPool>::Bind(pintf, true);
  }

  IPoolDispT& operator=(IPool *pintf)
  {
    TAutoDriver<IPool>::Bind(pintf, false);
    return *this;
  }

  IPoolDispT& operator=(IPoolPtr pintf)
  {
    TAutoDriver<IPool>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Pool));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Pool);
  }

  HRESULT         __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/, long* index/*[out,retval]*/);
  long            __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/);
  HRESULT         __fastcall GetItem(long index/*[in]*/, 
                                     Hqpoolsvrlib_tlb::IQuote2** quote/*[out,retval]*/);
  Hqpoolsvrlib_tlb::IQuote2* __fastcall GetItem(long index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   long            Count = {read = get_Count};
};
typedef IPoolDispT<IPool> IPoolDisp;

// *********************************************************************//
// SmartIntf: TCOMIQuote2
// Interface: IQuote2
// *********************************************************************//
template <class T /* IQuote2 */ >
class TCOMIQuote2T : public TComInterface<IQuote2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIQuote2T() {}
  TCOMIQuote2T(IQuote2 *intf, bool addRef = false) : TComInterface<IQuote2>(intf, addRef) {}
  TCOMIQuote2T(const TCOMIQuote2T& src) : TComInterface<IQuote2>(src) {}
  TCOMIQuote2T& operator=(const TCOMIQuote2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SeqNo(long* pVal/*[out,retval]*/);
  long            __fastcall get_SeqNo(void);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_AskQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_AskPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_BidQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_BidPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall get_LevelCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_LevelCount(void);

  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            LevelCount = {read = get_LevelCount};
};
typedef TCOMIQuote2T<IQuote2> TCOMIQuote2;

// *********************************************************************//
// DispIntf:  IQuote2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6FB6B31B-2105-4CAB-975A-22F4341C0BDD}
// *********************************************************************//
template<class T>
class IQuote2DispT : public TAutoDriver<IQuote2>
{
public:
  IQuote2DispT(){}

  IQuote2DispT(IQuote2 *pintf)
  {
    TAutoDriver<IQuote2>::Bind(pintf, false);
  }

  IQuote2DispT(IQuote2Ptr pintf)
  {
    TAutoDriver<IQuote2>::Bind(pintf, true);
  }

  IQuote2DispT& operator=(IQuote2 *pintf)
  {
    TAutoDriver<IQuote2>::Bind(pintf, false);
    return *this;
  }

  IQuote2DispT& operator=(IQuote2Ptr pintf)
  {
    TAutoDriver<IQuote2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Quote2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Quote2);
  }

  HRESULT         __fastcall get_SeqNo(long* pVal/*[out,retval]*/);
  long            __fastcall get_SeqNo(void);
  HRESULT         __fastcall get_Symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Symbol(void);
  HRESULT         __fastcall get_InstID(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_InstID(void);
  HRESULT         __fastcall get_InstIDSource(long* pVal/*[out,retval]*/);
  long            __fastcall get_InstIDSource(void);
  HRESULT         __fastcall get_LastQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_LastQty(void);
  HRESULT         __fastcall get_LastPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LastPrice(void);
  HRESULT         __fastcall get_LastTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LastTime(void);
  HRESULT         __fastcall get_PreClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_PreClosePrice(void);
  HRESULT         __fastcall get_ClosePrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_ClosePrice(void);
  HRESULT         __fastcall get_OpenPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_OpenPrice(void);
  HRESULT         __fastcall get_SettlPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_SettlPrice(void);
  HRESULT         __fastcall get_LowPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_LowPrice(void);
  HRESULT         __fastcall get_HighPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_HighPrice(void);
  HRESULT         __fastcall get_Turnover(double* pVal/*[out,retval]*/);
  double          __fastcall get_Turnover(void);
  HRESULT         __fastcall get_DayQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_DayQty(void);
  HRESULT         __fastcall get_FixPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_FixPrice(void);
  HRESULT         __fastcall get_AskQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_AskQty(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_AskPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_AskPrice(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_BidQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_BidQty(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_BidPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_BidPrice(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_TradingDay(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_TradingDay(void);
  HRESULT         __fastcall get_LevelCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_LevelCount(void);

  __property   long            SeqNo = {read = get_SeqNo};
  __property   BSTR            Symbol = {read = get_Symbol};
  __property   BSTR            InstID = {read = get_InstID};
  __property   long            InstIDSource = {read = get_InstIDSource};
  __property   long            LastQty = {read = get_LastQty};
  __property   double          LastPrice = {read = get_LastPrice};
  __property   BSTR            LastTime = {read = get_LastTime};
  __property   double          PreClosePrice = {read = get_PreClosePrice};
  __property   double          ClosePrice = {read = get_ClosePrice};
  __property   double          OpenPrice = {read = get_OpenPrice};
  __property   double          SettlPrice = {read = get_SettlPrice};
  __property   double          LowPrice = {read = get_LowPrice};
  __property   double          HighPrice = {read = get_HighPrice};
  __property   double          Turnover = {read = get_Turnover};
  __property   long            DayQty = {read = get_DayQty};
  __property   double          FixPrice = {read = get_FixPrice};
  __property   BSTR            TradingDay = {read = get_TradingDay};
  __property   long            LevelCount = {read = get_LevelCount};
};
typedef IQuote2DispT<IQuote2> IQuote2Disp;

// *********************************************************************//
// DispIntf:  _IManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {4D5CEC59-3360-4909-87E8-4B03D7593800}
// *********************************************************************//
template <class T>
class _IManagerEventsDispT : public TAutoDriver<_IManagerEvents>
{
public:
  _IManagerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall OnError(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, BSTR ErrMessage);
  HRESULT         __fastcall OnEvent(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, 
                                     LPDISPATCH EventHead, LPDISPATCH EventData);

};
typedef _IManagerEventsDispT<_IManagerEvents> _IManagerEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIManager
// Interface: IManager
// *********************************************************************//
template <class T /* IManager */ >
class TCOMIManagerT : public TComInterface<IManager>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIManagerT() {}
  TCOMIManagerT(IManager *intf, bool addRef = false) : TComInterface<IManager>(intf, addRef) {}
  TCOMIManagerT(const TCOMIManagerT& src) : TComInterface<IManager>(src) {}
  TCOMIManagerT& operator=(const TCOMIManagerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Start(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall ShowProperty(OLE_HANDLE ParentWnd/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_ActiveTopic(long* pVal/*[out,retval]*/);
  long            __fastcall get_ActiveTopic(void);
  HRESULT         __fastcall get_TopicCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopicCount(void);
  HRESULT         __fastcall get_EventCount(long index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_EventCount(long index/*[in]*/);
  HRESULT         __fastcall Reset(void);
  HRESULT         __fastcall SetPTSSession(LPDISPATCH Session/*[in]*/);

  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   long            ActiveTopic = {read = get_ActiveTopic};
  __property   long            TopicCount = {read = get_TopicCount};
};
typedef TCOMIManagerT<IManager> TCOMIManager;

// *********************************************************************//
// DispIntf:  IManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B524A3D-0A75-462D-A36C-BAD4538D2210}
// *********************************************************************//
template<class T>
class IManagerDispT : public TAutoDriver<IManager>
{
public:
  IManagerDispT(){}

  IManagerDispT(IManager *pintf)
  {
    TAutoDriver<IManager>::Bind(pintf, false);
  }

  IManagerDispT(IManagerPtr pintf)
  {
    TAutoDriver<IManager>::Bind(pintf, true);
  }

  IManagerDispT& operator=(IManager *pintf)
  {
    TAutoDriver<IManager>::Bind(pintf, false);
    return *this;
  }

  IManagerDispT& operator=(IManagerPtr pintf)
  {
    TAutoDriver<IManager>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Manager));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Manager);
  }

  HRESULT         __fastcall Start();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall ShowProperty(OLE_HANDLE ParentWnd/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_ActiveTopic(long* pVal/*[out,retval]*/);
  long            __fastcall get_ActiveTopic(void);
  HRESULT         __fastcall get_TopicCount(long* pVal/*[out,retval]*/);
  long            __fastcall get_TopicCount(void);
  HRESULT         __fastcall get_EventCount(long index/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_EventCount(long index/*[in]*/);
  HRESULT         __fastcall Reset();
  HRESULT         __fastcall SetPTSSession(LPDISPATCH Session/*[in]*/);

  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   long            ActiveTopic = {read = get_ActiveTopic};
  __property   long            TopicCount = {read = get_TopicCount};
};
typedef IManagerDispT<IManager> IManagerDisp;

// *********************************************************************//
// SmartIntf: TCOMIPool
// Interface: IPool
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPoolT<T>::Find(BSTR code/*[in]*/, long src/*[in]*/, long* index/*[out,retval]*/)
{
  return (*this)->Find(code, src, index);
}

template <class T> long __fastcall
TCOMIPoolT<T>::Find(BSTR code/*[in]*/, long src/*[in]*/)
{
  long index;
  OLECHECK(this->Find(code/*[in]*/, src/*[in]*/, (long*)&index));
  return index;
}

template <class T> HRESULT __fastcall
TCOMIPoolT<T>::GetItem(long index/*[in]*/, Hqpoolsvrlib_tlb::IQuote2** quote/*[out,retval]*/)
{
  return (*this)->GetItem(index, quote);
}

template <class T> Hqpoolsvrlib_tlb::IQuote2* __fastcall
TCOMIPoolT<T>::GetItem(long index/*[in]*/)
{
  Hqpoolsvrlib_tlb::IQuote2* quote;
  OLECHECK(this->GetItem(index/*[in]*/, (Hqpoolsvrlib_tlb::IQuote2**)&quote));
  return quote;
}

template <class T> HRESULT __fastcall
TCOMIPoolT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  return (*this)->get_Count(pVal);
}

template <class T> long __fastcall
TCOMIPoolT<T>::get_Count(void)
{
  long pVal;
  OLECHECK(this->get_Count((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IPool
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FED4F00B-DDEE-4946-A5F1-E7DB3DBB3835}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPoolDispT<T>::Find(BSTR code/*[in]*/, long src/*[in]*/, long* index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = code /*[VT_BSTR:0]*/;
  _args[2] = src /*[VT_I4:0]*/;
  return OutRetValSetterPtr(index /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IPoolDispT<T>::Find(BSTR code/*[in]*/, long src/*[in]*/)
{
  long index;
  this->Find(code, src, (long*)&index);
  return index;
}

template <class T> HRESULT __fastcall
IPoolDispT<T>::GetItem(long index/*[in]*/, Hqpoolsvrlib_tlb::IQuote2** quote/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetItem"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Hqpoolsvrlib_tlb::IQuote2**)quote /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Hqpoolsvrlib_tlb::IQuote2* __fastcall
IPoolDispT<T>::GetItem(long index/*[in]*/)
{
  Hqpoolsvrlib_tlb::IQuote2* quote;
  this->GetItem(index, (Hqpoolsvrlib_tlb::IQuote2**)&quote);
  return quote;
}

template <class T> HRESULT __fastcall
IPoolDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPoolDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMIQuote2
// Interface: IQuote2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_SeqNo(long* pVal/*[out,retval]*/)
{
  return (*this)->get_SeqNo(pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_SeqNo(void)
{
  long pVal;
  OLECHECK(this->get_SeqNo((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Symbol(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuote2T<T>::get_Symbol(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Symbol((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_InstID(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuote2T<T>::get_InstID(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_InstID((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  return (*this)->get_InstIDSource(pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_InstIDSource(void)
{
  long pVal;
  OLECHECK(this->get_InstIDSource((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastQty(pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_LastQty(void)
{
  long pVal;
  OLECHECK(this->get_LastQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LastPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_LastPrice(void)
{
  double pVal;
  OLECHECK(this->get_LastPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_LastTime(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuote2T<T>::get_LastTime(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_LastTime((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_PreClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_PreClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_PreClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_ClosePrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_ClosePrice(void)
{
  double pVal;
  OLECHECK(this->get_ClosePrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_OpenPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_OpenPrice(void)
{
  double pVal;
  OLECHECK(this->get_OpenPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_SettlPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_SettlPrice(void)
{
  double pVal;
  OLECHECK(this->get_SettlPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_LowPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_LowPrice(void)
{
  double pVal;
  OLECHECK(this->get_LowPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_HighPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_HighPrice(void)
{
  double pVal;
  OLECHECK(this->get_HighPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  return (*this)->get_Turnover(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_Turnover(void)
{
  double pVal;
  OLECHECK(this->get_Turnover((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DayQty(pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_DayQty(void)
{
  long pVal;
  OLECHECK(this->get_DayQty((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  return (*this)->get_FixPrice(pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_FixPrice(void)
{
  double pVal;
  OLECHECK(this->get_FixPrice((double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_AskQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_AskQty(index, pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_AskQty(VARIANT index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_AskQty(index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_AskPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_AskPrice(index, pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_AskPrice(VARIANT index/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_AskPrice(index/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_BidQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_BidQty(index, pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_BidQty(VARIANT index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_BidQty(index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_BidPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_BidPrice(index, pVal);
}

template <class T> double __fastcall
TCOMIQuote2T<T>::get_BidPrice(VARIANT index/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_BidPrice(index/*[in]*/, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_TradingDay(pVal);
}

template <class T> BSTR __fastcall
TCOMIQuote2T<T>::get_TradingDay(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_TradingDay((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIQuote2T<T>::get_LevelCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_LevelCount(pVal);
}

template <class T> long __fastcall
TCOMIQuote2T<T>::get_LevelCount(void)
{
  long pVal;
  OLECHECK(this->get_LevelCount((long*)&pVal));
  return pVal;
}

// *********************************************************************//
// DispIntf:  IQuote2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6FB6B31B-2105-4CAB-975A-22F4341C0BDD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_SeqNo(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SeqNo"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_SeqNo(void)
{
  long pVal;
  this->get_SeqNo((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_Symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Symbol"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuote2DispT<T>::get_Symbol(void)
{
  BSTR pVal;
  this->get_Symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_InstID(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstID"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuote2DispT<T>::get_InstID(void)
{
  BSTR pVal;
  this->get_InstID((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_InstIDSource(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstIDSource"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_InstIDSource(void)
{
  long pVal;
  this->get_InstIDSource((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_LastQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastQty"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_LastQty(void)
{
  long pVal;
  this->get_LastQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_LastPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastPrice"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_LastPrice(void)
{
  double pVal;
  this->get_LastPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_LastTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastTime"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuote2DispT<T>::get_LastTime(void)
{
  BSTR pVal;
  this->get_LastTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_PreClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreClosePrice"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_PreClosePrice(void)
{
  double pVal;
  this->get_PreClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_ClosePrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClosePrice"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_ClosePrice(void)
{
  double pVal;
  this->get_ClosePrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_OpenPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenPrice"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_OpenPrice(void)
{
  double pVal;
  this->get_OpenPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_SettlPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SettlPrice"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_SettlPrice(void)
{
  double pVal;
  this->get_SettlPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_LowPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LowPrice"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_LowPrice(void)
{
  double pVal;
  this->get_LowPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_HighPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPrice"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_HighPrice(void)
{
  double pVal;
  this->get_HighPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_Turnover(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Turnover"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_Turnover(void)
{
  double pVal;
  this->get_Turnover((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_DayQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DayQty"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_DayQty(void)
{
  long pVal;
  this->get_DayQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_FixPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FixPrice"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_FixPrice(void)
{
  double pVal;
  this->get_FixPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_AskQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskQty"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_AskQty(VARIANT index/*[in]*/)
{
  long pVal;
  this->get_AskQty(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_AskPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AskPrice"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_AskPrice(VARIANT index/*[in]*/)
{
  double pVal;
  this->get_AskPrice(index, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_BidQty(VARIANT index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidQty"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_BidQty(VARIANT index/*[in]*/)
{
  long pVal;
  this->get_BidQty(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_BidPrice(VARIANT index/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BidPrice"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IQuote2DispT<T>::get_BidPrice(VARIANT index/*[in]*/)
{
  double pVal;
  this->get_BidPrice(index, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_TradingDay(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TradingDay"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IQuote2DispT<T>::get_TradingDay(void)
{
  BSTR pVal;
  this->get_TradingDay((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IQuote2DispT<T>::get_LevelCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LevelCount"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IQuote2DispT<T>::get_LevelCount(void)
{
  long pVal;
  this->get_LevelCount((long*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  _IManagerEvents
// Flags:     (4096) Dispatchable
// GUID:      {4D5CEC59-3360-4909-87E8-4B03D7593800}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IManagerEventsDispT<T>::OnError(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, BSTR ErrMessage)
{
  _TDispID _dispid(/* OnError */ DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = TopicName /*[VT_BSTR:0]*/;
  _args[2] = TopicID /*[VT_I4:0]*/;
  _args[3] = ErrMessage /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IManagerEventsDispT<T>::OnEvent(BSTR TopicName/*[in]*/, long TopicID/*[in]*/, LPDISPATCH EventHead
                                 , LPDISPATCH EventData)
{
  _TDispID _dispid(/* OnEvent */ DISPID(2));
  TAutoArgs<4> _args;
  _args[1] = TopicName /*[VT_BSTR:0]*/;
  _args[2] = TopicID /*[VT_I4:0]*/;
  _args[3] = EventHead /*[VT_DISPATCH:0]*/;
  _args[4] = EventData /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIManager
// Interface: IManager
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIManagerT<T>::Start(void)
{
  return (*this)->Start();
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::ShowProperty(OLE_HANDLE ParentWnd/*[in]*/)
{
  return (*this)->ShowProperty(ParentWnd);
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::get_Active(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Active(pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIManagerT<T>::get_Active(void)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::get_ActiveTopic(long* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveTopic(pVal);
}

template <class T> long __fastcall
TCOMIManagerT<T>::get_ActiveTopic(void)
{
  long pVal;
  OLECHECK(this->get_ActiveTopic((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::get_TopicCount(long* pVal/*[out,retval]*/)
{
  return (*this)->get_TopicCount(pVal);
}

template <class T> long __fastcall
TCOMIManagerT<T>::get_TopicCount(void)
{
  long pVal;
  OLECHECK(this->get_TopicCount((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::get_EventCount(long index/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_EventCount(index, pVal);
}

template <class T> long __fastcall
TCOMIManagerT<T>::get_EventCount(long index/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_EventCount(index/*[in]*/, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::Reset(void)
{
  return (*this)->Reset();
}

template <class T> HRESULT __fastcall
TCOMIManagerT<T>::SetPTSSession(LPDISPATCH Session/*[in]*/)
{
  return (*this)->SetPTSSession(Session);
}

// *********************************************************************//
// DispIntf:  IManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B524A3D-0A75-462D-A36C-BAD4538D2210}
// *********************************************************************//
template <class T> HRESULT __fastcall
IManagerDispT<T>::Start()
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(2));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::ShowProperty(OLE_HANDLE ParentWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowProperty"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ParentWnd /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::get_Active(VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IManagerDispT<T>::get_Active(void)
{
  VARIANT_BOOL pVal;
  this->get_Active((VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::get_ActiveTopic(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveTopic"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IManagerDispT<T>::get_ActiveTopic(void)
{
  long pVal;
  this->get_ActiveTopic((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::get_TopicCount(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopicCount"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IManagerDispT<T>::get_TopicCount(void)
{
  long pVal;
  this->get_TopicCount((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::get_EventCount(long index/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventCount"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IManagerDispT<T>::get_EventCount(long index/*[in]*/)
{
  long pVal;
  this->get_EventCount(index, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IManagerDispT<T>::SetPTSSession(LPDISPATCH Session/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPTSSession"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Session /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Pool
// Interface: TCOMIPool
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPool, IPool, &CLSID_Pool, &IID_IPool> CoPool;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Manager
// Interface: TCOMIManager
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIManager, IManager, &CLSID_Manager, &IID_IManager> CoManager;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Quote2
// Interface: TCOMIQuote2
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIQuote2, IQuote2, &CLSID_Quote2, &IID_IQuote2> CoQuote2;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Manager
// Event Interface : _IManagerEvents
// *********************************************************************//
template <class T>
class TEvents_Manager : public IConnectionPointImpl<T,
                                                 &DIID__IManagerEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  HRESULT         Fire_OnError(BSTR TopicName, long TopicID, BSTR ErrMessage);
  HRESULT         Fire_OnEvent(BSTR TopicName, long TopicID, LPDISPATCH EventHead, 
                               LPDISPATCH EventData);
protected:
  _IManagerEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_Manager<T>::Fire_OnError(BSTR TopicName, long TopicID, BSTR ErrMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnError(TopicName, TopicID, ErrMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_Manager<T>::Fire_OnEvent(BSTR TopicName, long TopicID, LPDISPATCH EventHead, 
                                 LPDISPATCH EventData)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEvent(TopicName, TopicID, EventHead, EventData);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Hqpoolsvrlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Hqpoolsvrlib_tlb;
#endif

#pragma option pop

#endif // HQPoolSvrLib_TLBH
