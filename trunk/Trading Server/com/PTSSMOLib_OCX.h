// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 2008-3-31 17:01:18 from Type Library described below.

// ************************************************************************  //
// Type Lib: G:\PTS2_BIN\Exchange\PTSSMO.dll (1)
// LIBID: {6DAE4C78-D739-4F07-BAAC-64533A3E42E7}
// LCID: 0
// Helpfile: 
// HelpString: PTSSMO 1.0 类型库
// DepndLst: 
//   (1) v2.0 stdole, (K:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   PTSSMOLib_OCXH
#define   PTSSMOLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "PTSSMOLib_TLB.h"
namespace Ptssmolib_tlb
{

// *********************************************************************//
// HelpString: PTSSMO 1.0 类型库
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOrder
// Help String      : Order Class
// Default Interface: IOrder
// Def. Intf. Object: IOrderPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOrder : public Oleserver::TOleServer
{
  IOrderPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOrder(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOrderPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOrderPtr intf);


  long            __fastcall get_AccountID(void);
  void            __fastcall set_AccountID(long pVal/*[in]*/);
  long            __fastcall get_HedgeID(void);
  void            __fastcall set_HedgeID(long pVal/*[in]*/);
  BSTR            __fastcall get_ExchAcctID(void);
  BSTR            __fastcall get_OrderID(void);
  Ptssmolib_tlb::TcOrderStatus __fastcall get_OrderStatus(void);
  BSTR            __fastcall get_OrderDate(void);
  BSTR            __fastcall get_OrderTime(void);
  Ptssmolib_tlb::TcOrderType __fastcall get_OrderType(void);
  void            __fastcall set_OrderType(Ptssmolib_tlb::TcOrderType pVal/*[in]*/);
  Ptssmolib_tlb::TcNonTradingOrderType __fastcall get_NonTradingType(void);
  void            __fastcall set_NonTradingType(Ptssmolib_tlb::TcNonTradingOrderType pVal/*[in]*/);
  BSTR            __fastcall get_InstrumentID(void);
  void            __fastcall set_InstrumentID(BSTR pVal/*[in]*/);
  long            __fastcall get_InstIDSource(void);
  void            __fastcall set_InstIDSource(long pVal/*[in]*/);
  Ptssmolib_tlb::TcOrderSide __fastcall get_Side(void);
  void            __fastcall set_Side(Ptssmolib_tlb::TcOrderSide pVal/*[in]*/);
  long            __fastcall get_Quantity(void);
  void            __fastcall set_Quantity(long pVal/*[in]*/);
  double          __fastcall get_Price(void);
  void            __fastcall set_Price(double pVal/*[in]*/);
  double          __fastcall get_StopPrice(void);
  void            __fastcall set_StopPrice(double pVal/*[in]*/);
  Ptssmolib_tlb::TcTimeInForce __fastcall get_TimeInForce(void);
  void            __fastcall set_TimeInForce(Ptssmolib_tlb::TcTimeInForce pVal/*[in]*/);
  BSTR            __fastcall get_ExpireTime(void);
  void            __fastcall set_ExpireTime(BSTR pVal/*[in]*/);
  long            __fastcall get_MaxFloor(void);
  void            __fastcall set_MaxFloor(long pVal/*[in]*/);
  Ptssmolib_tlb::TcCreditTrading __fastcall get_CreditTrading(void);
  void            __fastcall set_CreditTrading(Ptssmolib_tlb::TcCreditTrading pVal/*[in]*/);
  Ptssmolib_tlb::TcOrderRestriction __fastcall get_Restriction(void);
  void            __fastcall set_Restriction(Ptssmolib_tlb::TcOrderRestriction pVal/*[in]*/);
  Ptssmolib_tlb::TcPositionEffect __fastcall get_PositionEffect(void);
  void            __fastcall set_PositionEffect(Ptssmolib_tlb::TcPositionEffect pVal/*[in]*/);
  Ptssmolib_tlb::TcQuantityCondition __fastcall get_QtyCondition(void);
  void            __fastcall set_QtyCondition(Ptssmolib_tlb::TcQuantityCondition pVal/*[in]*/);
  long            __fastcall get_MinQty(void);
  void            __fastcall set_MinQty(long pVal/*[in]*/);
  BSTR            __fastcall get_RejectReason(void);
  long            __fastcall get_ExecQty(void);
  double          __fastcall get_ExecAvgPrice(void);
  BSTR            __fastcall get_Text(void);
  void            __fastcall set_Text(BSTR pVal/*[in]*/);
  void            __fastcall Cancel(void);
  Ptssmolib_tlb::IObjectList* __fastcall GetReports(void);
  void            __fastcall Modify(void);
  void            __fastcall Refresh(void);
  __property BSTR ExchAcctID={ read=get_ExchAcctID };
  __property BSTR OrderID={ read=get_OrderID };
  __property Ptssmolib_tlb::TcOrderStatus OrderStatus={ read=get_OrderStatus };
  __property BSTR OrderDate={ read=get_OrderDate };
  __property BSTR OrderTime={ read=get_OrderTime };
  __property BSTR RejectReason={ read=get_RejectReason };
  __property long ExecQty={ read=get_ExecQty };
  __property double ExecAvgPrice={ read=get_ExecAvgPrice };
  __property long AccountID={ read=get_AccountID, write=set_AccountID, stored=false };
  __property long HedgeID={ read=get_HedgeID, write=set_HedgeID, stored=false };
  __property Ptssmolib_tlb::TcOrderType OrderType={ read=get_OrderType, write=set_OrderType, stored=false };
  __property Ptssmolib_tlb::TcNonTradingOrderType NonTradingType={ read=get_NonTradingType, write=set_NonTradingType, stored=false };
  __property BSTR InstrumentID={ read=get_InstrumentID, write=set_InstrumentID, stored=false };
  __property long InstIDSource={ read=get_InstIDSource, write=set_InstIDSource, stored=false };
  __property Ptssmolib_tlb::TcOrderSide Side={ read=get_Side, write=set_Side, stored=false };
  __property long Quantity={ read=get_Quantity, write=set_Quantity, stored=false };
  __property double Price={ read=get_Price, write=set_Price, stored=false };
  __property double StopPrice={ read=get_StopPrice, write=set_StopPrice, stored=false };
  __property Ptssmolib_tlb::TcTimeInForce TimeInForce={ read=get_TimeInForce, write=set_TimeInForce, stored=false };
  __property BSTR ExpireTime={ read=get_ExpireTime, write=set_ExpireTime, stored=false };
  __property long MaxFloor={ read=get_MaxFloor, write=set_MaxFloor, stored=false };
  __property Ptssmolib_tlb::TcCreditTrading CreditTrading={ read=get_CreditTrading, write=set_CreditTrading, stored=false };
  __property Ptssmolib_tlb::TcOrderRestriction Restriction={ read=get_Restriction, write=set_Restriction, stored=false };
  __property Ptssmolib_tlb::TcPositionEffect PositionEffect={ read=get_PositionEffect, write=set_PositionEffect, stored=false };
  __property Ptssmolib_tlb::TcQuantityCondition QtyCondition={ read=get_QtyCondition, write=set_QtyCondition, stored=false };
  __property long MinQty={ read=get_MinQty, write=set_MinQty, stored=false };
  __property BSTR Text={ read=get_Text, write=set_Text, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOrders
// Help String      : Orders Class
// Default Interface: IOrders
// Def. Intf. Object: IOrdersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOrders : public Oleserver::TOleServer
{
  IOrdersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOrders(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOrdersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOrdersPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IOrder* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  Ptssmolib_tlb::IOrder* __fastcall Add(void);
  void            __fastcall DeleteAll(void);
  void            __fastcall RemoveAt(VARIANT Index/*[in]*/);
  void            __fastcall Commit(Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                    long* pErrorIndex/*[out]*/);
  Ptssmolib_tlb::IOrder* __fastcall Find(BSTR OrderID/*[in]*/);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IOrder* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExecutionReport
// Help String      : ExecutionReport Class
// Default Interface: IExecutionReport
// Def. Intf. Object: IExecutionReportPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExecutionReport : public Oleserver::TOleServer
{
  IExecutionReportPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExecutionReport(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExecutionReportPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExecutionReportPtr intf);


  Ptssmolib_tlb::TcMessageType __fastcall get_MsgType(void);
  BSTR            __fastcall get_Message(void);
  __property Ptssmolib_tlb::TcMessageType MsgType={ read=get_MsgType };
  __property BSTR Message={ read=get_Message };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TInstrument
// Help String      : Instrument Class
// Default Interface: IInstrument
// Def. Intf. Object: IInstrumentPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TInstrument : public Oleserver::TOleServer
{
  IInstrumentPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TInstrument(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IInstrumentPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IInstrumentPtr intf);


  BSTR            __fastcall get_ID(void);
  void            __fastcall set_ID(BSTR pVal/*[in]*/);
  long            __fastcall get_IDSource(void);
  void            __fastcall set_IDSource(long pVal/*[in]*/);
  BSTR            __fastcall get_Symbol(void);
  void            __fastcall set_Symbol(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_CFICode(void);
  void            __fastcall set_CFICode(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcInstrumentType __fastcall get_Type(void);
  void            __fastcall set_Type(Ptssmolib_tlb::TcInstrumentType pVal/*[in]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_SubType(void);
  void            __fastcall set_SubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  void            __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);
  Ptssmolib_tlb::TcInstrumentStatus __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcInstrumentStatus pVal/*[in]*/);
  Ptssmolib_tlb::IInstrumentDetail* __fastcall GetDetail(void);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(void);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long MaxRowCount/*[in]*/);
  void            __fastcall SetDetail(Ptssmolib_tlb::IInstrumentDetail* pInfo/*[in]*/);
  __property BSTR ID={ read=get_ID, write=set_ID, stored=false };
  __property long IDSource={ read=get_IDSource, write=set_IDSource, stored=false };
  __property BSTR Symbol={ read=get_Symbol, write=set_Symbol, stored=false };
  __property BSTR CFICode={ read=get_CFICode, write=set_CFICode, stored=false };
  __property Ptssmolib_tlb::TcInstrumentType Type={ read=get_Type, write=set_Type, stored=false };
  __property Ptssmolib_tlb::TcInstrumentSubType SubType={ read=get_SubType, write=set_SubType, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property Ptssmolib_tlb::TcCurrencyType Currency={ read=get_Currency, write=set_Currency, stored=false };
  __property Ptssmolib_tlb::TcInstrumentStatus Status={ read=get_Status, write=set_Status, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAccount
// Help String      : Account Class
// Default Interface: IAccount
// Def. Intf. Object: IAccountPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAccount : public Oleserver::TOleServer
{
  IAccountPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAccount(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAccountPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAccountPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_CustomerID(void);
  long            __fastcall get_TaskID(void);
  long            __fastcall get_AccountID(void);
  long            __fastcall get_ParentAcctID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcAccountStatus pVal/*[in]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AllocateBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                             double Amount/*[in]*/);
  void            __fastcall AllocatePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                              Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                              long Quantity/*[in]*/);
  void            __fastcall FreeBalance(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                         double Amount/*[in]*/);
  void            __fastcall FreePosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Quantity/*[in]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetFilledOrders(BSTR TradeDate/*[in]*/, BSTR FromTime/*[in]*/, 
                                                     BSTR ToTime/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long RowCount/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(void);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long CustomerID={ read=get_CustomerID };
  __property long TaskID={ read=get_TaskID };
  __property long AccountID={ read=get_AccountID };
  __property long ParentAcctID={ read=get_ParentAcctID };
  __property Ptssmolib_tlb::TcAccountType AccountType={ read=get_AccountType };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property Ptssmolib_tlb::TcAccountStatus Status={ read=get_Status, write=set_Status, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPositions
// Help String      : Positions Class
// Default Interface: IPositions
// Def. Intf. Object: IPositionsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPositions : public Oleserver::TOleServer
{
  IPositionsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPositions(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPositionsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPositionsPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IPosition* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IPosition* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPosition
// Help String      : Position Class
// Default Interface: IPosition
// Def. Intf. Object: IPositionPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPosition : public Oleserver::TOleServer
{
  IPositionPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPosition(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPositionPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPositionPtr intf);


  long            __fastcall get_AccountID(void);
  BSTR            __fastcall get_ExchAcctID(void);
  BSTR            __fastcall get_InstID(void);
  long            __fastcall get_InstIDSource(void);
  Ptssmolib_tlb::TcPositionDirection __fastcall get_Direction(void);
  long            __fastcall get_Position(void);
  long            __fastcall get_ForSale(void);
  long            __fastcall get_ForETFCR(void);
  long            __fastcall get_ForExercise(void);
  long            __fastcall get_ForClose(void);
  double          __fastcall get_PositionCost(void);
  double          __fastcall get_UsedMargin(void);
  double          __fastcall get_BuyAvgPrice(void);
  Ptssmolib_tlb::IPositionQtys* __fastcall GetPositionQtys(void);
  __property long AccountID={ read=get_AccountID };
  __property BSTR ExchAcctID={ read=get_ExchAcctID };
  __property BSTR InstID={ read=get_InstID };
  __property long InstIDSource={ read=get_InstIDSource };
  __property Ptssmolib_tlb::TcPositionDirection Direction={ read=get_Direction };
  __property long Position={ read=get_Position };
  __property long ForSale={ read=get_ForSale };
  __property long ForETFCR={ read=get_ForETFCR };
  __property long ForExercise={ read=get_ForExercise };
  __property long ForClose={ read=get_ForClose };
  __property double PositionCost={ read=get_PositionCost };
  __property double UsedMargin={ read=get_UsedMargin };
  __property double BuyAvgPrice={ read=get_BuyAvgPrice };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TFutureDetail
// Help String      : FutureDetail Class
// Default Interface: IFutureDetail
// Def. Intf. Object: IFutureDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TFutureDetail : public Oleserver::TOleServer
{
  IFutureDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TFutureDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IFutureDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IFutureDetailPtr intf);


  long            __fastcall get_Multiple(void);
  void            __fastcall set_Multiple(long pVal/*[in]*/);
  double          __fastcall get_MarginRatio(void);
  void            __fastcall set_MarginRatio(double pVal/*[in]*/);
  BSTR            __fastcall get_Underlying(void);
  void            __fastcall set_Underlying(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Month(void);
  void            __fastcall set_Month(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_LastTradeDay(void);
  void            __fastcall set_LastTradeDay(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_SettlDay(void);
  void            __fastcall set_SettlDay(BSTR pVal/*[in]*/);
  long            __fastcall get_UnderlyingSrc(void);
  void            __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  double          __fastcall get_SettlPrice(void);
  void            __fastcall set_SettlPrice(double pVal/*[in]*/);
  double          __fastcall get_PreSettlPrice(void);
  void            __fastcall set_PreSettlPrice(double pVal/*[in]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  void            __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);
  __property long Multiple={ read=get_Multiple, write=set_Multiple, stored=false };
  __property double MarginRatio={ read=get_MarginRatio, write=set_MarginRatio, stored=false };
  __property BSTR Underlying={ read=get_Underlying, write=set_Underlying, stored=false };
  __property BSTR Month={ read=get_Month, write=set_Month, stored=false };
  __property BSTR LastTradeDay={ read=get_LastTradeDay, write=set_LastTradeDay, stored=false };
  __property BSTR SettlDay={ read=get_SettlDay, write=set_SettlDay, stored=false };
  __property long UnderlyingSrc={ read=get_UnderlyingSrc, write=set_UnderlyingSrc, stored=false };
  __property double SettlPrice={ read=get_SettlPrice, write=set_SettlPrice, stored=false };
  __property double PreSettlPrice={ read=get_PreSettlPrice, write=set_PreSettlPrice, stored=false };
  __property Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle={ read=get_DeliveryStyle, write=set_DeliveryStyle, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TFundDetail
// Help String      : FundDetail Class
// Default Interface: IFundDetail
// Def. Intf. Object: IFundDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TFundDetail : public Oleserver::TOleServer
{
  IFundDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TFundDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IFundDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IFundDetailPtr intf);


  long            __fastcall get_Unit(void);
  void            __fastcall set_Unit(long pVal/*[in]*/);
  double          __fastcall get_MaxCashRatio(void);
  void            __fastcall set_MaxCashRatio(double pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsPublish(void);
  void            __fastcall set_IsPublish(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsAllowCreation(void);
  void            __fastcall set_IsAllowCreation(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsAllowRedemption(void);
  void            __fastcall set_IsAllowRedemption(VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_RecordNum(void);
  void            __fastcall set_RecordNum(long pVal/*[in]*/);
  double          __fastcall get_EstimateCash(void);
  void            __fastcall set_EstimateCash(double pVal/*[in]*/);
  BSTR            __fastcall get_TradingDay(void);
  void            __fastcall set_TradingDay(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_PreTradingDay(void);
  void            __fastcall set_PreTradingDay(BSTR pVal/*[in]*/);
  double          __fastcall get_CashComponent(void);
  void            __fastcall set_CashComponent(double pVal/*[in]*/);
  Ptssmolib_tlb::IFundMember* __fastcall AddMember(BSTR InstID/*[in]*/);
  void            __fastcall DropMember(BSTR InstID/*[in]*/);
  Ptssmolib_tlb::IFundMembers* __fastcall GetMembers(void);
  __property long Unit={ read=get_Unit, write=set_Unit, stored=false };
  __property double MaxCashRatio={ read=get_MaxCashRatio, write=set_MaxCashRatio, stored=false };
  __property VARIANT_BOOL IsPublish={ read=get_IsPublish, write=set_IsPublish, stored=false };
  __property VARIANT_BOOL IsAllowCreation={ read=get_IsAllowCreation, write=set_IsAllowCreation, stored=false };
  __property VARIANT_BOOL IsAllowRedemption={ read=get_IsAllowRedemption, write=set_IsAllowRedemption, stored=false };
  __property long RecordNum={ read=get_RecordNum, write=set_RecordNum, stored=false };
  __property double EstimateCash={ read=get_EstimateCash, write=set_EstimateCash, stored=false };
  __property BSTR TradingDay={ read=get_TradingDay, write=set_TradingDay, stored=false };
  __property BSTR PreTradingDay={ read=get_PreTradingDay, write=set_PreTradingDay, stored=false };
  __property double CashComponent={ read=get_CashComponent, write=set_CashComponent, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOptionDetail
// Help String      : OptionDetail Class
// Default Interface: IOptionDetail
// Def. Intf. Object: IOptionDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOptionDetail : public Oleserver::TOleServer
{
  IOptionDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOptionDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOptionDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOptionDetailPtr intf);


  long            __fastcall get_Multiple(void);
  void            __fastcall set_Multiple(long pVal/*[in]*/);
  double          __fastcall get_SettlPrice(void);
  void            __fastcall set_SettlPrice(double pVal/*[in]*/);
  BSTR            __fastcall get_Month(void);
  void            __fastcall set_Month(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Underlying(void);
  void            __fastcall set_Underlying(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcOptionType __fastcall get_OptionType(void);
  void            __fastcall set_OptionType(Ptssmolib_tlb::TcOptionType pVal/*[in]*/);
  long            __fastcall get_UnderlyingSrc(void);
  void            __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  void            __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  BSTR            __fastcall get_ExpiryDay(void);
  void            __fastcall set_ExpiryDay(BSTR pVal/*[in]*/);
  __property long Multiple={ read=get_Multiple, write=set_Multiple, stored=false };
  __property double SettlPrice={ read=get_SettlPrice, write=set_SettlPrice, stored=false };
  __property BSTR Month={ read=get_Month, write=set_Month, stored=false };
  __property BSTR Underlying={ read=get_Underlying, write=set_Underlying, stored=false };
  __property Ptssmolib_tlb::TcOptionType OptionType={ read=get_OptionType, write=set_OptionType, stored=false };
  __property long UnderlyingSrc={ read=get_UnderlyingSrc, write=set_UnderlyingSrc, stored=false };
  __property Ptssmolib_tlb::TcExerciseStyle ExerciseStyle={ read=get_ExerciseStyle, write=set_ExerciseStyle, stored=false };
  __property BSTR ExpiryDay={ read=get_ExpiryDay, write=set_ExpiryDay, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TWarrantDetail
// Help String      : WarrantDetail Class
// Default Interface: IWarrantDetail
// Def. Intf. Object: IWarrantDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TWarrantDetail : public Oleserver::TOleServer
{
  IWarrantDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TWarrantDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IWarrantDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IWarrantDetailPtr intf);


  BSTR            __fastcall get_Underlying(void);
  void            __fastcall set_Underlying(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcWarrantType __fastcall get_WarrantType(void);
  void            __fastcall set_WarrantType(Ptssmolib_tlb::TcWarrantType pVal/*[in]*/);
  double          __fastcall get_ExercisePrice(void);
  void            __fastcall set_ExercisePrice(double pVal/*[in]*/);
  double          __fastcall get_ExerciseRatio(void);
  void            __fastcall set_ExerciseRatio(double pVal/*[in]*/);
  Ptssmolib_tlb::TcExerciseStyle __fastcall get_ExerciseStyle(void);
  void            __fastcall set_ExerciseStyle(Ptssmolib_tlb::TcExerciseStyle pVal/*[in]*/);
  Ptssmolib_tlb::TcDeliveryStyle __fastcall get_DeliveryStyle(void);
  void            __fastcall set_DeliveryStyle(Ptssmolib_tlb::TcDeliveryStyle pVal/*[in]*/);
  double          __fastcall get_DeliveryPrice(void);
  void            __fastcall set_DeliveryPrice(double pVal/*[in]*/);
  BSTR            __fastcall get_DeliveryDate(void);
  void            __fastcall set_DeliveryDate(BSTR pVal/*[in]*/);
  long            __fastcall get_UnderlyingSrc(void);
  void            __fastcall set_UnderlyingSrc(long pVal/*[in]*/);
  BSTR            __fastcall get_ExerciseCode(void);
  void            __fastcall set_ExerciseCode(BSTR pVal/*[in]*/);
  __property BSTR Underlying={ read=get_Underlying, write=set_Underlying, stored=false };
  __property Ptssmolib_tlb::TcWarrantType WarrantType={ read=get_WarrantType, write=set_WarrantType, stored=false };
  __property double ExercisePrice={ read=get_ExercisePrice, write=set_ExercisePrice, stored=false };
  __property double ExerciseRatio={ read=get_ExerciseRatio, write=set_ExerciseRatio, stored=false };
  __property Ptssmolib_tlb::TcExerciseStyle ExerciseStyle={ read=get_ExerciseStyle, write=set_ExerciseStyle, stored=false };
  __property Ptssmolib_tlb::TcDeliveryStyle DeliveryStyle={ read=get_DeliveryStyle, write=set_DeliveryStyle, stored=false };
  __property double DeliveryPrice={ read=get_DeliveryPrice, write=set_DeliveryPrice, stored=false };
  __property BSTR DeliveryDate={ read=get_DeliveryDate, write=set_DeliveryDate, stored=false };
  __property long UnderlyingSrc={ read=get_UnderlyingSrc, write=set_UnderlyingSrc, stored=false };
  __property BSTR ExerciseCode={ read=get_ExerciseCode, write=set_ExerciseCode, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCustomer
// Help String      : Customer Class
// Default Interface: ICustomer
// Def. Intf. Object: ICustomerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCustomer : public Oleserver::TOleServer
{
  ICustomerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCustomer(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICustomerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICustomerPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_FullName(void);
  void            __fastcall set_FullName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_CompanyName(void);
  void            __fastcall set_CompanyName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_JobTitle(void);
  void            __fastcall set_JobTitle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Email(void);
  void            __fastcall set_Email(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Email1(void);
  void            __fastcall set_Email1(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Email2(void);
  void            __fastcall set_Email2(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Website(void);
  void            __fastcall set_Website(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_IM(void);
  void            __fastcall set_IM(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IExchangeAccountsPtr __fastcall get_ExchangeAccounts(void);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  Ptssmolib_tlb::ICustomerDetail* __fastcall GetDetails(void);
  BSTR            __fastcall GetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/);
  Ptssmolib_tlb::IPostalAddress* __fastcall GetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/);
  void            __fastcall SetDetails(Ptssmolib_tlb::ICustomerDetail* pVal/*[in]*/);
  void            __fastcall SetPhoneNumber(Ptssmolib_tlb::TcPhoneNumberType Type/*[in]*/, 
                                            BSTR newVal/*[in]*/);
  void            __fastcall SetPostalAddress(Ptssmolib_tlb::TcAddressType Type/*[in]*/, 
                                              Ptssmolib_tlb::IPostalAddress* pVal/*[in]*/);
  long            __fastcall AddAuthInfo(BSTR Name/*[in]*/, BSTR Type/*[in]*/, BSTR Content/*[in]*/);
  void            __fastcall DropAuthInfo(long AuthID/*[in]*/);
  void            __fastcall DenyAuth(long AuthID/*[in]*/);
  void            __fastcall GrantAuth(long AuthID/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListAuthInfo(void);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::IExchangeAccountsPtr ExchangeAccounts={ read=get_ExchangeAccounts };
  __property Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts={ read=get_BrokerAccounts };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property BSTR FullName={ read=get_FullName, write=set_FullName, stored=false };
  __property BSTR CompanyName={ read=get_CompanyName, write=set_CompanyName, stored=false };
  __property BSTR JobTitle={ read=get_JobTitle, write=set_JobTitle, stored=false };
  __property BSTR Email={ read=get_Email, write=set_Email, stored=false };
  __property BSTR Email1={ read=get_Email1, write=set_Email1, stored=false };
  __property BSTR Email2={ read=get_Email2, write=set_Email2, stored=false };
  __property BSTR Website={ read=get_Website, write=set_Website, stored=false };
  __property BSTR IM={ read=get_IM, write=set_IM, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCustomers
// Help String      : Customers Class
// Default Interface: ICustomers
// Def. Intf. Object: ICustomersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCustomers : public Oleserver::TOleServer
{
  ICustomersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCustomers(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICustomersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICustomersPtr intf);


  Ptssmolib_tlb::ICustomer* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::ICustomer* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::ICustomer* pObject/*[in]*/);
  __property Ptssmolib_tlb::ICustomer* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::ICustomer* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TTask
// Help String      : Task Class
// Default Interface: ITask
// Def. Intf. Object: ITaskPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TTask : public Oleserver::TOleServer
{
  ITaskPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TTask(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ITaskPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ITaskPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_TaskID(void);
  BSTR            __fastcall get_Type(void);
  void            __fastcall set_Type(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcTaskStatus __fastcall get_Status(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall Open(Ptssmolib_tlb::TcTaskOpenMode OpenMode/*[in]*/);
  void            __fastcall Close(void);
  Ptssmolib_tlb::IHedges* __fastcall GetCompleteHedges(BSTR EndDate/*[in]*/, 
                                                       long* pStartIndex/*[in,out]*/, 
                                                       long RowCount/*[in]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetWorkingHedges(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  Ptssmolib_tlb::IHedge* __fastcall NewHedge(BSTR HedgeName/*[in]*/);
  void            __fastcall AssignAccount(long AccountID/*[in]*/);
  void            __fastcall DetachAccount(long AccountID/*[in]*/);
  Ptssmolib_tlb::IAccounts* __fastcall GetAccounts(void);
  Ptssmolib_tlb::IHedge* __fastcall GetHedge(long HedgeID/*[in]*/);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long TaskID={ read=get_TaskID };
  __property Ptssmolib_tlb::TcTaskStatus Status={ read=get_Status };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Type={ read=get_Type, write=set_Type, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TTasks
// Help String      : Tasks Class
// Default Interface: ITasks
// Def. Intf. Object: ITasksPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TTasks : public Oleserver::TOleServer
{
  ITasksPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TTasks(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ITasksPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ITasksPtr intf);


  Ptssmolib_tlb::ITask* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::ITask* __fastcall get_ItemByID(long ID/*[in]*/);
  Ptssmolib_tlb::ITask* __fastcall Add(BSTR TaskName/*[in]*/, BSTR TaskType/*[in]*/);
  void            __fastcall Add2(Ptssmolib_tlb::ITask* pObject/*[in]*/);
  Ptssmolib_tlb::ITask* __fastcall Find(long TaskID/*[in]*/);
  __property Ptssmolib_tlb::ITask* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::ITask* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : THedge
// Help String      : Hedge Class
// Default Interface: IHedge
// Def. Intf. Object: IHedgePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE THedge : public Oleserver::TOleServer
{
  IHedgePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall THedge(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IHedgePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IHedgePtr intf);


  long            __fastcall get_TaskID(void);
  long            __fastcall get_HedgeID(void);
  BSTR            __fastcall get_Name(void);
  void            __fastcall set_Name(BSTR pVal/*[in]*/);
  double          __fastcall get_ExpectProfit(void);
  void            __fastcall set_ExpectProfit(double pVal/*[in]*/);
  double          __fastcall get_RealProfit(void);
  void            __fastcall set_RealProfit(double pVal/*[in]*/);
  double          __fastcall get_Cost(void);
  void            __fastcall set_Cost(double pVal/*[in]*/);
  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_CreateTime(void);
  BSTR            __fastcall get_EndDate(void);
  void            __fastcall set_EndDate(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_EndTime(void);
  void            __fastcall set_EndTime(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcHedgeStatus __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcHedgeStatus pVal/*[in]*/);
  void            __fastcall Alter(void);
  VARIANT         __fastcall LoadConfigure(void);
  void            __fastcall SaveConfigure(VARIANT Configure/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall NewOrders(long AccountID/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetWorkingOrders(long* pStartIndex/*[in,out]*/, 
                                                      long MaxRowCount/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(VARIANT_BOOL FindInHistory/*[in]*/, 
                                               long* pStartIndex/*[in,out]*/, 
                                               long MaxRowCount/*[in]*/);
  void            __fastcall Refresh(void);
  __property long TaskID={ read=get_TaskID };
  __property long HedgeID={ read=get_HedgeID };
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR CreateTime={ read=get_CreateTime };
  __property BSTR Name={ read=get_Name, write=set_Name, stored=false };
  __property double ExpectProfit={ read=get_ExpectProfit, write=set_ExpectProfit, stored=false };
  __property double RealProfit={ read=get_RealProfit, write=set_RealProfit, stored=false };
  __property double Cost={ read=get_Cost, write=set_Cost, stored=false };
  __property BSTR EndDate={ read=get_EndDate, write=set_EndDate, stored=false };
  __property BSTR EndTime={ read=get_EndTime, write=set_EndTime, stored=false };
  __property Ptssmolib_tlb::TcHedgeStatus Status={ read=get_Status, write=set_Status, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : THedges
// Help String      : Hedges Class
// Default Interface: IHedges
// Def. Intf. Object: IHedgesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE THedges : public Oleserver::TOleServer
{
  IHedgesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall THedges(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IHedgesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IHedgesPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IHedge* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  Ptssmolib_tlb::IHedge* __fastcall get_ItemByID(long ID/*[in]*/);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IHedge* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
  __property Ptssmolib_tlb::IHedge* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TTradeCoreSvc
// Help String      : TradeCoreSvc Class
// Default Interface: ITradeCoreSvc
// Def. Intf. Object: ITradeCoreSvcPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TTradeCoreSvc : public Oleserver::TOleServer
{
  ITradeCoreSvcPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TTradeCoreSvc(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ITradeCoreSvcPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ITradeCoreSvcPtr intf);


  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  void            __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  void            __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  void            __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);
  __property Ptssmolib_tlb::ICustomersPtr Customers={ read=get_Customers };
  __property Ptssmolib_tlb::IEventTopicsPtr EventTopics={ read=get_EventTopics };
  __property Ptssmolib_tlb::ITasksPtr Tasks={ read=get_Tasks };
  __property Ptssmolib_tlb::IExchangesPtr Exchanges={ read=get_Exchanges };
  __property Ptssmolib_tlb::IChartsPtr Charts={ read=get_Charts };
  __property Ptssmolib_tlb::IRolesPtr Roles={ read=get_Roles };
  __property Ptssmolib_tlb::IUsersPtr Users={ read=get_Users };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAccounts
// Help String      : Accounts Class
// Default Interface: IAccounts
// Def. Intf. Object: IAccountsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAccounts : public Oleserver::TOleServer
{
  IAccountsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAccounts(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAccountsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAccountsPtr intf);


  Ptssmolib_tlb::IAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IAccount* __fastcall Find(long AccountID/*[in]*/);
  __property Ptssmolib_tlb::IAccount* Item[VARIANT Index]={ read=get_Item };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuote
// Help String      : Quote Class
// Default Interface: IQuote
// Def. Intf. Object: IQuotePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuote : public Oleserver::TOleServer
{
  IQuotePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuote(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuotePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuotePtr intf);


  long            __fastcall get_SeqNo(void);
  BSTR            __fastcall get_Symbol(void);
  BSTR            __fastcall get_InstID(void);
  long            __fastcall get_InstIDSource(void);
  long            __fastcall get_LastQty(void);
  double          __fastcall get_LastPrice(void);
  BSTR            __fastcall get_LastTime(void);
  double          __fastcall get_PreClosePrice(void);
  double          __fastcall get_ClosePrice(void);
  double          __fastcall get_OpenPrice(void);
  double          __fastcall get_SettlPrice(void);
  double          __fastcall get_LowPrice(void);
  double          __fastcall get_HighPrice(void);
  double          __fastcall get_Turnover(void);
  long            __fastcall get_DayQty(void);
  double          __fastcall get_FixPrice(void);
  long            __fastcall get_AskQty(void);
  double          __fastcall get_AskPrice(void);
  long            __fastcall get_BidQty(void);
  double          __fastcall get_BidPrice(void);
  BSTR            __fastcall get_TradingDay(void);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteDetails(void);
  __property long SeqNo={ read=get_SeqNo };
  __property BSTR Symbol={ read=get_Symbol };
  __property BSTR InstID={ read=get_InstID };
  __property long InstIDSource={ read=get_InstIDSource };
  __property long LastQty={ read=get_LastQty };
  __property double LastPrice={ read=get_LastPrice };
  __property BSTR LastTime={ read=get_LastTime };
  __property double PreClosePrice={ read=get_PreClosePrice };
  __property double ClosePrice={ read=get_ClosePrice };
  __property double OpenPrice={ read=get_OpenPrice };
  __property double SettlPrice={ read=get_SettlPrice };
  __property double LowPrice={ read=get_LowPrice };
  __property double HighPrice={ read=get_HighPrice };
  __property double Turnover={ read=get_Turnover };
  __property long DayQty={ read=get_DayQty };
  __property double FixPrice={ read=get_FixPrice };
  __property long AskQty={ read=get_AskQty };
  __property double AskPrice={ read=get_AskPrice };
  __property long BidQty={ read=get_BidQty };
  __property double BidPrice={ read=get_BidPrice };
  __property BSTR TradingDay={ read=get_TradingDay };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TEventTopic
// Help String      : EventTopic Class
// Default Interface: IEventTopic
// Def. Intf. Object: IEventTopicPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TEventTopic : public Oleserver::TOleServer
{
  IEventTopicPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TEventTopic(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IEventTopicPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IEventTopicPtr intf);


  long            __fastcall get_ID(void);
  Ptssmolib_tlb::TcEventTopicType __fastcall get_Type(void);
  Ptssmolib_tlb::IEventPublisherPtr __fastcall get_Publisher(void);
  BSTR            __fastcall get_Filter(void);
  BSTR            __fastcall get_Config(void);
  BSTR            __fastcall get_Description(void);
  Ptssmolib_tlb::ISubscriber* __fastcall NewSubscriber(void);
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::TcEventTopicType Type={ read=get_Type };
  __property Ptssmolib_tlb::IEventPublisherPtr Publisher={ read=get_Publisher };
  __property BSTR Filter={ read=get_Filter };
  __property BSTR Config={ read=get_Config };
  __property BSTR Description={ read=get_Description };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TEventTopics
// Help String      : EventTopics Class
// Default Interface: IEventTopics
// Def. Intf. Object: IEventTopicsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TEventTopics : public Oleserver::TOleServer
{
  IEventTopicsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TEventTopics(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IEventTopicsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IEventTopicsPtr intf);


  Ptssmolib_tlb::IEventTopic* __fastcall get_Item(VARIANT Index/*[in]*/);
  __property Ptssmolib_tlb::IEventTopic* Item[VARIANT Index]={ read=get_Item };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuotes
// Help String      : Quotes Class
// Default Interface: IQuotes
// Def. Intf. Object: IQuotesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuotes : public Oleserver::TOleServer
{
  IQuotesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuotes(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuotesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuotesPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IQuote* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IQuote* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuoteDetail
// Help String      : QuoteDetail Class
// Default Interface: IQuoteDetail
// Def. Intf. Object: IQuoteDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuoteDetail : public Oleserver::TOleServer
{
  IQuoteDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuoteDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuoteDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuoteDetailPtr intf);


  long            __fastcall get_Level(void);
  long            __fastcall get_AskQty(void);
  double          __fastcall get_AskPrice(void);
  long            __fastcall get_BidQty(void);
  double          __fastcall get_BidPrice(void);
  long            __fastcall get_AskOrderNum(void);
  long            __fastcall get_BidOrderNum(void);
  __property long Level={ read=get_Level };
  __property long AskQty={ read=get_AskQty };
  __property double AskPrice={ read=get_AskPrice };
  __property long BidQty={ read=get_BidQty };
  __property double BidPrice={ read=get_BidPrice };
  __property long AskOrderNum={ read=get_AskOrderNum };
  __property long BidOrderNum={ read=get_BidOrderNum };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TFundMember
// Help String      : FundMember Class
// Default Interface: IFundMember
// Def. Intf. Object: IFundMemberPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TFundMember : public Oleserver::TOleServer
{
  IFundMemberPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TFundMember(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IFundMemberPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IFundMemberPtr intf);


  BSTR            __fastcall get_ID(void);
  BSTR            __fastcall get_Name(void);
  void            __fastcall set_Name(BSTR pVal/*[in]*/);
  long            __fastcall get_Quantity(void);
  void            __fastcall set_Quantity(long pVal/*[in]*/);
  Ptssmolib_tlb::TcCashReplaceFlag __fastcall get_ReplaceFlag(void);
  void            __fastcall set_ReplaceFlag(Ptssmolib_tlb::TcCashReplaceFlag pVal/*[in]*/);
  double          __fastcall get_ReplaceRatio(void);
  void            __fastcall set_ReplaceRatio(double pVal/*[in]*/);
  double          __fastcall get_ReplaceCash(void);
  void            __fastcall set_ReplaceCash(double pVal/*[in]*/);
  __property BSTR ID={ read=get_ID };
  __property BSTR Name={ read=get_Name, write=set_Name, stored=false };
  __property long Quantity={ read=get_Quantity, write=set_Quantity, stored=false };
  __property Ptssmolib_tlb::TcCashReplaceFlag ReplaceFlag={ read=get_ReplaceFlag, write=set_ReplaceFlag, stored=false };
  __property double ReplaceRatio={ read=get_ReplaceRatio, write=set_ReplaceRatio, stored=false };
  __property double ReplaceCash={ read=get_ReplaceCash, write=set_ReplaceCash, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TFundMembers
// Help String      : FundMembers Class
// Default Interface: IFundMembers
// Def. Intf. Object: IFundMembersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TFundMembers : public Oleserver::TOleServer
{
  IFundMembersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TFundMembers(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IFundMembersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IFundMembersPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IFundMember* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  Ptssmolib_tlb::IFundMember* __fastcall get_ItemByID(BSTR ID/*[in]*/);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IFundMember* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
  __property Ptssmolib_tlb::IFundMember* ItemByID[BSTR ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSubscriber
// Help String      : Subscriber Class
// Default Interface: ISubscriber
// Def. Intf. Object: ISubscriberPtr
// Def. Intf. DISP? : No
// Event   Interface: _ISubscriberEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TSubscriberOnEvent)(System::TObject * Sender, 
                                                         LPDISPATCH pEventHead/*[in]*/, 
                                                         LPDISPATCH pEventData/*[in]*/);
typedef void __fastcall (__closure * TSubscriberOnStatusChanged)(System::TObject * Sender, 
                                                                 Ptssmolib_tlb::TcSubscribeStatus Status/*[in]*/);
typedef void __fastcall (__closure * TSubscriberOnError)(System::TObject * Sender, 
                                                         BSTR ErrMsg/*[in]*/);

class PACKAGE TSubscriber : public Oleserver::TOleServer
{
  ISubscriberPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TSubscriber(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ISubscriberPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ISubscriberPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_ServerName(void);
  long            __fastcall get_ServerPort(void);
  long            __fastcall get_TopicID(void);
  BSTR            __fastcall get_TopicName(void);
  BSTR            __fastcall get_FilterString(void);
  Ptssmolib_tlb::TcSubscribeStatus __fastcall get_Status(void);
  BSTR            __fastcall get_AuthCode(void);
  long            __fastcall get_SocketWndHandle(void);
  void            __fastcall Connect1(BSTR ServerName/*[in]*/, long ServerPort/*[in]*/);
  void            __fastcall Disconnect1(void);
  void            __fastcall Subscribe(BSTR FilterString/*[in]*/);
  void            __fastcall Unsubscribe(void);
  __property BSTR ServerName={ read=get_ServerName };
  __property long ServerPort={ read=get_ServerPort };
  __property long TopicID={ read=get_TopicID };
  __property BSTR TopicName={ read=get_TopicName };
  __property BSTR FilterString={ read=get_FilterString };
  __property Ptssmolib_tlb::TcSubscribeStatus Status={ read=get_Status };
  __property BSTR AuthCode={ read=get_AuthCode };
  __property long SocketWndHandle={ read=get_SocketWndHandle };
private:
  TSubscriberOnEvent             FOnEvent;
  TSubscriberOnStatusChanged     FOnStatusChanged;
  TSubscriberOnError             FOnError;
__published:
  __property TSubscriberOnEvent OnEvent={ read=FOnEvent, write=FOnEvent };
  __property TSubscriberOnStatusChanged OnStatusChanged={ read=FOnStatusChanged, write=FOnStatusChanged };
  __property TSubscriberOnError OnError={ read=FOnError, write=FOnError };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExchange
// Help String      : Exchange Class
// Default Interface: IExchange
// Def. Intf. Object: IExchangePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExchange : public Oleserver::TOleServer
{
  IExchangePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExchange(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExchangePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExchangePtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcExchangeStatus __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcExchangeStatus pVal/*[in]*/);
  BSTR            __fastcall get_MarketCode(void);
  void            __fastcall set_MarketCode(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  Ptssmolib_tlb::IInstrument* __fastcall GetInstrument(BSTR InstID/*[in]*/);
  Ptssmolib_tlb::IInstruments* __fastcall GetAllInstruments(long* pStartIndex/*[in,out]*/, 
                                                            long RowCount/*[in]*/);
  Ptssmolib_tlb::IQuotes* __fastcall GetQuoteSnapshot(long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  Ptssmolib_tlb::IQuote* __fastcall GetNowQuote(BSTR InstID/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall GetQuoteTickDatas(BSTR InstID/*[in]*/, 
                                                           BSTR TradingDay/*[in]*/, 
                                                           BSTR FormTime/*[in]*/, 
                                                           BSTR ToTime/*[in]*/, 
                                                           long* pStartIndex/*[in,out]*/, 
                                                           long RowCount/*[in]*/);
  void            __fastcall Alter(void);
  void            __fastcall AddInstrument(Ptssmolib_tlb::IInstrument* pInstrument/*[in]*/);
  void            __fastcall Drop(void);
  void            __fastcall DropInstrument(BSTR InstID/*[in]*/);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::IMiscFeesPtr MiscFees={ read=get_MiscFees };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property Ptssmolib_tlb::TcExchangeStatus Status={ read=get_Status, write=set_Status, stored=false };
  __property BSTR MarketCode={ read=get_MarketCode, write=set_MarketCode, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExchanges
// Help String      : Exchanges Class
// Default Interface: IExchanges
// Def. Intf. Object: IExchangesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExchanges : public Oleserver::TOleServer
{
  IExchangesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExchanges(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExchangesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExchangesPtr intf);


  Ptssmolib_tlb::IExchange* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IExchange* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IExchange* pObject/*[in]*/);
  __property Ptssmolib_tlb::IExchange* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IExchange* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TInstrumentDetail
// Help String      : InstrumentDetail Class
// Default Interface: IInstrumentDetail
// Def. Intf. Object: IInstrumentDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TInstrumentDetail : public Oleserver::TOleServer
{
  IInstrumentDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TInstrumentDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IInstrumentDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IInstrumentDetailPtr intf);


  BSTR            __fastcall get_ID(void);
  long            __fastcall get_IDSource(void);
  BSTR            __fastcall get_Prefix(void);
  void            __fastcall set_Prefix(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcOrderLotLimitType __fastcall get_LotLimitType(void);
  void            __fastcall set_LotLimitType(Ptssmolib_tlb::TcOrderLotLimitType pVal/*[in]*/);
  long            __fastcall get_BuyLotQty(void);
  void            __fastcall set_BuyLotQty(long pVal/*[in]*/);
  long            __fastcall get_SellLotQty(void);
  void            __fastcall set_SellLotQty(long pVal/*[in]*/);
  long            __fastcall get_MinTradeUnit(void);
  void            __fastcall set_MinTradeUnit(long pVal/*[in]*/);
  long            __fastcall get_MaxOrderSize(void);
  void            __fastcall set_MaxOrderSize(long pVal/*[in]*/);
  long            __fastcall get_MinOrderSize(void);
  void            __fastcall set_MinOrderSize(long pVal/*[in]*/);
  long            __fastcall get_MinQty(void);
  void            __fastcall set_MinQty(long pVal/*[in]*/);
  double          __fastcall get_OrderPxUpLimit(void);
  void            __fastcall set_OrderPxUpLimit(double pVal/*[in]*/);
  double          __fastcall get_OrderPxLoLimit(void);
  void            __fastcall set_OrderPxLoLimit(double pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsValidMarketOrder(void);
  void            __fastcall set_IsValidMarketOrder(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsValidLimitOrder(void);
  void            __fastcall set_IsValidLimitOrder(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsValidIcebergOrder(void);
  void            __fastcall set_IsValidIcebergOrder(VARIANT_BOOL pVal/*[in]*/);
  Ptssmolib_tlb::TcFinancingIndicate __fastcall get_FinancingIndicate(void);
  void            __fastcall set_FinancingIndicate(Ptssmolib_tlb::TcFinancingIndicate pVal/*[in]*/);
  long            __fastcall get_ParValue(void);
  void            __fastcall set_ParValue(long pVal/*[in]*/);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  void            __fastcall set_Currency(Ptssmolib_tlb::TcCurrencyType pVal/*[in]*/);
  __property BSTR ID={ read=get_ID };
  __property long IDSource={ read=get_IDSource };
  __property BSTR Prefix={ read=get_Prefix, write=set_Prefix, stored=false };
  __property Ptssmolib_tlb::TcOrderLotLimitType LotLimitType={ read=get_LotLimitType, write=set_LotLimitType, stored=false };
  __property long BuyLotQty={ read=get_BuyLotQty, write=set_BuyLotQty, stored=false };
  __property long SellLotQty={ read=get_SellLotQty, write=set_SellLotQty, stored=false };
  __property long MinTradeUnit={ read=get_MinTradeUnit, write=set_MinTradeUnit, stored=false };
  __property long MaxOrderSize={ read=get_MaxOrderSize, write=set_MaxOrderSize, stored=false };
  __property long MinOrderSize={ read=get_MinOrderSize, write=set_MinOrderSize, stored=false };
  __property long MinQty={ read=get_MinQty, write=set_MinQty, stored=false };
  __property double OrderPxUpLimit={ read=get_OrderPxUpLimit, write=set_OrderPxUpLimit, stored=false };
  __property double OrderPxLoLimit={ read=get_OrderPxLoLimit, write=set_OrderPxLoLimit, stored=false };
  __property VARIANT_BOOL IsValidMarketOrder={ read=get_IsValidMarketOrder, write=set_IsValidMarketOrder, stored=false };
  __property VARIANT_BOOL IsValidLimitOrder={ read=get_IsValidLimitOrder, write=set_IsValidLimitOrder, stored=false };
  __property VARIANT_BOOL IsValidIcebergOrder={ read=get_IsValidIcebergOrder, write=set_IsValidIcebergOrder, stored=false };
  __property Ptssmolib_tlb::TcFinancingIndicate FinancingIndicate={ read=get_FinancingIndicate, write=set_FinancingIndicate, stored=false };
  __property long ParValue={ read=get_ParValue, write=set_ParValue, stored=false };
  __property Ptssmolib_tlb::TcCurrencyType Currency={ read=get_Currency, write=set_Currency, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPositionQtys
// Help String      : PositionQtys Class
// Default Interface: IPositionQtys
// Def. Intf. Object: IPositionQtysPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPositionQtys : public Oleserver::TOleServer
{
  IPositionQtysPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPositionQtys(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPositionQtysPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPositionQtysPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IPositionQty* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IPositionQty* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPositionQty
// Help String      : PositionQty Class
// Default Interface: IPositionQty
// Def. Intf. Object: IPositionQtyPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPositionQty : public Oleserver::TOleServer
{
  IPositionQtyPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPositionQty(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPositionQtyPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPositionQtyPtr intf);


  Ptssmolib_tlb::TcPositionType __fastcall get_Type(void);
  long            __fastcall get_Quantity(void);
  long            __fastcall get_FrozenQty(void);
  __property Ptssmolib_tlb::TcPositionType Type={ read=get_Type };
  __property long Quantity={ read=get_Quantity };
  __property long FrozenQty={ read=get_FrozenQty };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQueryCondition
// Help String      : QueryCondition Class
// Default Interface: IQueryCondition
// Def. Intf. Object: IQueryConditionPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQueryCondition : public Oleserver::TOleServer
{
  IQueryConditionPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQueryCondition(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQueryConditionPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQueryConditionPtr intf);


  BSTR            __fastcall get_Property(void);
  void            __fastcall set_Property(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcOperatorType __fastcall get_Operator(void);
  void            __fastcall set_Operator(Ptssmolib_tlb::TcOperatorType pVal/*[in]*/);
  VARIANT         __fastcall get_LeftValue(void);
  void            __fastcall set_LeftValue(VARIANT pVal/*[in]*/);
  VARIANT         __fastcall get_RightValue(void);
  void            __fastcall set_RightValue(VARIANT pVal/*[in]*/);
  __property VARIANT LeftValue={ read=get_LeftValue, write=set_LeftValue };
  __property VARIANT RightValue={ read=get_RightValue, write=set_RightValue };
  __property BSTR Property={ read=get_Property, write=set_Property, stored=false };
  __property Ptssmolib_tlb::TcOperatorType Operator={ read=get_Operator, write=set_Operator, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQueryConditions
// Help String      : QueryConditions Class
// Default Interface: IQueryConditions
// Def. Intf. Object: IQueryConditionsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQueryConditions : public Oleserver::TOleServer
{
  IQueryConditionsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQueryConditions(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQueryConditionsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQueryConditionsPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  Ptssmolib_tlb::IQueryCondition* __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  Ptssmolib_tlb::IQueryCondition* __fastcall Add(void);
  void            __fastcall DeleteAll(void);
  void            __fastcall RemoveAt(VARIANT Index/*[in]*/);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property Ptssmolib_tlb::IQueryCondition* Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAccountDetail
// Help String      : AccountDetail Class
// Default Interface: IAccountDetail
// Def. Intf. Object: IAccountDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAccountDetail : public Oleserver::TOleServer
{
  IAccountDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAccountDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAccountDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAccountDetailPtr intf);


  double          __fastcall get_Initial(void);
  double          __fastcall get_Available(void);
  double          __fastcall get_Yesterday(void);
  double          __fastcall get_Credited(void);
  double          __fastcall get_Debited(void);
  double          __fastcall get_Frozen(void);
  double          __fastcall get_MaintenanceMargin(void);
  double          __fastcall get_Fee(void);
  double          __fastcall get_Interest(void);
  double          __fastcall get_PositionCost(void);
  double          __fastcall get_PositionValue(void);
  Ptssmolib_tlb::TcCurrencyType __fastcall get_Currency(void);
  double          __fastcall get_Equity(void);
  __property double Initial={ read=get_Initial };
  __property double Available={ read=get_Available };
  __property double Yesterday={ read=get_Yesterday };
  __property double Credited={ read=get_Credited };
  __property double Debited={ read=get_Debited };
  __property double Frozen={ read=get_Frozen };
  __property double MaintenanceMargin={ read=get_MaintenanceMargin };
  __property double Fee={ read=get_Fee };
  __property double Interest={ read=get_Interest };
  __property double PositionCost={ read=get_PositionCost };
  __property double PositionValue={ read=get_PositionValue };
  __property Ptssmolib_tlb::TcCurrencyType Currency={ read=get_Currency };
  __property double Equity={ read=get_Equity };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TInstruments
// Help String      : Instruments Class
// Default Interface: IInstruments
// Def. Intf. Object: IInstrumentsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TInstruments : public Oleserver::TOleServer
{
  IInstrumentsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TInstruments(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IInstrumentsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IInstrumentsPtr intf);


  Ptssmolib_tlb::IInstrument* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IInstrument* __fastcall get_ItemByID(BSTR ID/*[in]*/);
  __property Ptssmolib_tlb::IInstrument* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IInstrument* ItemByID[BSTR ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCustomerDetail
// Help String      : CustomerDetail Class
// Default Interface: ICustomerDetail
// Def. Intf. Object: ICustomerDetailPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCustomerDetail : public Oleserver::TOleServer
{
  ICustomerDetailPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCustomerDetail(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICustomerDetailPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICustomerDetailPtr intf);


  BSTR            __fastcall get_Department(void);
  void            __fastcall set_Department(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Office(void);
  void            __fastcall set_Office(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Profession(void);
  void            __fastcall set_Profession(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_ManagerName(void);
  void            __fastcall set_ManagerName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_AssistantName(void);
  void            __fastcall set_AssistantName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_NickName(void);
  void            __fastcall set_NickName(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcGenderType __fastcall get_GenderType(void);
  void            __fastcall set_GenderType(Ptssmolib_tlb::TcGenderType pVal/*[in]*/);
  BSTR            __fastcall get_Birthday(void);
  void            __fastcall set_Birthday(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_EnglishTitle(void);
  void            __fastcall set_EnglishTitle(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_ChineseTitle(void);
  void            __fastcall set_ChineseTitle(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcIdentifiedCardType __fastcall get_IdentifiedCardType(void);
  void            __fastcall set_IdentifiedCardType(Ptssmolib_tlb::TcIdentifiedCardType pVal/*[in]*/);
  BSTR            __fastcall get_IdentifiedCard(void);
  void            __fastcall set_IdentifiedCard(BSTR pVal/*[in]*/);
  __property BSTR Department={ read=get_Department, write=set_Department, stored=false };
  __property BSTR Office={ read=get_Office, write=set_Office, stored=false };
  __property BSTR Profession={ read=get_Profession, write=set_Profession, stored=false };
  __property BSTR ManagerName={ read=get_ManagerName, write=set_ManagerName, stored=false };
  __property BSTR AssistantName={ read=get_AssistantName, write=set_AssistantName, stored=false };
  __property BSTR NickName={ read=get_NickName, write=set_NickName, stored=false };
  __property Ptssmolib_tlb::TcGenderType GenderType={ read=get_GenderType, write=set_GenderType, stored=false };
  __property BSTR Birthday={ read=get_Birthday, write=set_Birthday, stored=false };
  __property BSTR EnglishTitle={ read=get_EnglishTitle, write=set_EnglishTitle, stored=false };
  __property BSTR ChineseTitle={ read=get_ChineseTitle, write=set_ChineseTitle, stored=false };
  __property Ptssmolib_tlb::TcIdentifiedCardType IdentifiedCardType={ read=get_IdentifiedCardType, write=set_IdentifiedCardType, stored=false };
  __property BSTR IdentifiedCard={ read=get_IdentifiedCard, write=set_IdentifiedCard, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExchangeAccount
// Help String      : ExchangeAccount Class
// Default Interface: IExchangeAccount
// Def. Intf. Object: IExchangeAccountPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExchangeAccount : public Oleserver::TOleServer
{
  IExchangeAccountPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExchangeAccount(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExchangeAccountPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExchangeAccountPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  long            __fastcall get_BrokerAcctID(void);
  BSTR            __fastcall get_Number(void);
  void            __fastcall set_Number(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcExchangeAccountType __fastcall get_Type(void);
  void            __fastcall set_Type(Ptssmolib_tlb::TcExchangeAccountType pVal/*[in]*/);
  long            __fastcall get_CustomerID(void);
  void            __fastcall set_CustomerID(long pVal/*[in]*/);
  long            __fastcall get_ExchangeID(void);
  void            __fastcall set_ExchangeID(long pVal/*[in]*/);
  Ptssmolib_tlb::TcExchangeAccountStatus __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcExchangeAccountStatus pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall GetPosition(BSTR InstID, long InstIDSource, 
                                         Ptssmolib_tlb::TcPositionDirection Direction, 
                                         Ptssmolib_tlb::IPosition** Position);
  void            __fastcall GetPositions(long* pStartIndex, long MaxRowCount, 
                                          Ptssmolib_tlb::IPositions** Positions);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property long BrokerAcctID={ read=get_BrokerAcctID };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Number={ read=get_Number, write=set_Number, stored=false };
  __property Ptssmolib_tlb::TcExchangeAccountType Type={ read=get_Type, write=set_Type, stored=false };
  __property long CustomerID={ read=get_CustomerID, write=set_CustomerID, stored=false };
  __property long ExchangeID={ read=get_ExchangeID, write=set_ExchangeID, stored=false };
  __property Ptssmolib_tlb::TcExchangeAccountStatus Status={ read=get_Status, write=set_Status, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExchangeAccounts
// Help String      : ExchangeAccounts Class
// Default Interface: IExchangeAccounts
// Def. Intf. Object: IExchangeAccountsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExchangeAccounts : public Oleserver::TOleServer
{
  IExchangeAccountsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExchangeAccounts(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExchangeAccountsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExchangeAccountsPtr intf);


  Ptssmolib_tlb::IExchangeAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IExchangeAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IExchangeAccount* pObject/*[in]*/);
  __property Ptssmolib_tlb::IExchangeAccount* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IExchangeAccount* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TUser
// Help String      : User Class
// Default Interface: IUser
// Def. Intf. Object: IUserPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TUser : public Oleserver::TOleServer
{
  IUserPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TUser(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IUserPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IUserPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  VARIANT_BOOL    __fastcall get_DenyLogin(void);
  void            __fastcall set_DenyLogin(VARIANT_BOOL pVal/*[in]*/);
  Ptssmolib_tlb::TcUserType __fastcall get_Type(void);
  void            __fastcall set_Type(Ptssmolib_tlb::TcUserType pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsPasswordExpired(void);
  VARIANT_BOOL    __fastcall get_IsSystemObject(void);
  VARIANT_BOOL    __fastcall get_MustChangePassword(void);
  void            __fastcall set_MustChangePassword(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_PasswordPolicyEnforced(void);
  void            __fastcall set_PasswordPolicyEnforced(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_PasswordExpirationEnabled(void);
  void            __fastcall set_PasswordExpirationEnabled(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_Email(void);
  void            __fastcall set_Email(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AddToRole(BSTR RoleName/*[in]*/);
  void            __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  void            __fastcall Deny(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                  long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  void            __fastcall Grant(Ptssmolib_tlb::TcPrivilegeType Privileges/*[in]*/, 
                                   long ObjectID/*[in]*/, VARIANT GrantGrant/*[in,opt]*/= TNoParam());
  VARIANT_BOOL    __fastcall IsMember(BSTR RoleName/*[in]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);
  Ptssmolib_tlb::IObjectList* __fastcall ListOwnedObjects(Ptssmolib_tlb::TcObjectType ObjectTypes/*[in]*/, 
                                                          Ptssmolib_tlb::TcObjectSortType SortBy/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListObjectPermissions(long ObjectID/*[in]*/);
  void            __fastcall Revoke(Ptssmolib_tlb::TcPrivilegeType Privilege/*[in]*/, 
                                    long ObjectID/*[in]*/);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property VARIANT_BOOL IsPasswordExpired={ read=get_IsPasswordExpired };
  __property VARIANT_BOOL IsSystemObject={ read=get_IsSystemObject };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property VARIANT_BOOL DenyLogin={ read=get_DenyLogin, write=set_DenyLogin, stored=false };
  __property Ptssmolib_tlb::TcUserType Type={ read=get_Type, write=set_Type, stored=false };
  __property VARIANT_BOOL MustChangePassword={ read=get_MustChangePassword, write=set_MustChangePassword, stored=false };
  __property VARIANT_BOOL PasswordPolicyEnforced={ read=get_PasswordPolicyEnforced, write=set_PasswordPolicyEnforced, stored=false };
  __property VARIANT_BOOL PasswordExpirationEnabled={ read=get_PasswordExpirationEnabled, write=set_PasswordExpirationEnabled, stored=false };
  __property BSTR Email={ read=get_Email, write=set_Email, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TUsers
// Help String      : Users Class
// Default Interface: IUsers
// Def. Intf. Object: IUsersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TUsers : public Oleserver::TOleServer
{
  IUsersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TUsers(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IUsersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IUsersPtr intf);


  Ptssmolib_tlb::IUser* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IUser* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IUser* pObjVal/*[in]*/);
  __property Ptssmolib_tlb::IUser* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IUser* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TNameList
// Help String      : NameList Class
// Default Interface: INameList
// Def. Intf. Object: INameListPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TNameList : public Oleserver::TOleServer
{
  INameListPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TNameList(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  INameListPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(INameListPtr intf);


  BSTR            __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  long            __fastcall FindName(BSTR Name/*[in]*/);
  __property BSTR Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TObjectList
// Help String      : ObjectList Class
// Default Interface: IObjectList
// Def. Intf. Object: IObjectListPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TObjectList : public Oleserver::TOleServer
{
  IObjectListPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TObjectList(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IObjectListPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IObjectListPtr intf);


  LPUNKNOWN       __fastcall get__NewEnum(void);
  LPDISPATCH      __fastcall get_Item(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  void            __fastcall Refresh(void);
  __property LPUNKNOWN _NewEnum={ read=get__NewEnum };
  __property LPDISPATCH Item[VARIANT Index]={ read=get_Item };
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPermission
// Help String      : Permission Class
// Default Interface: IPermission
// Def. Intf. Object: IPermissionPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPermission : public Oleserver::TOleServer
{
  IPermissionPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPermission(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPermissionPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPermissionPtr intf);


  BSTR            __fastcall get_Grantee(void);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  BSTR            __fastcall get_Grantor(void);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  long            __fastcall get_ObjectID(void);
  BSTR            __fastcall get_ObjectName(void);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  BSTR            __fastcall get_PrivilegeName(void);
  __property BSTR Grantee={ read=get_Grantee };
  __property Ptssmolib_tlb::TcPrincipalType GranteeType={ read=get_GranteeType };
  __property BSTR Grantor={ read=get_Grantor };
  __property Ptssmolib_tlb::TcPrincipalType GrantorType={ read=get_GrantorType };
  __property Ptssmolib_tlb::TcObjectType ObjectType={ read=get_ObjectType };
  __property long ObjectID={ read=get_ObjectID };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Ptssmolib_tlb::TcPermissionState PermissionState={ read=get_PermissionState };
  __property Ptssmolib_tlb::TcPrivilegeType PrivilegeType={ read=get_PrivilegeType };
  __property BSTR PrivilegeName={ read=get_PrivilegeName };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TRole
// Help String      : Role Class
// Default Interface: IRole
// Def. Intf. Object: IRolePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TRole : public Oleserver::TOleServer
{
  IRolePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TRole(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IRolePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IRolePtr intf);


  long            __fastcall get_ID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall AddMember(BSTR UserName/*[in]*/);
  void            __fastcall DropMember(BSTR UserName/*[in]*/);
  Ptssmolib_tlb::INameList* __fastcall ListMembers(void);
  __property long ID={ read=get_ID };
  __property BSTR Description={ read=get_Description };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TRoles
// Help String      : Roles Class
// Default Interface: IRoles
// Def. Intf. Object: IRolesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TRoles : public Oleserver::TOleServer
{
  IRolesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TRoles(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IRolesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IRolesPtr intf);


  Ptssmolib_tlb::IRole* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IRole* __fastcall get_ItemByID(long ID/*[in]*/);
  __property Ptssmolib_tlb::IRole* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IRole* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TServers
// Help String      : Servers Class
// Default Interface: IServers
// Def. Intf. Object: IServersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TServers : public Oleserver::TOleServer
{
  IServersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TServers(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IServersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IServersPtr intf);


  Ptssmolib_tlb::IServer* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IServer* __fastcall Add(void);
  __property Ptssmolib_tlb::IServer* Item[VARIANT Index]={ read=get_Item };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TServer
// Help String      : Server Class
// Default Interface: IServer
// Def. Intf. Object: IServerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TServer : public Oleserver::TOleServer
{
  IServerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TServer(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IServerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IServerPtr intf);


  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  BSTR            __fastcall get_DomainName(void);
  BSTR            __fastcall get_UserName(void);
  BSTR            __fastcall get_Password(void);
  long            __fastcall get_AuthnLevel(void);
  long            __fastcall get_ImpLevel(void);
  VARIANT_BOOL    __fastcall get_IsLogined(void);
  Ptssmolib_tlb::TcServerStatus __fastcall get_Status(void);
  long            __fastcall get_VersionMajor(void);
  long            __fastcall get_VersionMinor(void);
  BSTR            __fastcall get_VersionString(void);
  BSTR            __fastcall get_InitializeDate(void);
  BSTR            __fastcall get_BackupDate(void);
  Ptssmolib_tlb::ICustomersPtr __fastcall get_Customers(void);
  Ptssmolib_tlb::IBrokersPtr __fastcall get_Brokers(void);
  Ptssmolib_tlb::IEventTopicsPtr __fastcall get_EventTopics(void);
  Ptssmolib_tlb::IExchangesPtr __fastcall get_Exchanges(void);
  Ptssmolib_tlb::ITasksPtr __fastcall get_Tasks(void);
  Ptssmolib_tlb::IRolesPtr __fastcall get_Roles(void);
  Ptssmolib_tlb::IUsersPtr __fastcall get_Users(void);
  Ptssmolib_tlb::IPortfoliosPtr __fastcall get_Portfolios(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  Ptssmolib_tlb::IChartsPtr __fastcall get_Charts(void);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  void            __fastcall ChangePassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  void            __fastcall CollectData(Ptssmolib_tlb::TcCollectDataType Type/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall CheckAccounts(void);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall Initialize(void);
  void            __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/, 
                                   BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  void            __fastcall Logout(void);
  long            __fastcall CommitOrders(long AccountID/*[in]*/, 
                                          Ptssmolib_tlb::TcOrderCommitMode Mode/*[in]*/, 
                                          Ptssmolib_tlb::IOrders* pOrders/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  void            __fastcall Run(void);
  void            __fastcall Stop(void);
  void            __fastcall Pause(void);
  Ptssmolib_tlb::IObjectList* __fastcall SynchAccounts(void);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  void            __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  Ptssmolib_tlb::INewStockSet* __fastcall GetNewStocks(void);
  __property Ptssmolib_tlb::TcLoginType LoginType={ read=get_LoginType };
  __property BSTR DomainName={ read=get_DomainName };
  __property BSTR UserName={ read=get_UserName };
  __property BSTR Password={ read=get_Password };
  __property long AuthnLevel={ read=get_AuthnLevel };
  __property long ImpLevel={ read=get_ImpLevel };
  __property VARIANT_BOOL IsLogined={ read=get_IsLogined };
  __property Ptssmolib_tlb::TcServerStatus Status={ read=get_Status };
  __property long VersionMajor={ read=get_VersionMajor };
  __property long VersionMinor={ read=get_VersionMinor };
  __property BSTR VersionString={ read=get_VersionString };
  __property BSTR InitializeDate={ read=get_InitializeDate };
  __property BSTR BackupDate={ read=get_BackupDate };
  __property Ptssmolib_tlb::ICustomersPtr Customers={ read=get_Customers };
  __property Ptssmolib_tlb::IBrokersPtr Brokers={ read=get_Brokers };
  __property Ptssmolib_tlb::IEventTopicsPtr EventTopics={ read=get_EventTopics };
  __property Ptssmolib_tlb::IExchangesPtr Exchanges={ read=get_Exchanges };
  __property Ptssmolib_tlb::ITasksPtr Tasks={ read=get_Tasks };
  __property Ptssmolib_tlb::IRolesPtr Roles={ read=get_Roles };
  __property Ptssmolib_tlb::IUsersPtr Users={ read=get_Users };
  __property Ptssmolib_tlb::IPortfoliosPtr Portfolios={ read=get_Portfolios };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property Ptssmolib_tlb::IChartsPtr Charts={ read=get_Charts };
  __property Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts={ read=get_BrokerAccounts };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TEventPublisher
// Help String      : EventPublisher Class
// Default Interface: IEventPublisher
// Def. Intf. Object: IEventPublisherPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TEventPublisher : public Oleserver::TOleServer
{
  IEventPublisherPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TEventPublisher(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IEventPublisherPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IEventPublisherPtr intf);


  BSTR            __fastcall get_ProgID(void);
  void            __fastcall set_ProgID(BSTR pVal/*[in]*/);
  void            __fastcall Publish(BSTR XML/*[in]*/);
  __property BSTR ProgID={ read=get_ProgID, write=set_ProgID, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPortfolio
// Help String      : Portfolio Class
// Default Interface: IPortfolio
// Def. Intf. Object: IPortfolioPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPortfolio : public Oleserver::TOleServer
{
  IPortfolioPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPortfolio(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPortfolioPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPortfolioPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  Ptssmolib_tlb::IPortfolioItemSetPtr __fastcall get_Items(void);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property Ptssmolib_tlb::IPortfolioItemSetPtr Items={ read=get_Items };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPortfolios
// Help String      : Portfolios Class
// Default Interface: IPortfolios
// Def. Intf. Object: IPortfoliosPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPortfolios : public Oleserver::TOleServer
{
  IPortfoliosPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPortfolios(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPortfoliosPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPortfoliosPtr intf);


  Ptssmolib_tlb::IPortfolio* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IPortfolio* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IPortfolio* pObjVal/*[in]*/);
  __property Ptssmolib_tlb::IPortfolio* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IPortfolio* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TDictionary
// Help String      : Dictionary Class
// Default Interface: IDictionary
// Def. Intf. Object: IDictionaryPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TDictionary : public Oleserver::TOleServer
{
  IDictionaryPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TDictionary(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IDictionaryPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IDictionaryPtr intf);


};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMiscFee
// Help String      : MiscFee Class
// Default Interface: IMiscFee
// Def. Intf. Object: IMiscFeePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TMiscFee : public Oleserver::TOleServer
{
  IMiscFeePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TMiscFee(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IMiscFeePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IMiscFeePtr intf);


  long            __fastcall get_ID(void);
  long            __fastcall get_OwnerID(void);
  Ptssmolib_tlb::TcMiscFeeType __fastcall get_Type(void);
  void            __fastcall set_Type(Ptssmolib_tlb::TcMiscFeeType pVal/*[in]*/);
  Ptssmolib_tlb::TcBusinessType __fastcall get_BusinessType(void);
  void            __fastcall set_BusinessType(Ptssmolib_tlb::TcBusinessType pVal/*[in]*/);
  Ptssmolib_tlb::TcInstrumentSubType __fastcall get_InstrumentSubType(void);
  void            __fastcall set_InstrumentSubType(Ptssmolib_tlb::TcInstrumentSubType pVal/*[in]*/);
  double          __fastcall get_AmountRatio(void);
  void            __fastcall set_AmountRatio(double pVal/*[in]*/);
  double          __fastcall get_ParRatio(void);
  void            __fastcall set_ParRatio(double pVal/*[in]*/);
  double          __fastcall get_FixedValue(void);
  void            __fastcall set_FixedValue(double pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  __property long ID={ read=get_ID };
  __property long OwnerID={ read=get_OwnerID };
  __property Ptssmolib_tlb::TcMiscFeeType Type={ read=get_Type, write=set_Type, stored=false };
  __property Ptssmolib_tlb::TcBusinessType BusinessType={ read=get_BusinessType, write=set_BusinessType, stored=false };
  __property Ptssmolib_tlb::TcInstrumentSubType InstrumentSubType={ read=get_InstrumentSubType, write=set_InstrumentSubType, stored=false };
  __property double AmountRatio={ read=get_AmountRatio, write=set_AmountRatio, stored=false };
  __property double ParRatio={ read=get_ParRatio, write=set_ParRatio, stored=false };
  __property double FixedValue={ read=get_FixedValue, write=set_FixedValue, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TBroker
// Help String      : Broker Class
// Default Interface: IBroker
// Def. Intf. Object: IBrokerPtr
// Def. Intf. DISP? : No
// Event   Interface: _IBrokerEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TBrokerOnSynchronize)(System::TObject * Sender, 
                                                           Ptssmolib_tlb::TcMessageType Type/*[in]*/, 
                                                           BSTR Message/*[in]*/);

class PACKAGE TBroker : public Oleserver::TOleServer
{
  IBrokerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TBroker(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IBrokerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IBrokerPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_SystemName(void);
  void            __fastcall set_SystemName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_ServerName(void);
  void            __fastcall set_ServerName(BSTR pVal/*[in]*/);
  long            __fastcall get_ServerPort(void);
  void            __fastcall set_ServerPort(long pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IBrokerAccountsPtr __fastcall get_BrokerAccounts(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AddMember(long BrokerAccountID/*[in]*/);
  void            __fastcall Connect1(void);
  void            __fastcall Disconnect1(void);
  void            __fastcall DropMember(long BrokerAccountID/*[in]*/);
  Ptssmolib_tlb::IObjectList* __fastcall ListMembers(void);
  void            __fastcall RunOrderSyncJob(void);
  void            __fastcall StopOrderSyncJob(void);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::IBrokerAccountsPtr BrokerAccounts={ read=get_BrokerAccounts };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR SystemName={ read=get_SystemName, write=set_SystemName, stored=false };
  __property BSTR ServerName={ read=get_ServerName, write=set_ServerName, stored=false };
  __property long ServerPort={ read=get_ServerPort, write=set_ServerPort, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
private:
  TNotifyEvent                   FOnConnected;
  TNotifyEvent                   FOnDisconnected;
  TBrokerOnSynchronize           FOnSynchronize;
__published:
  __property TNotifyEvent OnConnected={ read=FOnConnected, write=FOnConnected };
  __property TNotifyEvent OnDisconnected={ read=FOnDisconnected, write=FOnDisconnected };
  __property TBrokerOnSynchronize OnSynchronize={ read=FOnSynchronize, write=FOnSynchronize };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TBrokers
// Help String      : Brokers Class
// Default Interface: IBrokers
// Def. Intf. Object: IBrokersPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TBrokers : public Oleserver::TOleServer
{
  IBrokersPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TBrokers(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IBrokersPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IBrokersPtr intf);


  Ptssmolib_tlb::IBroker* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IBroker* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IBroker* pObjVal/*[in]*/);
  __property Ptssmolib_tlb::IBroker* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IBroker* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TBrokerAccount
// Help String      : BrokerAccount Class
// Default Interface: IBrokerAccount
// Def. Intf. Object: IBrokerAccountPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TBrokerAccount : public Oleserver::TOleServer
{
  IBrokerAccountPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TBrokerAccount(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IBrokerAccountPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IBrokerAccountPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_CustomerID(void);
  void            __fastcall set_CustomerID(long pVal/*[in]*/);
  long            __fastcall get_BrokerID(void);
  void            __fastcall set_BrokerID(long pVal/*[in]*/);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_IDFromBroker(void);
  void            __fastcall set_IDFromBroker(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcAccountType __fastcall get_AccountType(void);
  void            __fastcall set_AccountType(Ptssmolib_tlb::TcAccountType pVal/*[in]*/);
  Ptssmolib_tlb::TcAccountStatus __fastcall get_Status(void);
  Ptssmolib_tlb::IMiscFeesPtr __fastcall get_MiscFees(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AddPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                         Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                         long Qty/*[in]*/, double CostPrice/*[in]*/);
  Ptssmolib_tlb::IAccount* __fastcall AddLogicalAccount(BSTR Name/*[in]*/, 
                                                        Ptssmolib_tlb::TcAccountStatus Status/*[in]*/, 
                                                        BSTR Description/*[in]*/);
  void            __fastcall Credit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                    double Amount/*[in]*/);
  void            __fastcall Debit(Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/, 
                                   double Amount/*[in]*/);
  void            __fastcall DropPosition(BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/, 
                                          Ptssmolib_tlb::TcPositionType Type/*[in]*/, 
                                          long Qty/*[in]*/);
  void            __fastcall DropLogicalAccount(long AccountID/*[in]*/);
  Ptssmolib_tlb::IAccountDetail* __fastcall GetDetail(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                      Ptssmolib_tlb::TcCurrencyType Currency/*[in]*/);
  Ptssmolib_tlb::IPosition* __fastcall GetPosition(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                   BSTR InstID/*[in]*/, long InstIDSource/*[in]*/, 
                                                   Ptssmolib_tlb::TcPositionDirection Direction/*[in]*/);
  Ptssmolib_tlb::IPositions* __fastcall GetPositions(VARIANT_BOOL IncludeChildAccount/*[in]*/, 
                                                     long* pStartIndex/*[in,out]*/, 
                                                     long MaxRowCount/*[in]*/);
  void            __fastcall SetPassword(BSTR OldPassword/*[in]*/, BSTR NewPassword/*[in]*/);
  Ptssmolib_tlb::IAccounts* __fastcall ListLogicalAccounts(void);
  void            __fastcall Transfer(long ToAcctID, Ptssmolib_tlb::TcCurrencyType Currency, 
                                      double Amount);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::TcAccountStatus Status={ read=get_Status };
  __property Ptssmolib_tlb::IMiscFeesPtr MiscFees={ read=get_MiscFees };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property long CustomerID={ read=get_CustomerID, write=set_CustomerID, stored=false };
  __property long BrokerID={ read=get_BrokerID, write=set_BrokerID, stored=false };
  __property BSTR IDFromBroker={ read=get_IDFromBroker, write=set_IDFromBroker, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property Ptssmolib_tlb::TcAccountType AccountType={ read=get_AccountType, write=set_AccountType, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TBrokerAccounts
// Help String      : BrokerAccounts Class
// Default Interface: IBrokerAccounts
// Def. Intf. Object: IBrokerAccountsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TBrokerAccounts : public Oleserver::TOleServer
{
  IBrokerAccountsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TBrokerAccounts(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IBrokerAccountsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IBrokerAccountsPtr intf);


  Ptssmolib_tlb::IBrokerAccount* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IBrokerAccount* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IBrokerAccount* pObject/*[in]*/);
  __property Ptssmolib_tlb::IBrokerAccount* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IBrokerAccount* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TChartDataSet
// Help String      : ChartDataSet Class
// Default Interface: IChartDataSet
// Def. Intf. Object: IChartDataSetPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TChartDataSet : public Oleserver::TOleServer
{
  IChartDataSetPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TChartDataSet(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IChartDataSetPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IChartDataSetPtr intf);


  double          __fastcall get_XVal(void);
  void            __fastcall set_XVal(double pVal/*[in]*/);
  double          __fastcall get_YVal(void);
  void            __fastcall set_YVal(double pVal/*[in]*/);
  double          __fastcall get_ZVal(void);
  void            __fastcall set_ZVal(double pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  void            __fastcall AddNew(void);
  void            __fastcall MoveFirst(void);
  void            __fastcall MoveLast(void);
  void            __fastcall MovePrevious(void);
  void            __fastcall MoveNext(void);
  __property VARIANT_BOOL DataBOF={ read=get_DataBOF };
  __property VARIANT_BOOL DataEOF={ read=get_DataEOF };
  __property double XVal={ read=get_XVal, write=set_XVal, stored=false };
  __property double YVal={ read=get_YVal, write=set_YVal, stored=false };
  __property double ZVal={ read=get_ZVal, write=set_ZVal, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TChart
// Help String      : Chart Class
// Default Interface: IChart
// Def. Intf. Object: IChartPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TChart : public Oleserver::TOleServer
{
  IChartPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TChart(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IChartPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IChartPtr intf);


  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_DateLastModified(void);
  long            __fastcall get_ID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AddChartData(long ObjectID/*[in]*/, 
                                          Ptssmolib_tlb::IChartDataSet* newVal/*[in]*/);
  Ptssmolib_tlb::IChartDataSet* __fastcall GetChartData(long ObjectID/*[in]*/, 
                                                        double FromXValue/*[in]*/, 
                                                        double ToXValue/*[in]*/, 
                                                        double FromYValue/*[in]*/, 
                                                        double ToYValue/*[in]*/, 
                                                        long* pStartIndex/*[in,out]*/, 
                                                        long MaxRowCount/*[in]*/);
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR DateLastModified={ read=get_DateLastModified };
  __property long ID={ read=get_ID };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCharts
// Help String      : Charts Class
// Default Interface: ICharts
// Def. Intf. Object: IChartsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCharts : public Oleserver::TOleServer
{
  IChartsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCharts(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IChartsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IChartsPtr intf);


  Ptssmolib_tlb::IChart* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IChart* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IChart* pObject/*[in]*/);
  __property Ptssmolib_tlb::IChart* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IChart* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExtendedProperty
// Help String      : ExtendedProperty Class
// Default Interface: IExtendedProperty
// Def. Intf. Object: IExtendedPropertyPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExtendedProperty : public Oleserver::TOleServer
{
  IExtendedPropertyPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExtendedProperty(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExtendedPropertyPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExtendedPropertyPtr intf);


  VARIANT         __fastcall get_Value(void);
  void            __fastcall set_Value(VARIANT pVal/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsFixed(void);
  __property VARIANT Value={ read=get_Value, write=set_Value };
  __property VARIANT_BOOL IsFixed={ read=get_IsFixed };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TExtendedProperties
// Help String      : ExtendedProperties Class
// Default Interface: IExtendedProperties
// Def. Intf. Object: IExtendedPropertiesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TExtendedProperties : public Oleserver::TOleServer
{
  IExtendedPropertiesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TExtendedProperties(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IExtendedPropertiesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IExtendedPropertiesPtr intf);


  Ptssmolib_tlb::IExtendedProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IExtendedProperty* pVal/*[in]*/);
  __property Ptssmolib_tlb::IExtendedProperty* Item[VARIANT Index]={ read=get_Item };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPostalAddress
// Help String      : PostalAddress Class
// Default Interface: IPostalAddress
// Def. Intf. Object: IPostalAddressPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPostalAddress : public Oleserver::TOleServer
{
  IPostalAddressPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPostalAddress(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPostalAddressPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPostalAddressPtr intf);


  BSTR            __fastcall get_Country(void);
  void            __fastcall set_Country(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_City(void);
  void            __fastcall set_City(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Province(void);
  void            __fastcall set_Province(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Street(void);
  void            __fastcall set_Street(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcAddressType __fastcall get_Type(void);
  void            __fastcall set_Type(Ptssmolib_tlb::TcAddressType pVal/*[in]*/);
  BSTR            __fastcall get_ZipCode(void);
  void            __fastcall set_ZipCode(BSTR pVal/*[in]*/);
  __property BSTR Country={ read=get_Country, write=set_Country, stored=false };
  __property BSTR City={ read=get_City, write=set_City, stored=false };
  __property BSTR Province={ read=get_Province, write=set_Province, stored=false };
  __property BSTR Street={ read=get_Street, write=set_Street, stored=false };
  __property Ptssmolib_tlb::TcAddressType Type={ read=get_Type, write=set_Type, stored=false };
  __property BSTR ZipCode={ read=get_ZipCode, write=set_ZipCode, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuoteTickData
// Help String      : QuoteTickData Class
// Default Interface: IQuoteTickData
// Def. Intf. Object: IQuoteTickDataPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuoteTickData : public Oleserver::TOleServer
{
  IQuoteTickDataPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuoteTickData(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuoteTickDataPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuoteTickDataPtr intf);


  BSTR            __fastcall get_InstID(void);
  long            __fastcall get_InstIDSource(void);
  long            __fastcall get_LastQty(void);
  double          __fastcall get_LastPrice(void);
  BSTR            __fastcall get_LastTime(void);
  long            __fastcall get_DayQty(void);
  BSTR            __fastcall get_TradingDay(void);
  __property BSTR InstID={ read=get_InstID };
  __property long InstIDSource={ read=get_InstIDSource };
  __property long LastQty={ read=get_LastQty };
  __property double LastPrice={ read=get_LastPrice };
  __property BSTR LastTime={ read=get_LastTime };
  __property long DayQty={ read=get_DayQty };
  __property BSTR TradingDay={ read=get_TradingDay };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMiscFees
// Help String      : MiscFees Class
// Default Interface: IMiscFees
// Def. Intf. Object: IMiscFeesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TMiscFees : public Oleserver::TOleServer
{
  IMiscFeesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TMiscFees(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IMiscFeesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IMiscFeesPtr intf);


  Ptssmolib_tlb::IMiscFee* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IMiscFee* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IMiscFee* pObject/*[in]*/);
  __property Ptssmolib_tlb::IMiscFee* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IMiscFee* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOrderReport
// Help String      : OrderReport Class
// Default Interface: IOrderReport
// Def. Intf. Object: IOrderReportPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOrderReport : public Oleserver::TOleServer
{
  IOrderReportPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOrderReport(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOrderReportPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOrderReportPtr intf);


  BSTR            __fastcall get_OrderID(void);
  BSTR            __fastcall get_ExecID(void);
  long            __fastcall get_AccountID(void);
  BSTR            __fastcall get_ExchAcctID(void);
  long            __fastcall get_CancelQty(void);
  long            __fastcall get_ExecQty(void);
  double          __fastcall get_ExecPrice(void);
  BSTR            __fastcall get_ExecTime(void);
  BSTR            __fastcall get_Text(void);
  __property BSTR OrderID={ read=get_OrderID };
  __property BSTR ExecID={ read=get_ExecID };
  __property long AccountID={ read=get_AccountID };
  __property BSTR ExchAcctID={ read=get_ExchAcctID };
  __property long CancelQty={ read=get_CancelQty };
  __property long ExecQty={ read=get_ExecQty };
  __property double ExecPrice={ read=get_ExecPrice };
  __property BSTR ExecTime={ read=get_ExecTime };
  __property BSTR Text={ read=get_Text };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuoteDataSet
// Help String      : QuoteDataSet Class
// Default Interface: IQuoteDataSet
// Def. Intf. Object: IQuoteDataSetPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuoteDataSet : public Oleserver::TOleServer
{
  IQuoteDataSetPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuoteDataSet(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuoteDataSetPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuoteDataSetPtr intf);


  BSTR            __fastcall get_Symbol(void);
  BSTR            __fastcall get_InstID(void);
  long            __fastcall get_InstIDSource(void);
  long            __fastcall get_LastQty(void);
  double          __fastcall get_LastPrice(void);
  BSTR            __fastcall get_LastTime(void);
  double          __fastcall get_PreClosePrice(void);
  double          __fastcall get_ClosePrice(void);
  double          __fastcall get_OpenPrice(void);
  double          __fastcall get_SettlPrice(void);
  double          __fastcall get_LowPrice(void);
  double          __fastcall get_HighPrice(void);
  double          __fastcall get_Turnover(void);
  long            __fastcall get_DayQty(void);
  double          __fastcall get_FixPrice(void);
  BSTR            __fastcall get_TradingDay(void);
  long            __fastcall get_AskQty(VARIANT Index/*[in]*/);
  double          __fastcall get_AskPrice(VARIANT Index/*[in]*/);
  long            __fastcall get_AskOrderNum(VARIANT Index/*[in]*/);
  long            __fastcall get_BidQty(VARIANT Index/*[in]*/);
  double          __fastcall get_BidPrice(VARIANT Index/*[in]*/);
  long            __fastcall get_BidOrderNum(VARIANT Index/*[in]*/);
  long            __fastcall get_Count(void);
  VARIANT         __fastcall get_Data(void);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  long            __fastcall get_Index(void);
  void            __fastcall MoveFirst(void);
  void            __fastcall MoveLast(void);
  void            __fastcall MovePrevious(void);
  void            __fastcall MoveNext(void);
  __property BSTR Symbol={ read=get_Symbol };
  __property BSTR InstID={ read=get_InstID };
  __property long InstIDSource={ read=get_InstIDSource };
  __property long LastQty={ read=get_LastQty };
  __property double LastPrice={ read=get_LastPrice };
  __property BSTR LastTime={ read=get_LastTime };
  __property double PreClosePrice={ read=get_PreClosePrice };
  __property double ClosePrice={ read=get_ClosePrice };
  __property double OpenPrice={ read=get_OpenPrice };
  __property double SettlPrice={ read=get_SettlPrice };
  __property double LowPrice={ read=get_LowPrice };
  __property double HighPrice={ read=get_HighPrice };
  __property double Turnover={ read=get_Turnover };
  __property long DayQty={ read=get_DayQty };
  __property double FixPrice={ read=get_FixPrice };
  __property BSTR TradingDay={ read=get_TradingDay };
  __property long AskQty[VARIANT Index]={ read=get_AskQty };
  __property double AskPrice[VARIANT Index]={ read=get_AskPrice };
  __property long AskOrderNum[VARIANT Index]={ read=get_AskOrderNum };
  __property long BidQty[VARIANT Index]={ read=get_BidQty };
  __property double BidPrice[VARIANT Index]={ read=get_BidPrice };
  __property long BidOrderNum[VARIANT Index]={ read=get_BidOrderNum };
  __property long Count={ read=get_Count };
  __property VARIANT Data={ read=get_Data };
  __property VARIANT_BOOL DataBOF={ read=get_DataBOF };
  __property VARIANT_BOOL DataEOF={ read=get_DataEOF };
  __property long Index={ read=get_Index };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TObjectPermissionInfo
// Help String      : ObjectPermissionInfo Class
// Default Interface: IObjectPermissionInfo
// Def. Intf. Object: IObjectPermissionInfoPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TObjectPermissionInfo : public Oleserver::TOleServer
{
  IObjectPermissionInfoPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TObjectPermissionInfo(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IObjectPermissionInfoPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IObjectPermissionInfoPtr intf);


  BSTR            __fastcall get_Grantee(void);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GranteeType(void);
  BSTR            __fastcall get_Grantor(void);
  Ptssmolib_tlb::TcPrincipalType __fastcall get_GrantorType(void);
  long            __fastcall get_ObjectID(void);
  BSTR            __fastcall get_ObjectName(void);
  BSTR            __fastcall get_ObjectOwner(void);
  Ptssmolib_tlb::TcObjectType __fastcall get_ObjectType(void);
  BSTR            __fastcall get_ObjectTypeName(void);
  Ptssmolib_tlb::TcPermissionState __fastcall get_PermissionState(void);
  void            __fastcall set_PermissionState(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);
  Ptssmolib_tlb::TcPrivilegeType __fastcall get_PrivilegeType(void);
  BSTR            __fastcall get_PrivilegeName(void);
  __property BSTR Grantee={ read=get_Grantee };
  __property Ptssmolib_tlb::TcPrincipalType GranteeType={ read=get_GranteeType };
  __property BSTR Grantor={ read=get_Grantor };
  __property Ptssmolib_tlb::TcPrincipalType GrantorType={ read=get_GrantorType };
  __property long ObjectID={ read=get_ObjectID };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property BSTR ObjectOwner={ read=get_ObjectOwner };
  __property Ptssmolib_tlb::TcObjectType ObjectType={ read=get_ObjectType };
  __property BSTR ObjectTypeName={ read=get_ObjectTypeName };
  __property Ptssmolib_tlb::TcPrivilegeType PrivilegeType={ read=get_PrivilegeType };
  __property BSTR PrivilegeName={ read=get_PrivilegeName };
  __property Ptssmolib_tlb::TcPermissionState PermissionState={ read=get_PermissionState, write=set_PermissionState, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TProject
// Help String      : Project Class
// Default Interface: IProject
// Def. Intf. Object: IProjectPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TProject : public Oleserver::TOleServer
{
  IProjectPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TProject(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IProjectPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IProjectPtr intf);


  long            __fastcall get_ID(void);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR pVal/*[in]*/);
  long            __fastcall get_PositionPeriod(void);
  void            __fastcall set_PositionPeriod(long pVal/*[in]*/);
  long            __fastcall get_CompleteDegree(void);
  void            __fastcall set_CompleteDegree(long pVal/*[in]*/);
  BSTR            __fastcall get_CreateDate(void);
  BSTR            __fastcall get_FinishDate(void);
  void            __fastcall set_FinishDate(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_StartDate(void);
  void            __fastcall set_StartDate(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_TradeManagerName(void);
  void            __fastcall set_TradeManagerName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_TradeManagerIdea(void);
  void            __fastcall set_TradeManagerIdea(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_TradeManagerConfirmed(void);
  void            __fastcall set_TradeManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_RiskManagerName(void);
  void            __fastcall set_RiskManagerName(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_RiskManagerIdea(void);
  void            __fastcall set_RiskManagerIdea(BSTR pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_RiskManagerConfirmed(void);
  void            __fastcall set_RiskManagerConfirmed(VARIANT_BOOL pVal/*[in]*/);
  BSTR            __fastcall get_TradeManagerConfirmedDate(void);
  BSTR            __fastcall get_RiskManagerConfirmedDate(void);
  long            __fastcall get_Priority(void);
  void            __fastcall set_Priority(long pVal/*[in]*/);
  Ptssmolib_tlb::TcProjectStatus __fastcall get_Status(void);
  Ptssmolib_tlb::IExtendedPropertiesPtr __fastcall get_ExtendedProperties(void);
  void            __fastcall AddHedge(long ID/*[in]*/);
  void            __fastcall AddOrder(BSTR bstrOrderID/*[in]*/, BSTR bstrTradeDate/*[in]*/);
  Ptssmolib_tlb::IHedges* __fastcall GetHedges(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  Ptssmolib_tlb::IOrders* __fastcall GetOrders(long* pStartIndex/*[in,out]*/, long RowCount/*[in]*/);
  void            __fastcall Cancel(void);
  __property long ID={ read=get_ID };
  __property BSTR CreateDate={ read=get_CreateDate };
  __property BSTR TradeManagerConfirmedDate={ read=get_TradeManagerConfirmedDate };
  __property BSTR RiskManagerConfirmedDate={ read=get_RiskManagerConfirmedDate };
  __property Ptssmolib_tlb::TcProjectStatus Status={ read=get_Status };
  __property Ptssmolib_tlb::IExtendedPropertiesPtr ExtendedProperties={ read=get_ExtendedProperties };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property long PositionPeriod={ read=get_PositionPeriod, write=set_PositionPeriod, stored=false };
  __property long CompleteDegree={ read=get_CompleteDegree, write=set_CompleteDegree, stored=false };
  __property BSTR FinishDate={ read=get_FinishDate, write=set_FinishDate, stored=false };
  __property BSTR StartDate={ read=get_StartDate, write=set_StartDate, stored=false };
  __property BSTR TradeManagerName={ read=get_TradeManagerName, write=set_TradeManagerName, stored=false };
  __property BSTR TradeManagerIdea={ read=get_TradeManagerIdea, write=set_TradeManagerIdea, stored=false };
  __property VARIANT_BOOL TradeManagerConfirmed={ read=get_TradeManagerConfirmed, write=set_TradeManagerConfirmed, stored=false };
  __property BSTR RiskManagerName={ read=get_RiskManagerName, write=set_RiskManagerName, stored=false };
  __property BSTR RiskManagerIdea={ read=get_RiskManagerIdea, write=set_RiskManagerIdea, stored=false };
  __property VARIANT_BOOL RiskManagerConfirmed={ read=get_RiskManagerConfirmed, write=set_RiskManagerConfirmed, stored=false };
  __property long Priority={ read=get_Priority, write=set_Priority, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TProjects
// Help String      : Projects Class
// Default Interface: IProjects
// Def. Intf. Object: IProjectsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TProjects : public Oleserver::TOleServer
{
  IProjectsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TProjects(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IProjectsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IProjectsPtr intf);


  Ptssmolib_tlb::IProject* __fastcall get_Item(VARIANT Index/*[in]*/);
  Ptssmolib_tlb::IProject* __fastcall get_ItemByID(long ID/*[in]*/);
  void            __fastcall Add(Ptssmolib_tlb::IProject* pObject/*[in]*/);
  __property Ptssmolib_tlb::IProject* Item[VARIANT Index]={ read=get_Item };
  __property Ptssmolib_tlb::IProject* ItemByID[long ID]={ read=get_ItemByID };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPortfolioItemSet
// Help String      : PortfolioItemSet Class
// Default Interface: IPortfolioItemSet
// Def. Intf. Object: IPortfolioItemSetPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPortfolioItemSet : public Oleserver::TOleServer
{
  IPortfolioItemSetPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPortfolioItemSet(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPortfolioItemSetPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPortfolioItemSetPtr intf);


  BSTR            __fastcall get_InstID(void);
  void            __fastcall set_InstID(BSTR pVal/*[in]*/);
  long            __fastcall get_InstIDSource(void);
  void            __fastcall set_InstIDSource(long pVal/*[in]*/);
  long            __fastcall get_Qty(void);
  void            __fastcall set_Qty(long pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_IsCrossTrade(void);
  void            __fastcall set_IsCrossTrade(VARIANT_BOOL pVal/*[in]*/);
  VARIANT_BOOL    __fastcall get_ItemBOF(void);
  VARIANT_BOOL    __fastcall get_ItemEOF(void);
  long            __fastcall get_Count(void);
  void            __fastcall AddNew(void);
  void            __fastcall _Update(void);
  void            __fastcall MoveFirst(void);
  void            __fastcall MoveLast(void);
  void            __fastcall MovePrevious(void);
  void            __fastcall MoveNext(void);
  __property VARIANT_BOOL ItemBOF={ read=get_ItemBOF };
  __property VARIANT_BOOL ItemEOF={ read=get_ItemEOF };
  __property long Count={ read=get_Count };
  __property BSTR InstID={ read=get_InstID, write=set_InstID, stored=false };
  __property long InstIDSource={ read=get_InstIDSource, write=set_InstIDSource, stored=false };
  __property long Qty={ read=get_Qty, write=set_Qty, stored=false };
  __property VARIANT_BOOL IsCrossTrade={ read=get_IsCrossTrade, write=set_IsCrossTrade, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOrder2
// Help String      : Order2 Class
// Default Interface: IOrder2
// Def. Intf. Object: IOrder2Ptr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOrder2 : public Oleserver::TOleServer
{
  IOrder2Ptr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOrder2(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOrder2Ptr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOrder2Ptr intf);


};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TNewStockSet
// Help String      : NewStockSet Class
// Default Interface: INewStockSet
// Def. Intf. Object: INewStockSetPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TNewStockSet : public Oleserver::TOleServer
{
  INewStockSetPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TNewStockSet(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  INewStockSetPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(INewStockSetPtr intf);


  BSTR            __fastcall get_SubsCode(void);
  BSTR            __fastcall get_SecID(void);
  long            __fastcall get_ExchID(void);
  BSTR            __fastcall get_Name(void);
  double          __fastcall get_IssuePrice(void);
  long            __fastcall get_NetIssueQty(void);
  long            __fastcall get_IssueQty(void);
  BSTR            __fastcall get_SubsStartDate(void);
  BSTR            __fastcall get_SubsEndDate(void);
  BSTR            __fastcall get_UnFreezeDate(void);
  short           __fastcall get_Status(void);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  void            __fastcall MoveFirst(void);
  void            __fastcall MoveLast(void);
  void            __fastcall MovePrevious(void);
  void            __fastcall MoveNext(void);
  __property BSTR SubsCode={ read=get_SubsCode };
  __property BSTR SecID={ read=get_SecID };
  __property long ExchID={ read=get_ExchID };
  __property BSTR Name={ read=get_Name };
  __property double IssuePrice={ read=get_IssuePrice };
  __property long NetIssueQty={ read=get_NetIssueQty };
  __property long IssueQty={ read=get_IssueQty };
  __property BSTR SubsStartDate={ read=get_SubsStartDate };
  __property BSTR SubsEndDate={ read=get_SubsEndDate };
  __property BSTR UnFreezeDate={ read=get_UnFreezeDate };
  __property short Status={ read=get_Status };
  __property VARIANT_BOOL DataBOF={ read=get_DataBOF };
  __property VARIANT_BOOL DataEOF={ read=get_DataEOF };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TNotTradingStockSet
// Help String      : NotTradingStockSet Class
// Default Interface: INotTradingStockSet
// Def. Intf. Object: INotTradingStockSetPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TNotTradingStockSet : public Oleserver::TOleServer
{
  INotTradingStockSetPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TNotTradingStockSet(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  INotTradingStockSetPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(INotTradingStockSetPtr intf);


  BSTR            __fastcall get_SecID(void);
  long            __fastcall get_ExchID(void);
  long            __fastcall get_Duration(void);
  BSTR            __fastcall get_Date(void);
  BSTR            __fastcall get_Time(void);
  BSTR            __fastcall get_Reason(void);
  VARIANT_BOOL    __fastcall get_DataBOF(void);
  VARIANT_BOOL    __fastcall get_DataEOF(void);
  void            __fastcall MoveFirst(void);
  void            __fastcall MoveLast(void);
  void            __fastcall MovePrevious(void);
  void            __fastcall MoveNext(void);
  __property BSTR SecID={ read=get_SecID };
  __property long ExchID={ read=get_ExchID };
  __property long Duration={ read=get_Duration };
  __property BSTR Date={ read=get_Date };
  __property BSTR Time={ read=get_Time };
  __property BSTR Reason={ read=get_Reason };
  __property VARIANT_BOOL DataBOF={ read=get_DataBOF };
  __property VARIANT_BOOL DataEOF={ read=get_DataEOF };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAuthInfo
// Help String      : AuthInfo Class
// Default Interface: IAuthInfo
// Def. Intf. Object: IAuthInfoPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAuthInfo : public Oleserver::TOleServer
{
  IAuthInfoPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAuthInfo(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAuthInfoPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAuthInfoPtr intf);


  long            __fastcall get_ID(void);
  void            __fastcall set_ID(long pVal/*[in]*/);
  long            __fastcall get_CustomerID(void);
  void            __fastcall set_CustomerID(long pVal/*[in]*/);
  BSTR            __fastcall get_Name(void);
  void            __fastcall set_Name(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Type(void);
  void            __fastcall set_Type(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Content(void);
  void            __fastcall set_Content(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Grantee(void);
  void            __fastcall set_Grantee(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_CreateTime(void);
  void            __fastcall set_CreateTime(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Grantor(void);
  void            __fastcall set_Grantor(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_GrantTime(void);
  void            __fastcall set_GrantTime(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_Abolisher(void);
  void            __fastcall set_Abolisher(BSTR pVal/*[in]*/);
  BSTR            __fastcall get_AbolishTime(void);
  void            __fastcall set_AbolishTime(BSTR pVal/*[in]*/);
  Ptssmolib_tlb::TcPermissionState __fastcall get_Status(void);
  void            __fastcall set_Status(Ptssmolib_tlb::TcPermissionState pVal/*[in]*/);
  __property long ID={ read=get_ID, write=set_ID, stored=false };
  __property long CustomerID={ read=get_CustomerID, write=set_CustomerID, stored=false };
  __property BSTR Name={ read=get_Name, write=set_Name, stored=false };
  __property BSTR Type={ read=get_Type, write=set_Type, stored=false };
  __property BSTR Content={ read=get_Content, write=set_Content, stored=false };
  __property BSTR Grantee={ read=get_Grantee, write=set_Grantee, stored=false };
  __property BSTR CreateTime={ read=get_CreateTime, write=set_CreateTime, stored=false };
  __property BSTR Grantor={ read=get_Grantor, write=set_Grantor, stored=false };
  __property BSTR GrantTime={ read=get_GrantTime, write=set_GrantTime, stored=false };
  __property BSTR Abolisher={ read=get_Abolisher, write=set_Abolisher, stored=false };
  __property BSTR AbolishTime={ read=get_AbolishTime, write=set_AbolishTime, stored=false };
  __property Ptssmolib_tlb::TcPermissionState Status={ read=get_Status, write=set_Status, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPTSManager
// Help String      : PTSManager Class
// Default Interface: IPTSManager
// Def. Intf. Object: IPTSManagerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPTSManager : public Oleserver::TOleServer
{
  IPTSManagerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPTSManager(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPTSManagerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPTSManagerPtr intf);


  void            __fastcall AddProject(Ptssmolib_tlb::IProject* p/*[in]*/);
  Ptssmolib_tlb::IObjectBase* __fastcall GetObject(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                   VARIANT ObjectID/*[in]*/);
  Ptssmolib_tlb::INameList* __fastcall GetOnlineUserNames(void);
  Ptssmolib_tlb::INameList* __fastcall GetAllUserNames(void);
  Ptssmolib_tlb::IBrokers* __fastcall ListBrokers(void);
  Ptssmolib_tlb::ICharts* __fastcall ListCharts(void);
  Ptssmolib_tlb::ICustomers* __fastcall ListCustomers(void);
  Ptssmolib_tlb::IEventTopics* __fastcall ListEventTopics(void);
  Ptssmolib_tlb::IExchanges* __fastcall ListExchanges(void);
  Ptssmolib_tlb::IRoles* __fastcall ListRoles(void);
  Ptssmolib_tlb::ITasks* __fastcall ListTasks(void);
  Ptssmolib_tlb::IUsers* __fastcall ListUsers(void);
  void            __fastcall Pause(void);
  Ptssmolib_tlb::IObjectList* __fastcall QueryObjects(Ptssmolib_tlb::TcObjectType Type/*[in]*/, 
                                                      BSTR Conditions/*[in]*/, 
                                                      long* pStartIndex/*[in,out]*/, 
                                                      long RowCount/*[in]*/);
  void            __fastcall Run(void);
  void            __fastcall Stop(void);
  void            __fastcall SetSession(Ptssmolib_tlb::IPTSSession* Session/*[in]*/);
  Ptssmolib_tlb::IPTSSession* __fastcall GetSession(void);
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPTSSession
// Help String      : PTSSession Class
// Default Interface: IPTSSession
// Def. Intf. Object: IPTSSessionPtr
// Def. Intf. DISP? : No
// Event   Interface: _IPTSSessionEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TPTSSessionOnError)(System::TObject * Sender, 
                                                         BSTR ErrMsg/*[in]*/);

class PACKAGE TPTSSession : public Oleserver::TOleServer
{
  IPTSSessionPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPTSSession(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPTSSessionPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPTSSessionPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_ID(void);
  Ptssmolib_tlb::TcLoginType __fastcall get_LoginType(void);
  BSTR            __fastcall get_DomainName(void);
  BSTR            __fastcall get_UserName(void);
  long            __fastcall get_AuthnLevel(void);
  long            __fastcall get_ImpLevel(void);
  VARIANT_BOOL    __fastcall get_IsLogin(void);
  BSTR            __fastcall get_ServerName(void);
  void            __fastcall Login(Ptssmolib_tlb::TcLoginType LoginType/*[in]*/, 
                                   BSTR UserName/*[in]*/, BSTR Domain/*[in]*/, BSTR Password/*[in]*/, 
                                   BSTR ServerName/*[in]*/, long AuthnLevel/*[in]*/, 
                                   long ImpLevel/*[in]*/);
  void            __fastcall Logout(void);
  __property BSTR ID={ read=get_ID };
  __property Ptssmolib_tlb::TcLoginType LoginType={ read=get_LoginType };
  __property BSTR DomainName={ read=get_DomainName };
  __property BSTR UserName={ read=get_UserName };
  __property long AuthnLevel={ read=get_AuthnLevel };
  __property long ImpLevel={ read=get_ImpLevel };
  __property VARIANT_BOOL IsLogin={ read=get_IsLogin };
  __property BSTR ServerName={ read=get_ServerName };
private:
  TNotifyEvent                   FOnLogin;
  TNotifyEvent                   FOnLogout;
  TPTSSessionOnError             FOnError;
__published:
  __property TNotifyEvent OnLogin={ read=FOnLogin, write=FOnLogin };
  __property TNotifyEvent OnLogout={ read=FOnLogout, write=FOnLogout };
  __property TPTSSessionOnError OnError={ read=FOnError, write=FOnError };
};

};     // namespace Ptssmolib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ptssmolib_tlb;
#endif

#pragma option pop

#endif // PTSSMOLib_OCXH
