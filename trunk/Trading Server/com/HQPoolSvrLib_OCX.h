// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 2009-5-6 10:00:16 from Type Library described below.

// ************************************************************************  //
// Type Lib: g:\PTS\trunk\Bin\PTS HOST\HQPoolSvr.exe (1)
// LIBID: {808C9377-A154-4906-8C0E-DBCC0CCCF48B}
// LCID: 0
// Helpfile: 
// HelpString: HQPoolSvr 1.0 类型库
// DepndLst: 
//   (1) v2.0 stdole, (K:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   HQPoolSvrLib_OCXH
#define   HQPoolSvrLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "HQPoolSvrLib_TLB.h"
namespace Hqpoolsvrlib_tlb
{

// *********************************************************************//
// HelpString: HQPoolSvr 1.0 类型库
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPool
// Help String      : Pool Class
// Default Interface: IPool
// Def. Intf. Object: IPoolPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TPool : public Oleserver::TOleServer
{
  IPoolPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TPool(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IPoolPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IPoolPtr intf);


  long            __fastcall get_Count(void);
  long            __fastcall Find(BSTR code/*[in]*/, long src/*[in]*/);
  Hqpoolsvrlib_tlb::IQuote2* __fastcall GetItem(long index/*[in]*/);
  __property long Count={ read=get_Count };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TManager
// Help String      : Manager Class
// Default Interface: IManager
// Def. Intf. Object: IManagerPtr
// Def. Intf. DISP? : No
// Event   Interface: _IManagerEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TManagerOnError)(System::TObject * Sender, 
                                                      BSTR TopicName/*[in]*/, long TopicID/*[in]*/, 
                                                      BSTR ErrMessage);
typedef void __fastcall (__closure * TManagerOnEvent)(System::TObject * Sender, 
                                                      BSTR TopicName/*[in]*/, long TopicID/*[in]*/, 
                                                      LPDISPATCH EventHead, LPDISPATCH EventData);

class PACKAGE TManager : public Oleserver::TOleServer
{
  IManagerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TManager(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IManagerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IManagerPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  VARIANT_BOOL    __fastcall get_Active(void);
  long            __fastcall get_ActiveTopic(void);
  long            __fastcall get_TopicCount(void);
  long            __fastcall get_EventCount(long index/*[in]*/);
  void            __fastcall Start(void);
  void            __fastcall Stop(void);
  void            __fastcall ShowProperty(OLE_HANDLE ParentWnd/*[in]*/);
  void            __fastcall Reset(void);
  void            __fastcall SetPTSSession(LPDISPATCH Session/*[in]*/);
  __property VARIANT_BOOL Active={ read=get_Active };
  __property long ActiveTopic={ read=get_ActiveTopic };
  __property long TopicCount={ read=get_TopicCount };
  __property long EventCount[long index]={ read=get_EventCount };
private:
  TManagerOnError                FOnError;
  TManagerOnEvent                FOnEvent;
__published:
  __property TManagerOnError OnError={ read=FOnError, write=FOnError };
  __property TManagerOnEvent OnEvent={ read=FOnEvent, write=FOnEvent };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TQuote2
// Help String      : Quote2 Class
// Default Interface: IQuote2
// Def. Intf. Object: IQuote2Ptr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TQuote2 : public Oleserver::TOleServer
{
  IQuote2Ptr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TQuote2(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IQuote2Ptr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IQuote2Ptr intf);


  long            __fastcall get_SeqNo(void);
  BSTR            __fastcall get_Symbol(void);
  BSTR            __fastcall get_InstID(void);
  long            __fastcall get_InstIDSource(void);
  long            __fastcall get_LastQty(void);
  double          __fastcall get_LastPrice(void);
  BSTR            __fastcall get_LastTime(void);
  double          __fastcall get_PreClosePrice(void);
  double          __fastcall get_ClosePrice(void);
  double          __fastcall get_OpenPrice(void);
  double          __fastcall get_SettlPrice(void);
  double          __fastcall get_LowPrice(void);
  double          __fastcall get_HighPrice(void);
  double          __fastcall get_Turnover(void);
  long            __fastcall get_DayQty(void);
  double          __fastcall get_FixPrice(void);
  long            __fastcall get_AskQty(VARIANT index/*[in]*/);
  double          __fastcall get_AskPrice(VARIANT index/*[in]*/);
  long            __fastcall get_BidQty(VARIANT index/*[in]*/);
  double          __fastcall get_BidPrice(VARIANT index/*[in]*/);
  BSTR            __fastcall get_TradingDay(void);
  long            __fastcall get_LevelCount(void);
  __property long SeqNo={ read=get_SeqNo };
  __property BSTR Symbol={ read=get_Symbol };
  __property BSTR InstID={ read=get_InstID };
  __property long InstIDSource={ read=get_InstIDSource };
  __property long LastQty={ read=get_LastQty };
  __property double LastPrice={ read=get_LastPrice };
  __property BSTR LastTime={ read=get_LastTime };
  __property double PreClosePrice={ read=get_PreClosePrice };
  __property double ClosePrice={ read=get_ClosePrice };
  __property double OpenPrice={ read=get_OpenPrice };
  __property double SettlPrice={ read=get_SettlPrice };
  __property double LowPrice={ read=get_LowPrice };
  __property double HighPrice={ read=get_HighPrice };
  __property double Turnover={ read=get_Turnover };
  __property long DayQty={ read=get_DayQty };
  __property double FixPrice={ read=get_FixPrice };
  __property long AskQty[VARIANT index]={ read=get_AskQty };
  __property double AskPrice[VARIANT index]={ read=get_AskPrice };
  __property long BidQty[VARIANT index]={ read=get_BidQty };
  __property double BidPrice[VARIANT index]={ read=get_BidPrice };
  __property BSTR TradingDay={ read=get_TradingDay };
  __property long LevelCount={ read=get_LevelCount };
};

};     // namespace Hqpoolsvrlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Hqpoolsvrlib_tlb;
#endif

#pragma option pop

#endif // HQPoolSvrLib_OCXH
