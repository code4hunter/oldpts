// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2004-7-14 13:58:21 from Type Library described below.

// ************************************************************************  //
// Type Lib: G:\doc\企业版协议开发包\HsCommX.dll (1)
// LIBID: {5DD0C266-258A-49C6-8A41-82256FD308DD}
// LCID: 0
// Helpfile: 
// HelpString: WebComm Library
// DepndLst: 
//   (1) v2.0 stdole, (H:\WINDOWS\System32\Stdole2.tlb)
// ************************************************************************ //
#ifndef   HsCommX_TLBH
#define   HsCommX_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Hscommx_tlb
{

// *********************************************************************//
// HelpString: WebComm Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_HsCommX;
extern __declspec (package) const GUID IID_IComm;
extern __declspec (package) const GUID CLSID_Comm;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{D9314C0B-4317-4C15-8B0E-044D5C493B7A}") IComm;
typedef TComInterface<IComm, &IID_IComm> ICommPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IComm Comm;
typedef ICommPtr CommPtr;

#define LIBID_OF_Comm (&LIBID_HsCommX)
// *********************************************************************//
// Interface: IComm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9314C0B-4317-4C15-8B0E-044D5C493B7A}
// *********************************************************************//
interface IComm  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Connect(long* value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Send(long* value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Receive(long* value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ErrorNo(long* value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ErrorMsg(BSTR* value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE DisConnect(long* value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE AddField(BSTR sField/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE AddValue(BSTR sValue/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE MoveBy(long Step/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE FieldByName(BSTR FieldName/*[in]*/, BSTR* value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_RecordCount(long* value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_EOF_(long* value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Bof(long* value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE SetConnect(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE Free(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_SendTimeOut(long* value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_SendTimeOut(long value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_ReceiveTimeOut(long* value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_ReceiveTimeOut(long value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE Create(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_SectionIndex(long* value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_SectionIndex(long value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_SenderId(long* value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_SenderId(long value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE CreatePack(void) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE FreePack(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Buffer(BSTR* value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_Buffer(BSTR value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE SendBuffer(BSTR value/*[in]*/, long* valu/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE CreateX(long Order/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_FieldCount(long* value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, 
                                             long Port/*[in]*/, long KeyCipher/*[in]*/, 
                                             BSTR Key/*[in]*/, long KeyLen/*[in]*/, 
                                             long* value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE GetFieldName(long Index/*[in]*/, BSTR* value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_Connection(long* value/*[out,retval]*/) = 0; // [31]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall Connect(void)
  {
    long value;
    OLECHECK(this->Connect((long*)&value));
    return value;
  }

  long __fastcall Send(void)
  {
    long value;
    OLECHECK(this->Send((long*)&value));
    return value;
  }

  long __fastcall Receive(void)
  {
    long value;
    OLECHECK(this->Receive((long*)&value));
    return value;
  }

  long __fastcall get_ErrorNo(void)
  {
    long value;
    OLECHECK(this->get_ErrorNo((long*)&value));
    return value;
  }

  BSTR __fastcall get_ErrorMsg(void)
  {
    BSTR value = 0;
    OLECHECK(this->get_ErrorMsg((BSTR*)&value));
    return value;
  }

  long __fastcall DisConnect(void)
  {
    long value;
    OLECHECK(this->DisConnect((long*)&value));
    return value;
  }

  BSTR __fastcall FieldByName(BSTR FieldName/*[in]*/)
  {
    BSTR value = 0;
    OLECHECK(this->FieldByName(FieldName, (BSTR*)&value));
    return value;
  }

  long __fastcall get_RecordCount(void)
  {
    long value;
    OLECHECK(this->get_RecordCount((long*)&value));
    return value;
  }

  long __fastcall get_EOF_(void)
  {
    long value;
    OLECHECK(this->get_EOF_((long*)&value));
    return value;
  }

  long __fastcall get_Bof(void)
  {
    long value;
    OLECHECK(this->get_Bof((long*)&value));
    return value;
  }

  long __fastcall get_SendTimeOut(void)
  {
    long value;
    OLECHECK(this->get_SendTimeOut((long*)&value));
    return value;
  }

  long __fastcall get_ReceiveTimeOut(void)
  {
    long value;
    OLECHECK(this->get_ReceiveTimeOut((long*)&value));
    return value;
  }

  long __fastcall get_SectionIndex(void)
  {
    long value;
    OLECHECK(this->get_SectionIndex((long*)&value));
    return value;
  }

  long __fastcall get_SenderId(void)
  {
    long value;
    OLECHECK(this->get_SenderId((long*)&value));
    return value;
  }

  BSTR __fastcall get_Buffer(void)
  {
    BSTR value = 0;
    OLECHECK(this->get_Buffer((BSTR*)&value));
    return value;
  }

  long __fastcall SendBuffer(BSTR value/*[in]*/)
  {
    long valu;
    OLECHECK(this->SendBuffer(value, (long*)&valu));
    return valu;
  }

  long __fastcall get_FieldCount(void)
  {
    long value;
    OLECHECK(this->get_FieldCount((long*)&value));
    return value;
  }

  long __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                           long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/)
  {
    long value;
    OLECHECK(this->ConnectX(Protocol, Address, Port, KeyCipher, Key, KeyLen, (long*)&value));
    return value;
  }

  BSTR __fastcall GetFieldName(long Index/*[in]*/)
  {
    BSTR value = 0;
    OLECHECK(this->GetFieldName(Index, (BSTR*)&value));
    return value;
  }

  long __fastcall get_Connection(void)
  {
    long value;
    OLECHECK(this->get_Connection((long*)&value));
    return value;
  }


  __property   long            ErrorNo = {read = get_ErrorNo};
  __property   BSTR            ErrorMsg = {read = get_ErrorMsg};
  __property   long            RecordCount = {read = get_RecordCount};
  __property   long            EOF_ = {read = get_EOF_};
  __property   long            Bof = {read = get_Bof};
  __property   long            SendTimeOut = {read = get_SendTimeOut, write = set_SendTimeOut};
  __property   long            ReceiveTimeOut = {read = get_ReceiveTimeOut, write = set_ReceiveTimeOut};
  __property   long            SectionIndex = {read = get_SectionIndex, write = set_SectionIndex};
  __property   long            SenderId = {read = get_SenderId, write = set_SenderId};
  __property   BSTR            Buffer = {read = get_Buffer};
  __property   long            FieldCount = {read = get_FieldCount};
  __property   long            Connection = {read = get_Connection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIComm
// Interface: IComm
// *********************************************************************//
template <class T /* IComm */ >
class TCOMICommT : public TComInterface<IComm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICommT() {}
  TCOMICommT(IComm *intf, bool addRef = false) : TComInterface<IComm>(intf, addRef) {}
  TCOMICommT(const TCOMICommT& src) : TComInterface<IComm>(src) {}
  TCOMICommT& operator=(const TCOMICommT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Connect(long* value/*[out,retval]*/);
  long            __fastcall Connect(void);
  HRESULT         __fastcall Send(long* value/*[out,retval]*/);
  long            __fastcall Send(void);
  HRESULT         __fastcall Receive(long* value/*[out,retval]*/);
  long            __fastcall Receive(void);
  HRESULT         __fastcall SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/);
  HRESULT         __fastcall get_ErrorNo(long* value/*[out,retval]*/);
  long            __fastcall get_ErrorNo(void);
  HRESULT         __fastcall get_ErrorMsg(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_ErrorMsg(void);
  HRESULT         __fastcall DisConnect(long* value/*[out,retval]*/);
  long            __fastcall DisConnect(void);
  HRESULT         __fastcall AddField(BSTR sField/*[in]*/);
  HRESULT         __fastcall AddValue(BSTR sValue/*[in]*/);
  HRESULT         __fastcall SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall MoveBy(long Step/*[in]*/);
  HRESULT         __fastcall FieldByName(BSTR FieldName/*[in]*/, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall FieldByName(BSTR FieldName/*[in]*/);
  HRESULT         __fastcall get_RecordCount(long* value/*[out,retval]*/);
  long            __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(long* value/*[out,retval]*/);
  long            __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Bof(long* value/*[out,retval]*/);
  long            __fastcall get_Bof(void);
  HRESULT         __fastcall SetConnect(void);
  HRESULT         __fastcall Free(void);
  HRESULT         __fastcall get_SendTimeOut(long* value/*[out,retval]*/);
  long            __fastcall get_SendTimeOut(void);
  HRESULT         __fastcall set_SendTimeOut(long value/*[in]*/);
  HRESULT         __fastcall get_ReceiveTimeOut(long* value/*[out,retval]*/);
  long            __fastcall get_ReceiveTimeOut(void);
  HRESULT         __fastcall set_ReceiveTimeOut(long value/*[in]*/);
  HRESULT         __fastcall Create(void);
  HRESULT         __fastcall get_SectionIndex(long* value/*[out,retval]*/);
  long            __fastcall get_SectionIndex(void);
  HRESULT         __fastcall set_SectionIndex(long value/*[in]*/);
  HRESULT         __fastcall get_SenderId(long* value/*[out,retval]*/);
  long            __fastcall get_SenderId(void);
  HRESULT         __fastcall set_SenderId(long value/*[in]*/);
  HRESULT         __fastcall CreatePack(void);
  HRESULT         __fastcall FreePack(void);
  HRESULT         __fastcall get_Buffer(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_Buffer(void);
  HRESULT         __fastcall set_Buffer(BSTR value/*[in]*/);
  HRESULT         __fastcall SendBuffer(BSTR value/*[in]*/, long* valu/*[out,retval]*/);
  long            __fastcall SendBuffer(BSTR value/*[in]*/);
  HRESULT         __fastcall CreateX(long Order/*[in]*/);
  HRESULT         __fastcall get_FieldCount(long* value/*[out,retval]*/);
  long            __fastcall get_FieldCount(void);
  HRESULT         __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                                      long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/, 
                                      long* value/*[out,retval]*/);
  long            __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                                      long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/);
  HRESULT         __fastcall GetFieldName(long Index/*[in]*/, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetFieldName(long Index/*[in]*/);
  HRESULT         __fastcall get_Connection(long* value/*[out,retval]*/);
  long            __fastcall get_Connection(void);

  __property   long            ErrorNo = {read = get_ErrorNo};
  __property   BSTR            ErrorMsg = {read = get_ErrorMsg};
  __property   long            RecordCount = {read = get_RecordCount};
  __property   long            EOF_ = {read = get_EOF_};
  __property   long            Bof = {read = get_Bof};
  __property   long            SendTimeOut = {read = get_SendTimeOut, write = set_SendTimeOut};
  __property   long            ReceiveTimeOut = {read = get_ReceiveTimeOut, write = set_ReceiveTimeOut};
  __property   long            SectionIndex = {read = get_SectionIndex, write = set_SectionIndex};
  __property   long            SenderId = {read = get_SenderId, write = set_SenderId};
  __property   BSTR            Buffer = {read = get_Buffer};
  __property   long            FieldCount = {read = get_FieldCount};
  __property   long            Connection = {read = get_Connection};
};
typedef TCOMICommT<IComm> TCOMIComm;

// *********************************************************************//
// DispIntf:  IComm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9314C0B-4317-4C15-8B0E-044D5C493B7A}
// *********************************************************************//
template<class T>
class ICommDispT : public TAutoDriver<IComm>
{
public:
  ICommDispT(){}

  ICommDispT(IComm *pintf)
  {
    TAutoDriver<IComm>::Bind(pintf, false);
  }

  ICommDispT(ICommPtr pintf)
  {
    TAutoDriver<IComm>::Bind(pintf, true);
  }

  ICommDispT& operator=(IComm *pintf)
  {
    TAutoDriver<IComm>::Bind(pintf, false);
    return *this;
  }

  ICommDispT& operator=(ICommPtr pintf)
  {
    TAutoDriver<IComm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Comm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Comm);
  }

  HRESULT         __fastcall Connect(long* value/*[out,retval]*/);
  long            __fastcall Connect(void);
  HRESULT         __fastcall Send(long* value/*[out,retval]*/);
  long            __fastcall Send(void);
  HRESULT         __fastcall Receive(long* value/*[out,retval]*/);
  long            __fastcall Receive(void);
  HRESULT         __fastcall SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/);
  HRESULT         __fastcall get_ErrorNo(long* value/*[out,retval]*/);
  long            __fastcall get_ErrorNo(void);
  HRESULT         __fastcall get_ErrorMsg(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_ErrorMsg(void);
  HRESULT         __fastcall DisConnect(long* value/*[out,retval]*/);
  long            __fastcall DisConnect(void);
  HRESULT         __fastcall AddField(BSTR sField/*[in]*/);
  HRESULT         __fastcall AddValue(BSTR sValue/*[in]*/);
  HRESULT         __fastcall SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/);
  HRESULT         __fastcall MoveBy(long Step/*[in]*/);
  HRESULT         __fastcall FieldByName(BSTR FieldName/*[in]*/, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall FieldByName(BSTR FieldName/*[in]*/);
  HRESULT         __fastcall get_RecordCount(long* value/*[out,retval]*/);
  long            __fastcall get_RecordCount(void);
  HRESULT         __fastcall get_EOF_(long* value/*[out,retval]*/);
  long            __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Bof(long* value/*[out,retval]*/);
  long            __fastcall get_Bof(void);
  HRESULT         __fastcall SetConnect();
  HRESULT         __fastcall Free();
  HRESULT         __fastcall get_SendTimeOut(long* value/*[out,retval]*/);
  long            __fastcall get_SendTimeOut(void);
  HRESULT         __fastcall set_SendTimeOut(long value/*[in]*/);
  HRESULT         __fastcall get_ReceiveTimeOut(long* value/*[out,retval]*/);
  long            __fastcall get_ReceiveTimeOut(void);
  HRESULT         __fastcall set_ReceiveTimeOut(long value/*[in]*/);
  HRESULT         __fastcall Create();
  HRESULT         __fastcall get_SectionIndex(long* value/*[out,retval]*/);
  long            __fastcall get_SectionIndex(void);
  HRESULT         __fastcall set_SectionIndex(long value/*[in]*/);
  HRESULT         __fastcall get_SenderId(long* value/*[out,retval]*/);
  long            __fastcall get_SenderId(void);
  HRESULT         __fastcall set_SenderId(long value/*[in]*/);
  HRESULT         __fastcall CreatePack();
  HRESULT         __fastcall FreePack();
  HRESULT         __fastcall get_Buffer(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_Buffer(void);
  HRESULT         __fastcall set_Buffer(BSTR value/*[in]*/);
  HRESULT         __fastcall SendBuffer(BSTR value/*[in]*/, long* valu/*[out,retval]*/);
  long            __fastcall SendBuffer(BSTR value/*[in]*/);
  HRESULT         __fastcall CreateX(long Order/*[in]*/);
  HRESULT         __fastcall get_FieldCount(long* value/*[out,retval]*/);
  long            __fastcall get_FieldCount(void);
  HRESULT         __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/
                                      , long KeyCipher/*[in]*/, BSTR Key/*[in]*/, 
                                      long KeyLen/*[in]*/, long* value/*[out,retval]*/);
  long            __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                                      long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/);
  HRESULT         __fastcall GetFieldName(long Index/*[in]*/, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetFieldName(long Index/*[in]*/);
  HRESULT         __fastcall get_Connection(long* value/*[out,retval]*/);
  long            __fastcall get_Connection(void);

  __property   long            ErrorNo = {read = get_ErrorNo};
  __property   BSTR            ErrorMsg = {read = get_ErrorMsg};
  __property   long            RecordCount = {read = get_RecordCount};
  __property   long            EOF_ = {read = get_EOF_};
  __property   long            Bof = {read = get_Bof};
  __property   long            SendTimeOut = {read = get_SendTimeOut, write = set_SendTimeOut};
  __property   long            ReceiveTimeOut = {read = get_ReceiveTimeOut, write = set_ReceiveTimeOut};
  __property   long            SectionIndex = {read = get_SectionIndex, write = set_SectionIndex};
  __property   long            SenderId = {read = get_SenderId, write = set_SenderId};
  __property   BSTR            Buffer = {read = get_Buffer};
  __property   long            FieldCount = {read = get_FieldCount};
  __property   long            Connection = {read = get_Connection};
};
typedef ICommDispT<IComm> ICommDisp;

// *********************************************************************//
// SmartIntf: TCOMIComm
// Interface: IComm
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICommT<T>::Connect(long* value/*[out,retval]*/)
{
  return (*this)->Connect(value);
}

template <class T> long __fastcall
TCOMICommT<T>::Connect(void)
{
  long value;
  OLECHECK(this->Connect((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::Send(long* value/*[out,retval]*/)
{
  return (*this)->Send(value);
}

template <class T> long __fastcall
TCOMICommT<T>::Send(void)
{
  long value;
  OLECHECK(this->Send((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::Receive(long* value/*[out,retval]*/)
{
  return (*this)->Receive(value);
}

template <class T> long __fastcall
TCOMICommT<T>::Receive(void)
{
  long value;
  OLECHECK(this->Receive((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/)
{
  return (*this)->SetHead(BranchNo, FuncNo);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_ErrorNo(long* value/*[out,retval]*/)
{
  return (*this)->get_ErrorNo(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_ErrorNo(void)
{
  long value;
  OLECHECK(this->get_ErrorNo((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_ErrorMsg(BSTR* value/*[out,retval]*/)
{
  return (*this)->get_ErrorMsg(value);
}

template <class T> BSTR __fastcall
TCOMICommT<T>::get_ErrorMsg(void)
{
  BSTR value = 0;
  OLECHECK(this->get_ErrorMsg((BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::DisConnect(long* value/*[out,retval]*/)
{
  return (*this)->DisConnect(value);
}

template <class T> long __fastcall
TCOMICommT<T>::DisConnect(void)
{
  long value;
  OLECHECK(this->DisConnect((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::AddField(BSTR sField/*[in]*/)
{
  return (*this)->AddField(sField);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::AddValue(BSTR sValue/*[in]*/)
{
  return (*this)->AddValue(sValue);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/)
{
  return (*this)->SetRange(FieldCount, RowCount);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::MoveBy(long Step/*[in]*/)
{
  return (*this)->MoveBy(Step);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::FieldByName(BSTR FieldName/*[in]*/, BSTR* value/*[out,retval]*/)
{
  return (*this)->FieldByName(FieldName, value);
}

template <class T> BSTR __fastcall
TCOMICommT<T>::FieldByName(BSTR FieldName/*[in]*/)
{
  BSTR value = 0;
  OLECHECK(this->FieldByName(, (BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_RecordCount(long* value/*[out,retval]*/)
{
  return (*this)->get_RecordCount(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_RecordCount(void)
{
  long value;
  OLECHECK(this->get_RecordCount((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_EOF_(long* value/*[out,retval]*/)
{
  return (*this)->get_EOF_(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_EOF_(void)
{
  long value;
  OLECHECK(this->get_EOF_((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_Bof(long* value/*[out,retval]*/)
{
  return (*this)->get_Bof(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_Bof(void)
{
  long value;
  OLECHECK(this->get_Bof((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::SetConnect(void)
{
  return (*this)->SetConnect();
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::Free(void)
{
  return (*this)->Free();
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_SendTimeOut(long* value/*[out,retval]*/)
{
  return (*this)->get_SendTimeOut(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_SendTimeOut(void)
{
  long value;
  OLECHECK(this->get_SendTimeOut((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::set_SendTimeOut(long value/*[in]*/)
{
  return (*this)->set_SendTimeOut(value);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_ReceiveTimeOut(long* value/*[out,retval]*/)
{
  return (*this)->get_ReceiveTimeOut(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_ReceiveTimeOut(void)
{
  long value;
  OLECHECK(this->get_ReceiveTimeOut((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::set_ReceiveTimeOut(long value/*[in]*/)
{
  return (*this)->set_ReceiveTimeOut(value);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::Create(void)
{
  return (*this)->Create();
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_SectionIndex(long* value/*[out,retval]*/)
{
  return (*this)->get_SectionIndex(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_SectionIndex(void)
{
  long value;
  OLECHECK(this->get_SectionIndex((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::set_SectionIndex(long value/*[in]*/)
{
  return (*this)->set_SectionIndex(value);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_SenderId(long* value/*[out,retval]*/)
{
  return (*this)->get_SenderId(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_SenderId(void)
{
  long value;
  OLECHECK(this->get_SenderId((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::set_SenderId(long value/*[in]*/)
{
  return (*this)->set_SenderId(value);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::CreatePack(void)
{
  return (*this)->CreatePack();
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::FreePack(void)
{
  return (*this)->FreePack();
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_Buffer(BSTR* value/*[out,retval]*/)
{
  return (*this)->get_Buffer(value);
}

template <class T> BSTR __fastcall
TCOMICommT<T>::get_Buffer(void)
{
  BSTR value = 0;
  OLECHECK(this->get_Buffer((BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::set_Buffer(BSTR value/*[in]*/)
{
  return (*this)->set_Buffer(value);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::SendBuffer(BSTR value/*[in]*/, long* valu/*[out,retval]*/)
{
  return (*this)->SendBuffer(value, valu);
}

template <class T> long __fastcall
TCOMICommT<T>::SendBuffer(BSTR value/*[in]*/)
{
  long valu;
  OLECHECK(this->SendBuffer(, (long*)&valu));
  return valu;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::CreateX(long Order/*[in]*/)
{
  return (*this)->CreateX(Order);
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_FieldCount(long* value/*[out,retval]*/)
{
  return (*this)->get_FieldCount(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_FieldCount(void)
{
  long value;
  OLECHECK(this->get_FieldCount((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                        long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/, 
                        long* value/*[out,retval]*/)
{
  return (*this)->ConnectX(Protocol, Address, Port, KeyCipher, Key, KeyLen, value);
}

template <class T> long __fastcall
TCOMICommT<T>::ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                        long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/)
{
  long value;
  OLECHECK(this->ConnectX(, (long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::GetFieldName(long Index/*[in]*/, BSTR* value/*[out,retval]*/)
{
  return (*this)->GetFieldName(Index, value);
}

template <class T> BSTR __fastcall
TCOMICommT<T>::GetFieldName(long Index/*[in]*/)
{
  BSTR value = 0;
  OLECHECK(this->GetFieldName(, (BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMICommT<T>::get_Connection(long* value/*[out,retval]*/)
{
  return (*this)->get_Connection(value);
}

template <class T> long __fastcall
TCOMICommT<T>::get_Connection(void)
{
  long value;
  OLECHECK(this->get_Connection((long*)&value));
  return value;
}

// *********************************************************************//
// DispIntf:  IComm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9314C0B-4317-4C15-8B0E-044D5C493B7A}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICommDispT<T>::Connect(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::Connect(void)
{
  long value;
  this->Connect((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::Send(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Send"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::Send(void)
{
  long value;
  this->Send((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::Receive(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Receive"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::Receive(void)
{
  long value;
  this->Receive((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetHead"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = BranchNo /*[VT_INT:0]*/;
  _args[2] = FuncNo /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_ErrorNo(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorNo"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_ErrorNo(void)
{
  long value;
  this->get_ErrorNo((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_ErrorMsg(BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorMsg"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommDispT<T>::get_ErrorMsg(void)
{
  BSTR value;
  this->get_ErrorMsg((BSTR*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::DisConnect(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisConnect"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::DisConnect(void)
{
  long value;
  this->DisConnect((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::AddField(BSTR sField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddField"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = sField /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::AddValue(BSTR sValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddValue"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = sValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRange"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = FieldCount /*[VT_I4:0]*/;
  _args[2] = RowCount /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::MoveBy(long Step/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveBy"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Step /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::FieldByName(BSTR FieldName/*[in]*/, BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldByName"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = FieldName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommDispT<T>::FieldByName(BSTR FieldName/*[in]*/)
{
  BSTR value;
  this->FieldByName(FieldName, (BSTR*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_RecordCount(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_RecordCount(void)
{
  long value;
  this->get_RecordCount((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_EOF_(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Eof"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_EOF_(void)
{
  long value;
  this->get_EOF_((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_Bof(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bof"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_Bof(void)
{
  long value;
  this->get_Bof((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::SetConnect()
{
  _TDispID _dispid(*this, OLETEXT("SetConnect"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::Free()
{
  _TDispID _dispid(*this, OLETEXT("Free"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_SendTimeOut(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendTimeOut"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_SendTimeOut(void)
{
  long value;
  this->get_SendTimeOut((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::set_SendTimeOut(long value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendTimeOut"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_ReceiveTimeOut(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceiveTimeOut"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_ReceiveTimeOut(void)
{
  long value;
  this->get_ReceiveTimeOut((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::set_ReceiveTimeOut(long value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceiveTimeOut"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::Create()
{
  _TDispID _dispid(*this, OLETEXT("Create"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_SectionIndex(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SectionIndex"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_SectionIndex(void)
{
  long value;
  this->get_SectionIndex((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::set_SectionIndex(long value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SectionIndex"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_SenderId(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SenderId"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_SenderId(void)
{
  long value;
  this->get_SenderId((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::set_SenderId(long value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SenderId"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::CreatePack()
{
  _TDispID _dispid(*this, OLETEXT("CreatePack"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::FreePack()
{
  _TDispID _dispid(*this, OLETEXT("FreePack"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_Buffer(BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Buffer"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommDispT<T>::get_Buffer(void)
{
  BSTR value;
  this->get_Buffer((BSTR*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::set_Buffer(BSTR value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Buffer"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::SendBuffer(BSTR value/*[in]*/, long* valu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendBuffer"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(valu /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::SendBuffer(BSTR value/*[in]*/)
{
  long valu;
  this->SendBuffer(value, (long*)&valu);
  return valu;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::CreateX(long Order/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateX"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Order /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_FieldCount(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FieldCount"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_FieldCount(void)
{
  long value;
  this->get_FieldCount((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                        long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/, 
                        long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectX"), DISPID(29));
  TAutoArgs<6> _args;
  _args[1] = Protocol /*[VT_I4:0]*/;
  _args[2] = Address /*[VT_BSTR:0]*/;
  _args[3] = Port /*[VT_I4:0]*/;
  _args[4] = KeyCipher /*[VT_I4:0]*/;
  _args[5] = Key /*[VT_BSTR:0]*/;
  _args[6] = KeyLen /*[VT_I4:0]*/;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                        long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/)
{
  long value;
  this->ConnectX(Protocol, Address, Port, KeyCipher, Key, KeyLen, (long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::GetFieldName(long Index/*[in]*/, BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFieldName"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommDispT<T>::GetFieldName(long Index/*[in]*/)
{
  BSTR value;
  this->GetFieldName(Index, (BSTR*)&value);
  return value;
}

template <class T> HRESULT __fastcall
ICommDispT<T>::get_Connection(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connection"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommDispT<T>::get_Connection(void)
{
  long value;
  this->get_Connection((long*)&value);
  return value;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Comm
// Interface: TCOMIComm
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIComm, IComm, &CLSID_Comm, &IID_IComm> CoComm;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Hscommx_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Hscommx_tlb;
#endif

#pragma option pop

#endif // HsCommX_TLBH
