// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2004-7-14 13:58:21 from Type Library described below.

// ************************************************************************  //
// Type Lib: G:\doc\企业版协议开发包\HsCommX.dll (1)
// LIBID: {5DD0C266-258A-49C6-8A41-82256FD308DD}
// LCID: 0
// Helpfile: 
// HelpString: WebComm Library
// DepndLst: 
//   (1) v2.0 stdole, (H:\WINDOWS\System32\Stdole2.tlb)
// ************************************************************************ //
#ifndef   HsCommX_OCXH
#define   HsCommX_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "HsCommX_TLB.h"
namespace Hscommx_tlb
{

// *********************************************************************//
// HelpString: WebComm Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TComm
// Help String      : HsWebComm Object
// Default Interface: IComm
// Def. Intf. Object: ICommPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class TComm : public Oleserver::TOleServer
{
  ICommPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TComm(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICommPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICommPtr intf);


  long __fastcall get_ErrorNo(void)
  {
    return GetDefaultInterface()->get_ErrorNo();
  }

  BSTR __fastcall get_ErrorMsg(void)
  {
    return GetDefaultInterface()->get_ErrorMsg();
  }

  long __fastcall get_RecordCount(void)
  {
    return GetDefaultInterface()->get_RecordCount();
  }

  long __fastcall get_EOF_(void)
  {
    return GetDefaultInterface()->get_EOF_();
  }

  long __fastcall get_Bof(void)
  {
    return GetDefaultInterface()->get_Bof();
  }

  long __fastcall get_SendTimeOut(void)
  {
    return GetDefaultInterface()->get_SendTimeOut();
  }

  void __fastcall set_SendTimeOut(long value/*[in]*/)
  {
    GetDefaultInterface()->set_SendTimeOut(value/*[in]*/);
  }

  long __fastcall get_ReceiveTimeOut(void)
  {
    return GetDefaultInterface()->get_ReceiveTimeOut();
  }

  void __fastcall set_ReceiveTimeOut(long value/*[in]*/)
  {
    GetDefaultInterface()->set_ReceiveTimeOut(value/*[in]*/);
  }

  long __fastcall get_SectionIndex(void)
  {
    return GetDefaultInterface()->get_SectionIndex();
  }

  void __fastcall set_SectionIndex(long value/*[in]*/)
  {
    GetDefaultInterface()->set_SectionIndex(value/*[in]*/);
  }

  long __fastcall get_SenderId(void)
  {
    return GetDefaultInterface()->get_SenderId();
  }

  void __fastcall set_SenderId(long value/*[in]*/)
  {
    GetDefaultInterface()->set_SenderId(value/*[in]*/);
  }

  BSTR __fastcall get_Buffer(void)
  {
    return GetDefaultInterface()->get_Buffer();
  }

  void __fastcall set_Buffer(BSTR value/*[in]*/)
  {
    GetDefaultInterface()->set_Buffer(value/*[in]*/);
  }

  long __fastcall get_FieldCount(void)
  {
    return GetDefaultInterface()->get_FieldCount();
  }

  long __fastcall get_Connection(void)
  {
    return GetDefaultInterface()->get_Connection();
  }

  long __fastcall Connect1(void)
  {
    return GetDefaultInterface()->Connect();
  }

  long __fastcall Send(void)
  {
    return GetDefaultInterface()->Send();
  }

  long __fastcall Receive(void)
  {
    return GetDefaultInterface()->Receive();
  }

  void __fastcall SetHead(int BranchNo/*[in]*/, int FuncNo/*[in]*/)
  {
    GetDefaultInterface()->SetHead(BranchNo/*[in]*/, FuncNo/*[in]*/);
  }

  long __fastcall DisConnect(void)
  {
    return GetDefaultInterface()->DisConnect();
  }

  void __fastcall AddField(BSTR sField/*[in]*/)
  {
    GetDefaultInterface()->AddField(sField/*[in]*/);
  }

  void __fastcall AddValue(BSTR sValue/*[in]*/)
  {
    GetDefaultInterface()->AddValue(sValue/*[in]*/);
  }

  void __fastcall SetRange(long FieldCount/*[in]*/, long RowCount/*[in]*/)
  {
    GetDefaultInterface()->SetRange(FieldCount/*[in]*/, RowCount/*[in]*/);
  }

  void __fastcall MoveBy(long Step/*[in]*/)
  {
    GetDefaultInterface()->MoveBy(Step/*[in]*/);
  }

  BSTR __fastcall FieldByName(BSTR FieldName/*[in]*/)
  {
    return GetDefaultInterface()->FieldByName(FieldName/*[in]*/);
  }

  void __fastcall SetConnect(void)
  {
    GetDefaultInterface()->SetConnect();
  }

  void __fastcall Free(void)
  {
    GetDefaultInterface()->Free();
  }

  void __fastcall Create(void)
  {
    GetDefaultInterface()->Create();
  }

  void __fastcall CreatePack(void)
  {
    GetDefaultInterface()->CreatePack();
  }

  void __fastcall FreePack(void)
  {
    GetDefaultInterface()->FreePack();
  }

  long __fastcall SendBuffer(BSTR value/*[in]*/)
  {
    return GetDefaultInterface()->SendBuffer(value/*[in]*/);
  }

  void __fastcall CreateX(long Order/*[in]*/)
  {
    GetDefaultInterface()->CreateX(Order/*[in]*/);
  }

  long __fastcall ConnectX(long Protocol/*[in]*/, BSTR Address/*[in]*/, long Port/*[in]*/, 
                           long KeyCipher/*[in]*/, BSTR Key/*[in]*/, long KeyLen/*[in]*/)
  {
    return GetDefaultInterface()->ConnectX(Protocol/*[in]*/, Address/*[in]*/, Port/*[in]*/, 
                                           KeyCipher/*[in]*/, Key/*[in]*/, KeyLen/*[in]*/);
  }

  BSTR __fastcall GetFieldName(long Index/*[in]*/)
  {
    return GetDefaultInterface()->GetFieldName(Index/*[in]*/);
  }

  __property long ErrorNo={ read=get_ErrorNo };
  __property BSTR ErrorMsg={ read=get_ErrorMsg };
  __property long RecordCount={ read=get_RecordCount };
  __property long EOF_={ read=get_EOF_ };
  __property long Bof={ read=get_Bof };
  __property long FieldCount={ read=get_FieldCount };
  __property long Connection={ read=get_Connection };
  __property long SendTimeOut={ read=get_SendTimeOut, stored=false };
  __property long ReceiveTimeOut={ read=get_ReceiveTimeOut, stored=false };
  __property long SectionIndex={ read=get_SectionIndex, stored=false };
  __property long SenderId={ read=get_SenderId, stored=false };
  __property BSTR Buffer={ read=get_Buffer, stored=false };
};

};     // namespace Hscommx_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Hscommx_tlb;
#endif

#pragma option pop

#endif // HsCommX_OCXH
