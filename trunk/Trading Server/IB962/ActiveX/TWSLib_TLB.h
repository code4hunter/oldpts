// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 2010/3/18 15:58:48 from Type Library described below.

// ************************************************************************  //
// Type Lib: E:\PROGRAM\IB_API_9_62\ActiveX\Tws.ocx (1)
// LIBID: {0A77CCF5-052C-11D6-B0EC-00B0D074179C}
// LCID: 0
// Helpfile: E:\PROGRAM\IB_API_9_62\ActiveX\Tws.hlp
// HelpString: Tws ActiveX Control module
// DepndLst: 
//   (1) v2.0 stdole, (F:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   TWSLib_TLBH
#define   TWSLib_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Twslib_tlb
{

// *********************************************************************//
// HelpString: Tws ActiveX Control module
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_TWSLib;
extern __declspec (package) const GUID IID_IComboLeg;
extern __declspec (package) const GUID IID_IComboLegList;
extern __declspec (package) const GUID IID_IUnderComp;
extern __declspec (package) const GUID IID_IContract;
extern __declspec (package) const GUID IID_IContractDetails;
extern __declspec (package) const GUID IID_ITagValue;
extern __declspec (package) const GUID IID_ITagValueList;
extern __declspec (package) const GUID IID_IOrder;
extern __declspec (package) const GUID IID_IOrderState;
extern __declspec (package) const GUID IID_IExecution;
extern __declspec (package) const GUID IID_IExecutionFilter;
extern __declspec (package) const GUID IID_IScannerSubscription;
extern __declspec (package) const GUID DIID__DTws;
extern __declspec (package) const GUID DIID__DTwsEvents;
extern __declspec (package) const GUID CLSID_Tws;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{573E95CF-F67C-4367-A95B-CB7599BD0673}") IComboLeg;
typedef TComInterface<IComboLeg, &IID_IComboLeg> IComboLegPtr;

interface DECLSPEC_UUID("{BE3E5CD3-6F13-4D39-981C-4F75C063C2BA}") IComboLegList;
typedef TComInterface<IComboLegList, &IID_IComboLegList> IComboLegListPtr;

interface DECLSPEC_UUID("{E5EE73C4-7D45-428E-A347-821CBF918AA6}") IUnderComp;
typedef TComInterface<IUnderComp, &IID_IUnderComp> IUnderCompPtr;

interface DECLSPEC_UUID("{AE6A66F3-8FA9-4076-9C1F-3728B10A4CC7}") IContract;
typedef TComInterface<IContract, &IID_IContract> IContractPtr;

interface DECLSPEC_UUID("{64F03988-ED93-452E-830B-3420DF21BAF9}") IContractDetails;
typedef TComInterface<IContractDetails, &IID_IContractDetails> IContractDetailsPtr;

interface DECLSPEC_UUID("{06FF1D3F-F12F-47D1-9443-A74D3CD58723}") ITagValue;
typedef TComInterface<ITagValue, &IID_ITagValue> ITagValuePtr;

interface DECLSPEC_UUID("{CC48E64E-C1A7-4867-8738-578404D75088}") ITagValueList;
typedef TComInterface<ITagValueList, &IID_ITagValueList> ITagValueListPtr;

interface DECLSPEC_UUID("{25D97F3D-2C4D-4080-9250-D2FB8071BE58}") IOrder;
typedef TComInterface<IOrder, &IID_IOrder> IOrderPtr;

interface DECLSPEC_UUID("{7B33AE1F-99B0-4BCB-A024-42335897A6AF}") IOrderState;
typedef TComInterface<IOrderState, &IID_IOrderState> IOrderStatePtr;

interface DECLSPEC_UUID("{58BDEC36-791C-4E2E-88A4-6E4339392B5B}") IExecution;
typedef TComInterface<IExecution, &IID_IExecution> IExecutionPtr;

interface DECLSPEC_UUID("{3553EA07-F281-433D-B2A4-4CB722A9859B}") IExecutionFilter;
typedef TComInterface<IExecutionFilter, &IID_IExecutionFilter> IExecutionFilterPtr;

interface DECLSPEC_UUID("{6BBE7E50-795D-4C45-A69E-E1EEB7918DD2}") IScannerSubscription;
typedef TComInterface<IScannerSubscription, &IID_IScannerSubscription> IScannerSubscriptionPtr;

interface DECLSPEC_UUID("{0A77CCF6-052C-11D6-B0EC-00B0D074179C}") _DTws;
typedef TComInterface<_DTws, &DIID__DTws> _DTwsPtr;

interface DECLSPEC_UUID("{0A77CCF7-052C-11D6-B0EC-00B0D074179C}") _DTwsEvents;
typedef TComInterface<_DTwsEvents, &DIID__DTwsEvents> _DTwsEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DTws Tws;
typedef _DTwsPtr TwsPtr;

#define LIBID_OF_Tws (&LIBID_TWSLib)
// *********************************************************************//
// Interface: IComboLeg
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {573E95CF-F67C-4367-A95B-CB7599BD0673}
// *********************************************************************//
interface IComboLeg  : public IDispatch
{
public:
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE get_conId(long* pVal/*[out,retval]*/) = 0;
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE set_conId(long pVal/*[in]*/) = 0;
  // [2] property ratio
  virtual HRESULT STDMETHODCALLTYPE get_ratio(long* pVal/*[out,retval]*/) = 0;
  // [2] property ratio
  virtual HRESULT STDMETHODCALLTYPE set_ratio(long pVal/*[in]*/) = 0;
  // [3] property action
  virtual HRESULT STDMETHODCALLTYPE get_action(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property action
  virtual HRESULT STDMETHODCALLTYPE set_action(BSTR pVal/*[in]*/) = 0;
  // [4] property exchange
  virtual HRESULT STDMETHODCALLTYPE get_exchange(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property exchange
  virtual HRESULT STDMETHODCALLTYPE set_exchange(BSTR pVal/*[in]*/) = 0;
  // [5] property openClose
  virtual HRESULT STDMETHODCALLTYPE get_openClose(long* pVal/*[out,retval]*/) = 0;
  // [5] property openClose
  virtual HRESULT STDMETHODCALLTYPE set_openClose(long pVal/*[in]*/) = 0;
  // [6] property shortSaleSlot
  virtual HRESULT STDMETHODCALLTYPE get_shortSaleSlot(long* pVal/*[out,retval]*/) = 0;
  // [6] property shortSaleSlot
  virtual HRESULT STDMETHODCALLTYPE set_shortSaleSlot(long pVal/*[in]*/) = 0;
  // [7] property designatedLocation
  virtual HRESULT STDMETHODCALLTYPE get_designatedLocation(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] property designatedLocation
  virtual HRESULT STDMETHODCALLTYPE set_designatedLocation(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_conId(void)
  {
    long pVal;
    OLECHECK(this->get_conId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_ratio(void)
  {
    long pVal;
    OLECHECK(this->get_ratio((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_action(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_action((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_exchange(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_exchange((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_openClose(void)
  {
    long pVal;
    OLECHECK(this->get_openClose((long*)&pVal));
    return pVal;
  }

  long __fastcall get_shortSaleSlot(void)
  {
    long pVal;
    OLECHECK(this->get_shortSaleSlot((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_designatedLocation(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_designatedLocation((BSTR*)&pVal));
    return pVal;
  }


  __property   long            conId = {read = get_conId, write = set_conId};
  __property   long            ratio = {read = get_ratio, write = set_ratio};
  __property   BSTR            action = {read = get_action, write = set_action};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   long            openClose = {read = get_openClose, write = set_openClose};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IComboLegList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BE3E5CD3-6F13-4D39-981C-4F75C063C2BA}
// *********************************************************************//
interface IComboLegList  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Add(LPDISPATCH* leg/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_Item(long index/*[in]*/)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_Item(index, (LPDISPATCH*)&pVal));
    return pVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall Add(void)
  {
    LPDISPATCH leg;
    OLECHECK(this->Add((LPDISPATCH*)&leg));
    return leg;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IUnderComp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5EE73C4-7D45-428E-A347-821CBF918AA6}
// *********************************************************************//
interface IUnderComp  : public IDispatch
{
public:
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE get_conId(long* pVal/*[out,retval]*/) = 0;
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE set_conId(long pVal/*[in]*/) = 0;
  // [2] property delta
  virtual HRESULT STDMETHODCALLTYPE get_delta(double* pVal/*[out,retval]*/) = 0;
  // [2] property delta
  virtual HRESULT STDMETHODCALLTYPE set_delta(double pVal/*[in]*/) = 0;
  // [3] property price
  virtual HRESULT STDMETHODCALLTYPE get_price(double* pVal/*[out,retval]*/) = 0;
  // [3] property price
  virtual HRESULT STDMETHODCALLTYPE set_price(double pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_conId(void)
  {
    long pVal;
    OLECHECK(this->get_conId((long*)&pVal));
    return pVal;
  }

  double __fastcall get_delta(void)
  {
    double pVal;
    OLECHECK(this->get_delta((double*)&pVal));
    return pVal;
  }

  double __fastcall get_price(void)
  {
    double pVal;
    OLECHECK(this->get_price((double*)&pVal));
    return pVal;
  }


  __property   long            conId = {read = get_conId, write = set_conId};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          price = {read = get_price, write = set_price};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IContract
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE6A66F3-8FA9-4076-9C1F-3728B10A4CC7}
// *********************************************************************//
interface IContract  : public IDispatch
{
public:
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE get_conId(long* pVal/*[out,retval]*/) = 0;
  // [1] property conId
  virtual HRESULT STDMETHODCALLTYPE set_conId(long pVal/*[in]*/) = 0;
  // [2] property symbol
  virtual HRESULT STDMETHODCALLTYPE get_symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property symbol
  virtual HRESULT STDMETHODCALLTYPE set_symbol(BSTR pVal/*[in]*/) = 0;
  // [3] property secType
  virtual HRESULT STDMETHODCALLTYPE get_secType(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property secType
  virtual HRESULT STDMETHODCALLTYPE set_secType(BSTR pVal/*[in]*/) = 0;
  // [4] property expiry
  virtual HRESULT STDMETHODCALLTYPE get_expiry(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property expiry
  virtual HRESULT STDMETHODCALLTYPE set_expiry(BSTR pVal/*[in]*/) = 0;
  // [5] property strike
  virtual HRESULT STDMETHODCALLTYPE get_strike(double* pVal/*[out,retval]*/) = 0;
  // [5] property strike
  virtual HRESULT STDMETHODCALLTYPE set_strike(double pVal/*[in]*/) = 0;
  // [6] property right
  virtual HRESULT STDMETHODCALLTYPE get_right(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property right
  virtual HRESULT STDMETHODCALLTYPE set_right(BSTR pVal/*[in]*/) = 0;
  // [7] property multiplier
  virtual HRESULT STDMETHODCALLTYPE get_multiplier(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] property multiplier
  virtual HRESULT STDMETHODCALLTYPE set_multiplier(BSTR pVal/*[in]*/) = 0;
  // [8] property exchange
  virtual HRESULT STDMETHODCALLTYPE get_exchange(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] property exchange
  virtual HRESULT STDMETHODCALLTYPE set_exchange(BSTR pVal/*[in]*/) = 0;
  // [9] property primaryExchange
  virtual HRESULT STDMETHODCALLTYPE get_primaryExchange(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] property primaryExchange
  virtual HRESULT STDMETHODCALLTYPE set_primaryExchange(BSTR pVal/*[in]*/) = 0;
  // [10] property currency
  virtual HRESULT STDMETHODCALLTYPE get_currency(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] property currency
  virtual HRESULT STDMETHODCALLTYPE set_currency(BSTR pVal/*[in]*/) = 0;
  // [11] property localSymbol
  virtual HRESULT STDMETHODCALLTYPE get_localSymbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [11] property localSymbol
  virtual HRESULT STDMETHODCALLTYPE set_localSymbol(BSTR pVal/*[in]*/) = 0;
  // [12] property includeExpired
  virtual HRESULT STDMETHODCALLTYPE get_includeExpired(long* pVal/*[out,retval]*/) = 0;
  // [12] property includeExpired
  virtual HRESULT STDMETHODCALLTYPE set_includeExpired(long pVal/*[in]*/) = 0;
  // [13] property comboLegs
  virtual HRESULT STDMETHODCALLTYPE get_comboLegs(LPDISPATCH* pVal/*[out,retval]*/) = 0;
  // [13] property comboLegs
  virtual HRESULT STDMETHODCALLTYPE set_comboLegs(LPDISPATCH pVal/*[in]*/) = 0;
  // [14] property underComp
  virtual HRESULT STDMETHODCALLTYPE get_underComp(LPDISPATCH* pVal/*[out,retval]*/) = 0;
  // [14] property underComp
  virtual HRESULT STDMETHODCALLTYPE set_underComp(LPDISPATCH pVal/*[in]*/) = 0;
  // [15] property comboLegsDescrip
  virtual HRESULT STDMETHODCALLTYPE get_comboLegsDescrip(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_conId(void)
  {
    long pVal;
    OLECHECK(this->get_conId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_secType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_secType((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_expiry(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_expiry((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_strike(void)
  {
    double pVal;
    OLECHECK(this->get_strike((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_right(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_right((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_multiplier(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_multiplier((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_exchange(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_exchange((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_primaryExchange(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_primaryExchange((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_currency(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_currency((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_localSymbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_localSymbol((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_includeExpired(void)
  {
    long pVal;
    OLECHECK(this->get_includeExpired((long*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_comboLegs(void)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_comboLegs((LPDISPATCH*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_underComp(void)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_underComp((LPDISPATCH*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_comboLegsDescrip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_comboLegsDescrip((BSTR*)&pVal));
    return pVal;
  }


  __property   long            conId = {read = get_conId, write = set_conId};
  __property   BSTR            symbol = {read = get_symbol, write = set_symbol};
  __property   BSTR            secType = {read = get_secType, write = set_secType};
  __property   BSTR            expiry = {read = get_expiry, write = set_expiry};
  __property   double          strike = {read = get_strike, write = set_strike};
  __property   BSTR            right = {read = get_right, write = set_right};
  __property   BSTR            multiplier = {read = get_multiplier, write = set_multiplier};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   BSTR            primaryExchange = {read = get_primaryExchange, write = set_primaryExchange};
  __property   BSTR            currency = {read = get_currency, write = set_currency};
  __property   BSTR            localSymbol = {read = get_localSymbol, write = set_localSymbol};
  __property   long            includeExpired = {read = get_includeExpired, write = set_includeExpired};
  __property   LPDISPATCH      comboLegs = {read = get_comboLegs, write = set_comboLegs};
  __property   LPDISPATCH      underComp = {read = get_underComp, write = set_underComp};
  __property   BSTR            comboLegsDescrip = {read = get_comboLegsDescrip};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IContractDetails
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64F03988-ED93-452E-830B-3420DF21BAF9}
// *********************************************************************//
interface IContractDetails  : public IDispatch
{
public:
  // [1] property marketName
  virtual HRESULT STDMETHODCALLTYPE get_marketName(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property tradingClass
  virtual HRESULT STDMETHODCALLTYPE get_tradingClass(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property minTick
  virtual HRESULT STDMETHODCALLTYPE get_minTick(double* pVal/*[out,retval]*/) = 0;
  // [4] property priceMagnifier
  virtual HRESULT STDMETHODCALLTYPE get_priceMagnifier(long* pVal/*[out,retval]*/) = 0;
  // [5] property orderTypes
  virtual HRESULT STDMETHODCALLTYPE get_orderTypes(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property validExchanges
  virtual HRESULT STDMETHODCALLTYPE get_validExchanges(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] property underConId
  virtual HRESULT STDMETHODCALLTYPE get_underConId(long* pVal/*[out,retval]*/) = 0;
  // [8] property longName
  virtual HRESULT STDMETHODCALLTYPE get_longName(BSTR* pVal/*[out,retval]*/) = 0;
  // [10] property summary
  virtual HRESULT STDMETHODCALLTYPE get_summary(LPDISPATCH* pVal/*[out,retval]*/) = 0;
  // [20] property cusip
  virtual HRESULT STDMETHODCALLTYPE get_cusip(BSTR* pVal/*[out,retval]*/) = 0;
  // [21] property ratings
  virtual HRESULT STDMETHODCALLTYPE get_ratings(BSTR* pVal/*[out,retval]*/) = 0;
  // [22] property descAppend
  virtual HRESULT STDMETHODCALLTYPE get_descAppend(BSTR* pVal/*[out,retval]*/) = 0;
  // [23] property bondType
  virtual HRESULT STDMETHODCALLTYPE get_bondType(BSTR* pVal/*[out,retval]*/) = 0;
  // [24] property couponType
  virtual HRESULT STDMETHODCALLTYPE get_couponType(BSTR* pVal/*[out,retval]*/) = 0;
  // [25] property callable
  virtual HRESULT STDMETHODCALLTYPE get_callable(long* pVal/*[out,retval]*/) = 0;
  // [26] property putable
  virtual HRESULT STDMETHODCALLTYPE get_putable(long* pVal/*[out,retval]*/) = 0;
  // [27] property coupon
  virtual HRESULT STDMETHODCALLTYPE get_coupon(double* pVal/*[out,retval]*/) = 0;
  // [28] property convertible
  virtual HRESULT STDMETHODCALLTYPE get_convertible(long* pVal/*[out,retval]*/) = 0;
  // [29] property maturity
  virtual HRESULT STDMETHODCALLTYPE get_maturity(BSTR* pVal/*[out,retval]*/) = 0;
  // [30] property issueDate
  virtual HRESULT STDMETHODCALLTYPE get_issueDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [31] property nextOptionDate
  virtual HRESULT STDMETHODCALLTYPE get_nextOptionDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [32] property nextOptionType
  virtual HRESULT STDMETHODCALLTYPE get_nextOptionType(BSTR* pVal/*[out,retval]*/) = 0;
  // [33] property nextOptionPartial
  virtual HRESULT STDMETHODCALLTYPE get_nextOptionPartial(long* pVal/*[out,retval]*/) = 0;
  // [34] property notes
  virtual HRESULT STDMETHODCALLTYPE get_notes(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_marketName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_marketName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_tradingClass(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_tradingClass((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_minTick(void)
  {
    double pVal;
    OLECHECK(this->get_minTick((double*)&pVal));
    return pVal;
  }

  long __fastcall get_priceMagnifier(void)
  {
    long pVal;
    OLECHECK(this->get_priceMagnifier((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_orderTypes(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_orderTypes((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_validExchanges(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_validExchanges((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_underConId(void)
  {
    long pVal;
    OLECHECK(this->get_underConId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_longName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_longName((BSTR*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_summary(void)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_summary((LPDISPATCH*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_cusip(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_cusip((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ratings(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ratings((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_descAppend(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_descAppend((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_bondType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_bondType((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_couponType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_couponType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_callable(void)
  {
    long pVal;
    OLECHECK(this->get_callable((long*)&pVal));
    return pVal;
  }

  long __fastcall get_putable(void)
  {
    long pVal;
    OLECHECK(this->get_putable((long*)&pVal));
    return pVal;
  }

  double __fastcall get_coupon(void)
  {
    double pVal;
    OLECHECK(this->get_coupon((double*)&pVal));
    return pVal;
  }

  long __fastcall get_convertible(void)
  {
    long pVal;
    OLECHECK(this->get_convertible((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_maturity(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_maturity((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_issueDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_issueDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_nextOptionDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_nextOptionDate((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_nextOptionType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_nextOptionType((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_nextOptionPartial(void)
  {
    long pVal;
    OLECHECK(this->get_nextOptionPartial((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_notes(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_notes((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            marketName = {read = get_marketName};
  __property   BSTR            tradingClass = {read = get_tradingClass};
  __property   double          minTick = {read = get_minTick};
  __property   long            priceMagnifier = {read = get_priceMagnifier};
  __property   BSTR            orderTypes = {read = get_orderTypes};
  __property   BSTR            validExchanges = {read = get_validExchanges};
  __property   long            underConId = {read = get_underConId};
  __property   BSTR            longName = {read = get_longName};
  __property   LPDISPATCH      summary = {read = get_summary};
  __property   BSTR            cusip = {read = get_cusip};
  __property   BSTR            ratings = {read = get_ratings};
  __property   BSTR            descAppend = {read = get_descAppend};
  __property   BSTR            bondType = {read = get_bondType};
  __property   BSTR            couponType = {read = get_couponType};
  __property   long            callable = {read = get_callable};
  __property   long            putable = {read = get_putable};
  __property   double          coupon = {read = get_coupon};
  __property   long            convertible = {read = get_convertible};
  __property   BSTR            maturity = {read = get_maturity};
  __property   BSTR            issueDate = {read = get_issueDate};
  __property   BSTR            nextOptionDate = {read = get_nextOptionDate};
  __property   BSTR            nextOptionType = {read = get_nextOptionType};
  __property   long            nextOptionPartial = {read = get_nextOptionPartial};
  __property   BSTR            notes = {read = get_notes};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITagValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06FF1D3F-F12F-47D1-9443-A74D3CD58723}
// *********************************************************************//
interface ITagValue  : public IDispatch
{
public:
  // [1] property tag
  virtual HRESULT STDMETHODCALLTYPE get_tag(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] property tag
  virtual HRESULT STDMETHODCALLTYPE set_tag(BSTR pVal/*[in]*/) = 0;
  // [2] property value
  virtual HRESULT STDMETHODCALLTYPE get_value(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property value
  virtual HRESULT STDMETHODCALLTYPE set_value(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tag(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_tag((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_value(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_value((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            tag = {read = get_tag, write = set_tag};
  __property   BSTR            value = {read = get_value, write = set_value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITagValueList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CC48E64E-C1A7-4867-8738-578404D75088}
// *********************************************************************//
interface ITagValueList  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AddEmpty(LPDISPATCH* leg/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR tag/*[in]*/, BSTR value/*[in]*/, 
                                        LPDISPATCH* leg/*[out,retval]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN pVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_Item(long index/*[in]*/)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_Item(index, (LPDISPATCH*)&pVal));
    return pVal;
  }

  long __fastcall get_Count(void)
  {
    long pVal;
    OLECHECK(this->get_Count((long*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall AddEmpty(void)
  {
    LPDISPATCH leg;
    OLECHECK(this->AddEmpty((LPDISPATCH*)&leg));
    return leg;
  }

  LPDISPATCH __fastcall Add(BSTR tag/*[in]*/, BSTR value/*[in]*/)
  {
    LPDISPATCH leg;
    OLECHECK(this->Add(tag, value, (LPDISPATCH*)&leg));
    return leg;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {25D97F3D-2C4D-4080-9250-D2FB8071BE58}
// *********************************************************************//
interface IOrder  : public IDispatch
{
public:
  // [1] property orderId
  virtual HRESULT STDMETHODCALLTYPE get_orderId(long* pVal/*[out,retval]*/) = 0;
  // [1] property orderId
  virtual HRESULT STDMETHODCALLTYPE set_orderId(long pVal/*[in]*/) = 0;
  // [2] property clientId
  virtual HRESULT STDMETHODCALLTYPE get_clientId(long* pVal/*[out,retval]*/) = 0;
  // [2] property clientId
  virtual HRESULT STDMETHODCALLTYPE set_clientId(long pVal/*[in]*/) = 0;
  // [3] property permId
  virtual HRESULT STDMETHODCALLTYPE get_permId(long* pVal/*[out,retval]*/) = 0;
  // [3] property permId
  virtual HRESULT STDMETHODCALLTYPE set_permId(long pVal/*[in]*/) = 0;
  // [4] property action
  virtual HRESULT STDMETHODCALLTYPE get_action(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property action
  virtual HRESULT STDMETHODCALLTYPE set_action(BSTR pVal/*[in]*/) = 0;
  // [5] property totalQuantity
  virtual HRESULT STDMETHODCALLTYPE get_totalQuantity(long* pVal/*[out,retval]*/) = 0;
  // [5] property totalQuantity
  virtual HRESULT STDMETHODCALLTYPE set_totalQuantity(long pVal/*[in]*/) = 0;
  // [6] property orderType
  virtual HRESULT STDMETHODCALLTYPE get_orderType(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property orderType
  virtual HRESULT STDMETHODCALLTYPE set_orderType(BSTR pVal/*[in]*/) = 0;
  // [7] property lmtPrice
  virtual HRESULT STDMETHODCALLTYPE get_lmtPrice(double* pVal/*[out,retval]*/) = 0;
  // [7] property lmtPrice
  virtual HRESULT STDMETHODCALLTYPE set_lmtPrice(double pVal/*[in]*/) = 0;
  // [8] property auxPrice
  virtual HRESULT STDMETHODCALLTYPE get_auxPrice(double* pVal/*[out,retval]*/) = 0;
  // [8] property auxPrice
  virtual HRESULT STDMETHODCALLTYPE set_auxPrice(double pVal/*[in]*/) = 0;
  // [20] property timeInForce
  virtual HRESULT STDMETHODCALLTYPE get_timeInForce(BSTR* pVal/*[out,retval]*/) = 0;
  // [20] property timeInForce
  virtual HRESULT STDMETHODCALLTYPE set_timeInForce(BSTR pVal/*[in]*/) = 0;
  // [21] property ocaGroup
  virtual HRESULT STDMETHODCALLTYPE get_ocaGroup(BSTR* pVal/*[out,retval]*/) = 0;
  // [21] property ocaGroup
  virtual HRESULT STDMETHODCALLTYPE set_ocaGroup(BSTR pVal/*[in]*/) = 0;
  // [22] property ocaType
  virtual HRESULT STDMETHODCALLTYPE get_ocaType(long* pVal/*[out,retval]*/) = 0;
  // [22] property ocaType
  virtual HRESULT STDMETHODCALLTYPE set_ocaType(long pVal/*[in]*/) = 0;
  // [23] property orderRef
  virtual HRESULT STDMETHODCALLTYPE get_orderRef(BSTR* pVal/*[out,retval]*/) = 0;
  // [23] property orderRef
  virtual HRESULT STDMETHODCALLTYPE set_orderRef(BSTR pVal/*[in]*/) = 0;
  // [24] property transmit
  virtual HRESULT STDMETHODCALLTYPE get_transmit(long* pVal/*[out,retval]*/) = 0;
  // [24] property transmit
  virtual HRESULT STDMETHODCALLTYPE set_transmit(long pVal/*[in]*/) = 0;
  // [25] property parentId
  virtual HRESULT STDMETHODCALLTYPE get_parentId(long* pVal/*[out,retval]*/) = 0;
  // [25] property parentId
  virtual HRESULT STDMETHODCALLTYPE set_parentId(long pVal/*[in]*/) = 0;
  // [26] property blockOrder
  virtual HRESULT STDMETHODCALLTYPE get_blockOrder(long* pVal/*[out,retval]*/) = 0;
  // [26] property blockOrder
  virtual HRESULT STDMETHODCALLTYPE set_blockOrder(long pVal/*[in]*/) = 0;
  // [27] property sweepToFill
  virtual HRESULT STDMETHODCALLTYPE get_sweepToFill(long* pVal/*[out,retval]*/) = 0;
  // [27] property sweepToFill
  virtual HRESULT STDMETHODCALLTYPE set_sweepToFill(long pVal/*[in]*/) = 0;
  // [28] property displaySize
  virtual HRESULT STDMETHODCALLTYPE get_displaySize(long* pVal/*[out,retval]*/) = 0;
  // [28] property displaySize
  virtual HRESULT STDMETHODCALLTYPE set_displaySize(long pVal/*[in]*/) = 0;
  // [29] property triggerMethod
  virtual HRESULT STDMETHODCALLTYPE get_triggerMethod(long* pVal/*[out,retval]*/) = 0;
  // [29] property triggerMethod
  virtual HRESULT STDMETHODCALLTYPE set_triggerMethod(long pVal/*[in]*/) = 0;
  // [30] property outsideRth
  virtual HRESULT STDMETHODCALLTYPE get_outsideRth(long* pVal/*[out,retval]*/) = 0;
  // [30] property outsideRth
  virtual HRESULT STDMETHODCALLTYPE set_outsideRth(long pVal/*[in]*/) = 0;
  // [31] property hidden
  virtual HRESULT STDMETHODCALLTYPE get_hidden(long* pVal/*[out,retval]*/) = 0;
  // [31] property hidden
  virtual HRESULT STDMETHODCALLTYPE set_hidden(long pVal/*[in]*/) = 0;
  // [32] property goodAfterTime
  virtual HRESULT STDMETHODCALLTYPE get_goodAfterTime(BSTR* pVal/*[out,retval]*/) = 0;
  // [32] property goodAfterTime
  virtual HRESULT STDMETHODCALLTYPE set_goodAfterTime(BSTR pVal/*[in]*/) = 0;
  // [33] property goodTillDate
  virtual HRESULT STDMETHODCALLTYPE get_goodTillDate(BSTR* pVal/*[out,retval]*/) = 0;
  // [33] property goodTillDate
  virtual HRESULT STDMETHODCALLTYPE set_goodTillDate(BSTR pVal/*[in]*/) = 0;
  // [35] property overridePercentageConstraints
  virtual HRESULT STDMETHODCALLTYPE get_overridePercentageConstraints(long* pVal/*[out,retval]*/) = 0;
  // [35] property overridePercentageConstraints
  virtual HRESULT STDMETHODCALLTYPE set_overridePercentageConstraints(long pVal/*[in]*/) = 0;
  // [36] property rule80A
  virtual HRESULT STDMETHODCALLTYPE get_rule80A(BSTR* pVal/*[out,retval]*/) = 0;
  // [36] property rule80A
  virtual HRESULT STDMETHODCALLTYPE set_rule80A(BSTR pVal/*[in]*/) = 0;
  // [37] property allOrNone
  virtual HRESULT STDMETHODCALLTYPE get_allOrNone(long* pVal/*[out,retval]*/) = 0;
  // [37] property allOrNone
  virtual HRESULT STDMETHODCALLTYPE set_allOrNone(long pVal/*[in]*/) = 0;
  // [38] property minQty
  virtual HRESULT STDMETHODCALLTYPE get_minQty(long* pVal/*[out,retval]*/) = 0;
  // [38] property minQty
  virtual HRESULT STDMETHODCALLTYPE set_minQty(long pVal/*[in]*/) = 0;
  // [39] property percentOffset
  virtual HRESULT STDMETHODCALLTYPE get_percentOffset(double* pVal/*[out,retval]*/) = 0;
  // [39] property percentOffset
  virtual HRESULT STDMETHODCALLTYPE set_percentOffset(double pVal/*[in]*/) = 0;
  // [40] property trailStopPrice
  virtual HRESULT STDMETHODCALLTYPE get_trailStopPrice(double* pVal/*[out,retval]*/) = 0;
  // [40] property trailStopPrice
  virtual HRESULT STDMETHODCALLTYPE set_trailStopPrice(double pVal/*[in]*/) = 0;
  // [41] property whatIf
  virtual HRESULT STDMETHODCALLTYPE get_whatIf(long* pVal/*[out,retval]*/) = 0;
  // [41] property whatIf
  virtual HRESULT STDMETHODCALLTYPE set_whatIf(long pVal/*[in]*/) = 0;
  // [42] property notHeld
  virtual HRESULT STDMETHODCALLTYPE get_notHeld(long* pVal/*[out,retval]*/) = 0;
  // [42] property notHeld
  virtual HRESULT STDMETHODCALLTYPE set_notHeld(long pVal/*[in]*/) = 0;
  // [60] property faGroup
  virtual HRESULT STDMETHODCALLTYPE get_faGroup(BSTR* pVal/*[out,retval]*/) = 0;
  // [60] property faGroup
  virtual HRESULT STDMETHODCALLTYPE set_faGroup(BSTR pVal/*[in]*/) = 0;
  // [61] property faProfile
  virtual HRESULT STDMETHODCALLTYPE get_faProfile(BSTR* pVal/*[out,retval]*/) = 0;
  // [61] property faProfile
  virtual HRESULT STDMETHODCALLTYPE set_faProfile(BSTR pVal/*[in]*/) = 0;
  // [62] property faMethod
  virtual HRESULT STDMETHODCALLTYPE get_faMethod(BSTR* pVal/*[out,retval]*/) = 0;
  // [62] property faMethod
  virtual HRESULT STDMETHODCALLTYPE set_faMethod(BSTR pVal/*[in]*/) = 0;
  // [63] property faPercentage
  virtual HRESULT STDMETHODCALLTYPE get_faPercentage(BSTR* pVal/*[out,retval]*/) = 0;
  // [63] property faPercentage
  virtual HRESULT STDMETHODCALLTYPE set_faPercentage(BSTR pVal/*[in]*/) = 0;
  // [72] property openClose
  virtual HRESULT STDMETHODCALLTYPE get_openClose(BSTR* pVal/*[out,retval]*/) = 0;
  // [72] property openClose
  virtual HRESULT STDMETHODCALLTYPE set_openClose(BSTR pVal/*[in]*/) = 0;
  // [73] property origin
  virtual HRESULT STDMETHODCALLTYPE get_origin(long* pVal/*[out,retval]*/) = 0;
  // [73] property origin
  virtual HRESULT STDMETHODCALLTYPE set_origin(long pVal/*[in]*/) = 0;
  // [74] property shortSaleSlot
  virtual HRESULT STDMETHODCALLTYPE get_shortSaleSlot(long* pVal/*[out,retval]*/) = 0;
  // [74] property shortSaleSlot
  virtual HRESULT STDMETHODCALLTYPE set_shortSaleSlot(long pVal/*[in]*/) = 0;
  // [75] property designatedLocation
  virtual HRESULT STDMETHODCALLTYPE get_designatedLocation(BSTR* pVal/*[out,retval]*/) = 0;
  // [75] property designatedLocation
  virtual HRESULT STDMETHODCALLTYPE set_designatedLocation(BSTR pVal/*[in]*/) = 0;
  // [80] property discretionaryAmt
  virtual HRESULT STDMETHODCALLTYPE get_discretionaryAmt(double* pVal/*[out,retval]*/) = 0;
  // [80] property discretionaryAmt
  virtual HRESULT STDMETHODCALLTYPE set_discretionaryAmt(double pVal/*[in]*/) = 0;
  // [81] property eTradeOnly
  virtual HRESULT STDMETHODCALLTYPE get_eTradeOnly(long* pVal/*[out,retval]*/) = 0;
  // [81] property eTradeOnly
  virtual HRESULT STDMETHODCALLTYPE set_eTradeOnly(long pVal/*[in]*/) = 0;
  // [82] property firmQuoteOnly
  virtual HRESULT STDMETHODCALLTYPE get_firmQuoteOnly(long* pVal/*[out,retval]*/) = 0;
  // [82] property firmQuoteOnly
  virtual HRESULT STDMETHODCALLTYPE set_firmQuoteOnly(long pVal/*[in]*/) = 0;
  // [83] property nbboPriceCap
  virtual HRESULT STDMETHODCALLTYPE get_nbboPriceCap(double* pVal/*[out,retval]*/) = 0;
  // [83] property nbboPriceCap
  virtual HRESULT STDMETHODCALLTYPE set_nbboPriceCap(double pVal/*[in]*/) = 0;
  // [90] property auctionStrategy
  virtual HRESULT STDMETHODCALLTYPE get_auctionStrategy(long* pVal/*[out,retval]*/) = 0;
  // [90] property auctionStrategy
  virtual HRESULT STDMETHODCALLTYPE set_auctionStrategy(long pVal/*[in]*/) = 0;
  // [91] property startingPrice
  virtual HRESULT STDMETHODCALLTYPE get_startingPrice(double* pVal/*[out,retval]*/) = 0;
  // [91] property startingPrice
  virtual HRESULT STDMETHODCALLTYPE set_startingPrice(double pVal/*[in]*/) = 0;
  // [92] property stockRefPrice
  virtual HRESULT STDMETHODCALLTYPE get_stockRefPrice(double* pVal/*[out,retval]*/) = 0;
  // [92] property stockRefPrice
  virtual HRESULT STDMETHODCALLTYPE set_stockRefPrice(double pVal/*[in]*/) = 0;
  // [93] property delta
  virtual HRESULT STDMETHODCALLTYPE get_delta(double* pVal/*[out,retval]*/) = 0;
  // [93] property delta
  virtual HRESULT STDMETHODCALLTYPE set_delta(double pVal/*[in]*/) = 0;
  // [94] property stockRangeLower
  virtual HRESULT STDMETHODCALLTYPE get_stockRangeLower(double* pVal/*[out,retval]*/) = 0;
  // [94] property stockRangeLower
  virtual HRESULT STDMETHODCALLTYPE set_stockRangeLower(double pVal/*[in]*/) = 0;
  // [95] property stockRangeUpper
  virtual HRESULT STDMETHODCALLTYPE get_stockRangeUpper(double* pVal/*[out,retval]*/) = 0;
  // [95] property stockRangeUpper
  virtual HRESULT STDMETHODCALLTYPE set_stockRangeUpper(double pVal/*[in]*/) = 0;
  // [96] property volatility
  virtual HRESULT STDMETHODCALLTYPE get_volatility(double* pVal/*[out,retval]*/) = 0;
  // [96] property volatility
  virtual HRESULT STDMETHODCALLTYPE set_volatility(double pVal/*[in]*/) = 0;
  // [97] property volatilityType
  virtual HRESULT STDMETHODCALLTYPE get_volatilityType(long* pVal/*[out,retval]*/) = 0;
  // [97] property volatilityType
  virtual HRESULT STDMETHODCALLTYPE set_volatilityType(long pVal/*[in]*/) = 0;
  // [98] property continuousUpdate
  virtual HRESULT STDMETHODCALLTYPE get_continuousUpdate(long* pVal/*[out,retval]*/) = 0;
  // [98] property continuousUpdate
  virtual HRESULT STDMETHODCALLTYPE set_continuousUpdate(long pVal/*[in]*/) = 0;
  // [99] property referencePriceType
  virtual HRESULT STDMETHODCALLTYPE get_referencePriceType(long* pVal/*[out,retval]*/) = 0;
  // [99] property referencePriceType
  virtual HRESULT STDMETHODCALLTYPE set_referencePriceType(long pVal/*[in]*/) = 0;
  // [100] property deltaNeutralOrderType
  virtual HRESULT STDMETHODCALLTYPE get_deltaNeutralOrderType(BSTR* pVal/*[out,retval]*/) = 0;
  // [100] property deltaNeutralOrderType
  virtual HRESULT STDMETHODCALLTYPE set_deltaNeutralOrderType(BSTR pVal/*[in]*/) = 0;
  // [101] property deltaNeutralAuxPrice
  virtual HRESULT STDMETHODCALLTYPE get_deltaNeutralAuxPrice(double* pVal/*[out,retval]*/) = 0;
  // [101] property deltaNeutralAuxPrice
  virtual HRESULT STDMETHODCALLTYPE set_deltaNeutralAuxPrice(double pVal/*[in]*/) = 0;
  // [102] property basisPoints
  virtual HRESULT STDMETHODCALLTYPE get_basisPoints(double* pVal/*[out,retval]*/) = 0;
  // [102] property basisPoints
  virtual HRESULT STDMETHODCALLTYPE set_basisPoints(double pVal/*[in]*/) = 0;
  // [103] property basisPointsType
  virtual HRESULT STDMETHODCALLTYPE get_basisPointsType(long* pVal/*[out,retval]*/) = 0;
  // [103] property basisPointsType
  virtual HRESULT STDMETHODCALLTYPE set_basisPointsType(long pVal/*[in]*/) = 0;
  // [104] property scaleInitLevelSize
  virtual HRESULT STDMETHODCALLTYPE get_scaleInitLevelSize(long* pVal/*[out,retval]*/) = 0;
  // [104] property scaleInitLevelSize
  virtual HRESULT STDMETHODCALLTYPE set_scaleInitLevelSize(long pVal/*[in]*/) = 0;
  // [105] property scaleSubsLevelSize
  virtual HRESULT STDMETHODCALLTYPE get_scaleSubsLevelSize(long* pVal/*[out,retval]*/) = 0;
  // [105] property scaleSubsLevelSize
  virtual HRESULT STDMETHODCALLTYPE set_scaleSubsLevelSize(long pVal/*[in]*/) = 0;
  // [106] property scalePriceIncrement
  virtual HRESULT STDMETHODCALLTYPE get_scalePriceIncrement(double* pVal/*[out,retval]*/) = 0;
  // [106] property scalePriceIncrement
  virtual HRESULT STDMETHODCALLTYPE set_scalePriceIncrement(double pVal/*[in]*/) = 0;
  // [110] property account
  virtual HRESULT STDMETHODCALLTYPE get_account(BSTR* pVal/*[out,retval]*/) = 0;
  // [110] property account
  virtual HRESULT STDMETHODCALLTYPE set_account(BSTR pVal/*[in]*/) = 0;
  // [111] property settlingFirm
  virtual HRESULT STDMETHODCALLTYPE get_settlingFirm(BSTR* pVal/*[out,retval]*/) = 0;
  // [111] property settlingFirm
  virtual HRESULT STDMETHODCALLTYPE set_settlingFirm(BSTR pVal/*[in]*/) = 0;
  // [112] property clearingAccount
  virtual HRESULT STDMETHODCALLTYPE get_clearingAccount(BSTR* pVal/*[out,retval]*/) = 0;
  // [112] property clearingAccount
  virtual HRESULT STDMETHODCALLTYPE set_clearingAccount(BSTR pVal/*[in]*/) = 0;
  // [113] property clearingIntent
  virtual HRESULT STDMETHODCALLTYPE get_clearingIntent(BSTR* pVal/*[out,retval]*/) = 0;
  // [113] property clearingIntent
  virtual HRESULT STDMETHODCALLTYPE set_clearingIntent(BSTR pVal/*[in]*/) = 0;
  // [120] property algoStrategy
  virtual HRESULT STDMETHODCALLTYPE get_algoStrategy(BSTR* pVal/*[out,retval]*/) = 0;
  // [120] property algoStrategy
  virtual HRESULT STDMETHODCALLTYPE set_algoStrategy(BSTR pVal/*[in]*/) = 0;
  // [121] property algoParams
  virtual HRESULT STDMETHODCALLTYPE get_algoParams(LPDISPATCH* pVal/*[out,retval]*/) = 0;
  // [121] property algoParams
  virtual HRESULT STDMETHODCALLTYPE set_algoParams(LPDISPATCH pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_orderId(void)
  {
    long pVal;
    OLECHECK(this->get_orderId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_clientId(void)
  {
    long pVal;
    OLECHECK(this->get_clientId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_permId(void)
  {
    long pVal;
    OLECHECK(this->get_permId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_action(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_action((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_totalQuantity(void)
  {
    long pVal;
    OLECHECK(this->get_totalQuantity((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_orderType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_orderType((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_lmtPrice(void)
  {
    double pVal;
    OLECHECK(this->get_lmtPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_auxPrice(void)
  {
    double pVal;
    OLECHECK(this->get_auxPrice((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_timeInForce(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_timeInForce((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ocaGroup(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ocaGroup((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_ocaType(void)
  {
    long pVal;
    OLECHECK(this->get_ocaType((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_orderRef(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_orderRef((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_transmit(void)
  {
    long pVal;
    OLECHECK(this->get_transmit((long*)&pVal));
    return pVal;
  }

  long __fastcall get_parentId(void)
  {
    long pVal;
    OLECHECK(this->get_parentId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_blockOrder(void)
  {
    long pVal;
    OLECHECK(this->get_blockOrder((long*)&pVal));
    return pVal;
  }

  long __fastcall get_sweepToFill(void)
  {
    long pVal;
    OLECHECK(this->get_sweepToFill((long*)&pVal));
    return pVal;
  }

  long __fastcall get_displaySize(void)
  {
    long pVal;
    OLECHECK(this->get_displaySize((long*)&pVal));
    return pVal;
  }

  long __fastcall get_triggerMethod(void)
  {
    long pVal;
    OLECHECK(this->get_triggerMethod((long*)&pVal));
    return pVal;
  }

  long __fastcall get_outsideRth(void)
  {
    long pVal;
    OLECHECK(this->get_outsideRth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_hidden(void)
  {
    long pVal;
    OLECHECK(this->get_hidden((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_goodAfterTime(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_goodAfterTime((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_goodTillDate(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_goodTillDate((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_overridePercentageConstraints(void)
  {
    long pVal;
    OLECHECK(this->get_overridePercentageConstraints((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_rule80A(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_rule80A((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_allOrNone(void)
  {
    long pVal;
    OLECHECK(this->get_allOrNone((long*)&pVal));
    return pVal;
  }

  long __fastcall get_minQty(void)
  {
    long pVal;
    OLECHECK(this->get_minQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_percentOffset(void)
  {
    double pVal;
    OLECHECK(this->get_percentOffset((double*)&pVal));
    return pVal;
  }

  double __fastcall get_trailStopPrice(void)
  {
    double pVal;
    OLECHECK(this->get_trailStopPrice((double*)&pVal));
    return pVal;
  }

  long __fastcall get_whatIf(void)
  {
    long pVal;
    OLECHECK(this->get_whatIf((long*)&pVal));
    return pVal;
  }

  long __fastcall get_notHeld(void)
  {
    long pVal;
    OLECHECK(this->get_notHeld((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_faGroup(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_faGroup((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_faProfile(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_faProfile((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_faMethod(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_faMethod((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_faPercentage(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_faPercentage((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_openClose(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_openClose((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_origin(void)
  {
    long pVal;
    OLECHECK(this->get_origin((long*)&pVal));
    return pVal;
  }

  long __fastcall get_shortSaleSlot(void)
  {
    long pVal;
    OLECHECK(this->get_shortSaleSlot((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_designatedLocation(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_designatedLocation((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_discretionaryAmt(void)
  {
    double pVal;
    OLECHECK(this->get_discretionaryAmt((double*)&pVal));
    return pVal;
  }

  long __fastcall get_eTradeOnly(void)
  {
    long pVal;
    OLECHECK(this->get_eTradeOnly((long*)&pVal));
    return pVal;
  }

  long __fastcall get_firmQuoteOnly(void)
  {
    long pVal;
    OLECHECK(this->get_firmQuoteOnly((long*)&pVal));
    return pVal;
  }

  double __fastcall get_nbboPriceCap(void)
  {
    double pVal;
    OLECHECK(this->get_nbboPriceCap((double*)&pVal));
    return pVal;
  }

  long __fastcall get_auctionStrategy(void)
  {
    long pVal;
    OLECHECK(this->get_auctionStrategy((long*)&pVal));
    return pVal;
  }

  double __fastcall get_startingPrice(void)
  {
    double pVal;
    OLECHECK(this->get_startingPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_stockRefPrice(void)
  {
    double pVal;
    OLECHECK(this->get_stockRefPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_delta(void)
  {
    double pVal;
    OLECHECK(this->get_delta((double*)&pVal));
    return pVal;
  }

  double __fastcall get_stockRangeLower(void)
  {
    double pVal;
    OLECHECK(this->get_stockRangeLower((double*)&pVal));
    return pVal;
  }

  double __fastcall get_stockRangeUpper(void)
  {
    double pVal;
    OLECHECK(this->get_stockRangeUpper((double*)&pVal));
    return pVal;
  }

  double __fastcall get_volatility(void)
  {
    double pVal;
    OLECHECK(this->get_volatility((double*)&pVal));
    return pVal;
  }

  long __fastcall get_volatilityType(void)
  {
    long pVal;
    OLECHECK(this->get_volatilityType((long*)&pVal));
    return pVal;
  }

  long __fastcall get_continuousUpdate(void)
  {
    long pVal;
    OLECHECK(this->get_continuousUpdate((long*)&pVal));
    return pVal;
  }

  long __fastcall get_referencePriceType(void)
  {
    long pVal;
    OLECHECK(this->get_referencePriceType((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_deltaNeutralOrderType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_deltaNeutralOrderType((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_deltaNeutralAuxPrice(void)
  {
    double pVal;
    OLECHECK(this->get_deltaNeutralAuxPrice((double*)&pVal));
    return pVal;
  }

  double __fastcall get_basisPoints(void)
  {
    double pVal;
    OLECHECK(this->get_basisPoints((double*)&pVal));
    return pVal;
  }

  long __fastcall get_basisPointsType(void)
  {
    long pVal;
    OLECHECK(this->get_basisPointsType((long*)&pVal));
    return pVal;
  }

  long __fastcall get_scaleInitLevelSize(void)
  {
    long pVal;
    OLECHECK(this->get_scaleInitLevelSize((long*)&pVal));
    return pVal;
  }

  long __fastcall get_scaleSubsLevelSize(void)
  {
    long pVal;
    OLECHECK(this->get_scaleSubsLevelSize((long*)&pVal));
    return pVal;
  }

  double __fastcall get_scalePriceIncrement(void)
  {
    double pVal;
    OLECHECK(this->get_scalePriceIncrement((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_account(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_account((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_settlingFirm(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_settlingFirm((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_clearingAccount(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_clearingAccount((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_clearingIntent(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_clearingIntent((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_algoStrategy(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_algoStrategy((BSTR*)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_algoParams(void)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_algoParams((LPDISPATCH*)&pVal));
    return pVal;
  }


  __property   long            orderId = {read = get_orderId, write = set_orderId};
  __property   long            clientId = {read = get_clientId, write = set_clientId};
  __property   long            permId = {read = get_permId, write = set_permId};
  __property   BSTR            action = {read = get_action, write = set_action};
  __property   long            totalQuantity = {read = get_totalQuantity, write = set_totalQuantity};
  __property   BSTR            orderType = {read = get_orderType, write = set_orderType};
  __property   double          lmtPrice = {read = get_lmtPrice, write = set_lmtPrice};
  __property   double          auxPrice = {read = get_auxPrice, write = set_auxPrice};
  __property   BSTR            timeInForce = {read = get_timeInForce, write = set_timeInForce};
  __property   BSTR            ocaGroup = {read = get_ocaGroup, write = set_ocaGroup};
  __property   long            ocaType = {read = get_ocaType, write = set_ocaType};
  __property   BSTR            orderRef = {read = get_orderRef, write = set_orderRef};
  __property   long            transmit = {read = get_transmit, write = set_transmit};
  __property   long            parentId = {read = get_parentId, write = set_parentId};
  __property   long            blockOrder = {read = get_blockOrder, write = set_blockOrder};
  __property   long            sweepToFill = {read = get_sweepToFill, write = set_sweepToFill};
  __property   long            displaySize = {read = get_displaySize, write = set_displaySize};
  __property   long            triggerMethod = {read = get_triggerMethod, write = set_triggerMethod};
  __property   long            outsideRth = {read = get_outsideRth, write = set_outsideRth};
  __property   long            hidden = {read = get_hidden, write = set_hidden};
  __property   BSTR            goodAfterTime = {read = get_goodAfterTime, write = set_goodAfterTime};
  __property   BSTR            goodTillDate = {read = get_goodTillDate, write = set_goodTillDate};
  __property   long            overridePercentageConstraints = {read = get_overridePercentageConstraints, write = set_overridePercentageConstraints};
  __property   BSTR            rule80A = {read = get_rule80A, write = set_rule80A};
  __property   long            allOrNone = {read = get_allOrNone, write = set_allOrNone};
  __property   long            minQty = {read = get_minQty, write = set_minQty};
  __property   double          percentOffset = {read = get_percentOffset, write = set_percentOffset};
  __property   double          trailStopPrice = {read = get_trailStopPrice, write = set_trailStopPrice};
  __property   long            whatIf = {read = get_whatIf, write = set_whatIf};
  __property   long            notHeld = {read = get_notHeld, write = set_notHeld};
  __property   BSTR            faGroup = {read = get_faGroup, write = set_faGroup};
  __property   BSTR            faProfile = {read = get_faProfile, write = set_faProfile};
  __property   BSTR            faMethod = {read = get_faMethod, write = set_faMethod};
  __property   BSTR            faPercentage = {read = get_faPercentage, write = set_faPercentage};
  __property   BSTR            openClose = {read = get_openClose, write = set_openClose};
  __property   long            origin = {read = get_origin, write = set_origin};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};
  __property   double          discretionaryAmt = {read = get_discretionaryAmt, write = set_discretionaryAmt};
  __property   long            eTradeOnly = {read = get_eTradeOnly, write = set_eTradeOnly};
  __property   long            firmQuoteOnly = {read = get_firmQuoteOnly, write = set_firmQuoteOnly};
  __property   double          nbboPriceCap = {read = get_nbboPriceCap, write = set_nbboPriceCap};
  __property   long            auctionStrategy = {read = get_auctionStrategy, write = set_auctionStrategy};
  __property   double          startingPrice = {read = get_startingPrice, write = set_startingPrice};
  __property   double          stockRefPrice = {read = get_stockRefPrice, write = set_stockRefPrice};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          stockRangeLower = {read = get_stockRangeLower, write = set_stockRangeLower};
  __property   double          stockRangeUpper = {read = get_stockRangeUpper, write = set_stockRangeUpper};
  __property   double          volatility = {read = get_volatility, write = set_volatility};
  __property   long            volatilityType = {read = get_volatilityType, write = set_volatilityType};
  __property   long            continuousUpdate = {read = get_continuousUpdate, write = set_continuousUpdate};
  __property   long            referencePriceType = {read = get_referencePriceType, write = set_referencePriceType};
  __property   BSTR            deltaNeutralOrderType = {read = get_deltaNeutralOrderType, write = set_deltaNeutralOrderType};
  __property   double          deltaNeutralAuxPrice = {read = get_deltaNeutralAuxPrice, write = set_deltaNeutralAuxPrice};
  __property   double          basisPoints = {read = get_basisPoints, write = set_basisPoints};
  __property   long            basisPointsType = {read = get_basisPointsType, write = set_basisPointsType};
  __property   long            scaleInitLevelSize = {read = get_scaleInitLevelSize, write = set_scaleInitLevelSize};
  __property   long            scaleSubsLevelSize = {read = get_scaleSubsLevelSize, write = set_scaleSubsLevelSize};
  __property   double          scalePriceIncrement = {read = get_scalePriceIncrement, write = set_scalePriceIncrement};
  __property   BSTR            account = {read = get_account, write = set_account};
  __property   BSTR            settlingFirm = {read = get_settlingFirm, write = set_settlingFirm};
  __property   BSTR            clearingAccount = {read = get_clearingAccount, write = set_clearingAccount};
  __property   BSTR            clearingIntent = {read = get_clearingIntent, write = set_clearingIntent};
  __property   BSTR            algoStrategy = {read = get_algoStrategy, write = set_algoStrategy};
  __property   LPDISPATCH      algoParams = {read = get_algoParams, write = set_algoParams};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IOrderState
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B33AE1F-99B0-4BCB-A024-42335897A6AF}
// *********************************************************************//
interface IOrderState  : public IDispatch
{
public:
  // [1] property status
  virtual HRESULT STDMETHODCALLTYPE get_status(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property initMargin
  virtual HRESULT STDMETHODCALLTYPE get_initMargin(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property maintMargin
  virtual HRESULT STDMETHODCALLTYPE get_maintMargin(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property equityWithLoan
  virtual HRESULT STDMETHODCALLTYPE get_equityWithLoan(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] property commission
  virtual HRESULT STDMETHODCALLTYPE get_commission(double* pVal/*[out,retval]*/) = 0;
  // [6] property minCommission
  virtual HRESULT STDMETHODCALLTYPE get_minCommission(double* pVal/*[out,retval]*/) = 0;
  // [7] property maxCommission
  virtual HRESULT STDMETHODCALLTYPE get_maxCommission(double* pVal/*[out,retval]*/) = 0;
  // [8] property commissionCurrency
  virtual HRESULT STDMETHODCALLTYPE get_commissionCurrency(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] property warningText
  virtual HRESULT STDMETHODCALLTYPE get_warningText(BSTR* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_status(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_status((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_initMargin(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_initMargin((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_maintMargin(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_maintMargin((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_equityWithLoan(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_equityWithLoan((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_commission(void)
  {
    double pVal;
    OLECHECK(this->get_commission((double*)&pVal));
    return pVal;
  }

  double __fastcall get_minCommission(void)
  {
    double pVal;
    OLECHECK(this->get_minCommission((double*)&pVal));
    return pVal;
  }

  double __fastcall get_maxCommission(void)
  {
    double pVal;
    OLECHECK(this->get_maxCommission((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_commissionCurrency(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_commissionCurrency((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_warningText(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_warningText((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            status = {read = get_status};
  __property   BSTR            initMargin = {read = get_initMargin};
  __property   BSTR            maintMargin = {read = get_maintMargin};
  __property   BSTR            equityWithLoan = {read = get_equityWithLoan};
  __property   double          commission = {read = get_commission};
  __property   double          minCommission = {read = get_minCommission};
  __property   double          maxCommission = {read = get_maxCommission};
  __property   BSTR            commissionCurrency = {read = get_commissionCurrency};
  __property   BSTR            warningText = {read = get_warningText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExecution
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {58BDEC36-791C-4E2E-88A4-6E4339392B5B}
// *********************************************************************//
interface IExecution  : public IDispatch
{
public:
  // [1] property execId
  virtual HRESULT STDMETHODCALLTYPE get_execId(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property orderId
  virtual HRESULT STDMETHODCALLTYPE get_orderId(long* pVal/*[out,retval]*/) = 0;
  // [3] property clientId
  virtual HRESULT STDMETHODCALLTYPE get_clientId(long* pVal/*[out,retval]*/) = 0;
  // [4] property permId
  virtual HRESULT STDMETHODCALLTYPE get_permId(long* pVal/*[out,retval]*/) = 0;
  // [5] property time
  virtual HRESULT STDMETHODCALLTYPE get_time(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property acctNumber
  virtual HRESULT STDMETHODCALLTYPE get_acctNumber(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] property exchange
  virtual HRESULT STDMETHODCALLTYPE get_exchange(BSTR* pVal/*[out,retval]*/) = 0;
  // [8] property side
  virtual HRESULT STDMETHODCALLTYPE get_side(BSTR* pVal/*[out,retval]*/) = 0;
  // [9] property shares
  virtual HRESULT STDMETHODCALLTYPE get_shares(long* pVal/*[out,retval]*/) = 0;
  // [10] property price
  virtual HRESULT STDMETHODCALLTYPE get_price(double* pVal/*[out,retval]*/) = 0;
  // [11] property liquidation
  virtual HRESULT STDMETHODCALLTYPE get_liquidation(long* pVal/*[out,retval]*/) = 0;
  // [12] property cumQty
  virtual HRESULT STDMETHODCALLTYPE get_cumQty(long* pVal/*[out,retval]*/) = 0;
  // [13] property avgPrice
  virtual HRESULT STDMETHODCALLTYPE get_avgPrice(double* pVal/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_execId(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_execId((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_orderId(void)
  {
    long pVal;
    OLECHECK(this->get_orderId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_clientId(void)
  {
    long pVal;
    OLECHECK(this->get_clientId((long*)&pVal));
    return pVal;
  }

  long __fastcall get_permId(void)
  {
    long pVal;
    OLECHECK(this->get_permId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_time(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_time((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_acctNumber(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_acctNumber((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_exchange(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_exchange((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_side(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_side((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_shares(void)
  {
    long pVal;
    OLECHECK(this->get_shares((long*)&pVal));
    return pVal;
  }

  double __fastcall get_price(void)
  {
    double pVal;
    OLECHECK(this->get_price((double*)&pVal));
    return pVal;
  }

  long __fastcall get_liquidation(void)
  {
    long pVal;
    OLECHECK(this->get_liquidation((long*)&pVal));
    return pVal;
  }

  long __fastcall get_cumQty(void)
  {
    long pVal;
    OLECHECK(this->get_cumQty((long*)&pVal));
    return pVal;
  }

  double __fastcall get_avgPrice(void)
  {
    double pVal;
    OLECHECK(this->get_avgPrice((double*)&pVal));
    return pVal;
  }


  __property   BSTR            execId = {read = get_execId};
  __property   long            orderId = {read = get_orderId};
  __property   long            clientId = {read = get_clientId};
  __property   long            permId = {read = get_permId};
  __property   BSTR            time = {read = get_time};
  __property   BSTR            acctNumber = {read = get_acctNumber};
  __property   BSTR            exchange = {read = get_exchange};
  __property   BSTR            side = {read = get_side};
  __property   long            shares = {read = get_shares};
  __property   double          price = {read = get_price};
  __property   long            liquidation = {read = get_liquidation};
  __property   long            cumQty = {read = get_cumQty};
  __property   double          avgPrice = {read = get_avgPrice};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExecutionFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3553EA07-F281-433D-B2A4-4CB722A9859B}
// *********************************************************************//
interface IExecutionFilter  : public IDispatch
{
public:
  // [1] property clientId
  virtual HRESULT STDMETHODCALLTYPE get_clientId(long* pVal/*[out,retval]*/) = 0;
  // [1] property clientId
  virtual HRESULT STDMETHODCALLTYPE set_clientId(long pVal/*[in]*/) = 0;
  // [2] property acctCode
  virtual HRESULT STDMETHODCALLTYPE get_acctCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property acctCode
  virtual HRESULT STDMETHODCALLTYPE set_acctCode(BSTR pVal/*[in]*/) = 0;
  // [3] property time
  virtual HRESULT STDMETHODCALLTYPE get_time(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property time
  virtual HRESULT STDMETHODCALLTYPE set_time(BSTR pVal/*[in]*/) = 0;
  // [4] property symbol
  virtual HRESULT STDMETHODCALLTYPE get_symbol(BSTR* pVal/*[out,retval]*/) = 0;
  // [4] property symbol
  virtual HRESULT STDMETHODCALLTYPE set_symbol(BSTR pVal/*[in]*/) = 0;
  // [5] property secType
  virtual HRESULT STDMETHODCALLTYPE get_secType(BSTR* pVal/*[out,retval]*/) = 0;
  // [5] property secType
  virtual HRESULT STDMETHODCALLTYPE set_secType(BSTR pVal/*[in]*/) = 0;
  // [6] property exchange
  virtual HRESULT STDMETHODCALLTYPE get_exchange(BSTR* pVal/*[out,retval]*/) = 0;
  // [6] property exchange
  virtual HRESULT STDMETHODCALLTYPE set_exchange(BSTR pVal/*[in]*/) = 0;
  // [7] property side
  virtual HRESULT STDMETHODCALLTYPE get_side(BSTR* pVal/*[out,retval]*/) = 0;
  // [7] property side
  virtual HRESULT STDMETHODCALLTYPE set_side(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_clientId(void)
  {
    long pVal;
    OLECHECK(this->get_clientId((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_acctCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_acctCode((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_time(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_time((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_symbol(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_symbol((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_secType(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_secType((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_exchange(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_exchange((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_side(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_side((BSTR*)&pVal));
    return pVal;
  }


  __property   long            clientId = {read = get_clientId, write = set_clientId};
  __property   BSTR            acctCode = {read = get_acctCode, write = set_acctCode};
  __property   BSTR            time = {read = get_time, write = set_time};
  __property   BSTR            symbol = {read = get_symbol, write = set_symbol};
  __property   BSTR            secType = {read = get_secType, write = set_secType};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   BSTR            side = {read = get_side, write = set_side};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IScannerSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6BBE7E50-795D-4C45-A69E-E1EEB7918DD2}
// *********************************************************************//
interface IScannerSubscription  : public IDispatch
{
public:
  // [1] property instrument
  virtual HRESULT STDMETHODCALLTYPE get_instrument(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] property instrument
  virtual HRESULT STDMETHODCALLTYPE set_instrument(BSTR pVal/*[in]*/) = 0;
  // [2] property locations
  virtual HRESULT STDMETHODCALLTYPE get_locations(BSTR* pVal/*[out,retval]*/) = 0;
  // [2] property locations
  virtual HRESULT STDMETHODCALLTYPE set_locations(BSTR pVal/*[in]*/) = 0;
  // [3] property scanCode
  virtual HRESULT STDMETHODCALLTYPE get_scanCode(BSTR* pVal/*[out,retval]*/) = 0;
  // [3] property scanCode
  virtual HRESULT STDMETHODCALLTYPE set_scanCode(BSTR pVal/*[in]*/) = 0;
  // [4] property numberOfRows
  virtual HRESULT STDMETHODCALLTYPE get_numberOfRows(long* pVal/*[out,retval]*/) = 0;
  // [4] property numberOfRows
  virtual HRESULT STDMETHODCALLTYPE set_numberOfRows(long pVal/*[in]*/) = 0;
  // [100] property priceAbove
  virtual HRESULT STDMETHODCALLTYPE get_priceAbove(double* pVal/*[out,retval]*/) = 0;
  // [100] property priceAbove
  virtual HRESULT STDMETHODCALLTYPE set_priceAbove(double pVal/*[in]*/) = 0;
  // [101] property priceBelow
  virtual HRESULT STDMETHODCALLTYPE get_priceBelow(double* pVal/*[out,retval]*/) = 0;
  // [101] property priceBelow
  virtual HRESULT STDMETHODCALLTYPE set_priceBelow(double pVal/*[in]*/) = 0;
  // [102] property volumeAbove
  virtual HRESULT STDMETHODCALLTYPE get_volumeAbove(long* pVal/*[out,retval]*/) = 0;
  // [102] property volumeAbove
  virtual HRESULT STDMETHODCALLTYPE set_volumeAbove(long pVal/*[in]*/) = 0;
  // [103] property averageOptionVolumeAbove
  virtual HRESULT STDMETHODCALLTYPE get_averageOptionVolumeAbove(long* pVal/*[out,retval]*/) = 0;
  // [103] property averageOptionVolumeAbove
  virtual HRESULT STDMETHODCALLTYPE set_averageOptionVolumeAbove(long pVal/*[in]*/) = 0;
  // [104] property marketCapAbove
  virtual HRESULT STDMETHODCALLTYPE get_marketCapAbove(double* pVal/*[out,retval]*/) = 0;
  // [104] property marketCapAbove
  virtual HRESULT STDMETHODCALLTYPE set_marketCapAbove(double pVal/*[in]*/) = 0;
  // [105] property marketCapBelow
  virtual HRESULT STDMETHODCALLTYPE get_marketCapBelow(double* pVal/*[out,retval]*/) = 0;
  // [105] property marketCapBelow
  virtual HRESULT STDMETHODCALLTYPE set_marketCapBelow(double pVal/*[in]*/) = 0;
  // [106] property moodyRatingAbove
  virtual HRESULT STDMETHODCALLTYPE get_moodyRatingAbove(BSTR* pVal/*[out,retval]*/) = 0;
  // [106] property moodyRatingAbove
  virtual HRESULT STDMETHODCALLTYPE set_moodyRatingAbove(BSTR pVal/*[in]*/) = 0;
  // [107] property moodyRatingBelow
  virtual HRESULT STDMETHODCALLTYPE get_moodyRatingBelow(BSTR* pVal/*[out,retval]*/) = 0;
  // [107] property moodyRatingBelow
  virtual HRESULT STDMETHODCALLTYPE set_moodyRatingBelow(BSTR pVal/*[in]*/) = 0;
  // [108] property spRatingAbove
  virtual HRESULT STDMETHODCALLTYPE get_spRatingAbove(BSTR* pVal/*[out,retval]*/) = 0;
  // [108] property spRatingAbove
  virtual HRESULT STDMETHODCALLTYPE set_spRatingAbove(BSTR pVal/*[in]*/) = 0;
  // [109] property spRatingBelow
  virtual HRESULT STDMETHODCALLTYPE get_spRatingBelow(BSTR* pVal/*[out,retval]*/) = 0;
  // [109] property spRatingBelow
  virtual HRESULT STDMETHODCALLTYPE set_spRatingBelow(BSTR pVal/*[in]*/) = 0;
  // [110] property maturityDateAbove
  virtual HRESULT STDMETHODCALLTYPE get_maturityDateAbove(BSTR* pVal/*[out,retval]*/) = 0;
  // [110] property maturityDateAbove
  virtual HRESULT STDMETHODCALLTYPE set_maturityDateAbove(BSTR pVal/*[in]*/) = 0;
  // [111] property maturityDateBelow
  virtual HRESULT STDMETHODCALLTYPE get_maturityDateBelow(BSTR* pVal/*[out,retval]*/) = 0;
  // [111] property maturityDateBelow
  virtual HRESULT STDMETHODCALLTYPE set_maturityDateBelow(BSTR pVal/*[in]*/) = 0;
  // [112] property couponRateAbove
  virtual HRESULT STDMETHODCALLTYPE get_couponRateAbove(double* pVal/*[out,retval]*/) = 0;
  // [112] property couponRateAbove
  virtual HRESULT STDMETHODCALLTYPE set_couponRateAbove(double pVal/*[in]*/) = 0;
  // [113] property couponRateBelow
  virtual HRESULT STDMETHODCALLTYPE get_couponRateBelow(double* pVal/*[out,retval]*/) = 0;
  // [113] property couponRateBelow
  virtual HRESULT STDMETHODCALLTYPE set_couponRateBelow(double pVal/*[in]*/) = 0;
  // [114] property excludeConvertible
  virtual HRESULT STDMETHODCALLTYPE get_excludeConvertible(long* pVal/*[out,retval]*/) = 0;
  // [114] property excludeConvertible
  virtual HRESULT STDMETHODCALLTYPE set_excludeConvertible(long pVal/*[in]*/) = 0;
  // [115] property scannerSettingPairs
  virtual HRESULT STDMETHODCALLTYPE get_scannerSettingPairs(BSTR* pVal/*[out,retval]*/) = 0;
  // [115] property scannerSettingPairs
  virtual HRESULT STDMETHODCALLTYPE set_scannerSettingPairs(BSTR pVal/*[in]*/) = 0;
  // [116] property stockTypeFilter
  virtual HRESULT STDMETHODCALLTYPE get_stockTypeFilter(BSTR* pVal/*[out,retval]*/) = 0;
  // [116] property stockTypeFilter
  virtual HRESULT STDMETHODCALLTYPE set_stockTypeFilter(BSTR pVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_instrument(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_instrument((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_locations(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_locations((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_scanCode(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_scanCode((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_numberOfRows(void)
  {
    long pVal;
    OLECHECK(this->get_numberOfRows((long*)&pVal));
    return pVal;
  }

  double __fastcall get_priceAbove(void)
  {
    double pVal;
    OLECHECK(this->get_priceAbove((double*)&pVal));
    return pVal;
  }

  double __fastcall get_priceBelow(void)
  {
    double pVal;
    OLECHECK(this->get_priceBelow((double*)&pVal));
    return pVal;
  }

  long __fastcall get_volumeAbove(void)
  {
    long pVal;
    OLECHECK(this->get_volumeAbove((long*)&pVal));
    return pVal;
  }

  long __fastcall get_averageOptionVolumeAbove(void)
  {
    long pVal;
    OLECHECK(this->get_averageOptionVolumeAbove((long*)&pVal));
    return pVal;
  }

  double __fastcall get_marketCapAbove(void)
  {
    double pVal;
    OLECHECK(this->get_marketCapAbove((double*)&pVal));
    return pVal;
  }

  double __fastcall get_marketCapBelow(void)
  {
    double pVal;
    OLECHECK(this->get_marketCapBelow((double*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_moodyRatingAbove(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_moodyRatingAbove((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_moodyRatingBelow(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_moodyRatingBelow((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_spRatingAbove(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_spRatingAbove((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_spRatingBelow(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_spRatingBelow((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_maturityDateAbove(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_maturityDateAbove((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_maturityDateBelow(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_maturityDateBelow((BSTR*)&pVal));
    return pVal;
  }

  double __fastcall get_couponRateAbove(void)
  {
    double pVal;
    OLECHECK(this->get_couponRateAbove((double*)&pVal));
    return pVal;
  }

  double __fastcall get_couponRateBelow(void)
  {
    double pVal;
    OLECHECK(this->get_couponRateBelow((double*)&pVal));
    return pVal;
  }

  long __fastcall get_excludeConvertible(void)
  {
    long pVal;
    OLECHECK(this->get_excludeConvertible((long*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_scannerSettingPairs(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_scannerSettingPairs((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_stockTypeFilter(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_stockTypeFilter((BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            instrument = {read = get_instrument, write = set_instrument};
  __property   BSTR            locations = {read = get_locations, write = set_locations};
  __property   BSTR            scanCode = {read = get_scanCode, write = set_scanCode};
  __property   long            numberOfRows = {read = get_numberOfRows, write = set_numberOfRows};
  __property   double          priceAbove = {read = get_priceAbove, write = set_priceAbove};
  __property   double          priceBelow = {read = get_priceBelow, write = set_priceBelow};
  __property   long            volumeAbove = {read = get_volumeAbove, write = set_volumeAbove};
  __property   long            averageOptionVolumeAbove = {read = get_averageOptionVolumeAbove, write = set_averageOptionVolumeAbove};
  __property   double          marketCapAbove = {read = get_marketCapAbove, write = set_marketCapAbove};
  __property   double          marketCapBelow = {read = get_marketCapBelow, write = set_marketCapBelow};
  __property   BSTR            moodyRatingAbove = {read = get_moodyRatingAbove, write = set_moodyRatingAbove};
  __property   BSTR            moodyRatingBelow = {read = get_moodyRatingBelow, write = set_moodyRatingBelow};
  __property   BSTR            spRatingAbove = {read = get_spRatingAbove, write = set_spRatingAbove};
  __property   BSTR            spRatingBelow = {read = get_spRatingBelow, write = set_spRatingBelow};
  __property   BSTR            maturityDateAbove = {read = get_maturityDateAbove, write = set_maturityDateAbove};
  __property   BSTR            maturityDateBelow = {read = get_maturityDateBelow, write = set_maturityDateBelow};
  __property   double          couponRateAbove = {read = get_couponRateAbove, write = set_couponRateAbove};
  __property   double          couponRateBelow = {read = get_couponRateBelow, write = set_couponRateBelow};
  __property   long            excludeConvertible = {read = get_excludeConvertible, write = set_excludeConvertible};
  __property   BSTR            scannerSettingPairs = {read = get_scannerSettingPairs, write = set_scannerSettingPairs};
  __property   BSTR            stockTypeFilter = {read = get_stockTypeFilter, write = set_stockTypeFilter};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DTws
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0A77CCF6-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
interface _DTws : public TDispWrapper<IDispatch>
{
  Twslib_tlb::IComboLegList* __fastcall createComboLegList()
  {
    _TDispID _dispid(/* createComboLegList */ DISPID(201));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IComboLegList* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Twslib_tlb::ITagValueList* __fastcall createTagValueList()
  {
    _TDispID _dispid(/* createTagValueList */ DISPID(206));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::ITagValueList* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Twslib_tlb::IUnderComp* __fastcall createUnderComp()
  {
    _TDispID _dispid(/* createUnderComp */ DISPID(205));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IUnderComp* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall cancelScannerSubscription(long tickerId)
  {
    _TDispID _dispid(/* cancelScannerSubscription */ DISPID(87));
    TAutoArgs<1> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  Twslib_tlb::IExecutionFilter* __fastcall createExecutionFilter()
  {
    _TDispID _dispid(/* createExecutionFilter */ DISPID(203));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IExecutionFilter* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Twslib_tlb::IOrder* __fastcall createOrder()
  {
    _TDispID _dispid(/* createOrder */ DISPID(202));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IOrder* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Twslib_tlb::IScannerSubscription* __fastcall createScannerSubscription()
  {
    _TDispID _dispid(/* createScannerSubscription */ DISPID(204));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IScannerSubscription* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall placeOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                               Twslib_tlb::IOrder* order)
  {
    _TDispID _dispid(/* placeOrderEx */ DISPID(103));
    TAutoArgs<3> _args;
    _args[1] = orderId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Twslib_tlb::IOrder*)order /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqScannerSubscriptionEx(long tickerId, 
                                           Twslib_tlb::IScannerSubscription* subscription)
  {
    _TDispID _dispid(/* reqScannerSubscriptionEx */ DISPID(108));
    TAutoArgs<2> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IScannerSubscription*)subscription /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqRealTimeBarsEx(long tickerId, Twslib_tlb::IContract* contract, long barSize, 
                                    BSTR whatToShow, long useRTH)
  {
    _TDispID _dispid(/* reqRealTimeBarsEx */ DISPID(107));
    TAutoArgs<5> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = barSize /*[VT_I4:0]*/;
    _args[4] = whatToShow /*[VT_BSTR:0]*/;
    _args[5] = useRTH /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  Twslib_tlb::IContract* __fastcall createContract()
  {
    _TDispID _dispid(/* createContract */ DISPID(200));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Twslib_tlb::IContract* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall exerciseOptionsEx(long tickerId, Twslib_tlb::IContract* contract, 
                                    long exerciseAction, long exerciseQuantity, BSTR account, 
                                    long override)
  {
    _TDispID _dispid(/* exerciseOptionsEx */ DISPID(105));
    TAutoArgs<6> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = exerciseAction /*[VT_I4:0]*/;
    _args[4] = exerciseQuantity /*[VT_I4:0]*/;
    _args[5] = account /*[VT_BSTR:0]*/;
    _args[6] = override /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqExecutionsEx(long reqId, Twslib_tlb::IExecutionFilter* filter)
  {
    _TDispID _dispid(/* reqExecutionsEx */ DISPID(104));
    TAutoArgs<2> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IExecutionFilter*)filter /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall resetAllProperties()
  {
    _TDispID _dispid(/* resetAllProperties */ DISPID(88));
    OleProcedure(_dispid);
  }

  void __fastcall reqFundamentalData(long reqId, Twslib_tlb::IContract* contract, BSTR reportType)
  {
    _TDispID _dispid(/* reqFundamentalData */ DISPID(92));
    TAutoArgs<3> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = reportType /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqCurrentTime()
  {
    _TDispID _dispid(/* reqCurrentTime */ DISPID(91));
    OleProcedure(_dispid);
  }

  void __fastcall reqMktDepthEx(long tickerId, Twslib_tlb::IContract* contract, long numRows)
  {
    _TDispID _dispid(/* reqMktDepthEx */ DISPID(102));
    TAutoArgs<3> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = numRows /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelMktData(long id)
  {
    _TDispID _dispid(/* cancelMktData */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = id /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelOrder(long id)
  {
    _TDispID _dispid(/* cancelOrder */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = id /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelFundamentalData(long reqId)
  {
    _TDispID _dispid(/* cancelFundamentalData */ DISPID(93));
    TAutoArgs<1> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqMktDataEx(long tickerId, Twslib_tlb::IContract* contract, BSTR genericTicks, 
                               long snapshot)
  {
    _TDispID _dispid(/* reqMktDataEx */ DISPID(101));
    TAutoArgs<4> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = genericTicks /*[VT_BSTR:0]*/;
    _args[4] = snapshot /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqScannerSubscription(long tickerId, long numberOfRows, BSTR instrument, 
                                         BSTR locationCode, BSTR scanCode, double abovePrice, 
                                         double belowPrice, long aboveVolume, double marketCapAbove
                                         , double marketCapBelow, BSTR moodyRatingAbove, 
                                         BSTR moodyRatingBelow, BSTR spRatingAbove, 
                                         BSTR spRatingBelow, BSTR maturityDateAbove, 
                                         BSTR maturityDateBelow, double couponRateAbove, 
                                         double couponRateBelow, long excludeConvertible, 
                                         long averageOptionVolumeAbove, BSTR scannerSettingPairs, 
                                         BSTR stockTypeFilter)
  {
    _TDispID _dispid(/* reqScannerSubscription */ DISPID(85));
    TAutoArgs<22> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = numberOfRows /*[VT_I4:0]*/;
    _args[3] = instrument /*[VT_BSTR:0]*/;
    _args[4] = locationCode /*[VT_BSTR:0]*/;
    _args[5] = scanCode /*[VT_BSTR:0]*/;
    _args[6] = abovePrice /*[VT_R8:0]*/;
    _args[7] = belowPrice /*[VT_R8:0]*/;
    _args[8] = aboveVolume /*[VT_I4:0]*/;
    _args[9] = marketCapAbove /*[VT_R8:0]*/;
    _args[10] = marketCapBelow /*[VT_R8:0]*/;
    _args[11] = moodyRatingAbove /*[VT_BSTR:0]*/;
    _args[12] = moodyRatingBelow /*[VT_BSTR:0]*/;
    _args[13] = spRatingAbove /*[VT_BSTR:0]*/;
    _args[14] = spRatingBelow /*[VT_BSTR:0]*/;
    _args[15] = maturityDateAbove /*[VT_BSTR:0]*/;
    _args[16] = maturityDateBelow /*[VT_BSTR:0]*/;
    _args[17] = couponRateAbove /*[VT_R8:0]*/;
    _args[18] = couponRateBelow /*[VT_R8:0]*/;
    _args[19] = excludeConvertible /*[VT_I4:0]*/;
    _args[20] = averageOptionVolumeAbove /*[VT_I4:0]*/;
    _args[21] = scannerSettingPairs /*[VT_BSTR:0]*/;
    _args[22] = stockTypeFilter /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqScannerParameters()
  {
    _TDispID _dispid(/* reqScannerParameters */ DISPID(84));
    OleProcedure(_dispid);
  }

  void __fastcall reqRealTimeBars(long tickerId, BSTR symbol, BSTR secType, BSTR expiry, 
                                  double strike, BSTR right, BSTR multiplier, BSTR exchange, 
                                  BSTR primaryExchange, BSTR currency, long isExpired, long barSize
                                  , BSTR whatToShow, long useRTH)
  {
    _TDispID _dispid(/* reqRealTimeBars */ DISPID(89));
    TAutoArgs<14> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = multiplier /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = primaryExchange /*[VT_BSTR:0]*/;
    _args[10] = currency /*[VT_BSTR:0]*/;
    _args[11] = isExpired /*[VT_I4:0]*/;
    _args[12] = barSize /*[VT_I4:0]*/;
    _args[13] = whatToShow /*[VT_BSTR:0]*/;
    _args[14] = useRTH /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqContractDetailsEx(long reqId, Twslib_tlb::IContract* contract)
  {
    _TDispID _dispid(/* reqContractDetailsEx */ DISPID(100));
    TAutoArgs<2> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelRealTimeBars(long tickerId)
  {
    _TDispID _dispid(/* cancelRealTimeBars */ DISPID(90));
    TAutoArgs<1> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelHistoricalData(long tickerId)
  {
    _TDispID _dispid(/* cancelHistoricalData */ DISPID(86));
    TAutoArgs<1> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqHistoricalDataEx(long tickerId, Twslib_tlb::IContract* contract, 
                                      BSTR endDateTime, BSTR duration, BSTR barSize, BSTR whatToShow
                                      , long useRTH, long formatDate)
  {
    _TDispID _dispid(/* reqHistoricalDataEx */ DISPID(106));
    TAutoArgs<8> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = endDateTime /*[VT_BSTR:0]*/;
    _args[4] = duration /*[VT_BSTR:0]*/;
    _args[5] = barSize /*[VT_BSTR:0]*/;
    _args[6] = whatToShow /*[VT_BSTR:0]*/;
    _args[7] = useRTH /*[VT_I4:0]*/;
    _args[8] = formatDate /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqHistoricalData(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                    BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, 
                                    long isExpired, BSTR endDateTime, BSTR durationStr, 
                                    BSTR barSizeSetting, BSTR whatToShow, long useRTH, 
                                    long formatDate)
  {
    _TDispID _dispid(/* reqHistoricalData */ DISPID(82));
    TAutoArgs<16> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = multiplier /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = curency /*[VT_BSTR:0]*/;
    _args[10] = isExpired /*[VT_I4:0]*/;
    _args[11] = endDateTime /*[VT_BSTR:0]*/;
    _args[12] = durationStr /*[VT_BSTR:0]*/;
    _args[13] = barSizeSetting /*[VT_BSTR:0]*/;
    _args[14] = whatToShow /*[VT_BSTR:0]*/;
    _args[15] = useRTH /*[VT_I4:0]*/;
    _args[16] = formatDate /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall replaceFA(long faDataType, BSTR cxml)
  {
    _TDispID _dispid(/* replaceFA */ DISPID(81));
    TAutoArgs<2> _args;
    _args[1] = faDataType /*[VT_I4:0]*/;
    _args[2] = cxml /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall requestFA(long faDataType)
  {
    _TDispID _dispid(/* requestFA */ DISPID(80));
    TAutoArgs<1> _args;
    _args[1] = faDataType /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqManagedAccts()
  {
    _TDispID _dispid(/* reqManagedAccts */ DISPID(79));
    OleProcedure(_dispid);
  }

  void __fastcall reqAllOpenOrders()
  {
    _TDispID _dispid(/* reqAllOpenOrders */ DISPID(78));
    OleProcedure(_dispid);
  }

  void __fastcall reqAutoOpenOrders(long bAutoBind)
  {
    _TDispID _dispid(/* reqAutoOpenOrders */ DISPID(77));
    TAutoArgs<1> _args;
    _args[1] = bAutoBind /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall setServerLogLevel(long logLevel)
  {
    _TDispID _dispid(/* setServerLogLevel */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = logLevel /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqNewsBulletins(long allDaysMsgs)
  {
    _TDispID _dispid(/* reqNewsBulletins */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = allDaysMsgs /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelNewsBulletins()
  {
    _TDispID _dispid(/* cancelNewsBulletins */ DISPID(74));
    OleProcedure(_dispid);
  }

  void __fastcall clearComboLegs()
  {
    _TDispID _dispid(/* clearComboLegs */ DISPID(73));
    OleProcedure(_dispid);
  }

  void __fastcall addComboLeg(long conId, BSTR action, long ratio, BSTR exchange, long openClose, 
                              long shortSaleSlot, BSTR designatedLocation)
  {
    _TDispID _dispid(/* addComboLeg */ DISPID(72));
    TAutoArgs<7> _args;
    _args[1] = conId /*[VT_I4:0]*/;
    _args[2] = action /*[VT_BSTR:0]*/;
    _args[3] = ratio /*[VT_I4:0]*/;
    _args[4] = exchange /*[VT_BSTR:0]*/;
    _args[5] = openClose /*[VT_I4:0]*/;
    _args[6] = shortSaleSlot /*[VT_I4:0]*/;
    _args[7] = designatedLocation /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall cancelMktDepth(long id)
  {
    _TDispID _dispid(/* cancelMktDepth */ DISPID(71));
    TAutoArgs<1> _args;
    _args[1] = id /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqMktDepth2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, BSTR curency
                               , long numRows)
  {
    _TDispID _dispid(/* reqMktDepth2 */ DISPID(70));
    TAutoArgs<6> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = localSymbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = exchange /*[VT_BSTR:0]*/;
    _args[5] = curency /*[VT_BSTR:0]*/;
    _args[6] = numRows /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqMktData(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                             BSTR right, BSTR multiplier, BSTR exchange, BSTR primaryExchange, 
                             BSTR currency, BSTR genericTicks, long snapshot)
  {
    _TDispID _dispid(/* reqMktData */ DISPID(60));
    TAutoArgs<12> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = multiplier /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = primaryExchange /*[VT_BSTR:0]*/;
    _args[10] = currency /*[VT_BSTR:0]*/;
    _args[11] = genericTicks /*[VT_BSTR:0]*/;
    _args[12] = snapshot /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqIds(long numIds)
  {
    _TDispID _dispid(/* reqIds */ DISPID(64));
    TAutoArgs<1> _args;
    _args[1] = numIds /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqMktDepth(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                              BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, long numRows)
  {
    _TDispID _dispid(/* reqMktDepth */ DISPID(69));
    TAutoArgs<10> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = multiplier /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = curency /*[VT_BSTR:0]*/;
    _args[10] = numRows /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqContractDetails2(BSTR localSymbol, BSTR secType, BSTR exchange, BSTR curency, 
                                      long includeExpired)
  {
    _TDispID _dispid(/* reqContractDetails2 */ DISPID(68));
    TAutoArgs<5> _args;
    _args[1] = localSymbol /*[VT_BSTR:0]*/;
    _args[2] = secType /*[VT_BSTR:0]*/;
    _args[3] = exchange /*[VT_BSTR:0]*/;
    _args[4] = curency /*[VT_BSTR:0]*/;
    _args[5] = includeExpired /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall exerciseOptions(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                  BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, 
                                  long exerciseAction, long exerciseQuantity, long override)
  {
    _TDispID _dispid(/* exerciseOptions */ DISPID(83));
    TAutoArgs<12> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = multiplier /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = curency /*[VT_BSTR:0]*/;
    _args[10] = exerciseAction /*[VT_I4:0]*/;
    _args[11] = exerciseQuantity /*[VT_I4:0]*/;
    _args[12] = override /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall placeOrder2(long id, BSTR action, long quantity, BSTR localSymbol, BSTR secType, 
                              BSTR exchange, BSTR primaryExchange, BSTR curency, BSTR orderType, 
                              double lmtPrice, double auxPrice, BSTR goodAfterTime, BSTR group, 
                              BSTR faMethod, BSTR faPercentage, BSTR faProfile, BSTR goodTillDate)
  {
    _TDispID _dispid(/* placeOrder2 */ DISPID(66));
    TAutoArgs<17> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = action /*[VT_BSTR:0]*/;
    _args[3] = quantity /*[VT_I4:0]*/;
    _args[4] = localSymbol /*[VT_BSTR:0]*/;
    _args[5] = secType /*[VT_BSTR:0]*/;
    _args[6] = exchange /*[VT_BSTR:0]*/;
    _args[7] = primaryExchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = orderType /*[VT_BSTR:0]*/;
    _args[10] = lmtPrice /*[VT_R8:0]*/;
    _args[11] = auxPrice /*[VT_R8:0]*/;
    _args[12] = goodAfterTime /*[VT_BSTR:0]*/;
    _args[13] = group /*[VT_BSTR:0]*/;
    _args[14] = faMethod /*[VT_BSTR:0]*/;
    _args[15] = faPercentage /*[VT_BSTR:0]*/;
    _args[16] = faProfile /*[VT_BSTR:0]*/;
    _args[17] = goodTillDate /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqMktData2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, 
                              BSTR primaryExchange, BSTR currency, BSTR genericTicks, long snapshot)
  {
    _TDispID _dispid(/* reqMktData2 */ DISPID(65));
    TAutoArgs<8> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = localSymbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = exchange /*[VT_BSTR:0]*/;
    _args[5] = primaryExchange /*[VT_BSTR:0]*/;
    _args[6] = currency /*[VT_BSTR:0]*/;
    _args[7] = genericTicks /*[VT_BSTR:0]*/;
    _args[8] = snapshot /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqContractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                     BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, 
                                     long includeExpired)
  {
    _TDispID _dispid(/* reqContractDetails */ DISPID(67));
    TAutoArgs<9> _args;
    _args[1] = symbol /*[VT_BSTR:0]*/;
    _args[2] = secType /*[VT_BSTR:0]*/;
    _args[3] = expiry /*[VT_BSTR:0]*/;
    _args[4] = strike /*[VT_R8:0]*/;
    _args[5] = right /*[VT_BSTR:0]*/;
    _args[6] = multiplier /*[VT_BSTR:0]*/;
    _args[7] = exchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = includeExpired /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall placeOrder(long id, BSTR action, long quantity, BSTR symbol, BSTR secType, 
                             BSTR expiry, double strike, BSTR right, BSTR multiplier, BSTR exchange
                             , BSTR primaryExchange, BSTR curency, BSTR orderType, double price, 
                             double auxPrice, BSTR goodAfterTime, BSTR group, BSTR faMethod, 
                             BSTR faPercentage, BSTR faProfile, BSTR goodTillDate)
  {
    _TDispID _dispid(/* placeOrder */ DISPID(57));
    TAutoArgs<21> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = action /*[VT_BSTR:0]*/;
    _args[3] = quantity /*[VT_I4:0]*/;
    _args[4] = symbol /*[VT_BSTR:0]*/;
    _args[5] = secType /*[VT_BSTR:0]*/;
    _args[6] = expiry /*[VT_BSTR:0]*/;
    _args[7] = strike /*[VT_R8:0]*/;
    _args[8] = right /*[VT_BSTR:0]*/;
    _args[9] = multiplier /*[VT_BSTR:0]*/;
    _args[10] = exchange /*[VT_BSTR:0]*/;
    _args[11] = primaryExchange /*[VT_BSTR:0]*/;
    _args[12] = curency /*[VT_BSTR:0]*/;
    _args[13] = orderType /*[VT_BSTR:0]*/;
    _args[14] = price /*[VT_R8:0]*/;
    _args[15] = auxPrice /*[VT_R8:0]*/;
    _args[16] = goodAfterTime /*[VT_BSTR:0]*/;
    _args[17] = group /*[VT_BSTR:0]*/;
    _args[18] = faMethod /*[VT_BSTR:0]*/;
    _args[19] = faPercentage /*[VT_BSTR:0]*/;
    _args[20] = faProfile /*[VT_BSTR:0]*/;
    _args[21] = goodTillDate /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqAccountUpdates(long subscribe, BSTR acctCode)
  {
    _TDispID _dispid(/* reqAccountUpdates */ DISPID(62));
    TAutoArgs<2> _args;
    _args[1] = subscribe /*[VT_I4:0]*/;
    _args[2] = acctCode /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall reqOpenOrders()
  {
    _TDispID _dispid(/* reqOpenOrders */ DISPID(61));
    OleProcedure(_dispid);
  }

  void __fastcall reqExecutions()
  {
    _TDispID _dispid(/* reqExecutions */ DISPID(63));
    OleProcedure(_dispid);
  }

  void __fastcall connect(BSTR host, long port, long clientId)
  {
    _TDispID _dispid(/* connect */ DISPID(59));
    TAutoArgs<3> _args;
    _args[1] = host /*[VT_BSTR:0]*/;
    _args[2] = port /*[VT_I4:0]*/;
    _args[3] = clientId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall disconnect()
  {
    _TDispID _dispid(/* disconnect */ DISPID(58));
    OleProcedure(_dispid);
  }

  void __fastcall set_scalePriceIncrement(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* scalePriceIncrement */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_scalePriceIncrement()
  {
    _TDispID _dispid(/* scalePriceIncrement */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_scaleSubsLevelSize(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* scaleSubsLevelSize */ DISPID(53));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_scaleSubsLevelSize()
  {
    _TDispID _dispid(/* scaleSubsLevelSize */ DISPID(53));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_scaleInitLevelSize(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* scaleInitLevelSize */ DISPID(52));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_scaleInitLevelSize()
  {
    _TDispID _dispid(/* scaleInitLevelSize */ DISPID(52));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_trailStopPrice(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* trailStopPrice */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_trailStopPrice()
  {
    _TDispID _dispid(/* trailStopPrice */ DISPID(51));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_referencePriceType(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* referencePriceType */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_referencePriceType()
  {
    _TDispID _dispid(/* referencePriceType */ DISPID(50));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_continuousUpdate(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* continuousUpdate */ DISPID(49));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_continuousUpdate()
  {
    _TDispID _dispid(/* continuousUpdate */ DISPID(49));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_deltaNeutralAuxPrice(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* deltaNeutralAuxPrice */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_deltaNeutralAuxPrice()
  {
    _TDispID _dispid(/* deltaNeutralAuxPrice */ DISPID(48));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_deltaNeutralOrderType(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* deltaNeutralOrderType */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_deltaNeutralOrderType()
  {
    _TDispID _dispid(/* deltaNeutralOrderType */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_volatilityType(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* volatilityType */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_volatilityType()
  {
    _TDispID _dispid(/* volatilityType */ DISPID(46));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_volatility(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* volatility */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_volatility()
  {
    _TDispID _dispid(/* volatility */ DISPID(45));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_overridePercentageConstraints(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* overridePercentageConstraints */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_overridePercentageConstraints()
  {
    _TDispID _dispid(/* overridePercentageConstraints */ DISPID(44));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_serverVersion(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* serverVersion */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_serverVersion()
  {
    _TDispID _dispid(/* serverVersion */ DISPID(43));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TwsConnectionTime(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* TwsConnectionTime */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_TwsConnectionTime()
  {
    _TDispID _dispid(/* TwsConnectionTime */ DISPID(42));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_stockRangeUpper(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* stockRangeUpper */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_stockRangeUpper()
  {
    _TDispID _dispid(/* stockRangeUpper */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_stockRangeLower(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* stockRangeLower */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_stockRangeLower()
  {
    _TDispID _dispid(/* stockRangeLower */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_delta(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* delta */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_delta()
  {
    _TDispID _dispid(/* delta */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_stockRefPrice(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* stockRefPrice */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_stockRefPrice()
  {
    _TDispID _dispid(/* stockRefPrice */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_startingPrice(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* startingPrice */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_startingPrice()
  {
    _TDispID _dispid(/* startingPrice */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_auctionStrategy(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* auctionStrategy */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_auctionStrategy()
  {
    _TDispID _dispid(/* auctionStrategy */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_nbboPriceCap(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* nbboPriceCap */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_nbboPriceCap()
  {
    _TDispID _dispid(/* nbboPriceCap */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_firmQuoteOnly(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* firmQuoteOnly */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_firmQuoteOnly()
  {
    _TDispID _dispid(/* firmQuoteOnly */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_eTradeOnly(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* eTradeOnly */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_eTradeOnly()
  {
    _TDispID _dispid(/* eTradeOnly */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_percentOffset(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* percentOffset */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_percentOffset()
  {
    _TDispID _dispid(/* percentOffset */ DISPID(32));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_minQty(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* minQty */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_minQty()
  {
    _TDispID _dispid(/* minQty */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_allOrNone(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* allOrNone */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_allOrNone()
  {
    _TDispID _dispid(/* allOrNone */ DISPID(30));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_settlingFirm(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* settlingFirm */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_settlingFirm()
  {
    _TDispID _dispid(/* settlingFirm */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_rule80A(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* rule80A */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_rule80A()
  {
    _TDispID _dispid(/* rule80A */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ocaType(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ocaType */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ocaType()
  {
    _TDispID _dispid(/* ocaType */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_designatedLocation(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* designatedLocation */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_designatedLocation()
  {
    _TDispID _dispid(/* designatedLocation */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_shortSaleSlot(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* shortSaleSlot */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_shortSaleSlot()
  {
    _TDispID _dispid(/* shortSaleSlot */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_discretionaryAmt(double /*[VT_R8:0]*/ Value)
  {
    _TDispID _dispid(/* discretionaryAmt */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  double /*[VT_R8:0]*/ __fastcall get_discretionaryAmt()
  {
    _TDispID _dispid(/* discretionaryAmt */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_sideFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* sideFilter */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_sideFilter()
  {
    _TDispID _dispid(/* sideFilter */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_exchangeFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* exchangeFilter */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_exchangeFilter()
  {
    _TDispID _dispid(/* exchangeFilter */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_secTypeFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* secTypeFilter */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_secTypeFilter()
  {
    _TDispID _dispid(/* secTypeFilter */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_symbolFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* symbolFilter */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_symbolFilter()
  {
    _TDispID _dispid(/* symbolFilter */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_timeFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* timeFilter */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_timeFilter()
  {
    _TDispID _dispid(/* timeFilter */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_acctCodeFilter(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* acctCodeFilter */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_acctCodeFilter()
  {
    _TDispID _dispid(/* acctCodeFilter */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_clientIdFilter(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* clientIdFilter */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_clientIdFilter()
  {
    _TDispID _dispid(/* clientIdFilter */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_hidden(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* hidden */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_hidden()
  {
    _TDispID _dispid(/* hidden */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_outsideRth(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* outsideRth */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_outsideRth()
  {
    _TDispID _dispid(/* outsideRth */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_triggerMethod(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* triggerMethod */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_triggerMethod()
  {
    _TDispID _dispid(/* triggerMethod */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_displaySize(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* displaySize */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_displaySize()
  {
    _TDispID _dispid(/* displaySize */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_sweepToFill(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* sweepToFill */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_sweepToFill()
  {
    _TDispID _dispid(/* sweepToFill */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_blockOrder(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* blockOrder */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_blockOrder()
  {
    _TDispID _dispid(/* blockOrder */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_parentId(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* parentId */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_parentId()
  {
    _TDispID _dispid(/* parentId */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_openClose(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* openClose */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_openClose()
  {
    _TDispID _dispid(/* openClose */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_transmit(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* transmit */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_transmit()
  {
    _TDispID _dispid(/* transmit */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_origin(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* origin */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_origin()
  {
    _TDispID _dispid(/* origin */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_orderRef(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* orderRef */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_orderRef()
  {
    _TDispID _dispid(/* orderRef */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_oca(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* oca */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_oca()
  {
    _TDispID _dispid(/* oca */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_tif(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* tif */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_tif()
  {
    _TDispID _dispid(/* tif */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_account(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* account */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_account()
  {
    _TDispID _dispid(/* account */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   double          scalePriceIncrement = {read = get_scalePriceIncrement, write = set_scalePriceIncrement};
  __property   long            scaleSubsLevelSize = {read = get_scaleSubsLevelSize, write = set_scaleSubsLevelSize};
  __property   long            scaleInitLevelSize = {read = get_scaleInitLevelSize, write = set_scaleInitLevelSize};
  __property   double          trailStopPrice = {read = get_trailStopPrice, write = set_trailStopPrice};
  __property   long            referencePriceType = {read = get_referencePriceType, write = set_referencePriceType};
  __property   long            continuousUpdate = {read = get_continuousUpdate, write = set_continuousUpdate};
  __property   double          deltaNeutralAuxPrice = {read = get_deltaNeutralAuxPrice, write = set_deltaNeutralAuxPrice};
  __property   BSTR            deltaNeutralOrderType = {read = get_deltaNeutralOrderType, write = set_deltaNeutralOrderType};
  __property   long            volatilityType = {read = get_volatilityType, write = set_volatilityType};
  __property   double          volatility = {read = get_volatility, write = set_volatility};
  __property   long            overridePercentageConstraints = {read = get_overridePercentageConstraints, write = set_overridePercentageConstraints};
  __property   long            serverVersion = {read = get_serverVersion, write = set_serverVersion};
  __property   BSTR            TwsConnectionTime = {read = get_TwsConnectionTime, write = set_TwsConnectionTime};
  __property   double          stockRangeUpper = {read = get_stockRangeUpper, write = set_stockRangeUpper};
  __property   double          stockRangeLower = {read = get_stockRangeLower, write = set_stockRangeLower};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          stockRefPrice = {read = get_stockRefPrice, write = set_stockRefPrice};
  __property   double          startingPrice = {read = get_startingPrice, write = set_startingPrice};
  __property   long            auctionStrategy = {read = get_auctionStrategy, write = set_auctionStrategy};
  __property   double          nbboPriceCap = {read = get_nbboPriceCap, write = set_nbboPriceCap};
  __property   long            firmQuoteOnly = {read = get_firmQuoteOnly, write = set_firmQuoteOnly};
  __property   long            eTradeOnly = {read = get_eTradeOnly, write = set_eTradeOnly};
  __property   double          percentOffset = {read = get_percentOffset, write = set_percentOffset};
  __property   long            minQty = {read = get_minQty, write = set_minQty};
  __property   long            allOrNone = {read = get_allOrNone, write = set_allOrNone};
  __property   BSTR            settlingFirm = {read = get_settlingFirm, write = set_settlingFirm};
  __property   BSTR            rule80A = {read = get_rule80A, write = set_rule80A};
  __property   long            ocaType = {read = get_ocaType, write = set_ocaType};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   double          discretionaryAmt = {read = get_discretionaryAmt, write = set_discretionaryAmt};
  __property   BSTR            sideFilter = {read = get_sideFilter, write = set_sideFilter};
  __property   BSTR            exchangeFilter = {read = get_exchangeFilter, write = set_exchangeFilter};
  __property   BSTR            secTypeFilter = {read = get_secTypeFilter, write = set_secTypeFilter};
  __property   BSTR            symbolFilter = {read = get_symbolFilter, write = set_symbolFilter};
  __property   BSTR            timeFilter = {read = get_timeFilter, write = set_timeFilter};
  __property   BSTR            acctCodeFilter = {read = get_acctCodeFilter, write = set_acctCodeFilter};
  __property   long            clientIdFilter = {read = get_clientIdFilter, write = set_clientIdFilter};
  __property   long            hidden = {read = get_hidden, write = set_hidden};
  __property   long            outsideRth = {read = get_outsideRth, write = set_outsideRth};
  __property   long            triggerMethod = {read = get_triggerMethod, write = set_triggerMethod};
  __property   long            displaySize = {read = get_displaySize, write = set_displaySize};
  __property   long            sweepToFill = {read = get_sweepToFill, write = set_sweepToFill};
  __property   long            blockOrder = {read = get_blockOrder, write = set_blockOrder};
  __property   long            parentId = {read = get_parentId, write = set_parentId};
  __property   BSTR            openClose = {read = get_openClose, write = set_openClose};
  __property   long            transmit = {read = get_transmit, write = set_transmit};
  __property   long            origin = {read = get_origin, write = set_origin};
  __property   BSTR            orderRef = {read = get_orderRef, write = set_orderRef};
  __property   BSTR            oca = {read = get_oca, write = set_oca};
  __property   BSTR            tif = {read = get_tif, write = set_tif};
  __property   BSTR            account = {read = get_account, write = set_account};
};
// *********************************************************************//
// Interface: _DTwsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0A77CCF7-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
interface _DTwsEvents : public TDispWrapper<IDispatch>
{
  void __fastcall tickPrice(long id, long tickType, double price, int canAutoExecute)
  {
    _TDispID _dispid(/* tickPrice */ DISPID(1));
    TAutoArgs<4> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = tickType /*[VT_I4:0]*/;
    _args[3] = price /*[VT_R8:0]*/;
    _args[4] = canAutoExecute /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickSize(long id, long tickType, long size)
  {
    _TDispID _dispid(/* tickSize */ DISPID(2));
    TAutoArgs<3> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = tickType /*[VT_I4:0]*/;
    _args[3] = size /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall connectionClosed()
  {
    _TDispID _dispid(/* connectionClosed */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall openOrder1(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                             BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol)
  {
    _TDispID _dispid(/* openOrder1 */ DISPID(4));
    TAutoArgs<9> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = exchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = localSymbol /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall openOrder2(long id, BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                             double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, BSTR openClose
                             , long origin, BSTR orderRef, long clientId)
  {
    _TDispID _dispid(/* openOrder2 */ DISPID(5));
    TAutoArgs<13> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = action /*[VT_BSTR:0]*/;
    _args[3] = quantity /*[VT_I4:0]*/;
    _args[4] = orderType /*[VT_BSTR:0]*/;
    _args[5] = lmtPrice /*[VT_R8:0]*/;
    _args[6] = auxPrice /*[VT_R8:0]*/;
    _args[7] = tif /*[VT_BSTR:0]*/;
    _args[8] = ocaGroup /*[VT_BSTR:0]*/;
    _args[9] = account /*[VT_BSTR:0]*/;
    _args[10] = openClose /*[VT_BSTR:0]*/;
    _args[11] = origin /*[VT_I4:0]*/;
    _args[12] = orderRef /*[VT_BSTR:0]*/;
    _args[13] = clientId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updateAccountTime(BSTR timeStamp)
  {
    _TDispID _dispid(/* updateAccountTime */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = timeStamp /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updateAccountValue(BSTR key, BSTR value, BSTR curency, BSTR accountName)
  {
    _TDispID _dispid(/* updateAccountValue */ DISPID(7));
    TAutoArgs<4> _args;
    _args[1] = key /*[VT_BSTR:0]*/;
    _args[2] = value /*[VT_BSTR:0]*/;
    _args[3] = curency /*[VT_BSTR:0]*/;
    _args[4] = accountName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall nextValidId(long id)
  {
    _TDispID _dispid(/* nextValidId */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = id /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall permId(long id, long permId)
  {
    _TDispID _dispid(/* permId */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = permId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall errMsg(long id, long errorCode, BSTR errorMsg)
  {
    _TDispID _dispid(/* errMsg */ DISPID(11));
    TAutoArgs<3> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = errorCode /*[VT_I4:0]*/;
    _args[3] = errorMsg /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updatePortfolio(BSTR symbol, BSTR secType, BSTR expiry, double strike, BSTR right
                                  , BSTR curency, BSTR localSymbol, long position, 
                                  double marketPrice, double marketValue, double averageCost, 
                                  double unrealizedPNL, double realizedPNL, BSTR accountName)
  {
    _TDispID _dispid(/* updatePortfolio */ DISPID(12));
    TAutoArgs<14> _args;
    _args[1] = symbol /*[VT_BSTR:0]*/;
    _args[2] = secType /*[VT_BSTR:0]*/;
    _args[3] = expiry /*[VT_BSTR:0]*/;
    _args[4] = strike /*[VT_R8:0]*/;
    _args[5] = right /*[VT_BSTR:0]*/;
    _args[6] = curency /*[VT_BSTR:0]*/;
    _args[7] = localSymbol /*[VT_BSTR:0]*/;
    _args[8] = position /*[VT_I4:0]*/;
    _args[9] = marketPrice /*[VT_R8:0]*/;
    _args[10] = marketValue /*[VT_R8:0]*/;
    _args[11] = averageCost /*[VT_R8:0]*/;
    _args[12] = unrealizedPNL /*[VT_R8:0]*/;
    _args[13] = realizedPNL /*[VT_R8:0]*/;
    _args[14] = accountName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall orderStatus(long id, BSTR status, long filled, long remaining, double avgFillPrice
                              , long permId, long parentId, double lastFillPrice, long clientId, 
                              BSTR whyHeld)
  {
    _TDispID _dispid(/* orderStatus */ DISPID(13));
    TAutoArgs<10> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = status /*[VT_BSTR:0]*/;
    _args[3] = filled /*[VT_I4:0]*/;
    _args[4] = remaining /*[VT_I4:0]*/;
    _args[5] = avgFillPrice /*[VT_R8:0]*/;
    _args[6] = permId /*[VT_I4:0]*/;
    _args[7] = parentId /*[VT_I4:0]*/;
    _args[8] = lastFillPrice /*[VT_R8:0]*/;
    _args[9] = clientId /*[VT_I4:0]*/;
    _args[10] = whyHeld /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall contractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, BSTR right
                                  , BSTR exchange, BSTR curency, BSTR localSymbol, BSTR marketName, 
                                  BSTR tradingClass, long conId, double minTick, long priceMagnifier
                                  , BSTR multiplier, BSTR orderTypes, BSTR validExchanges)
  {
    _TDispID _dispid(/* contractDetails */ DISPID(14));
    TAutoArgs<16> _args;
    _args[1] = symbol /*[VT_BSTR:0]*/;
    _args[2] = secType /*[VT_BSTR:0]*/;
    _args[3] = expiry /*[VT_BSTR:0]*/;
    _args[4] = strike /*[VT_R8:0]*/;
    _args[5] = right /*[VT_BSTR:0]*/;
    _args[6] = exchange /*[VT_BSTR:0]*/;
    _args[7] = curency /*[VT_BSTR:0]*/;
    _args[8] = localSymbol /*[VT_BSTR:0]*/;
    _args[9] = marketName /*[VT_BSTR:0]*/;
    _args[10] = tradingClass /*[VT_BSTR:0]*/;
    _args[11] = conId /*[VT_I4:0]*/;
    _args[12] = minTick /*[VT_R8:0]*/;
    _args[13] = priceMagnifier /*[VT_I4:0]*/;
    _args[14] = multiplier /*[VT_BSTR:0]*/;
    _args[15] = orderTypes /*[VT_BSTR:0]*/;
    _args[16] = validExchanges /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall execDetails(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                              BSTR right, BSTR cExchange, BSTR curency, BSTR localSymbol, 
                              BSTR execId, BSTR time, BSTR acctNumber, BSTR eExchange, BSTR side, 
                              long shares, double price, long permId, long clientId, 
                              int isLiquidation)
  {
    _TDispID _dispid(/* execDetails */ DISPID(15));
    TAutoArgs<19> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = cExchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = localSymbol /*[VT_BSTR:0]*/;
    _args[10] = execId /*[VT_BSTR:0]*/;
    _args[11] = time /*[VT_BSTR:0]*/;
    _args[12] = acctNumber /*[VT_BSTR:0]*/;
    _args[13] = eExchange /*[VT_BSTR:0]*/;
    _args[14] = side /*[VT_BSTR:0]*/;
    _args[15] = shares /*[VT_I4:0]*/;
    _args[16] = price /*[VT_R8:0]*/;
    _args[17] = permId /*[VT_I4:0]*/;
    _args[18] = clientId /*[VT_I4:0]*/;
    _args[19] = isLiquidation /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updateMktDepth(long id, long position, long operation, long side, double price, 
                                 long size)
  {
    _TDispID _dispid(/* updateMktDepth */ DISPID(16));
    TAutoArgs<6> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = position /*[VT_I4:0]*/;
    _args[3] = operation /*[VT_I4:0]*/;
    _args[4] = side /*[VT_I4:0]*/;
    _args[5] = price /*[VT_R8:0]*/;
    _args[6] = size /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updateMktDepthL2(long id, long position, BSTR marketMaker, long operation, 
                                   long side, double price, long size)
  {
    _TDispID _dispid(/* updateMktDepthL2 */ DISPID(17));
    TAutoArgs<7> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = position /*[VT_I4:0]*/;
    _args[3] = marketMaker /*[VT_BSTR:0]*/;
    _args[4] = operation /*[VT_I4:0]*/;
    _args[5] = side /*[VT_I4:0]*/;
    _args[6] = price /*[VT_R8:0]*/;
    _args[7] = size /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updateNewsBulletin(short msgId, short msgType, BSTR message, BSTR origExchange)
  {
    _TDispID _dispid(/* updateNewsBulletin */ DISPID(18));
    TAutoArgs<4> _args;
    _args[1] = msgId /*[VT_I2:0]*/;
    _args[2] = msgType /*[VT_I2:0]*/;
    _args[3] = message /*[VT_BSTR:0]*/;
    _args[4] = origExchange /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall managedAccounts(BSTR accountsList)
  {
    _TDispID _dispid(/* managedAccounts */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = accountsList /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall openOrder3(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                             BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, BSTR action
                             , long quantity, BSTR orderType, double lmtPrice, double auxPrice, 
                             BSTR tif, BSTR ocaGroup, BSTR account, BSTR openClose, long origin, 
                             BSTR orderRef, long clientId, long permId, BSTR sharesAllocation, 
                             BSTR faGroup, BSTR faMethod, BSTR faPercentage, BSTR faProfile, 
                             BSTR goodAfterTime, BSTR goodTillDate)
  {
    _TDispID _dispid(/* openOrder3 */ DISPID(20));
    TAutoArgs<29> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = exchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = localSymbol /*[VT_BSTR:0]*/;
    _args[10] = action /*[VT_BSTR:0]*/;
    _args[11] = quantity /*[VT_I4:0]*/;
    _args[12] = orderType /*[VT_BSTR:0]*/;
    _args[13] = lmtPrice /*[VT_R8:0]*/;
    _args[14] = auxPrice /*[VT_R8:0]*/;
    _args[15] = tif /*[VT_BSTR:0]*/;
    _args[16] = ocaGroup /*[VT_BSTR:0]*/;
    _args[17] = account /*[VT_BSTR:0]*/;
    _args[18] = openClose /*[VT_BSTR:0]*/;
    _args[19] = origin /*[VT_I4:0]*/;
    _args[20] = orderRef /*[VT_BSTR:0]*/;
    _args[21] = clientId /*[VT_I4:0]*/;
    _args[22] = permId /*[VT_I4:0]*/;
    _args[23] = sharesAllocation /*[VT_BSTR:0]*/;
    _args[24] = faGroup /*[VT_BSTR:0]*/;
    _args[25] = faMethod /*[VT_BSTR:0]*/;
    _args[26] = faPercentage /*[VT_BSTR:0]*/;
    _args[27] = faProfile /*[VT_BSTR:0]*/;
    _args[28] = goodAfterTime /*[VT_BSTR:0]*/;
    _args[29] = goodTillDate /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall receiveFA(long faDataType, BSTR cxml)
  {
    _TDispID _dispid(/* receiveFA */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = faDataType /*[VT_I4:0]*/;
    _args[2] = cxml /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall historicalData(long reqId, BSTR date, double open, double high, double low, 
                                 double close, long volume, long barCount, double WAP, long hasGaps)
  {
    _TDispID _dispid(/* historicalData */ DISPID(22));
    TAutoArgs<10> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = date /*[VT_BSTR:0]*/;
    _args[3] = open /*[VT_R8:0]*/;
    _args[4] = high /*[VT_R8:0]*/;
    _args[5] = low /*[VT_R8:0]*/;
    _args[6] = close /*[VT_R8:0]*/;
    _args[7] = volume /*[VT_I4:0]*/;
    _args[8] = barCount /*[VT_I4:0]*/;
    _args[9] = WAP /*[VT_R8:0]*/;
    _args[10] = hasGaps /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall openOrder4(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                             BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, BSTR action
                             , long quantity, BSTR orderType, double lmtPrice, double auxPrice, 
                             BSTR tif, BSTR ocaGroup, BSTR account, BSTR openClose, long origin, 
                             BSTR orderRef, long clientId, long permId, BSTR sharesAllocation, 
                             BSTR faGroup, BSTR faMethod, BSTR faPercentage, BSTR faProfile, 
                             BSTR goodAfterTime, BSTR goodTillDate, long ocaType, BSTR rule80A, 
                             BSTR settlingFirm, int allOrNone, long minQty, double percentOffset, 
                             int eTradeOnly, int firmQuoteOnly, double nbboPriceCap, 
                             long auctionStrategy, double startingPrice, double stockRefPrice, 
                             double delta, double stockRangeLower, double stockRangeUpper, 
                             int blockOrder, int sweepToFill, int ignoreRth, int hidden, 
                             double discretionaryAmt, long displaySize, long parentId, 
                             long triggerMethod, long shortSaleSlot, BSTR designatedLocation, 
                             double volatility, long volatilityType, BSTR deltaNeutralOrderType, 
                             double deltaNeutralAuxPrice, int continuousUpdate, 
                             int referencePriceType, double trailStopPrice, double basisPoints, 
                             long basisPointsType, BSTR legsStr, long scaleInitLevelSize, 
                             long scaleSubsLevelSize, double scalePriceIncrement)
  {
    _TDispID _dispid(/* openOrder4 */ DISPID(23));
    TAutoArgs<67> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = symbol /*[VT_BSTR:0]*/;
    _args[3] = secType /*[VT_BSTR:0]*/;
    _args[4] = expiry /*[VT_BSTR:0]*/;
    _args[5] = strike /*[VT_R8:0]*/;
    _args[6] = right /*[VT_BSTR:0]*/;
    _args[7] = exchange /*[VT_BSTR:0]*/;
    _args[8] = curency /*[VT_BSTR:0]*/;
    _args[9] = localSymbol /*[VT_BSTR:0]*/;
    _args[10] = action /*[VT_BSTR:0]*/;
    _args[11] = quantity /*[VT_I4:0]*/;
    _args[12] = orderType /*[VT_BSTR:0]*/;
    _args[13] = lmtPrice /*[VT_R8:0]*/;
    _args[14] = auxPrice /*[VT_R8:0]*/;
    _args[15] = tif /*[VT_BSTR:0]*/;
    _args[16] = ocaGroup /*[VT_BSTR:0]*/;
    _args[17] = account /*[VT_BSTR:0]*/;
    _args[18] = openClose /*[VT_BSTR:0]*/;
    _args[19] = origin /*[VT_I4:0]*/;
    _args[20] = orderRef /*[VT_BSTR:0]*/;
    _args[21] = clientId /*[VT_I4:0]*/;
    _args[22] = permId /*[VT_I4:0]*/;
    _args[23] = sharesAllocation /*[VT_BSTR:0]*/;
    _args[24] = faGroup /*[VT_BSTR:0]*/;
    _args[25] = faMethod /*[VT_BSTR:0]*/;
    _args[26] = faPercentage /*[VT_BSTR:0]*/;
    _args[27] = faProfile /*[VT_BSTR:0]*/;
    _args[28] = goodAfterTime /*[VT_BSTR:0]*/;
    _args[29] = goodTillDate /*[VT_BSTR:0]*/;
    _args[30] = ocaType /*[VT_I4:0]*/;
    _args[31] = rule80A /*[VT_BSTR:0]*/;
    _args[32] = settlingFirm /*[VT_BSTR:0]*/;
    _args[33] = allOrNone /*[VT_INT:0]*/;
    _args[34] = minQty /*[VT_I4:0]*/;
    _args[35] = percentOffset /*[VT_R8:0]*/;
    _args[36] = eTradeOnly /*[VT_INT:0]*/;
    _args[37] = firmQuoteOnly /*[VT_INT:0]*/;
    _args[38] = nbboPriceCap /*[VT_R8:0]*/;
    _args[39] = auctionStrategy /*[VT_I4:0]*/;
    _args[40] = startingPrice /*[VT_R8:0]*/;
    _args[41] = stockRefPrice /*[VT_R8:0]*/;
    _args[42] = delta /*[VT_R8:0]*/;
    _args[43] = stockRangeLower /*[VT_R8:0]*/;
    _args[44] = stockRangeUpper /*[VT_R8:0]*/;
    _args[45] = blockOrder /*[VT_INT:0]*/;
    _args[46] = sweepToFill /*[VT_INT:0]*/;
    _args[47] = ignoreRth /*[VT_INT:0]*/;
    _args[48] = hidden /*[VT_INT:0]*/;
    _args[49] = discretionaryAmt /*[VT_R8:0]*/;
    _args[50] = displaySize /*[VT_I4:0]*/;
    _args[51] = parentId /*[VT_I4:0]*/;
    _args[52] = triggerMethod /*[VT_I4:0]*/;
    _args[53] = shortSaleSlot /*[VT_I4:0]*/;
    _args[54] = designatedLocation /*[VT_BSTR:0]*/;
    _args[55] = volatility /*[VT_R8:0]*/;
    _args[56] = volatilityType /*[VT_I4:0]*/;
    _args[57] = deltaNeutralOrderType /*[VT_BSTR:0]*/;
    _args[58] = deltaNeutralAuxPrice /*[VT_R8:0]*/;
    _args[59] = continuousUpdate /*[VT_INT:0]*/;
    _args[60] = referencePriceType /*[VT_INT:0]*/;
    _args[61] = trailStopPrice /*[VT_R8:0]*/;
    _args[62] = basisPoints /*[VT_R8:0]*/;
    _args[63] = basisPointsType /*[VT_I4:0]*/;
    _args[64] = legsStr /*[VT_BSTR:0]*/;
    _args[65] = scaleInitLevelSize /*[VT_I4:0]*/;
    _args[66] = scaleSubsLevelSize /*[VT_I4:0]*/;
    _args[67] = scalePriceIncrement /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall bondContractDetails(BSTR symbol, BSTR secType, BSTR cusip, double coupon, 
                                      BSTR maturity, BSTR issueDate, BSTR ratings, BSTR bondType, 
                                      BSTR couponType, long convertible, long callable, long putable
                                      , BSTR descAppend, BSTR exchange, BSTR curency, 
                                      BSTR marketName, BSTR tradingClass, long conId, double minTick
                                      , BSTR orderTypes, BSTR validExchanges, BSTR nextOptionDate, 
                                      BSTR nextOptionType, long nextOptionPartial, BSTR notes)
  {
    _TDispID _dispid(/* bondContractDetails */ DISPID(24));
    TAutoArgs<25> _args;
    _args[1] = symbol /*[VT_BSTR:0]*/;
    _args[2] = secType /*[VT_BSTR:0]*/;
    _args[3] = cusip /*[VT_BSTR:0]*/;
    _args[4] = coupon /*[VT_R8:0]*/;
    _args[5] = maturity /*[VT_BSTR:0]*/;
    _args[6] = issueDate /*[VT_BSTR:0]*/;
    _args[7] = ratings /*[VT_BSTR:0]*/;
    _args[8] = bondType /*[VT_BSTR:0]*/;
    _args[9] = couponType /*[VT_BSTR:0]*/;
    _args[10] = convertible /*[VT_I4:0]*/;
    _args[11] = callable /*[VT_I4:0]*/;
    _args[12] = putable /*[VT_I4:0]*/;
    _args[13] = descAppend /*[VT_BSTR:0]*/;
    _args[14] = exchange /*[VT_BSTR:0]*/;
    _args[15] = curency /*[VT_BSTR:0]*/;
    _args[16] = marketName /*[VT_BSTR:0]*/;
    _args[17] = tradingClass /*[VT_BSTR:0]*/;
    _args[18] = conId /*[VT_I4:0]*/;
    _args[19] = minTick /*[VT_R8:0]*/;
    _args[20] = orderTypes /*[VT_BSTR:0]*/;
    _args[21] = validExchanges /*[VT_BSTR:0]*/;
    _args[22] = nextOptionDate /*[VT_BSTR:0]*/;
    _args[23] = nextOptionType /*[VT_BSTR:0]*/;
    _args[24] = nextOptionPartial /*[VT_I4:0]*/;
    _args[25] = notes /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall scannerParameters(BSTR xml)
  {
    _TDispID _dispid(/* scannerParameters */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = xml /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall scannerData(long reqId, long rank, BSTR symbol, BSTR secType, BSTR expiry, 
                              double strike, BSTR right, BSTR exchange, BSTR curency, 
                              BSTR localSymbol, BSTR marketName, BSTR tradingClass, BSTR distance, 
                              BSTR benchmark, BSTR projection, BSTR legsStr)
  {
    _TDispID _dispid(/* scannerData */ DISPID(26));
    TAutoArgs<16> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = rank /*[VT_I4:0]*/;
    _args[3] = symbol /*[VT_BSTR:0]*/;
    _args[4] = secType /*[VT_BSTR:0]*/;
    _args[5] = expiry /*[VT_BSTR:0]*/;
    _args[6] = strike /*[VT_R8:0]*/;
    _args[7] = right /*[VT_BSTR:0]*/;
    _args[8] = exchange /*[VT_BSTR:0]*/;
    _args[9] = curency /*[VT_BSTR:0]*/;
    _args[10] = localSymbol /*[VT_BSTR:0]*/;
    _args[11] = marketName /*[VT_BSTR:0]*/;
    _args[12] = tradingClass /*[VT_BSTR:0]*/;
    _args[13] = distance /*[VT_BSTR:0]*/;
    _args[14] = benchmark /*[VT_BSTR:0]*/;
    _args[15] = projection /*[VT_BSTR:0]*/;
    _args[16] = legsStr /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickOptionComputation(long id, long tickType, double impliedVol, double delta, 
                                        double modelPrice, double pvDividend)
  {
    _TDispID _dispid(/* tickOptionComputation */ DISPID(27));
    TAutoArgs<6> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = tickType /*[VT_I4:0]*/;
    _args[3] = impliedVol /*[VT_R8:0]*/;
    _args[4] = delta /*[VT_R8:0]*/;
    _args[5] = modelPrice /*[VT_R8:0]*/;
    _args[6] = pvDividend /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickGeneric(long id, long tickType, double value)
  {
    _TDispID _dispid(/* tickGeneric */ DISPID(28));
    TAutoArgs<3> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = tickType /*[VT_I4:0]*/;
    _args[3] = value /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickString(long id, long tickType, BSTR value)
  {
    _TDispID _dispid(/* tickString */ DISPID(29));
    TAutoArgs<3> _args;
    _args[1] = id /*[VT_I4:0]*/;
    _args[2] = tickType /*[VT_I4:0]*/;
    _args[3] = value /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickEFP(long tickerId, long field, double basisPoints, BSTR formattedBasisPoints, 
                          double totalDividends, long holdDays, BSTR futureExpiry, 
                          double dividendImpact, double dividendsToExpiry)
  {
    _TDispID _dispid(/* tickEFP */ DISPID(30));
    TAutoArgs<9> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = field /*[VT_I4:0]*/;
    _args[3] = basisPoints /*[VT_R8:0]*/;
    _args[4] = formattedBasisPoints /*[VT_BSTR:0]*/;
    _args[5] = totalDividends /*[VT_R8:0]*/;
    _args[6] = holdDays /*[VT_I4:0]*/;
    _args[7] = futureExpiry /*[VT_BSTR:0]*/;
    _args[8] = dividendImpact /*[VT_R8:0]*/;
    _args[9] = dividendsToExpiry /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall realtimeBar(long tickerId, long time, double open, double high, double low, 
                              double close, long volume, double WAP, long Count)
  {
    _TDispID _dispid(/* realtimeBar */ DISPID(31));
    TAutoArgs<9> _args;
    _args[1] = tickerId /*[VT_I4:0]*/;
    _args[2] = time /*[VT_I4:0]*/;
    _args[3] = open /*[VT_R8:0]*/;
    _args[4] = high /*[VT_R8:0]*/;
    _args[5] = low /*[VT_R8:0]*/;
    _args[6] = close /*[VT_R8:0]*/;
    _args[7] = volume /*[VT_I4:0]*/;
    _args[8] = WAP /*[VT_R8:0]*/;
    _args[9] = Count /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall currentTime(long time)
  {
    _TDispID _dispid(/* currentTime */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = time /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall scannerDataEnd(long reqId)
  {
    _TDispID _dispid(/* scannerDataEnd */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall fundamentalData(long reqId, BSTR data)
  {
    _TDispID _dispid(/* fundamentalData */ DISPID(34));
    TAutoArgs<2> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = data /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall contractDetailsEnd(long reqId)
  {
    _TDispID _dispid(/* contractDetailsEnd */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall openOrderEnd()
  {
    _TDispID _dispid(/* openOrderEnd */ DISPID(36));
    OleProcedure(_dispid);
  }

  void __fastcall accountDownloadEnd(BSTR accountName)
  {
    _TDispID _dispid(/* accountDownloadEnd */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = accountName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall execDetailsEnd(long reqId)
  {
    _TDispID _dispid(/* execDetailsEnd */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall deltaNeutralValidation(long reqId, Twslib_tlb::IUnderComp* underComp)
  {
    _TDispID _dispid(/* deltaNeutralValidation */ DISPID(39));
    TAutoArgs<2> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IUnderComp*)underComp /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall tickSnapshotEnd(long reqId)
  {
    _TDispID _dispid(/* tickSnapshotEnd */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall contractDetailsEx(long reqId, Twslib_tlb::IContractDetails* contractDetails)
  {
    _TDispID _dispid(/* contractDetailsEx */ DISPID(100));
    TAutoArgs<2> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContractDetails*)contractDetails /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall openOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                              Twslib_tlb::IOrder* order, Twslib_tlb::IOrderState* orderState)
  {
    _TDispID _dispid(/* openOrderEx */ DISPID(101));
    TAutoArgs<4> _args;
    _args[1] = orderId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Twslib_tlb::IOrder*)order /*[VT_USERDEFINED:1]*/;
    _args[4] = (LPDISPATCH)(Twslib_tlb::IOrderState*)orderState /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall execDetailsEx(long reqId, Twslib_tlb::IContract* contract, 
                                Twslib_tlb::IExecution* execution)
  {
    _TDispID _dispid(/* execDetailsEx */ DISPID(102));
    TAutoArgs<3> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[3] = (LPDISPATCH)(Twslib_tlb::IExecution*)execution /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall updatePortfolioEx(Twslib_tlb::IContract* contract, long position, 
                                    double marketPrice, double marketValue, double averageCost, 
                                    double unrealizedPNL, double realizedPNL, BSTR accountName)
  {
    _TDispID _dispid(/* updatePortfolioEx */ DISPID(103));
    TAutoArgs<8> _args;
    _args[1] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
    _args[2] = position /*[VT_I4:0]*/;
    _args[3] = marketPrice /*[VT_R8:0]*/;
    _args[4] = marketValue /*[VT_R8:0]*/;
    _args[5] = averageCost /*[VT_R8:0]*/;
    _args[6] = unrealizedPNL /*[VT_R8:0]*/;
    _args[7] = realizedPNL /*[VT_R8:0]*/;
    _args[8] = accountName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall scannerDataEx(long reqId, long rank, Twslib_tlb::IContractDetails* contractDetails
                                , BSTR distance, BSTR benchmark, BSTR projection, BSTR legsStr)
  {
    _TDispID _dispid(/* scannerDataEx */ DISPID(104));
    TAutoArgs<7> _args;
    _args[1] = reqId /*[VT_I4:0]*/;
    _args[2] = rank /*[VT_I4:0]*/;
    _args[3] = (LPDISPATCH)(Twslib_tlb::IContractDetails*)contractDetails /*[VT_USERDEFINED:1]*/;
    _args[4] = distance /*[VT_BSTR:0]*/;
    _args[5] = benchmark /*[VT_BSTR:0]*/;
    _args[6] = projection /*[VT_BSTR:0]*/;
    _args[7] = legsStr /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IComboLeg>  TCOMIComboLeg;

// *********************************************************************//
// DispIntf:  IComboLeg
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {573E95CF-F67C-4367-A95B-CB7599BD0673}
// *********************************************************************//
template<class T>
class IComboLegDispT : public TAutoDriver<IComboLeg>
{
public:
  IComboLegDispT(){}

  IComboLegDispT(IComboLeg *pintf)
  {
    TAutoDriver<IComboLeg>::Bind(pintf, false);
  }

  IComboLegDispT(IComboLegPtr pintf)
  {
    TAutoDriver<IComboLeg>::Bind(pintf, true);
  }

  IComboLegDispT& operator=(IComboLeg *pintf)
  {
    TAutoDriver<IComboLeg>::Bind(pintf, false);
    return *this;
  }

  IComboLegDispT& operator=(IComboLegPtr pintf)
  {
    TAutoDriver<IComboLeg>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_conId(long* pVal/*[out,retval]*/);
  long            __fastcall get_conId(void);
  HRESULT         __fastcall set_conId(long pVal/*[in]*/);
  HRESULT         __fastcall get_ratio(long* pVal/*[out,retval]*/);
  long            __fastcall get_ratio(void);
  HRESULT         __fastcall set_ratio(long pVal/*[in]*/);
  HRESULT         __fastcall get_action(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_action(void);
  HRESULT         __fastcall set_action(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_exchange(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_exchange(void);
  HRESULT         __fastcall set_exchange(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_openClose(long* pVal/*[out,retval]*/);
  long            __fastcall get_openClose(void);
  HRESULT         __fastcall set_openClose(long pVal/*[in]*/);
  HRESULT         __fastcall get_shortSaleSlot(long* pVal/*[out,retval]*/);
  long            __fastcall get_shortSaleSlot(void);
  HRESULT         __fastcall set_shortSaleSlot(long pVal/*[in]*/);
  HRESULT         __fastcall get_designatedLocation(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_designatedLocation(void);
  HRESULT         __fastcall set_designatedLocation(BSTR pVal/*[in]*/);

  __property   long            conId = {read = get_conId, write = set_conId};
  __property   long            ratio = {read = get_ratio, write = set_ratio};
  __property   BSTR            action = {read = get_action, write = set_action};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   long            openClose = {read = get_openClose, write = set_openClose};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};
};
typedef IComboLegDispT<IComboLeg> IComboLegDisp;

typedef TComInterface<IComboLegList>  TCOMIComboLegList;

// *********************************************************************//
// DispIntf:  IComboLegList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BE3E5CD3-6F13-4D39-981C-4F75C063C2BA}
// *********************************************************************//
template<class T>
class IComboLegListDispT : public TAutoDriver<IComboLegList>
{
public:
  IComboLegListDispT(){}

  IComboLegListDispT(IComboLegList *pintf)
  {
    TAutoDriver<IComboLegList>::Bind(pintf, false);
  }

  IComboLegListDispT(IComboLegListPtr pintf)
  {
    TAutoDriver<IComboLegList>::Bind(pintf, true);
  }

  IComboLegListDispT& operator=(IComboLegList *pintf)
  {
    TAutoDriver<IComboLegList>::Bind(pintf, false);
    return *this;
  }

  IComboLegListDispT& operator=(IComboLegListPtr pintf)
  {
    TAutoDriver<IComboLegList>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(long index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(LPDISPATCH* leg/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef IComboLegListDispT<IComboLegList> IComboLegListDisp;

typedef TComInterface<IUnderComp>  TCOMIUnderComp;

// *********************************************************************//
// DispIntf:  IUnderComp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5EE73C4-7D45-428E-A347-821CBF918AA6}
// *********************************************************************//
template<class T>
class IUnderCompDispT : public TAutoDriver<IUnderComp>
{
public:
  IUnderCompDispT(){}

  IUnderCompDispT(IUnderComp *pintf)
  {
    TAutoDriver<IUnderComp>::Bind(pintf, false);
  }

  IUnderCompDispT(IUnderCompPtr pintf)
  {
    TAutoDriver<IUnderComp>::Bind(pintf, true);
  }

  IUnderCompDispT& operator=(IUnderComp *pintf)
  {
    TAutoDriver<IUnderComp>::Bind(pintf, false);
    return *this;
  }

  IUnderCompDispT& operator=(IUnderCompPtr pintf)
  {
    TAutoDriver<IUnderComp>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_conId(long* pVal/*[out,retval]*/);
  long            __fastcall get_conId(void);
  HRESULT         __fastcall set_conId(long pVal/*[in]*/);
  HRESULT         __fastcall get_delta(double* pVal/*[out,retval]*/);
  double          __fastcall get_delta(void);
  HRESULT         __fastcall set_delta(double pVal/*[in]*/);
  HRESULT         __fastcall get_price(double* pVal/*[out,retval]*/);
  double          __fastcall get_price(void);
  HRESULT         __fastcall set_price(double pVal/*[in]*/);

  __property   long            conId = {read = get_conId, write = set_conId};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          price = {read = get_price, write = set_price};
};
typedef IUnderCompDispT<IUnderComp> IUnderCompDisp;

typedef TComInterface<IContract>  TCOMIContract;

// *********************************************************************//
// DispIntf:  IContract
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE6A66F3-8FA9-4076-9C1F-3728B10A4CC7}
// *********************************************************************//
template<class T>
class IContractDispT : public TAutoDriver<IContract>
{
public:
  IContractDispT(){}

  IContractDispT(IContract *pintf)
  {
    TAutoDriver<IContract>::Bind(pintf, false);
  }

  IContractDispT(IContractPtr pintf)
  {
    TAutoDriver<IContract>::Bind(pintf, true);
  }

  IContractDispT& operator=(IContract *pintf)
  {
    TAutoDriver<IContract>::Bind(pintf, false);
    return *this;
  }

  IContractDispT& operator=(IContractPtr pintf)
  {
    TAutoDriver<IContract>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_conId(long* pVal/*[out,retval]*/);
  long            __fastcall get_conId(void);
  HRESULT         __fastcall set_conId(long pVal/*[in]*/);
  HRESULT         __fastcall get_symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_symbol(void);
  HRESULT         __fastcall set_symbol(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_secType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_secType(void);
  HRESULT         __fastcall set_secType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_expiry(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_expiry(void);
  HRESULT         __fastcall set_expiry(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_strike(double* pVal/*[out,retval]*/);
  double          __fastcall get_strike(void);
  HRESULT         __fastcall set_strike(double pVal/*[in]*/);
  HRESULT         __fastcall get_right(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_right(void);
  HRESULT         __fastcall set_right(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_multiplier(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_multiplier(void);
  HRESULT         __fastcall set_multiplier(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_exchange(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_exchange(void);
  HRESULT         __fastcall set_exchange(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_primaryExchange(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_primaryExchange(void);
  HRESULT         __fastcall set_primaryExchange(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_currency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_currency(void);
  HRESULT         __fastcall set_currency(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_localSymbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_localSymbol(void);
  HRESULT         __fastcall set_localSymbol(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_includeExpired(long* pVal/*[out,retval]*/);
  long            __fastcall get_includeExpired(void);
  HRESULT         __fastcall set_includeExpired(long pVal/*[in]*/);
  HRESULT         __fastcall get_comboLegs(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_comboLegs(void);
  HRESULT         __fastcall set_comboLegs(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_underComp(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_underComp(void);
  HRESULT         __fastcall set_underComp(LPDISPATCH pVal/*[in]*/);
  HRESULT         __fastcall get_comboLegsDescrip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_comboLegsDescrip(void);

  __property   long            conId = {read = get_conId, write = set_conId};
  __property   BSTR            symbol = {read = get_symbol, write = set_symbol};
  __property   BSTR            secType = {read = get_secType, write = set_secType};
  __property   BSTR            expiry = {read = get_expiry, write = set_expiry};
  __property   double          strike = {read = get_strike, write = set_strike};
  __property   BSTR            right = {read = get_right, write = set_right};
  __property   BSTR            multiplier = {read = get_multiplier, write = set_multiplier};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   BSTR            primaryExchange = {read = get_primaryExchange, write = set_primaryExchange};
  __property   BSTR            currency = {read = get_currency, write = set_currency};
  __property   BSTR            localSymbol = {read = get_localSymbol, write = set_localSymbol};
  __property   long            includeExpired = {read = get_includeExpired, write = set_includeExpired};
  __property   LPDISPATCH      comboLegs = {read = get_comboLegs, write = set_comboLegs};
  __property   LPDISPATCH      underComp = {read = get_underComp, write = set_underComp};
  __property   BSTR            comboLegsDescrip = {read = get_comboLegsDescrip};
};
typedef IContractDispT<IContract> IContractDisp;

typedef TComInterface<IContractDetails>  TCOMIContractDetails;

// *********************************************************************//
// DispIntf:  IContractDetails
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64F03988-ED93-452E-830B-3420DF21BAF9}
// *********************************************************************//
template<class T>
class IContractDetailsDispT : public TAutoDriver<IContractDetails>
{
public:
  IContractDetailsDispT(){}

  IContractDetailsDispT(IContractDetails *pintf)
  {
    TAutoDriver<IContractDetails>::Bind(pintf, false);
  }

  IContractDetailsDispT(IContractDetailsPtr pintf)
  {
    TAutoDriver<IContractDetails>::Bind(pintf, true);
  }

  IContractDetailsDispT& operator=(IContractDetails *pintf)
  {
    TAutoDriver<IContractDetails>::Bind(pintf, false);
    return *this;
  }

  IContractDetailsDispT& operator=(IContractDetailsPtr pintf)
  {
    TAutoDriver<IContractDetails>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_marketName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_marketName(void);
  HRESULT         __fastcall get_tradingClass(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_tradingClass(void);
  HRESULT         __fastcall get_minTick(double* pVal/*[out,retval]*/);
  double          __fastcall get_minTick(void);
  HRESULT         __fastcall get_priceMagnifier(long* pVal/*[out,retval]*/);
  long            __fastcall get_priceMagnifier(void);
  HRESULT         __fastcall get_orderTypes(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_orderTypes(void);
  HRESULT         __fastcall get_validExchanges(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_validExchanges(void);
  HRESULT         __fastcall get_underConId(long* pVal/*[out,retval]*/);
  long            __fastcall get_underConId(void);
  HRESULT         __fastcall get_longName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_longName(void);
  HRESULT         __fastcall get_summary(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_summary(void);
  HRESULT         __fastcall get_cusip(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_cusip(void);
  HRESULT         __fastcall get_ratings(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ratings(void);
  HRESULT         __fastcall get_descAppend(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_descAppend(void);
  HRESULT         __fastcall get_bondType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_bondType(void);
  HRESULT         __fastcall get_couponType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_couponType(void);
  HRESULT         __fastcall get_callable(long* pVal/*[out,retval]*/);
  long            __fastcall get_callable(void);
  HRESULT         __fastcall get_putable(long* pVal/*[out,retval]*/);
  long            __fastcall get_putable(void);
  HRESULT         __fastcall get_coupon(double* pVal/*[out,retval]*/);
  double          __fastcall get_coupon(void);
  HRESULT         __fastcall get_convertible(long* pVal/*[out,retval]*/);
  long            __fastcall get_convertible(void);
  HRESULT         __fastcall get_maturity(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_maturity(void);
  HRESULT         __fastcall get_issueDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_issueDate(void);
  HRESULT         __fastcall get_nextOptionDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_nextOptionDate(void);
  HRESULT         __fastcall get_nextOptionType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_nextOptionType(void);
  HRESULT         __fastcall get_nextOptionPartial(long* pVal/*[out,retval]*/);
  long            __fastcall get_nextOptionPartial(void);
  HRESULT         __fastcall get_notes(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_notes(void);

  __property   BSTR            marketName = {read = get_marketName};
  __property   BSTR            tradingClass = {read = get_tradingClass};
  __property   double          minTick = {read = get_minTick};
  __property   long            priceMagnifier = {read = get_priceMagnifier};
  __property   BSTR            orderTypes = {read = get_orderTypes};
  __property   BSTR            validExchanges = {read = get_validExchanges};
  __property   long            underConId = {read = get_underConId};
  __property   BSTR            longName = {read = get_longName};
  __property   LPDISPATCH      summary = {read = get_summary};
  __property   BSTR            cusip = {read = get_cusip};
  __property   BSTR            ratings = {read = get_ratings};
  __property   BSTR            descAppend = {read = get_descAppend};
  __property   BSTR            bondType = {read = get_bondType};
  __property   BSTR            couponType = {read = get_couponType};
  __property   long            callable = {read = get_callable};
  __property   long            putable = {read = get_putable};
  __property   double          coupon = {read = get_coupon};
  __property   long            convertible = {read = get_convertible};
  __property   BSTR            maturity = {read = get_maturity};
  __property   BSTR            issueDate = {read = get_issueDate};
  __property   BSTR            nextOptionDate = {read = get_nextOptionDate};
  __property   BSTR            nextOptionType = {read = get_nextOptionType};
  __property   long            nextOptionPartial = {read = get_nextOptionPartial};
  __property   BSTR            notes = {read = get_notes};
};
typedef IContractDetailsDispT<IContractDetails> IContractDetailsDisp;

typedef TComInterface<ITagValue>  TCOMITagValue;

// *********************************************************************//
// DispIntf:  ITagValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06FF1D3F-F12F-47D1-9443-A74D3CD58723}
// *********************************************************************//
template<class T>
class ITagValueDispT : public TAutoDriver<ITagValue>
{
public:
  ITagValueDispT(){}

  ITagValueDispT(ITagValue *pintf)
  {
    TAutoDriver<ITagValue>::Bind(pintf, false);
  }

  ITagValueDispT(ITagValuePtr pintf)
  {
    TAutoDriver<ITagValue>::Bind(pintf, true);
  }

  ITagValueDispT& operator=(ITagValue *pintf)
  {
    TAutoDriver<ITagValue>::Bind(pintf, false);
    return *this;
  }

  ITagValueDispT& operator=(ITagValuePtr pintf)
  {
    TAutoDriver<ITagValue>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_tag(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_tag(void);
  HRESULT         __fastcall set_tag(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_value(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_value(void);
  HRESULT         __fastcall set_value(BSTR pVal/*[in]*/);

  __property   BSTR            tag = {read = get_tag, write = set_tag};
  __property   BSTR            value = {read = get_value, write = set_value};
};
typedef ITagValueDispT<ITagValue> ITagValueDisp;

typedef TComInterface<ITagValueList>  TCOMITagValueList;

// *********************************************************************//
// DispIntf:  ITagValueList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CC48E64E-C1A7-4867-8738-578404D75088}
// *********************************************************************//
template<class T>
class ITagValueListDispT : public TAutoDriver<ITagValueList>
{
public:
  ITagValueListDispT(){}

  ITagValueListDispT(ITagValueList *pintf)
  {
    TAutoDriver<ITagValueList>::Bind(pintf, false);
  }

  ITagValueListDispT(ITagValueListPtr pintf)
  {
    TAutoDriver<ITagValueList>::Bind(pintf, true);
  }

  ITagValueListDispT& operator=(ITagValueList *pintf)
  {
    TAutoDriver<ITagValueList>::Bind(pintf, false);
    return *this;
  }

  ITagValueListDispT& operator=(ITagValueListPtr pintf)
  {
    TAutoDriver<ITagValueList>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(long index/*[in]*/);
  HRESULT         __fastcall get_Count(long* pVal/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall AddEmpty(LPDISPATCH* leg/*[out,retval]*/);
  LPDISPATCH      __fastcall AddEmpty(void);
  HRESULT         __fastcall Add(BSTR tag/*[in]*/, BSTR value/*[in]*/, 
                                 LPDISPATCH* leg/*[out,retval]*/);
  LPDISPATCH      __fastcall Add(BSTR tag/*[in]*/, BSTR value/*[in]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   long            Count = {read = get_Count};
};
typedef ITagValueListDispT<ITagValueList> ITagValueListDisp;

typedef TComInterface<IOrder>  TCOMIOrder;

// *********************************************************************//
// DispIntf:  IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {25D97F3D-2C4D-4080-9250-D2FB8071BE58}
// *********************************************************************//
template<class T>
class IOrderDispT : public TAutoDriver<IOrder>
{
public:
  IOrderDispT(){}

  IOrderDispT(IOrder *pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, false);
  }

  IOrderDispT(IOrderPtr pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, true);
  }

  IOrderDispT& operator=(IOrder *pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, false);
    return *this;
  }

  IOrderDispT& operator=(IOrderPtr pintf)
  {
    TAutoDriver<IOrder>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_orderId(long* pVal/*[out,retval]*/);
  long            __fastcall get_orderId(void);
  HRESULT         __fastcall set_orderId(long pVal/*[in]*/);
  HRESULT         __fastcall get_clientId(long* pVal/*[out,retval]*/);
  long            __fastcall get_clientId(void);
  HRESULT         __fastcall set_clientId(long pVal/*[in]*/);
  HRESULT         __fastcall get_permId(long* pVal/*[out,retval]*/);
  long            __fastcall get_permId(void);
  HRESULT         __fastcall set_permId(long pVal/*[in]*/);
  HRESULT         __fastcall get_action(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_action(void);
  HRESULT         __fastcall set_action(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_totalQuantity(long* pVal/*[out,retval]*/);
  long            __fastcall get_totalQuantity(void);
  HRESULT         __fastcall set_totalQuantity(long pVal/*[in]*/);
  HRESULT         __fastcall get_orderType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_orderType(void);
  HRESULT         __fastcall set_orderType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_lmtPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_lmtPrice(void);
  HRESULT         __fastcall set_lmtPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_auxPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_auxPrice(void);
  HRESULT         __fastcall set_auxPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_timeInForce(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_timeInForce(void);
  HRESULT         __fastcall set_timeInForce(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ocaGroup(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ocaGroup(void);
  HRESULT         __fastcall set_ocaGroup(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_ocaType(long* pVal/*[out,retval]*/);
  long            __fastcall get_ocaType(void);
  HRESULT         __fastcall set_ocaType(long pVal/*[in]*/);
  HRESULT         __fastcall get_orderRef(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_orderRef(void);
  HRESULT         __fastcall set_orderRef(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_transmit(long* pVal/*[out,retval]*/);
  long            __fastcall get_transmit(void);
  HRESULT         __fastcall set_transmit(long pVal/*[in]*/);
  HRESULT         __fastcall get_parentId(long* pVal/*[out,retval]*/);
  long            __fastcall get_parentId(void);
  HRESULT         __fastcall set_parentId(long pVal/*[in]*/);
  HRESULT         __fastcall get_blockOrder(long* pVal/*[out,retval]*/);
  long            __fastcall get_blockOrder(void);
  HRESULT         __fastcall set_blockOrder(long pVal/*[in]*/);
  HRESULT         __fastcall get_sweepToFill(long* pVal/*[out,retval]*/);
  long            __fastcall get_sweepToFill(void);
  HRESULT         __fastcall set_sweepToFill(long pVal/*[in]*/);
  HRESULT         __fastcall get_displaySize(long* pVal/*[out,retval]*/);
  long            __fastcall get_displaySize(void);
  HRESULT         __fastcall set_displaySize(long pVal/*[in]*/);
  HRESULT         __fastcall get_triggerMethod(long* pVal/*[out,retval]*/);
  long            __fastcall get_triggerMethod(void);
  HRESULT         __fastcall set_triggerMethod(long pVal/*[in]*/);
  HRESULT         __fastcall get_outsideRth(long* pVal/*[out,retval]*/);
  long            __fastcall get_outsideRth(void);
  HRESULT         __fastcall set_outsideRth(long pVal/*[in]*/);
  HRESULT         __fastcall get_hidden(long* pVal/*[out,retval]*/);
  long            __fastcall get_hidden(void);
  HRESULT         __fastcall set_hidden(long pVal/*[in]*/);
  HRESULT         __fastcall get_goodAfterTime(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_goodAfterTime(void);
  HRESULT         __fastcall set_goodAfterTime(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_goodTillDate(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_goodTillDate(void);
  HRESULT         __fastcall set_goodTillDate(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_overridePercentageConstraints(long* pVal/*[out,retval]*/);
  long            __fastcall get_overridePercentageConstraints(void);
  HRESULT         __fastcall set_overridePercentageConstraints(long pVal/*[in]*/);
  HRESULT         __fastcall get_rule80A(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_rule80A(void);
  HRESULT         __fastcall set_rule80A(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_allOrNone(long* pVal/*[out,retval]*/);
  long            __fastcall get_allOrNone(void);
  HRESULT         __fastcall set_allOrNone(long pVal/*[in]*/);
  HRESULT         __fastcall get_minQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_minQty(void);
  HRESULT         __fastcall set_minQty(long pVal/*[in]*/);
  HRESULT         __fastcall get_percentOffset(double* pVal/*[out,retval]*/);
  double          __fastcall get_percentOffset(void);
  HRESULT         __fastcall set_percentOffset(double pVal/*[in]*/);
  HRESULT         __fastcall get_trailStopPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_trailStopPrice(void);
  HRESULT         __fastcall set_trailStopPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_whatIf(long* pVal/*[out,retval]*/);
  long            __fastcall get_whatIf(void);
  HRESULT         __fastcall set_whatIf(long pVal/*[in]*/);
  HRESULT         __fastcall get_notHeld(long* pVal/*[out,retval]*/);
  long            __fastcall get_notHeld(void);
  HRESULT         __fastcall set_notHeld(long pVal/*[in]*/);
  HRESULT         __fastcall get_faGroup(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_faGroup(void);
  HRESULT         __fastcall set_faGroup(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_faProfile(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_faProfile(void);
  HRESULT         __fastcall set_faProfile(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_faMethod(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_faMethod(void);
  HRESULT         __fastcall set_faMethod(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_faPercentage(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_faPercentage(void);
  HRESULT         __fastcall set_faPercentage(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_openClose(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_openClose(void);
  HRESULT         __fastcall set_openClose(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_origin(long* pVal/*[out,retval]*/);
  long            __fastcall get_origin(void);
  HRESULT         __fastcall set_origin(long pVal/*[in]*/);
  HRESULT         __fastcall get_shortSaleSlot(long* pVal/*[out,retval]*/);
  long            __fastcall get_shortSaleSlot(void);
  HRESULT         __fastcall set_shortSaleSlot(long pVal/*[in]*/);
  HRESULT         __fastcall get_designatedLocation(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_designatedLocation(void);
  HRESULT         __fastcall set_designatedLocation(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_discretionaryAmt(double* pVal/*[out,retval]*/);
  double          __fastcall get_discretionaryAmt(void);
  HRESULT         __fastcall set_discretionaryAmt(double pVal/*[in]*/);
  HRESULT         __fastcall get_eTradeOnly(long* pVal/*[out,retval]*/);
  long            __fastcall get_eTradeOnly(void);
  HRESULT         __fastcall set_eTradeOnly(long pVal/*[in]*/);
  HRESULT         __fastcall get_firmQuoteOnly(long* pVal/*[out,retval]*/);
  long            __fastcall get_firmQuoteOnly(void);
  HRESULT         __fastcall set_firmQuoteOnly(long pVal/*[in]*/);
  HRESULT         __fastcall get_nbboPriceCap(double* pVal/*[out,retval]*/);
  double          __fastcall get_nbboPriceCap(void);
  HRESULT         __fastcall set_nbboPriceCap(double pVal/*[in]*/);
  HRESULT         __fastcall get_auctionStrategy(long* pVal/*[out,retval]*/);
  long            __fastcall get_auctionStrategy(void);
  HRESULT         __fastcall set_auctionStrategy(long pVal/*[in]*/);
  HRESULT         __fastcall get_startingPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_startingPrice(void);
  HRESULT         __fastcall set_startingPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_stockRefPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_stockRefPrice(void);
  HRESULT         __fastcall set_stockRefPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_delta(double* pVal/*[out,retval]*/);
  double          __fastcall get_delta(void);
  HRESULT         __fastcall set_delta(double pVal/*[in]*/);
  HRESULT         __fastcall get_stockRangeLower(double* pVal/*[out,retval]*/);
  double          __fastcall get_stockRangeLower(void);
  HRESULT         __fastcall set_stockRangeLower(double pVal/*[in]*/);
  HRESULT         __fastcall get_stockRangeUpper(double* pVal/*[out,retval]*/);
  double          __fastcall get_stockRangeUpper(void);
  HRESULT         __fastcall set_stockRangeUpper(double pVal/*[in]*/);
  HRESULT         __fastcall get_volatility(double* pVal/*[out,retval]*/);
  double          __fastcall get_volatility(void);
  HRESULT         __fastcall set_volatility(double pVal/*[in]*/);
  HRESULT         __fastcall get_volatilityType(long* pVal/*[out,retval]*/);
  long            __fastcall get_volatilityType(void);
  HRESULT         __fastcall set_volatilityType(long pVal/*[in]*/);
  HRESULT         __fastcall get_continuousUpdate(long* pVal/*[out,retval]*/);
  long            __fastcall get_continuousUpdate(void);
  HRESULT         __fastcall set_continuousUpdate(long pVal/*[in]*/);
  HRESULT         __fastcall get_referencePriceType(long* pVal/*[out,retval]*/);
  long            __fastcall get_referencePriceType(void);
  HRESULT         __fastcall set_referencePriceType(long pVal/*[in]*/);
  HRESULT         __fastcall get_deltaNeutralOrderType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_deltaNeutralOrderType(void);
  HRESULT         __fastcall set_deltaNeutralOrderType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_deltaNeutralAuxPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_deltaNeutralAuxPrice(void);
  HRESULT         __fastcall set_deltaNeutralAuxPrice(double pVal/*[in]*/);
  HRESULT         __fastcall get_basisPoints(double* pVal/*[out,retval]*/);
  double          __fastcall get_basisPoints(void);
  HRESULT         __fastcall set_basisPoints(double pVal/*[in]*/);
  HRESULT         __fastcall get_basisPointsType(long* pVal/*[out,retval]*/);
  long            __fastcall get_basisPointsType(void);
  HRESULT         __fastcall set_basisPointsType(long pVal/*[in]*/);
  HRESULT         __fastcall get_scaleInitLevelSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_scaleInitLevelSize(void);
  HRESULT         __fastcall set_scaleInitLevelSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_scaleSubsLevelSize(long* pVal/*[out,retval]*/);
  long            __fastcall get_scaleSubsLevelSize(void);
  HRESULT         __fastcall set_scaleSubsLevelSize(long pVal/*[in]*/);
  HRESULT         __fastcall get_scalePriceIncrement(double* pVal/*[out,retval]*/);
  double          __fastcall get_scalePriceIncrement(void);
  HRESULT         __fastcall set_scalePriceIncrement(double pVal/*[in]*/);
  HRESULT         __fastcall get_account(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_account(void);
  HRESULT         __fastcall set_account(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_settlingFirm(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_settlingFirm(void);
  HRESULT         __fastcall set_settlingFirm(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_clearingAccount(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clearingAccount(void);
  HRESULT         __fastcall set_clearingAccount(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_clearingIntent(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_clearingIntent(void);
  HRESULT         __fastcall set_clearingIntent(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_algoStrategy(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_algoStrategy(void);
  HRESULT         __fastcall set_algoStrategy(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_algoParams(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_algoParams(void);
  HRESULT         __fastcall set_algoParams(LPDISPATCH pVal/*[in]*/);

  __property   long            orderId = {read = get_orderId, write = set_orderId};
  __property   long            clientId = {read = get_clientId, write = set_clientId};
  __property   long            permId = {read = get_permId, write = set_permId};
  __property   BSTR            action = {read = get_action, write = set_action};
  __property   long            totalQuantity = {read = get_totalQuantity, write = set_totalQuantity};
  __property   BSTR            orderType = {read = get_orderType, write = set_orderType};
  __property   double          lmtPrice = {read = get_lmtPrice, write = set_lmtPrice};
  __property   double          auxPrice = {read = get_auxPrice, write = set_auxPrice};
  __property   BSTR            timeInForce = {read = get_timeInForce, write = set_timeInForce};
  __property   BSTR            ocaGroup = {read = get_ocaGroup, write = set_ocaGroup};
  __property   long            ocaType = {read = get_ocaType, write = set_ocaType};
  __property   BSTR            orderRef = {read = get_orderRef, write = set_orderRef};
  __property   long            transmit = {read = get_transmit, write = set_transmit};
  __property   long            parentId = {read = get_parentId, write = set_parentId};
  __property   long            blockOrder = {read = get_blockOrder, write = set_blockOrder};
  __property   long            sweepToFill = {read = get_sweepToFill, write = set_sweepToFill};
  __property   long            displaySize = {read = get_displaySize, write = set_displaySize};
  __property   long            triggerMethod = {read = get_triggerMethod, write = set_triggerMethod};
  __property   long            outsideRth = {read = get_outsideRth, write = set_outsideRth};
  __property   long            hidden = {read = get_hidden, write = set_hidden};
  __property   BSTR            goodAfterTime = {read = get_goodAfterTime, write = set_goodAfterTime};
  __property   BSTR            goodTillDate = {read = get_goodTillDate, write = set_goodTillDate};
  __property   long            overridePercentageConstraints = {read = get_overridePercentageConstraints, write = set_overridePercentageConstraints};
  __property   BSTR            rule80A = {read = get_rule80A, write = set_rule80A};
  __property   long            allOrNone = {read = get_allOrNone, write = set_allOrNone};
  __property   long            minQty = {read = get_minQty, write = set_minQty};
  __property   double          percentOffset = {read = get_percentOffset, write = set_percentOffset};
  __property   double          trailStopPrice = {read = get_trailStopPrice, write = set_trailStopPrice};
  __property   long            whatIf = {read = get_whatIf, write = set_whatIf};
  __property   long            notHeld = {read = get_notHeld, write = set_notHeld};
  __property   BSTR            faGroup = {read = get_faGroup, write = set_faGroup};
  __property   BSTR            faProfile = {read = get_faProfile, write = set_faProfile};
  __property   BSTR            faMethod = {read = get_faMethod, write = set_faMethod};
  __property   BSTR            faPercentage = {read = get_faPercentage, write = set_faPercentage};
  __property   BSTR            openClose = {read = get_openClose, write = set_openClose};
  __property   long            origin = {read = get_origin, write = set_origin};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};
  __property   double          discretionaryAmt = {read = get_discretionaryAmt, write = set_discretionaryAmt};
  __property   long            eTradeOnly = {read = get_eTradeOnly, write = set_eTradeOnly};
  __property   long            firmQuoteOnly = {read = get_firmQuoteOnly, write = set_firmQuoteOnly};
  __property   double          nbboPriceCap = {read = get_nbboPriceCap, write = set_nbboPriceCap};
  __property   long            auctionStrategy = {read = get_auctionStrategy, write = set_auctionStrategy};
  __property   double          startingPrice = {read = get_startingPrice, write = set_startingPrice};
  __property   double          stockRefPrice = {read = get_stockRefPrice, write = set_stockRefPrice};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          stockRangeLower = {read = get_stockRangeLower, write = set_stockRangeLower};
  __property   double          stockRangeUpper = {read = get_stockRangeUpper, write = set_stockRangeUpper};
  __property   double          volatility = {read = get_volatility, write = set_volatility};
  __property   long            volatilityType = {read = get_volatilityType, write = set_volatilityType};
  __property   long            continuousUpdate = {read = get_continuousUpdate, write = set_continuousUpdate};
  __property   long            referencePriceType = {read = get_referencePriceType, write = set_referencePriceType};
  __property   BSTR            deltaNeutralOrderType = {read = get_deltaNeutralOrderType, write = set_deltaNeutralOrderType};
  __property   double          deltaNeutralAuxPrice = {read = get_deltaNeutralAuxPrice, write = set_deltaNeutralAuxPrice};
  __property   double          basisPoints = {read = get_basisPoints, write = set_basisPoints};
  __property   long            basisPointsType = {read = get_basisPointsType, write = set_basisPointsType};
  __property   long            scaleInitLevelSize = {read = get_scaleInitLevelSize, write = set_scaleInitLevelSize};
  __property   long            scaleSubsLevelSize = {read = get_scaleSubsLevelSize, write = set_scaleSubsLevelSize};
  __property   double          scalePriceIncrement = {read = get_scalePriceIncrement, write = set_scalePriceIncrement};
  __property   BSTR            account = {read = get_account, write = set_account};
  __property   BSTR            settlingFirm = {read = get_settlingFirm, write = set_settlingFirm};
  __property   BSTR            clearingAccount = {read = get_clearingAccount, write = set_clearingAccount};
  __property   BSTR            clearingIntent = {read = get_clearingIntent, write = set_clearingIntent};
  __property   BSTR            algoStrategy = {read = get_algoStrategy, write = set_algoStrategy};
  __property   LPDISPATCH      algoParams = {read = get_algoParams, write = set_algoParams};
};
typedef IOrderDispT<IOrder> IOrderDisp;

typedef TComInterface<IOrderState>  TCOMIOrderState;

// *********************************************************************//
// DispIntf:  IOrderState
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B33AE1F-99B0-4BCB-A024-42335897A6AF}
// *********************************************************************//
template<class T>
class IOrderStateDispT : public TAutoDriver<IOrderState>
{
public:
  IOrderStateDispT(){}

  IOrderStateDispT(IOrderState *pintf)
  {
    TAutoDriver<IOrderState>::Bind(pintf, false);
  }

  IOrderStateDispT(IOrderStatePtr pintf)
  {
    TAutoDriver<IOrderState>::Bind(pintf, true);
  }

  IOrderStateDispT& operator=(IOrderState *pintf)
  {
    TAutoDriver<IOrderState>::Bind(pintf, false);
    return *this;
  }

  IOrderStateDispT& operator=(IOrderStatePtr pintf)
  {
    TAutoDriver<IOrderState>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_status(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_status(void);
  HRESULT         __fastcall get_initMargin(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_initMargin(void);
  HRESULT         __fastcall get_maintMargin(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_maintMargin(void);
  HRESULT         __fastcall get_equityWithLoan(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_equityWithLoan(void);
  HRESULT         __fastcall get_commission(double* pVal/*[out,retval]*/);
  double          __fastcall get_commission(void);
  HRESULT         __fastcall get_minCommission(double* pVal/*[out,retval]*/);
  double          __fastcall get_minCommission(void);
  HRESULT         __fastcall get_maxCommission(double* pVal/*[out,retval]*/);
  double          __fastcall get_maxCommission(void);
  HRESULT         __fastcall get_commissionCurrency(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_commissionCurrency(void);
  HRESULT         __fastcall get_warningText(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_warningText(void);

  __property   BSTR            status = {read = get_status};
  __property   BSTR            initMargin = {read = get_initMargin};
  __property   BSTR            maintMargin = {read = get_maintMargin};
  __property   BSTR            equityWithLoan = {read = get_equityWithLoan};
  __property   double          commission = {read = get_commission};
  __property   double          minCommission = {read = get_minCommission};
  __property   double          maxCommission = {read = get_maxCommission};
  __property   BSTR            commissionCurrency = {read = get_commissionCurrency};
  __property   BSTR            warningText = {read = get_warningText};
};
typedef IOrderStateDispT<IOrderState> IOrderStateDisp;

typedef TComInterface<IExecution>  TCOMIExecution;

// *********************************************************************//
// DispIntf:  IExecution
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {58BDEC36-791C-4E2E-88A4-6E4339392B5B}
// *********************************************************************//
template<class T>
class IExecutionDispT : public TAutoDriver<IExecution>
{
public:
  IExecutionDispT(){}

  IExecutionDispT(IExecution *pintf)
  {
    TAutoDriver<IExecution>::Bind(pintf, false);
  }

  IExecutionDispT(IExecutionPtr pintf)
  {
    TAutoDriver<IExecution>::Bind(pintf, true);
  }

  IExecutionDispT& operator=(IExecution *pintf)
  {
    TAutoDriver<IExecution>::Bind(pintf, false);
    return *this;
  }

  IExecutionDispT& operator=(IExecutionPtr pintf)
  {
    TAutoDriver<IExecution>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_execId(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_execId(void);
  HRESULT         __fastcall get_orderId(long* pVal/*[out,retval]*/);
  long            __fastcall get_orderId(void);
  HRESULT         __fastcall get_clientId(long* pVal/*[out,retval]*/);
  long            __fastcall get_clientId(void);
  HRESULT         __fastcall get_permId(long* pVal/*[out,retval]*/);
  long            __fastcall get_permId(void);
  HRESULT         __fastcall get_time(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_time(void);
  HRESULT         __fastcall get_acctNumber(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_acctNumber(void);
  HRESULT         __fastcall get_exchange(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_exchange(void);
  HRESULT         __fastcall get_side(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_side(void);
  HRESULT         __fastcall get_shares(long* pVal/*[out,retval]*/);
  long            __fastcall get_shares(void);
  HRESULT         __fastcall get_price(double* pVal/*[out,retval]*/);
  double          __fastcall get_price(void);
  HRESULT         __fastcall get_liquidation(long* pVal/*[out,retval]*/);
  long            __fastcall get_liquidation(void);
  HRESULT         __fastcall get_cumQty(long* pVal/*[out,retval]*/);
  long            __fastcall get_cumQty(void);
  HRESULT         __fastcall get_avgPrice(double* pVal/*[out,retval]*/);
  double          __fastcall get_avgPrice(void);

  __property   BSTR            execId = {read = get_execId};
  __property   long            orderId = {read = get_orderId};
  __property   long            clientId = {read = get_clientId};
  __property   long            permId = {read = get_permId};
  __property   BSTR            time = {read = get_time};
  __property   BSTR            acctNumber = {read = get_acctNumber};
  __property   BSTR            exchange = {read = get_exchange};
  __property   BSTR            side = {read = get_side};
  __property   long            shares = {read = get_shares};
  __property   double          price = {read = get_price};
  __property   long            liquidation = {read = get_liquidation};
  __property   long            cumQty = {read = get_cumQty};
  __property   double          avgPrice = {read = get_avgPrice};
};
typedef IExecutionDispT<IExecution> IExecutionDisp;

typedef TComInterface<IExecutionFilter>  TCOMIExecutionFilter;

// *********************************************************************//
// DispIntf:  IExecutionFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3553EA07-F281-433D-B2A4-4CB722A9859B}
// *********************************************************************//
template<class T>
class IExecutionFilterDispT : public TAutoDriver<IExecutionFilter>
{
public:
  IExecutionFilterDispT(){}

  IExecutionFilterDispT(IExecutionFilter *pintf)
  {
    TAutoDriver<IExecutionFilter>::Bind(pintf, false);
  }

  IExecutionFilterDispT(IExecutionFilterPtr pintf)
  {
    TAutoDriver<IExecutionFilter>::Bind(pintf, true);
  }

  IExecutionFilterDispT& operator=(IExecutionFilter *pintf)
  {
    TAutoDriver<IExecutionFilter>::Bind(pintf, false);
    return *this;
  }

  IExecutionFilterDispT& operator=(IExecutionFilterPtr pintf)
  {
    TAutoDriver<IExecutionFilter>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_clientId(long* pVal/*[out,retval]*/);
  long            __fastcall get_clientId(void);
  HRESULT         __fastcall set_clientId(long pVal/*[in]*/);
  HRESULT         __fastcall get_acctCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_acctCode(void);
  HRESULT         __fastcall set_acctCode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_time(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_time(void);
  HRESULT         __fastcall set_time(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_symbol(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_symbol(void);
  HRESULT         __fastcall set_symbol(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_secType(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_secType(void);
  HRESULT         __fastcall set_secType(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_exchange(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_exchange(void);
  HRESULT         __fastcall set_exchange(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_side(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_side(void);
  HRESULT         __fastcall set_side(BSTR pVal/*[in]*/);

  __property   long            clientId = {read = get_clientId, write = set_clientId};
  __property   BSTR            acctCode = {read = get_acctCode, write = set_acctCode};
  __property   BSTR            time = {read = get_time, write = set_time};
  __property   BSTR            symbol = {read = get_symbol, write = set_symbol};
  __property   BSTR            secType = {read = get_secType, write = set_secType};
  __property   BSTR            exchange = {read = get_exchange, write = set_exchange};
  __property   BSTR            side = {read = get_side, write = set_side};
};
typedef IExecutionFilterDispT<IExecutionFilter> IExecutionFilterDisp;

typedef TComInterface<IScannerSubscription>  TCOMIScannerSubscription;

// *********************************************************************//
// DispIntf:  IScannerSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6BBE7E50-795D-4C45-A69E-E1EEB7918DD2}
// *********************************************************************//
template<class T>
class IScannerSubscriptionDispT : public TAutoDriver<IScannerSubscription>
{
public:
  IScannerSubscriptionDispT(){}

  IScannerSubscriptionDispT(IScannerSubscription *pintf)
  {
    TAutoDriver<IScannerSubscription>::Bind(pintf, false);
  }

  IScannerSubscriptionDispT(IScannerSubscriptionPtr pintf)
  {
    TAutoDriver<IScannerSubscription>::Bind(pintf, true);
  }

  IScannerSubscriptionDispT& operator=(IScannerSubscription *pintf)
  {
    TAutoDriver<IScannerSubscription>::Bind(pintf, false);
    return *this;
  }

  IScannerSubscriptionDispT& operator=(IScannerSubscriptionPtr pintf)
  {
    TAutoDriver<IScannerSubscription>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_instrument(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_instrument(void);
  HRESULT         __fastcall set_instrument(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_locations(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_locations(void);
  HRESULT         __fastcall set_locations(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_scanCode(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_scanCode(void);
  HRESULT         __fastcall set_scanCode(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_numberOfRows(long* pVal/*[out,retval]*/);
  long            __fastcall get_numberOfRows(void);
  HRESULT         __fastcall set_numberOfRows(long pVal/*[in]*/);
  HRESULT         __fastcall get_priceAbove(double* pVal/*[out,retval]*/);
  double          __fastcall get_priceAbove(void);
  HRESULT         __fastcall set_priceAbove(double pVal/*[in]*/);
  HRESULT         __fastcall get_priceBelow(double* pVal/*[out,retval]*/);
  double          __fastcall get_priceBelow(void);
  HRESULT         __fastcall set_priceBelow(double pVal/*[in]*/);
  HRESULT         __fastcall get_volumeAbove(long* pVal/*[out,retval]*/);
  long            __fastcall get_volumeAbove(void);
  HRESULT         __fastcall set_volumeAbove(long pVal/*[in]*/);
  HRESULT         __fastcall get_averageOptionVolumeAbove(long* pVal/*[out,retval]*/);
  long            __fastcall get_averageOptionVolumeAbove(void);
  HRESULT         __fastcall set_averageOptionVolumeAbove(long pVal/*[in]*/);
  HRESULT         __fastcall get_marketCapAbove(double* pVal/*[out,retval]*/);
  double          __fastcall get_marketCapAbove(void);
  HRESULT         __fastcall set_marketCapAbove(double pVal/*[in]*/);
  HRESULT         __fastcall get_marketCapBelow(double* pVal/*[out,retval]*/);
  double          __fastcall get_marketCapBelow(void);
  HRESULT         __fastcall set_marketCapBelow(double pVal/*[in]*/);
  HRESULT         __fastcall get_moodyRatingAbove(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_moodyRatingAbove(void);
  HRESULT         __fastcall set_moodyRatingAbove(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_moodyRatingBelow(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_moodyRatingBelow(void);
  HRESULT         __fastcall set_moodyRatingBelow(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_spRatingAbove(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_spRatingAbove(void);
  HRESULT         __fastcall set_spRatingAbove(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_spRatingBelow(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_spRatingBelow(void);
  HRESULT         __fastcall set_spRatingBelow(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_maturityDateAbove(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_maturityDateAbove(void);
  HRESULT         __fastcall set_maturityDateAbove(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_maturityDateBelow(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_maturityDateBelow(void);
  HRESULT         __fastcall set_maturityDateBelow(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_couponRateAbove(double* pVal/*[out,retval]*/);
  double          __fastcall get_couponRateAbove(void);
  HRESULT         __fastcall set_couponRateAbove(double pVal/*[in]*/);
  HRESULT         __fastcall get_couponRateBelow(double* pVal/*[out,retval]*/);
  double          __fastcall get_couponRateBelow(void);
  HRESULT         __fastcall set_couponRateBelow(double pVal/*[in]*/);
  HRESULT         __fastcall get_excludeConvertible(long* pVal/*[out,retval]*/);
  long            __fastcall get_excludeConvertible(void);
  HRESULT         __fastcall set_excludeConvertible(long pVal/*[in]*/);
  HRESULT         __fastcall get_scannerSettingPairs(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_scannerSettingPairs(void);
  HRESULT         __fastcall set_scannerSettingPairs(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_stockTypeFilter(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_stockTypeFilter(void);
  HRESULT         __fastcall set_stockTypeFilter(BSTR pVal/*[in]*/);

  __property   BSTR            instrument = {read = get_instrument, write = set_instrument};
  __property   BSTR            locations = {read = get_locations, write = set_locations};
  __property   BSTR            scanCode = {read = get_scanCode, write = set_scanCode};
  __property   long            numberOfRows = {read = get_numberOfRows, write = set_numberOfRows};
  __property   double          priceAbove = {read = get_priceAbove, write = set_priceAbove};
  __property   double          priceBelow = {read = get_priceBelow, write = set_priceBelow};
  __property   long            volumeAbove = {read = get_volumeAbove, write = set_volumeAbove};
  __property   long            averageOptionVolumeAbove = {read = get_averageOptionVolumeAbove, write = set_averageOptionVolumeAbove};
  __property   double          marketCapAbove = {read = get_marketCapAbove, write = set_marketCapAbove};
  __property   double          marketCapBelow = {read = get_marketCapBelow, write = set_marketCapBelow};
  __property   BSTR            moodyRatingAbove = {read = get_moodyRatingAbove, write = set_moodyRatingAbove};
  __property   BSTR            moodyRatingBelow = {read = get_moodyRatingBelow, write = set_moodyRatingBelow};
  __property   BSTR            spRatingAbove = {read = get_spRatingAbove, write = set_spRatingAbove};
  __property   BSTR            spRatingBelow = {read = get_spRatingBelow, write = set_spRatingBelow};
  __property   BSTR            maturityDateAbove = {read = get_maturityDateAbove, write = set_maturityDateAbove};
  __property   BSTR            maturityDateBelow = {read = get_maturityDateBelow, write = set_maturityDateBelow};
  __property   double          couponRateAbove = {read = get_couponRateAbove, write = set_couponRateAbove};
  __property   double          couponRateBelow = {read = get_couponRateBelow, write = set_couponRateBelow};
  __property   long            excludeConvertible = {read = get_excludeConvertible, write = set_excludeConvertible};
  __property   BSTR            scannerSettingPairs = {read = get_scannerSettingPairs, write = set_scannerSettingPairs};
  __property   BSTR            stockTypeFilter = {read = get_stockTypeFilter, write = set_stockTypeFilter};
};
typedef IScannerSubscriptionDispT<IScannerSubscription> IScannerSubscriptionDisp;

// *********************************************************************//
// DispIntf:  _DTws
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0A77CCF6-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
template<class T>
class _DTwsDispT : public TAutoDriver<_DTws>
{
public:
  _DTwsDispT(){}

  _DTwsDispT(_DTws *pintf)
  {
    TAutoDriver<_DTws>::Bind(pintf, false);
  }

  _DTwsDispT(_DTwsPtr pintf)
  {
    TAutoDriver<_DTws>::Bind(pintf, true);
  }

  _DTwsDispT& operator=(_DTws *pintf)
  {
    TAutoDriver<_DTws>::Bind(pintf, false);
    return *this;
  }

  _DTwsDispT& operator=(_DTwsPtr pintf)
  {
    TAutoDriver<_DTws>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tws));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tws);
  }

  Twslib_tlb::IComboLegList* __fastcall createComboLegList();
  Twslib_tlb::ITagValueList* __fastcall createTagValueList();
  Twslib_tlb::IUnderComp* __fastcall createUnderComp();
  void            __fastcall cancelScannerSubscription(long tickerId);
  Twslib_tlb::IExecutionFilter* __fastcall createExecutionFilter();
  Twslib_tlb::IOrder* __fastcall createOrder();
  Twslib_tlb::IScannerSubscription* __fastcall createScannerSubscription();
  void            __fastcall placeOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                                          Twslib_tlb::IOrder* order);
  void            __fastcall reqScannerSubscriptionEx(long tickerId, 
                                                      Twslib_tlb::IScannerSubscription* subscription);
  void            __fastcall reqRealTimeBarsEx(long tickerId, Twslib_tlb::IContract* contract, 
                                               long barSize, BSTR whatToShow, long useRTH);
  Twslib_tlb::IContract* __fastcall createContract();
  void            __fastcall exerciseOptionsEx(long tickerId, Twslib_tlb::IContract* contract, 
                                               long exerciseAction, long exerciseQuantity, 
                                               BSTR account, long override);
  void            __fastcall reqExecutionsEx(long reqId, Twslib_tlb::IExecutionFilter* filter);
  void            __fastcall resetAllProperties();
  void            __fastcall reqFundamentalData(long reqId, Twslib_tlb::IContract* contract, 
                                                BSTR reportType);
  void            __fastcall reqCurrentTime();
  void            __fastcall reqMktDepthEx(long tickerId, Twslib_tlb::IContract* contract, 
                                           long numRows);
  void            __fastcall cancelMktData(long id);
  void            __fastcall cancelOrder(long id);
  void            __fastcall cancelFundamentalData(long reqId);
  void            __fastcall reqMktDataEx(long tickerId, Twslib_tlb::IContract* contract, 
                                          BSTR genericTicks, long snapshot);
  void            __fastcall reqScannerSubscription(long tickerId, long numberOfRows, 
                                                    BSTR instrument, BSTR locationCode, 
                                                    BSTR scanCode, double abovePrice, 
                                                    double belowPrice, long aboveVolume, 
                                                    double marketCapAbove, double marketCapBelow, 
                                                    BSTR moodyRatingAbove, BSTR moodyRatingBelow, 
                                                    BSTR spRatingAbove, BSTR spRatingBelow, 
                                                    BSTR maturityDateAbove, BSTR maturityDateBelow, 
                                                    double couponRateAbove, double couponRateBelow, 
                                                    long excludeConvertible, 
                                                    long averageOptionVolumeAbove, 
                                                    BSTR scannerSettingPairs, BSTR stockTypeFilter);
  void            __fastcall reqScannerParameters();
  void            __fastcall reqRealTimeBars(long tickerId, BSTR symbol, BSTR secType, BSTR expiry, 
                                             double strike, BSTR right, BSTR multiplier, 
                                             BSTR exchange, BSTR primaryExchange, BSTR currency, 
                                             long isExpired, long barSize, BSTR whatToShow, 
                                             long useRTH);
  void            __fastcall reqContractDetailsEx(long reqId, Twslib_tlb::IContract* contract);
  void            __fastcall cancelRealTimeBars(long tickerId);
  void            __fastcall cancelHistoricalData(long tickerId);
  void            __fastcall reqHistoricalDataEx(long tickerId, Twslib_tlb::IContract* contract, 
                                                 BSTR endDateTime, BSTR duration, BSTR barSize, 
                                                 BSTR whatToShow, long useRTH, long formatDate);
  void            __fastcall reqHistoricalData(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                               double strike, BSTR right, BSTR multiplier, 
                                               BSTR exchange, BSTR curency, long isExpired, 
                                               BSTR endDateTime, BSTR durationStr, 
                                               BSTR barSizeSetting, BSTR whatToShow, long useRTH, 
                                               long formatDate);
  void            __fastcall replaceFA(long faDataType, BSTR cxml);
  void            __fastcall requestFA(long faDataType);
  void            __fastcall reqManagedAccts();
  void            __fastcall reqAllOpenOrders();
  void            __fastcall reqAutoOpenOrders(long bAutoBind);
  void            __fastcall setServerLogLevel(long logLevel);
  void            __fastcall reqNewsBulletins(long allDaysMsgs);
  void            __fastcall cancelNewsBulletins();
  void            __fastcall clearComboLegs();
  void            __fastcall addComboLeg(long conId, BSTR action, long ratio, BSTR exchange, 
                                         long openClose, long shortSaleSlot, BSTR designatedLocation);
  void            __fastcall cancelMktDepth(long id);
  void            __fastcall reqMktDepth2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, 
                                          BSTR curency, long numRows);
  void            __fastcall reqMktData(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                        double strike, BSTR right, BSTR multiplier, BSTR exchange, 
                                        BSTR primaryExchange, BSTR currency, BSTR genericTicks, 
                                        long snapshot);
  void            __fastcall reqIds(long numIds);
  void            __fastcall reqMktDepth(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                         double strike, BSTR right, BSTR multiplier, BSTR exchange, 
                                         BSTR curency, long numRows);
  void            __fastcall reqContractDetails2(BSTR localSymbol, BSTR secType, BSTR exchange, 
                                                 BSTR curency, long includeExpired);
  void            __fastcall exerciseOptions(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                             double strike, BSTR right, BSTR multiplier, 
                                             BSTR exchange, BSTR curency, long exerciseAction, 
                                             long exerciseQuantity, long override);
  void            __fastcall placeOrder2(long id, BSTR action, long quantity, BSTR localSymbol, 
                                         BSTR secType, BSTR exchange, BSTR primaryExchange, 
                                         BSTR curency, BSTR orderType, double lmtPrice, 
                                         double auxPrice, BSTR goodAfterTime, BSTR group, 
                                         BSTR faMethod, BSTR faPercentage, BSTR faProfile, 
                                         BSTR goodTillDate);
  void            __fastcall reqMktData2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, 
                                         BSTR primaryExchange, BSTR currency, BSTR genericTicks, 
                                         long snapshot);
  void            __fastcall reqContractDetails(BSTR symbol, BSTR secType, BSTR expiry, 
                                                double strike, BSTR right, BSTR multiplier, 
                                                BSTR exchange, BSTR curency, long includeExpired);
  void            __fastcall placeOrder(long id, BSTR action, long quantity, BSTR symbol, 
                                        BSTR secType, BSTR expiry, double strike, BSTR right, 
                                        BSTR multiplier, BSTR exchange, BSTR primaryExchange, 
                                        BSTR curency, BSTR orderType, double price, double auxPrice
                                        , BSTR goodAfterTime, BSTR group, BSTR faMethod, 
                                        BSTR faPercentage, BSTR faProfile, BSTR goodTillDate);
  void            __fastcall reqAccountUpdates(long subscribe, BSTR acctCode);
  void            __fastcall reqOpenOrders();
  void            __fastcall reqExecutions();
  void            __fastcall connect(BSTR host, long port, long clientId);
  void            __fastcall disconnect();
  void            __fastcall set_scalePriceIncrement(double Value);
  double          __fastcall get_scalePriceIncrement();
  void            __fastcall set_scaleSubsLevelSize(long Value);
  long            __fastcall get_scaleSubsLevelSize();
  void            __fastcall set_scaleInitLevelSize(long Value);
  long            __fastcall get_scaleInitLevelSize();
  void            __fastcall set_trailStopPrice(double Value);
  double          __fastcall get_trailStopPrice();
  void            __fastcall set_referencePriceType(long Value);
  long            __fastcall get_referencePriceType();
  void            __fastcall set_continuousUpdate(long Value);
  long            __fastcall get_continuousUpdate();
  void            __fastcall set_deltaNeutralAuxPrice(double Value);
  double          __fastcall get_deltaNeutralAuxPrice();
  void            __fastcall set_deltaNeutralOrderType(BSTR Value);
  BSTR            __fastcall get_deltaNeutralOrderType();
  void            __fastcall set_volatilityType(long Value);
  long            __fastcall get_volatilityType();
  void            __fastcall set_volatility(double Value);
  double          __fastcall get_volatility();
  void            __fastcall set_overridePercentageConstraints(long Value);
  long            __fastcall get_overridePercentageConstraints();
  void            __fastcall set_serverVersion(long Value);
  long            __fastcall get_serverVersion();
  void            __fastcall set_TwsConnectionTime(BSTR Value);
  BSTR            __fastcall get_TwsConnectionTime();
  void            __fastcall set_stockRangeUpper(double Value);
  double          __fastcall get_stockRangeUpper();
  void            __fastcall set_stockRangeLower(double Value);
  double          __fastcall get_stockRangeLower();
  void            __fastcall set_delta(double Value);
  double          __fastcall get_delta();
  void            __fastcall set_stockRefPrice(double Value);
  double          __fastcall get_stockRefPrice();
  void            __fastcall set_startingPrice(double Value);
  double          __fastcall get_startingPrice();
  void            __fastcall set_auctionStrategy(long Value);
  long            __fastcall get_auctionStrategy();
  void            __fastcall set_nbboPriceCap(double Value);
  double          __fastcall get_nbboPriceCap();
  void            __fastcall set_firmQuoteOnly(long Value);
  long            __fastcall get_firmQuoteOnly();
  void            __fastcall set_eTradeOnly(long Value);
  long            __fastcall get_eTradeOnly();
  void            __fastcall set_percentOffset(double Value);
  double          __fastcall get_percentOffset();
  void            __fastcall set_minQty(long Value);
  long            __fastcall get_minQty();
  void            __fastcall set_allOrNone(long Value);
  long            __fastcall get_allOrNone();
  void            __fastcall set_settlingFirm(BSTR Value);
  BSTR            __fastcall get_settlingFirm();
  void            __fastcall set_rule80A(BSTR Value);
  BSTR            __fastcall get_rule80A();
  void            __fastcall set_ocaType(long Value);
  long            __fastcall get_ocaType();
  void            __fastcall set_designatedLocation(BSTR Value);
  BSTR            __fastcall get_designatedLocation();
  void            __fastcall set_shortSaleSlot(long Value);
  long            __fastcall get_shortSaleSlot();
  void            __fastcall set_discretionaryAmt(double Value);
  double          __fastcall get_discretionaryAmt();
  void            __fastcall set_sideFilter(BSTR Value);
  BSTR            __fastcall get_sideFilter();
  void            __fastcall set_exchangeFilter(BSTR Value);
  BSTR            __fastcall get_exchangeFilter();
  void            __fastcall set_secTypeFilter(BSTR Value);
  BSTR            __fastcall get_secTypeFilter();
  void            __fastcall set_symbolFilter(BSTR Value);
  BSTR            __fastcall get_symbolFilter();
  void            __fastcall set_timeFilter(BSTR Value);
  BSTR            __fastcall get_timeFilter();
  void            __fastcall set_acctCodeFilter(BSTR Value);
  BSTR            __fastcall get_acctCodeFilter();
  void            __fastcall set_clientIdFilter(long Value);
  long            __fastcall get_clientIdFilter();
  void            __fastcall set_hidden(long Value);
  long            __fastcall get_hidden();
  void            __fastcall set_outsideRth(long Value);
  long            __fastcall get_outsideRth();
  void            __fastcall set_triggerMethod(long Value);
  long            __fastcall get_triggerMethod();
  void            __fastcall set_displaySize(long Value);
  long            __fastcall get_displaySize();
  void            __fastcall set_sweepToFill(long Value);
  long            __fastcall get_sweepToFill();
  void            __fastcall set_blockOrder(long Value);
  long            __fastcall get_blockOrder();
  void            __fastcall set_parentId(long Value);
  long            __fastcall get_parentId();
  void            __fastcall set_openClose(BSTR Value);
  BSTR            __fastcall get_openClose();
  void            __fastcall set_transmit(long Value);
  long            __fastcall get_transmit();
  void            __fastcall set_origin(long Value);
  long            __fastcall get_origin();
  void            __fastcall set_orderRef(BSTR Value);
  BSTR            __fastcall get_orderRef();
  void            __fastcall set_oca(BSTR Value);
  BSTR            __fastcall get_oca();
  void            __fastcall set_tif(BSTR Value);
  BSTR            __fastcall get_tif();
  void            __fastcall set_account(BSTR Value);
  BSTR            __fastcall get_account();

  __property   double          scalePriceIncrement = {read = get_scalePriceIncrement, write = set_scalePriceIncrement};
  __property   long            scaleSubsLevelSize = {read = get_scaleSubsLevelSize, write = set_scaleSubsLevelSize};
  __property   long            scaleInitLevelSize = {read = get_scaleInitLevelSize, write = set_scaleInitLevelSize};
  __property   double          trailStopPrice = {read = get_trailStopPrice, write = set_trailStopPrice};
  __property   long            referencePriceType = {read = get_referencePriceType, write = set_referencePriceType};
  __property   long            continuousUpdate = {read = get_continuousUpdate, write = set_continuousUpdate};
  __property   double          deltaNeutralAuxPrice = {read = get_deltaNeutralAuxPrice, write = set_deltaNeutralAuxPrice};
  __property   BSTR            deltaNeutralOrderType = {read = get_deltaNeutralOrderType, write = set_deltaNeutralOrderType};
  __property   long            volatilityType = {read = get_volatilityType, write = set_volatilityType};
  __property   double          volatility = {read = get_volatility, write = set_volatility};
  __property   long            overridePercentageConstraints = {read = get_overridePercentageConstraints, write = set_overridePercentageConstraints};
  __property   long            serverVersion = {read = get_serverVersion, write = set_serverVersion};
  __property   BSTR            TwsConnectionTime = {read = get_TwsConnectionTime, write = set_TwsConnectionTime};
  __property   double          stockRangeUpper = {read = get_stockRangeUpper, write = set_stockRangeUpper};
  __property   double          stockRangeLower = {read = get_stockRangeLower, write = set_stockRangeLower};
  __property   double          delta = {read = get_delta, write = set_delta};
  __property   double          stockRefPrice = {read = get_stockRefPrice, write = set_stockRefPrice};
  __property   double          startingPrice = {read = get_startingPrice, write = set_startingPrice};
  __property   long            auctionStrategy = {read = get_auctionStrategy, write = set_auctionStrategy};
  __property   double          nbboPriceCap = {read = get_nbboPriceCap, write = set_nbboPriceCap};
  __property   long            firmQuoteOnly = {read = get_firmQuoteOnly, write = set_firmQuoteOnly};
  __property   long            eTradeOnly = {read = get_eTradeOnly, write = set_eTradeOnly};
  __property   double          percentOffset = {read = get_percentOffset, write = set_percentOffset};
  __property   long            minQty = {read = get_minQty, write = set_minQty};
  __property   long            allOrNone = {read = get_allOrNone, write = set_allOrNone};
  __property   BSTR            settlingFirm = {read = get_settlingFirm, write = set_settlingFirm};
  __property   BSTR            rule80A = {read = get_rule80A, write = set_rule80A};
  __property   long            ocaType = {read = get_ocaType, write = set_ocaType};
  __property   BSTR            designatedLocation = {read = get_designatedLocation, write = set_designatedLocation};
  __property   long            shortSaleSlot = {read = get_shortSaleSlot, write = set_shortSaleSlot};
  __property   double          discretionaryAmt = {read = get_discretionaryAmt, write = set_discretionaryAmt};
  __property   BSTR            sideFilter = {read = get_sideFilter, write = set_sideFilter};
  __property   BSTR            exchangeFilter = {read = get_exchangeFilter, write = set_exchangeFilter};
  __property   BSTR            secTypeFilter = {read = get_secTypeFilter, write = set_secTypeFilter};
  __property   BSTR            symbolFilter = {read = get_symbolFilter, write = set_symbolFilter};
  __property   BSTR            timeFilter = {read = get_timeFilter, write = set_timeFilter};
  __property   BSTR            acctCodeFilter = {read = get_acctCodeFilter, write = set_acctCodeFilter};
  __property   long            clientIdFilter = {read = get_clientIdFilter, write = set_clientIdFilter};
  __property   long            hidden = {read = get_hidden, write = set_hidden};
  __property   long            outsideRth = {read = get_outsideRth, write = set_outsideRth};
  __property   long            triggerMethod = {read = get_triggerMethod, write = set_triggerMethod};
  __property   long            displaySize = {read = get_displaySize, write = set_displaySize};
  __property   long            sweepToFill = {read = get_sweepToFill, write = set_sweepToFill};
  __property   long            blockOrder = {read = get_blockOrder, write = set_blockOrder};
  __property   long            parentId = {read = get_parentId, write = set_parentId};
  __property   BSTR            openClose = {read = get_openClose, write = set_openClose};
  __property   long            transmit = {read = get_transmit, write = set_transmit};
  __property   long            origin = {read = get_origin, write = set_origin};
  __property   BSTR            orderRef = {read = get_orderRef, write = set_orderRef};
  __property   BSTR            oca = {read = get_oca, write = set_oca};
  __property   BSTR            tif = {read = get_tif, write = set_tif};
  __property   BSTR            account = {read = get_account, write = set_account};
};
typedef _DTwsDispT<_DTws> _DTwsDisp;

// *********************************************************************//
// DispIntf:  _DTwsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0A77CCF7-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
template <class T>
class _DTwsEventsDispT : public TAutoDriver<_DTwsEvents>
{
public:
  _DTwsEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall tickPrice(long id, long tickType, double price, int canAutoExecute);
  void            __fastcall tickSize(long id, long tickType, long size);
  void            __fastcall connectionClosed();
  void            __fastcall openOrder1(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                        double strike, BSTR right, BSTR exchange, BSTR curency, 
                                        BSTR localSymbol);
  void            __fastcall openOrder2(long id, BSTR action, long quantity, BSTR orderType, 
                                        double lmtPrice, double auxPrice, BSTR tif, BSTR ocaGroup, 
                                        BSTR account, BSTR openClose, long origin, BSTR orderRef, 
                                        long clientId);
  void            __fastcall updateAccountTime(BSTR timeStamp);
  void            __fastcall updateAccountValue(BSTR key, BSTR value, BSTR curency, BSTR accountName);
  void            __fastcall nextValidId(long id);
  void            __fastcall permId(long id, long permId);
  void            __fastcall errMsg(long id, long errorCode, BSTR errorMsg);
  void            __fastcall updatePortfolio(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                             BSTR right, BSTR curency, BSTR localSymbol, 
                                             long position, double marketPrice, double marketValue, 
                                             double averageCost, double unrealizedPNL, 
                                             double realizedPNL, BSTR accountName);
  void            __fastcall orderStatus(long id, BSTR status, long filled, long remaining, 
                                         double avgFillPrice, long permId, long parentId, 
                                         double lastFillPrice, long clientId, BSTR whyHeld);
  void            __fastcall contractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                             BSTR right, BSTR exchange, BSTR curency, 
                                             BSTR localSymbol, BSTR marketName, BSTR tradingClass, 
                                             long conId, double minTick, long priceMagnifier, 
                                             BSTR multiplier, BSTR orderTypes, BSTR validExchanges);
  void            __fastcall execDetails(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                         double strike, BSTR right, BSTR cExchange, BSTR curency, 
                                         BSTR localSymbol, BSTR execId, BSTR time, BSTR acctNumber, 
                                         BSTR eExchange, BSTR side, long shares, double price, 
                                         long permId, long clientId, int isLiquidation);
  void            __fastcall updateMktDepth(long id, long position, long operation, long side, 
                                            double price, long size);
  void            __fastcall updateMktDepthL2(long id, long position, BSTR marketMaker, 
                                              long operation, long side, double price, long size);
  void            __fastcall updateNewsBulletin(short msgId, short msgType, BSTR message, 
                                                BSTR origExchange);
  void            __fastcall managedAccounts(BSTR accountsList);
  void            __fastcall openOrder3(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                        double strike, BSTR right, BSTR exchange, BSTR curency, 
                                        BSTR localSymbol, BSTR action, long quantity, BSTR orderType
                                        , double lmtPrice, double auxPrice, BSTR tif, BSTR ocaGroup
                                        , BSTR account, BSTR openClose, long origin, BSTR orderRef, 
                                        long clientId, long permId, BSTR sharesAllocation, 
                                        BSTR faGroup, BSTR faMethod, BSTR faPercentage, 
                                        BSTR faProfile, BSTR goodAfterTime, BSTR goodTillDate);
  void            __fastcall receiveFA(long faDataType, BSTR cxml);
  void            __fastcall historicalData(long reqId, BSTR date, double open, double high, 
                                            double low, double close, long volume, long barCount, 
                                            double WAP, long hasGaps);
  void            __fastcall openOrder4(long id, BSTR symbol, BSTR secType, BSTR expiry, 
                                        double strike, BSTR right, BSTR exchange, BSTR curency, 
                                        BSTR localSymbol, BSTR action, long quantity, BSTR orderType
                                        , double lmtPrice, double auxPrice, BSTR tif, BSTR ocaGroup
                                        , BSTR account, BSTR openClose, long origin, BSTR orderRef, 
                                        long clientId, long permId, BSTR sharesAllocation, 
                                        BSTR faGroup, BSTR faMethod, BSTR faPercentage, 
                                        BSTR faProfile, BSTR goodAfterTime, BSTR goodTillDate, 
                                        long ocaType, BSTR rule80A, BSTR settlingFirm, int allOrNone
                                        , long minQty, double percentOffset, int eTradeOnly, 
                                        int firmQuoteOnly, double nbboPriceCap, long auctionStrategy
                                        , double startingPrice, double stockRefPrice, double delta, 
                                        double stockRangeLower, double stockRangeUpper, 
                                        int blockOrder, int sweepToFill, int ignoreRth, int hidden, 
                                        double discretionaryAmt, long displaySize, long parentId, 
                                        long triggerMethod, long shortSaleSlot, 
                                        BSTR designatedLocation, double volatility, 
                                        long volatilityType, BSTR deltaNeutralOrderType, 
                                        double deltaNeutralAuxPrice, int continuousUpdate, 
                                        int referencePriceType, double trailStopPrice, 
                                        double basisPoints, long basisPointsType, BSTR legsStr, 
                                        long scaleInitLevelSize, long scaleSubsLevelSize, 
                                        double scalePriceIncrement);
  void            __fastcall bondContractDetails(BSTR symbol, BSTR secType, BSTR cusip, 
                                                 double coupon, BSTR maturity, BSTR issueDate, 
                                                 BSTR ratings, BSTR bondType, BSTR couponType, 
                                                 long convertible, long callable, long putable, 
                                                 BSTR descAppend, BSTR exchange, BSTR curency, 
                                                 BSTR marketName, BSTR tradingClass, long conId, 
                                                 double minTick, BSTR orderTypes, 
                                                 BSTR validExchanges, BSTR nextOptionDate, 
                                                 BSTR nextOptionType, long nextOptionPartial, 
                                                 BSTR notes);
  void            __fastcall scannerParameters(BSTR xml);
  void            __fastcall scannerData(long reqId, long rank, BSTR symbol, BSTR secType, 
                                         BSTR expiry, double strike, BSTR right, BSTR exchange, 
                                         BSTR curency, BSTR localSymbol, BSTR marketName, 
                                         BSTR tradingClass, BSTR distance, BSTR benchmark, 
                                         BSTR projection, BSTR legsStr);
  void            __fastcall tickOptionComputation(long id, long tickType, double impliedVol, 
                                                   double delta, double modelPrice, 
                                                   double pvDividend);
  void            __fastcall tickGeneric(long id, long tickType, double value);
  void            __fastcall tickString(long id, long tickType, BSTR value);
  void            __fastcall tickEFP(long tickerId, long field, double basisPoints, 
                                     BSTR formattedBasisPoints, double totalDividends, long holdDays
                                     , BSTR futureExpiry, double dividendImpact, 
                                     double dividendsToExpiry);
  void            __fastcall realtimeBar(long tickerId, long time, double open, double high, 
                                         double low, double close, long volume, double WAP, 
                                         long Count);
  void            __fastcall currentTime(long time);
  void            __fastcall scannerDataEnd(long reqId);
  void            __fastcall fundamentalData(long reqId, BSTR data);
  void            __fastcall contractDetailsEnd(long reqId);
  void            __fastcall openOrderEnd();
  void            __fastcall accountDownloadEnd(BSTR accountName);
  void            __fastcall execDetailsEnd(long reqId);
  void            __fastcall deltaNeutralValidation(long reqId, Twslib_tlb::IUnderComp* underComp);
  void            __fastcall tickSnapshotEnd(long reqId);
  void            __fastcall contractDetailsEx(long reqId, 
                                               Twslib_tlb::IContractDetails* contractDetails);
  void            __fastcall openOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                                         Twslib_tlb::IOrder* order, 
                                         Twslib_tlb::IOrderState* orderState);
  void            __fastcall execDetailsEx(long reqId, Twslib_tlb::IContract* contract, 
                                           Twslib_tlb::IExecution* execution);
  void            __fastcall updatePortfolioEx(Twslib_tlb::IContract* contract, long position, 
                                               double marketPrice, double marketValue, 
                                               double averageCost, double unrealizedPNL, 
                                               double realizedPNL, BSTR accountName);
  void            __fastcall scannerDataEx(long reqId, long rank, 
                                           Twslib_tlb::IContractDetails* contractDetails, 
                                           BSTR distance, BSTR benchmark, BSTR projection, 
                                           BSTR legsStr);

};
typedef _DTwsEventsDispT<_DTwsEvents> _DTwsEventsDisp;

// *********************************************************************//
// DispIntf:  IComboLeg
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {573E95CF-F67C-4367-A95B-CB7599BD0673}
// *********************************************************************//
template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_conId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboLegDispT<T>::get_conId(void)
{
  long pVal;
  this->get_conId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_conId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_ratio(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ratio"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboLegDispT<T>::get_ratio(void)
{
  long pVal;
  this->get_ratio((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_ratio(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ratio"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_action(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("action"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboLegDispT<T>::get_action(void)
{
  BSTR pVal;
  this->get_action((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_action(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("action"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_exchange(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboLegDispT<T>::get_exchange(void)
{
  BSTR pVal;
  this->get_exchange((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_exchange(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_openClose(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboLegDispT<T>::get_openClose(void)
{
  long pVal;
  this->get_openClose((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_openClose(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_shortSaleSlot(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboLegDispT<T>::get_shortSaleSlot(void)
{
  long pVal;
  this->get_shortSaleSlot((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_shortSaleSlot(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::get_designatedLocation(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboLegDispT<T>::get_designatedLocation(void)
{
  BSTR pVal;
  this->get_designatedLocation((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegDispT<T>::set_designatedLocation(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IComboLegList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BE3E5CD3-6F13-4D39-981C-4F75C063C2BA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IComboLegListDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IComboLegListDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegListDispT<T>::get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IComboLegListDispT<T>::get_Item(long index/*[in]*/)
{
  LPDISPATCH pVal;
  this->get_Item(index, (LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegListDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboLegListDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IComboLegListDispT<T>::Add(LPDISPATCH* leg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(leg /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IComboLegListDispT<T>::Add(void)
{
  LPDISPATCH leg;
  this->Add((LPDISPATCH*)&leg);
  return leg;
}

// *********************************************************************//
// DispIntf:  IUnderComp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E5EE73C4-7D45-428E-A347-821CBF918AA6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IUnderCompDispT<T>::get_conId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IUnderCompDispT<T>::get_conId(void)
{
  long pVal;
  this->get_conId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUnderCompDispT<T>::set_conId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUnderCompDispT<T>::get_delta(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IUnderCompDispT<T>::get_delta(void)
{
  double pVal;
  this->get_delta((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUnderCompDispT<T>::set_delta(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IUnderCompDispT<T>::get_price(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("price"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IUnderCompDispT<T>::get_price(void)
{
  double pVal;
  this->get_price((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IUnderCompDispT<T>::set_price(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("price"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IContract
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AE6A66F3-8FA9-4076-9C1F-3728B10A4CC7}
// *********************************************************************//
template <class T> HRESULT __fastcall
IContractDispT<T>::get_conId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDispT<T>::get_conId(void)
{
  long pVal;
  this->get_conId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_conId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("conId"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("symbol"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_symbol(void)
{
  BSTR pVal;
  this->get_symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_symbol(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("symbol"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_secType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("secType"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_secType(void)
{
  BSTR pVal;
  this->get_secType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_secType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("secType"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_expiry(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("expiry"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_expiry(void)
{
  BSTR pVal;
  this->get_expiry((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_expiry(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("expiry"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_strike(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("strike"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IContractDispT<T>::get_strike(void)
{
  double pVal;
  this->get_strike((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_strike(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("strike"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_right(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_right(void)
{
  BSTR pVal;
  this->get_right((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_right(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("right"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_multiplier(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("multiplier"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_multiplier(void)
{
  BSTR pVal;
  this->get_multiplier((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_multiplier(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("multiplier"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_exchange(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_exchange(void)
{
  BSTR pVal;
  this->get_exchange((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_exchange(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_primaryExchange(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("primaryExchange"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_primaryExchange(void)
{
  BSTR pVal;
  this->get_primaryExchange((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_primaryExchange(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("primaryExchange"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_currency(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currency"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_currency(void)
{
  BSTR pVal;
  this->get_currency((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_currency(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("currency"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_localSymbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("localSymbol"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_localSymbol(void)
{
  BSTR pVal;
  this->get_localSymbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_localSymbol(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("localSymbol"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_includeExpired(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("includeExpired"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDispT<T>::get_includeExpired(void)
{
  long pVal;
  this->get_includeExpired((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_includeExpired(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("includeExpired"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_comboLegs(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("comboLegs"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IContractDispT<T>::get_comboLegs(void)
{
  LPDISPATCH pVal;
  this->get_comboLegs((LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_comboLegs(LPDISPATCH pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("comboLegs"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_underComp(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("underComp"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IContractDispT<T>::get_underComp(void)
{
  LPDISPATCH pVal;
  this->get_underComp((LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDispT<T>::set_underComp(LPDISPATCH pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("underComp"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IContractDispT<T>::get_comboLegsDescrip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("comboLegsDescrip"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDispT<T>::get_comboLegsDescrip(void)
{
  BSTR pVal;
  this->get_comboLegsDescrip((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IContractDetails
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {64F03988-ED93-452E-830B-3420DF21BAF9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_marketName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("marketName"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_marketName(void)
{
  BSTR pVal;
  this->get_marketName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_tradingClass(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tradingClass"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_tradingClass(void)
{
  BSTR pVal;
  this->get_tradingClass((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_minTick(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minTick"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IContractDetailsDispT<T>::get_minTick(void)
{
  double pVal;
  this->get_minTick((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_priceMagnifier(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("priceMagnifier"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_priceMagnifier(void)
{
  long pVal;
  this->get_priceMagnifier((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_orderTypes(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderTypes"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_orderTypes(void)
{
  BSTR pVal;
  this->get_orderTypes((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_validExchanges(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("validExchanges"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_validExchanges(void)
{
  BSTR pVal;
  this->get_validExchanges((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_underConId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("underConId"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_underConId(void)
{
  long pVal;
  this->get_underConId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_longName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("longName"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_longName(void)
{
  BSTR pVal;
  this->get_longName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_summary(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("summary"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IContractDetailsDispT<T>::get_summary(void)
{
  LPDISPATCH pVal;
  this->get_summary((LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_cusip(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cusip"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_cusip(void)
{
  BSTR pVal;
  this->get_cusip((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_ratings(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ratings"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_ratings(void)
{
  BSTR pVal;
  this->get_ratings((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_descAppend(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("descAppend"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_descAppend(void)
{
  BSTR pVal;
  this->get_descAppend((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_bondType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("bondType"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_bondType(void)
{
  BSTR pVal;
  this->get_bondType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_couponType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("couponType"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_couponType(void)
{
  BSTR pVal;
  this->get_couponType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_callable(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("callable"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_callable(void)
{
  long pVal;
  this->get_callable((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_putable(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("putable"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_putable(void)
{
  long pVal;
  this->get_putable((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_coupon(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("coupon"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IContractDetailsDispT<T>::get_coupon(void)
{
  double pVal;
  this->get_coupon((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_convertible(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("convertible"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_convertible(void)
{
  long pVal;
  this->get_convertible((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_maturity(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maturity"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_maturity(void)
{
  BSTR pVal;
  this->get_maturity((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_issueDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("issueDate"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_issueDate(void)
{
  BSTR pVal;
  this->get_issueDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_nextOptionDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextOptionDate"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_nextOptionDate(void)
{
  BSTR pVal;
  this->get_nextOptionDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_nextOptionType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextOptionType"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_nextOptionType(void)
{
  BSTR pVal;
  this->get_nextOptionType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_nextOptionPartial(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextOptionPartial"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IContractDetailsDispT<T>::get_nextOptionPartial(void)
{
  long pVal;
  this->get_nextOptionPartial((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IContractDetailsDispT<T>::get_notes(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notes"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IContractDetailsDispT<T>::get_notes(void)
{
  BSTR pVal;
  this->get_notes((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  ITagValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06FF1D3F-F12F-47D1-9443-A74D3CD58723}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITagValueDispT<T>::get_tag(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tag"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITagValueDispT<T>::get_tag(void)
{
  BSTR pVal;
  this->get_tag((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITagValueDispT<T>::set_tag(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITagValueDispT<T>::get_value(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITagValueDispT<T>::get_value(void)
{
  BSTR pVal;
  this->get_value((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITagValueDispT<T>::set_value(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITagValueList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CC48E64E-C1A7-4867-8738-578404D75088}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITagValueListDispT<T>::get__NewEnum(LPUNKNOWN* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ITagValueListDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN pVal;
  this->get__NewEnum((LPUNKNOWN*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITagValueListDispT<T>::get_Item(long index/*[in]*/, LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITagValueListDispT<T>::get_Item(long index/*[in]*/)
{
  LPDISPATCH pVal;
  this->get_Item(index, (LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITagValueListDispT<T>::get_Count(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ITagValueListDispT<T>::get_Count(void)
{
  long pVal;
  this->get_Count((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
ITagValueListDispT<T>::AddEmpty(LPDISPATCH* leg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddEmpty"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(leg /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITagValueListDispT<T>::AddEmpty(void)
{
  LPDISPATCH leg;
  this->AddEmpty((LPDISPATCH*)&leg);
  return leg;
}

template <class T> HRESULT __fastcall
ITagValueListDispT<T>::Add(BSTR tag/*[in]*/, BSTR value/*[in]*/, LPDISPATCH* leg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = tag /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(leg /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITagValueListDispT<T>::Add(BSTR tag/*[in]*/, BSTR value/*[in]*/)
{
  LPDISPATCH leg;
  this->Add(tag, value, (LPDISPATCH*)&leg);
  return leg;
}

// *********************************************************************//
// DispIntf:  IOrder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {25D97F3D-2C4D-4080-9250-D2FB8071BE58}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOrderDispT<T>::get_orderId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_orderId(void)
{
  long pVal;
  this->get_orderId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_orderId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderId"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_clientId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientId"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_clientId(void)
{
  long pVal;
  this->get_clientId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_clientId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientId"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_permId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("permId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_permId(void)
{
  long pVal;
  this->get_permId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_permId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("permId"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_action(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("action"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_action(void)
{
  BSTR pVal;
  this->get_action((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_action(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("action"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_totalQuantity(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("totalQuantity"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_totalQuantity(void)
{
  long pVal;
  this->get_totalQuantity((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_totalQuantity(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("totalQuantity"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_orderType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderType"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_orderType(void)
{
  BSTR pVal;
  this->get_orderType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_orderType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderType"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_lmtPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lmtPrice"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_lmtPrice(void)
{
  double pVal;
  this->get_lmtPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_lmtPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("lmtPrice"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_auxPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("auxPrice"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_auxPrice(void)
{
  double pVal;
  this->get_auxPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_auxPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("auxPrice"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_timeInForce(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("timeInForce"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_timeInForce(void)
{
  BSTR pVal;
  this->get_timeInForce((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_timeInForce(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("timeInForce"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ocaGroup(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ocaGroup"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_ocaGroup(void)
{
  BSTR pVal;
  this->get_ocaGroup((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_ocaGroup(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ocaGroup"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_ocaType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ocaType"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_ocaType(void)
{
  long pVal;
  this->get_ocaType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_ocaType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ocaType"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_orderRef(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderRef"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_orderRef(void)
{
  BSTR pVal;
  this->get_orderRef((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_orderRef(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderRef"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_transmit(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transmit"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_transmit(void)
{
  long pVal;
  this->get_transmit((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_transmit(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transmit"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_parentId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentId"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_parentId(void)
{
  long pVal;
  this->get_parentId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_parentId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentId"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_blockOrder(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("blockOrder"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_blockOrder(void)
{
  long pVal;
  this->get_blockOrder((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_blockOrder(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("blockOrder"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_sweepToFill(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("sweepToFill"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_sweepToFill(void)
{
  long pVal;
  this->get_sweepToFill((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_sweepToFill(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("sweepToFill"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_displaySize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("displaySize"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_displaySize(void)
{
  long pVal;
  this->get_displaySize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_displaySize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("displaySize"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_triggerMethod(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("triggerMethod"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_triggerMethod(void)
{
  long pVal;
  this->get_triggerMethod((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_triggerMethod(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("triggerMethod"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_outsideRth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("outsideRth"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_outsideRth(void)
{
  long pVal;
  this->get_outsideRth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_outsideRth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("outsideRth"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_hidden(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hidden"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_hidden(void)
{
  long pVal;
  this->get_hidden((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_hidden(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hidden"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_goodAfterTime(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("goodAfterTime"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_goodAfterTime(void)
{
  BSTR pVal;
  this->get_goodAfterTime((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_goodAfterTime(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("goodAfterTime"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_goodTillDate(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("goodTillDate"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_goodTillDate(void)
{
  BSTR pVal;
  this->get_goodTillDate((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_goodTillDate(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("goodTillDate"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_overridePercentageConstraints(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overridePercentageConstraints"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_overridePercentageConstraints(void)
{
  long pVal;
  this->get_overridePercentageConstraints((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_overridePercentageConstraints(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overridePercentageConstraints"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_rule80A(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rule80A"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_rule80A(void)
{
  BSTR pVal;
  this->get_rule80A((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_rule80A(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("rule80A"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_allOrNone(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allOrNone"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_allOrNone(void)
{
  long pVal;
  this->get_allOrNone((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_allOrNone(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allOrNone"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_minQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minQty"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_minQty(void)
{
  long pVal;
  this->get_minQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_minQty(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minQty"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_percentOffset(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("percentOffset"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_percentOffset(void)
{
  double pVal;
  this->get_percentOffset((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_percentOffset(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("percentOffset"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_trailStopPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("trailStopPrice"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_trailStopPrice(void)
{
  double pVal;
  this->get_trailStopPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_trailStopPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("trailStopPrice"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_whatIf(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("whatIf"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_whatIf(void)
{
  long pVal;
  this->get_whatIf((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_whatIf(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("whatIf"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_notHeld(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notHeld"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_notHeld(void)
{
  long pVal;
  this->get_notHeld((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_notHeld(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("notHeld"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_faGroup(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("faGroup"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_faGroup(void)
{
  BSTR pVal;
  this->get_faGroup((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_faGroup(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("faGroup"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_faProfile(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("faProfile"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_faProfile(void)
{
  BSTR pVal;
  this->get_faProfile((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_faProfile(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("faProfile"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_faMethod(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("faMethod"), DISPID(62));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_faMethod(void)
{
  BSTR pVal;
  this->get_faMethod((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_faMethod(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("faMethod"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_faPercentage(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("faPercentage"), DISPID(63));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_faPercentage(void)
{
  BSTR pVal;
  this->get_faPercentage((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_faPercentage(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("faPercentage"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_openClose(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(72));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_openClose(void)
{
  BSTR pVal;
  this->get_openClose((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_openClose(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_origin(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("origin"), DISPID(73));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_origin(void)
{
  long pVal;
  this->get_origin((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_origin(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("origin"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_shortSaleSlot(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_shortSaleSlot(void)
{
  long pVal;
  this->get_shortSaleSlot((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_shortSaleSlot(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_designatedLocation(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(75));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_designatedLocation(void)
{
  BSTR pVal;
  this->get_designatedLocation((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_designatedLocation(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_discretionaryAmt(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("discretionaryAmt"), DISPID(80));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_discretionaryAmt(void)
{
  double pVal;
  this->get_discretionaryAmt((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_discretionaryAmt(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("discretionaryAmt"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_eTradeOnly(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("eTradeOnly"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_eTradeOnly(void)
{
  long pVal;
  this->get_eTradeOnly((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_eTradeOnly(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("eTradeOnly"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_firmQuoteOnly(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firmQuoteOnly"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_firmQuoteOnly(void)
{
  long pVal;
  this->get_firmQuoteOnly((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_firmQuoteOnly(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("firmQuoteOnly"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_nbboPriceCap(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nbboPriceCap"), DISPID(83));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_nbboPriceCap(void)
{
  double pVal;
  this->get_nbboPriceCap((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_nbboPriceCap(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nbboPriceCap"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_auctionStrategy(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("auctionStrategy"), DISPID(90));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_auctionStrategy(void)
{
  long pVal;
  this->get_auctionStrategy((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_auctionStrategy(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("auctionStrategy"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_startingPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("startingPrice"), DISPID(91));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_startingPrice(void)
{
  double pVal;
  this->get_startingPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_startingPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("startingPrice"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_stockRefPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRefPrice"), DISPID(92));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_stockRefPrice(void)
{
  double pVal;
  this->get_stockRefPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_stockRefPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRefPrice"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_delta(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(93));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_delta(void)
{
  double pVal;
  this->get_delta((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_delta(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_stockRangeLower(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeLower"), DISPID(94));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_stockRangeLower(void)
{
  double pVal;
  this->get_stockRangeLower((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_stockRangeLower(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeLower"), DISPID(94));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_stockRangeUpper(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeUpper"), DISPID(95));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_stockRangeUpper(void)
{
  double pVal;
  this->get_stockRangeUpper((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_stockRangeUpper(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeUpper"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_volatility(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volatility"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_volatility(void)
{
  double pVal;
  this->get_volatility((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_volatility(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volatility"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_volatilityType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volatilityType"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_volatilityType(void)
{
  long pVal;
  this->get_volatilityType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_volatilityType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volatilityType"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_continuousUpdate(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("continuousUpdate"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_continuousUpdate(void)
{
  long pVal;
  this->get_continuousUpdate((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_continuousUpdate(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("continuousUpdate"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_referencePriceType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("referencePriceType"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_referencePriceType(void)
{
  long pVal;
  this->get_referencePriceType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_referencePriceType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("referencePriceType"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_deltaNeutralOrderType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralOrderType"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_deltaNeutralOrderType(void)
{
  BSTR pVal;
  this->get_deltaNeutralOrderType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_deltaNeutralOrderType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralOrderType"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_deltaNeutralAuxPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralAuxPrice"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_deltaNeutralAuxPrice(void)
{
  double pVal;
  this->get_deltaNeutralAuxPrice((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_deltaNeutralAuxPrice(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralAuxPrice"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_basisPoints(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("basisPoints"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_basisPoints(void)
{
  double pVal;
  this->get_basisPoints((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_basisPoints(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("basisPoints"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_basisPointsType(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("basisPointsType"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_basisPointsType(void)
{
  long pVal;
  this->get_basisPointsType((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_basisPointsType(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("basisPointsType"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_scaleInitLevelSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scaleInitLevelSize"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_scaleInitLevelSize(void)
{
  long pVal;
  this->get_scaleInitLevelSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_scaleInitLevelSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scaleInitLevelSize"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_scaleSubsLevelSize(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scaleSubsLevelSize"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IOrderDispT<T>::get_scaleSubsLevelSize(void)
{
  long pVal;
  this->get_scaleSubsLevelSize((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_scaleSubsLevelSize(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scaleSubsLevelSize"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_scalePriceIncrement(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scalePriceIncrement"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderDispT<T>::get_scalePriceIncrement(void)
{
  double pVal;
  this->get_scalePriceIncrement((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_scalePriceIncrement(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scalePriceIncrement"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_account(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("account"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_account(void)
{
  BSTR pVal;
  this->get_account((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_account(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("account"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_settlingFirm(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("settlingFirm"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_settlingFirm(void)
{
  BSTR pVal;
  this->get_settlingFirm((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_settlingFirm(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("settlingFirm"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_clearingAccount(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clearingAccount"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_clearingAccount(void)
{
  BSTR pVal;
  this->get_clearingAccount((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_clearingAccount(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clearingAccount"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_clearingIntent(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clearingIntent"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_clearingIntent(void)
{
  BSTR pVal;
  this->get_clearingIntent((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_clearingIntent(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clearingIntent"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_algoStrategy(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("algoStrategy"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderDispT<T>::get_algoStrategy(void)
{
  BSTR pVal;
  this->get_algoStrategy((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_algoStrategy(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("algoStrategy"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::get_algoParams(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("algoParams"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IOrderDispT<T>::get_algoParams(void)
{
  LPDISPATCH pVal;
  this->get_algoParams((LPDISPATCH*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderDispT<T>::set_algoParams(LPDISPATCH pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("algoParams"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IOrderState
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B33AE1F-99B0-4BCB-A024-42335897A6AF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_status(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_status(void)
{
  BSTR pVal;
  this->get_status((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_initMargin(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("initMargin"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_initMargin(void)
{
  BSTR pVal;
  this->get_initMargin((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_maintMargin(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maintMargin"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_maintMargin(void)
{
  BSTR pVal;
  this->get_maintMargin((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_equityWithLoan(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("equityWithLoan"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_equityWithLoan(void)
{
  BSTR pVal;
  this->get_equityWithLoan((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_commission(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("commission"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderStateDispT<T>::get_commission(void)
{
  double pVal;
  this->get_commission((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_minCommission(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minCommission"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderStateDispT<T>::get_minCommission(void)
{
  double pVal;
  this->get_minCommission((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_maxCommission(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxCommission"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IOrderStateDispT<T>::get_maxCommission(void)
{
  double pVal;
  this->get_maxCommission((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_commissionCurrency(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("commissionCurrency"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_commissionCurrency(void)
{
  BSTR pVal;
  this->get_commissionCurrency((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IOrderStateDispT<T>::get_warningText(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("warningText"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IOrderStateDispT<T>::get_warningText(void)
{
  BSTR pVal;
  this->get_warningText((BSTR*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IExecution
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {58BDEC36-791C-4E2E-88A4-6E4339392B5B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_execId(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("execId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionDispT<T>::get_execId(void)
{
  BSTR pVal;
  this->get_execId((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_orderId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderId"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_orderId(void)
{
  long pVal;
  this->get_orderId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_clientId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientId"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_clientId(void)
{
  long pVal;
  this->get_clientId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_permId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("permId"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_permId(void)
{
  long pVal;
  this->get_permId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_time(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("time"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionDispT<T>::get_time(void)
{
  BSTR pVal;
  this->get_time((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_acctNumber(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("acctNumber"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionDispT<T>::get_acctNumber(void)
{
  BSTR pVal;
  this->get_acctNumber((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_exchange(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionDispT<T>::get_exchange(void)
{
  BSTR pVal;
  this->get_exchange((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_side(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("side"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionDispT<T>::get_side(void)
{
  BSTR pVal;
  this->get_side((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_shares(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shares"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_shares(void)
{
  long pVal;
  this->get_shares((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_price(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("price"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IExecutionDispT<T>::get_price(void)
{
  double pVal;
  this->get_price((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_liquidation(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("liquidation"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_liquidation(void)
{
  long pVal;
  this->get_liquidation((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_cumQty(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cumQty"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionDispT<T>::get_cumQty(void)
{
  long pVal;
  this->get_cumQty((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionDispT<T>::get_avgPrice(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("avgPrice"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IExecutionDispT<T>::get_avgPrice(void)
{
  double pVal;
  this->get_avgPrice((double*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  IExecutionFilter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3553EA07-F281-433D-B2A4-4CB722A9859B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_clientId(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientId"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IExecutionFilterDispT<T>::get_clientId(void)
{
  long pVal;
  this->get_clientId((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_clientId(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("clientId"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_acctCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("acctCode"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_acctCode(void)
{
  BSTR pVal;
  this->get_acctCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_acctCode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("acctCode"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_time(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("time"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_time(void)
{
  BSTR pVal;
  this->get_time((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_time(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("time"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_symbol(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("symbol"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_symbol(void)
{
  BSTR pVal;
  this->get_symbol((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_symbol(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("symbol"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_secType(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("secType"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_secType(void)
{
  BSTR pVal;
  this->get_secType((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_secType(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("secType"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_exchange(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_exchange(void)
{
  BSTR pVal;
  this->get_exchange((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_exchange(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("exchange"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::get_side(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("side"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IExecutionFilterDispT<T>::get_side(void)
{
  BSTR pVal;
  this->get_side((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IExecutionFilterDispT<T>::set_side(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("side"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IScannerSubscription
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6BBE7E50-795D-4C45-A69E-E1EEB7918DD2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_instrument(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("instrument"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_instrument(void)
{
  BSTR pVal;
  this->get_instrument((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_instrument(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("instrument"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_locations(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("locations"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_locations(void)
{
  BSTR pVal;
  this->get_locations((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_locations(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("locations"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_scanCode(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scanCode"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_scanCode(void)
{
  BSTR pVal;
  this->get_scanCode((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_scanCode(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scanCode"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_numberOfRows(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("numberOfRows"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScannerSubscriptionDispT<T>::get_numberOfRows(void)
{
  long pVal;
  this->get_numberOfRows((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_numberOfRows(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("numberOfRows"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_priceAbove(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("priceAbove"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_priceAbove(void)
{
  double pVal;
  this->get_priceAbove((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_priceAbove(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("priceAbove"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_priceBelow(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("priceBelow"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_priceBelow(void)
{
  double pVal;
  this->get_priceBelow((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_priceBelow(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("priceBelow"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_volumeAbove(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volumeAbove"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScannerSubscriptionDispT<T>::get_volumeAbove(void)
{
  long pVal;
  this->get_volumeAbove((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_volumeAbove(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volumeAbove"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_averageOptionVolumeAbove(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("averageOptionVolumeAbove"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScannerSubscriptionDispT<T>::get_averageOptionVolumeAbove(void)
{
  long pVal;
  this->get_averageOptionVolumeAbove((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_averageOptionVolumeAbove(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("averageOptionVolumeAbove"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_marketCapAbove(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("marketCapAbove"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_marketCapAbove(void)
{
  double pVal;
  this->get_marketCapAbove((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_marketCapAbove(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("marketCapAbove"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_marketCapBelow(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("marketCapBelow"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_marketCapBelow(void)
{
  double pVal;
  this->get_marketCapBelow((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_marketCapBelow(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("marketCapBelow"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_moodyRatingAbove(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("moodyRatingAbove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_moodyRatingAbove(void)
{
  BSTR pVal;
  this->get_moodyRatingAbove((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_moodyRatingAbove(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moodyRatingAbove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_moodyRatingBelow(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("moodyRatingBelow"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_moodyRatingBelow(void)
{
  BSTR pVal;
  this->get_moodyRatingBelow((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_moodyRatingBelow(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("moodyRatingBelow"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_spRatingAbove(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("spRatingAbove"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_spRatingAbove(void)
{
  BSTR pVal;
  this->get_spRatingAbove((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_spRatingAbove(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("spRatingAbove"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_spRatingBelow(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("spRatingBelow"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_spRatingBelow(void)
{
  BSTR pVal;
  this->get_spRatingBelow((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_spRatingBelow(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("spRatingBelow"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_maturityDateAbove(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maturityDateAbove"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_maturityDateAbove(void)
{
  BSTR pVal;
  this->get_maturityDateAbove((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_maturityDateAbove(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maturityDateAbove"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_maturityDateBelow(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maturityDateBelow"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_maturityDateBelow(void)
{
  BSTR pVal;
  this->get_maturityDateBelow((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_maturityDateBelow(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maturityDateBelow"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_couponRateAbove(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("couponRateAbove"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_couponRateAbove(void)
{
  double pVal;
  this->get_couponRateAbove((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_couponRateAbove(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("couponRateAbove"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_couponRateBelow(double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("couponRateBelow"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IScannerSubscriptionDispT<T>::get_couponRateBelow(void)
{
  double pVal;
  this->get_couponRateBelow((double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_couponRateBelow(double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("couponRateBelow"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_excludeConvertible(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("excludeConvertible"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IScannerSubscriptionDispT<T>::get_excludeConvertible(void)
{
  long pVal;
  this->get_excludeConvertible((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_excludeConvertible(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("excludeConvertible"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_scannerSettingPairs(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("scannerSettingPairs"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_scannerSettingPairs(void)
{
  BSTR pVal;
  this->get_scannerSettingPairs((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_scannerSettingPairs(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("scannerSettingPairs"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::get_stockTypeFilter(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockTypeFilter"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IScannerSubscriptionDispT<T>::get_stockTypeFilter(void)
{
  BSTR pVal;
  this->get_stockTypeFilter((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IScannerSubscriptionDispT<T>::set_stockTypeFilter(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("stockTypeFilter"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _DTws
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0A77CCF6-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
template <class T> Twslib_tlb::IComboLegList* __fastcall
_DTwsDispT<T>::createComboLegList()
{
  _TDispID _dispid(*this, OLETEXT("createComboLegList"), DISPID(201));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IComboLegList* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Twslib_tlb::ITagValueList* __fastcall
_DTwsDispT<T>::createTagValueList()
{
  _TDispID _dispid(*this, OLETEXT("createTagValueList"), DISPID(206));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::ITagValueList* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Twslib_tlb::IUnderComp* __fastcall
_DTwsDispT<T>::createUnderComp()
{
  _TDispID _dispid(*this, OLETEXT("createUnderComp"), DISPID(205));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IUnderComp* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelScannerSubscription(long tickerId)
{
  _TDispID _dispid(*this, OLETEXT("cancelScannerSubscription"), DISPID(87));
  TAutoArgs<1> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Twslib_tlb::IExecutionFilter* __fastcall
_DTwsDispT<T>::createExecutionFilter()
{
  _TDispID _dispid(*this, OLETEXT("createExecutionFilter"), DISPID(203));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IExecutionFilter* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Twslib_tlb::IOrder* __fastcall
_DTwsDispT<T>::createOrder()
{
  _TDispID _dispid(*this, OLETEXT("createOrder"), DISPID(202));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IOrder* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Twslib_tlb::IScannerSubscription* __fastcall
_DTwsDispT<T>::createScannerSubscription()
{
  _TDispID _dispid(*this, OLETEXT("createScannerSubscription"), DISPID(204));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IScannerSubscription* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::placeOrderEx(long orderId, Twslib_tlb::IContract* contract, Twslib_tlb::IOrder* order)
{
  _TDispID _dispid(*this, OLETEXT("placeOrderEx"), DISPID(103));
  TAutoArgs<3> _args;
  _args[1] = orderId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Twslib_tlb::IOrder*)order /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqScannerSubscriptionEx(long tickerId, 
                                        Twslib_tlb::IScannerSubscription* subscription)
{
  _TDispID _dispid(*this, OLETEXT("reqScannerSubscriptionEx"), DISPID(108));
  TAutoArgs<2> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IScannerSubscription*)subscription /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqRealTimeBarsEx(long tickerId, Twslib_tlb::IContract* contract, long barSize, 
                                 BSTR whatToShow, long useRTH)
{
  _TDispID _dispid(*this, OLETEXT("reqRealTimeBarsEx"), DISPID(107));
  TAutoArgs<5> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = barSize /*[VT_I4:0]*/;
  _args[4] = whatToShow /*[VT_BSTR:0]*/;
  _args[5] = useRTH /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Twslib_tlb::IContract* __fastcall
_DTwsDispT<T>::createContract()
{
  _TDispID _dispid(*this, OLETEXT("createContract"), DISPID(200));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Twslib_tlb::IContract* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::exerciseOptionsEx(long tickerId, Twslib_tlb::IContract* contract, long exerciseAction
                                 , long exerciseQuantity, BSTR account, long override)
{
  _TDispID _dispid(*this, OLETEXT("exerciseOptionsEx"), DISPID(105));
  TAutoArgs<6> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = exerciseAction /*[VT_I4:0]*/;
  _args[4] = exerciseQuantity /*[VT_I4:0]*/;
  _args[5] = account /*[VT_BSTR:0]*/;
  _args[6] = override /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqExecutionsEx(long reqId, Twslib_tlb::IExecutionFilter* filter)
{
  _TDispID _dispid(*this, OLETEXT("reqExecutionsEx"), DISPID(104));
  TAutoArgs<2> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IExecutionFilter*)filter /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::resetAllProperties()
{
  _TDispID _dispid(*this, OLETEXT("resetAllProperties"), DISPID(88));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqFundamentalData(long reqId, Twslib_tlb::IContract* contract, BSTR reportType)
{
  _TDispID _dispid(*this, OLETEXT("reqFundamentalData"), DISPID(92));
  TAutoArgs<3> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = reportType /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqCurrentTime()
{
  _TDispID _dispid(*this, OLETEXT("reqCurrentTime"), DISPID(91));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktDepthEx(long tickerId, Twslib_tlb::IContract* contract, long numRows)
{
  _TDispID _dispid(*this, OLETEXT("reqMktDepthEx"), DISPID(102));
  TAutoArgs<3> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = numRows /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelMktData(long id)
{
  _TDispID _dispid(*this, OLETEXT("cancelMktData"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelOrder(long id)
{
  _TDispID _dispid(*this, OLETEXT("cancelOrder"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelFundamentalData(long reqId)
{
  _TDispID _dispid(*this, OLETEXT("cancelFundamentalData"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktDataEx(long tickerId, Twslib_tlb::IContract* contract, BSTR genericTicks, 
                            long snapshot)
{
  _TDispID _dispid(*this, OLETEXT("reqMktDataEx"), DISPID(101));
  TAutoArgs<4> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = genericTicks /*[VT_BSTR:0]*/;
  _args[4] = snapshot /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqScannerSubscription(long tickerId, long numberOfRows, BSTR instrument, 
                                      BSTR locationCode, BSTR scanCode, double abovePrice, 
                                      double belowPrice, long aboveVolume, double marketCapAbove, 
                                      double marketCapBelow, BSTR moodyRatingAbove, 
                                      BSTR moodyRatingBelow, BSTR spRatingAbove, BSTR spRatingBelow
                                      , BSTR maturityDateAbove, BSTR maturityDateBelow, 
                                      double couponRateAbove, double couponRateBelow, 
                                      long excludeConvertible, long averageOptionVolumeAbove, 
                                      BSTR scannerSettingPairs, BSTR stockTypeFilter)
{
  _TDispID _dispid(*this, OLETEXT("reqScannerSubscription"), DISPID(85));
  TAutoArgs<22> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = numberOfRows /*[VT_I4:0]*/;
  _args[3] = instrument /*[VT_BSTR:0]*/;
  _args[4] = locationCode /*[VT_BSTR:0]*/;
  _args[5] = scanCode /*[VT_BSTR:0]*/;
  _args[6] = abovePrice /*[VT_R8:0]*/;
  _args[7] = belowPrice /*[VT_R8:0]*/;
  _args[8] = aboveVolume /*[VT_I4:0]*/;
  _args[9] = marketCapAbove /*[VT_R8:0]*/;
  _args[10] = marketCapBelow /*[VT_R8:0]*/;
  _args[11] = moodyRatingAbove /*[VT_BSTR:0]*/;
  _args[12] = moodyRatingBelow /*[VT_BSTR:0]*/;
  _args[13] = spRatingAbove /*[VT_BSTR:0]*/;
  _args[14] = spRatingBelow /*[VT_BSTR:0]*/;
  _args[15] = maturityDateAbove /*[VT_BSTR:0]*/;
  _args[16] = maturityDateBelow /*[VT_BSTR:0]*/;
  _args[17] = couponRateAbove /*[VT_R8:0]*/;
  _args[18] = couponRateBelow /*[VT_R8:0]*/;
  _args[19] = excludeConvertible /*[VT_I4:0]*/;
  _args[20] = averageOptionVolumeAbove /*[VT_I4:0]*/;
  _args[21] = scannerSettingPairs /*[VT_BSTR:0]*/;
  _args[22] = stockTypeFilter /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqScannerParameters()
{
  _TDispID _dispid(*this, OLETEXT("reqScannerParameters"), DISPID(84));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqRealTimeBars(long tickerId, BSTR symbol, BSTR secType, BSTR expiry, double strike
                               , BSTR right, BSTR multiplier, BSTR exchange, BSTR primaryExchange, 
                               BSTR currency, long isExpired, long barSize, BSTR whatToShow, 
                               long useRTH)
{
  _TDispID _dispid(*this, OLETEXT("reqRealTimeBars"), DISPID(89));
  TAutoArgs<14> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = multiplier /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = primaryExchange /*[VT_BSTR:0]*/;
  _args[10] = currency /*[VT_BSTR:0]*/;
  _args[11] = isExpired /*[VT_I4:0]*/;
  _args[12] = barSize /*[VT_I4:0]*/;
  _args[13] = whatToShow /*[VT_BSTR:0]*/;
  _args[14] = useRTH /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqContractDetailsEx(long reqId, Twslib_tlb::IContract* contract)
{
  _TDispID _dispid(*this, OLETEXT("reqContractDetailsEx"), DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelRealTimeBars(long tickerId)
{
  _TDispID _dispid(*this, OLETEXT("cancelRealTimeBars"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelHistoricalData(long tickerId)
{
  _TDispID _dispid(*this, OLETEXT("cancelHistoricalData"), DISPID(86));
  TAutoArgs<1> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqHistoricalDataEx(long tickerId, Twslib_tlb::IContract* contract, BSTR endDateTime
                                   , BSTR duration, BSTR barSize, BSTR whatToShow, long useRTH, 
                                   long formatDate)
{
  _TDispID _dispid(*this, OLETEXT("reqHistoricalDataEx"), DISPID(106));
  TAutoArgs<8> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = endDateTime /*[VT_BSTR:0]*/;
  _args[4] = duration /*[VT_BSTR:0]*/;
  _args[5] = barSize /*[VT_BSTR:0]*/;
  _args[6] = whatToShow /*[VT_BSTR:0]*/;
  _args[7] = useRTH /*[VT_I4:0]*/;
  _args[8] = formatDate /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqHistoricalData(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                 BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, 
                                 long isExpired, BSTR endDateTime, BSTR durationStr, 
                                 BSTR barSizeSetting, BSTR whatToShow, long useRTH, long formatDate)
{
  _TDispID _dispid(*this, OLETEXT("reqHistoricalData"), DISPID(82));
  TAutoArgs<16> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = multiplier /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = curency /*[VT_BSTR:0]*/;
  _args[10] = isExpired /*[VT_I4:0]*/;
  _args[11] = endDateTime /*[VT_BSTR:0]*/;
  _args[12] = durationStr /*[VT_BSTR:0]*/;
  _args[13] = barSizeSetting /*[VT_BSTR:0]*/;
  _args[14] = whatToShow /*[VT_BSTR:0]*/;
  _args[15] = useRTH /*[VT_I4:0]*/;
  _args[16] = formatDate /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::replaceFA(long faDataType, BSTR cxml)
{
  _TDispID _dispid(*this, OLETEXT("replaceFA"), DISPID(81));
  TAutoArgs<2> _args;
  _args[1] = faDataType /*[VT_I4:0]*/;
  _args[2] = cxml /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::requestFA(long faDataType)
{
  _TDispID _dispid(*this, OLETEXT("requestFA"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = faDataType /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqManagedAccts()
{
  _TDispID _dispid(*this, OLETEXT("reqManagedAccts"), DISPID(79));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqAllOpenOrders()
{
  _TDispID _dispid(*this, OLETEXT("reqAllOpenOrders"), DISPID(78));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqAutoOpenOrders(long bAutoBind)
{
  _TDispID _dispid(*this, OLETEXT("reqAutoOpenOrders"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = bAutoBind /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::setServerLogLevel(long logLevel)
{
  _TDispID _dispid(*this, OLETEXT("setServerLogLevel"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = logLevel /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqNewsBulletins(long allDaysMsgs)
{
  _TDispID _dispid(*this, OLETEXT("reqNewsBulletins"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = allDaysMsgs /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelNewsBulletins()
{
  _TDispID _dispid(*this, OLETEXT("cancelNewsBulletins"), DISPID(74));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::clearComboLegs()
{
  _TDispID _dispid(*this, OLETEXT("clearComboLegs"), DISPID(73));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::addComboLeg(long conId, BSTR action, long ratio, BSTR exchange, long openClose, 
                           long shortSaleSlot, BSTR designatedLocation)
{
  _TDispID _dispid(*this, OLETEXT("addComboLeg"), DISPID(72));
  TAutoArgs<7> _args;
  _args[1] = conId /*[VT_I4:0]*/;
  _args[2] = action /*[VT_BSTR:0]*/;
  _args[3] = ratio /*[VT_I4:0]*/;
  _args[4] = exchange /*[VT_BSTR:0]*/;
  _args[5] = openClose /*[VT_I4:0]*/;
  _args[6] = shortSaleSlot /*[VT_I4:0]*/;
  _args[7] = designatedLocation /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::cancelMktDepth(long id)
{
  _TDispID _dispid(*this, OLETEXT("cancelMktDepth"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktDepth2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, BSTR curency, 
                            long numRows)
{
  _TDispID _dispid(*this, OLETEXT("reqMktDepth2"), DISPID(70));
  TAutoArgs<6> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = localSymbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = exchange /*[VT_BSTR:0]*/;
  _args[5] = curency /*[VT_BSTR:0]*/;
  _args[6] = numRows /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktData(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, BSTR right
                          , BSTR multiplier, BSTR exchange, BSTR primaryExchange, BSTR currency, 
                          BSTR genericTicks, long snapshot)
{
  _TDispID _dispid(*this, OLETEXT("reqMktData"), DISPID(60));
  TAutoArgs<12> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = multiplier /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = primaryExchange /*[VT_BSTR:0]*/;
  _args[10] = currency /*[VT_BSTR:0]*/;
  _args[11] = genericTicks /*[VT_BSTR:0]*/;
  _args[12] = snapshot /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqIds(long numIds)
{
  _TDispID _dispid(*this, OLETEXT("reqIds"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = numIds /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktDepth(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                           BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, long numRows)
{
  _TDispID _dispid(*this, OLETEXT("reqMktDepth"), DISPID(69));
  TAutoArgs<10> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = multiplier /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = curency /*[VT_BSTR:0]*/;
  _args[10] = numRows /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqContractDetails2(BSTR localSymbol, BSTR secType, BSTR exchange, BSTR curency, 
                                   long includeExpired)
{
  _TDispID _dispid(*this, OLETEXT("reqContractDetails2"), DISPID(68));
  TAutoArgs<5> _args;
  _args[1] = localSymbol /*[VT_BSTR:0]*/;
  _args[2] = secType /*[VT_BSTR:0]*/;
  _args[3] = exchange /*[VT_BSTR:0]*/;
  _args[4] = curency /*[VT_BSTR:0]*/;
  _args[5] = includeExpired /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::exerciseOptions(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                               BSTR right, BSTR multiplier, BSTR exchange, BSTR curency, 
                               long exerciseAction, long exerciseQuantity, long override)
{
  _TDispID _dispid(*this, OLETEXT("exerciseOptions"), DISPID(83));
  TAutoArgs<12> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = multiplier /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = curency /*[VT_BSTR:0]*/;
  _args[10] = exerciseAction /*[VT_I4:0]*/;
  _args[11] = exerciseQuantity /*[VT_I4:0]*/;
  _args[12] = override /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::placeOrder2(long id, BSTR action, long quantity, BSTR localSymbol, BSTR secType, 
                           BSTR exchange, BSTR primaryExchange, BSTR curency, BSTR orderType, 
                           double lmtPrice, double auxPrice, BSTR goodAfterTime, BSTR group, 
                           BSTR faMethod, BSTR faPercentage, BSTR faProfile, BSTR goodTillDate)
{
  _TDispID _dispid(*this, OLETEXT("placeOrder2"), DISPID(66));
  TAutoArgs<17> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = action /*[VT_BSTR:0]*/;
  _args[3] = quantity /*[VT_I4:0]*/;
  _args[4] = localSymbol /*[VT_BSTR:0]*/;
  _args[5] = secType /*[VT_BSTR:0]*/;
  _args[6] = exchange /*[VT_BSTR:0]*/;
  _args[7] = primaryExchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = orderType /*[VT_BSTR:0]*/;
  _args[10] = lmtPrice /*[VT_R8:0]*/;
  _args[11] = auxPrice /*[VT_R8:0]*/;
  _args[12] = goodAfterTime /*[VT_BSTR:0]*/;
  _args[13] = group /*[VT_BSTR:0]*/;
  _args[14] = faMethod /*[VT_BSTR:0]*/;
  _args[15] = faPercentage /*[VT_BSTR:0]*/;
  _args[16] = faProfile /*[VT_BSTR:0]*/;
  _args[17] = goodTillDate /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqMktData2(long id, BSTR localSymbol, BSTR secType, BSTR exchange, 
                           BSTR primaryExchange, BSTR currency, BSTR genericTicks, long snapshot)
{
  _TDispID _dispid(*this, OLETEXT("reqMktData2"), DISPID(65));
  TAutoArgs<8> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = localSymbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = exchange /*[VT_BSTR:0]*/;
  _args[5] = primaryExchange /*[VT_BSTR:0]*/;
  _args[6] = currency /*[VT_BSTR:0]*/;
  _args[7] = genericTicks /*[VT_BSTR:0]*/;
  _args[8] = snapshot /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqContractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, BSTR right
                                  , BSTR multiplier, BSTR exchange, BSTR curency, 
                                  long includeExpired)
{
  _TDispID _dispid(*this, OLETEXT("reqContractDetails"), DISPID(67));
  TAutoArgs<9> _args;
  _args[1] = symbol /*[VT_BSTR:0]*/;
  _args[2] = secType /*[VT_BSTR:0]*/;
  _args[3] = expiry /*[VT_BSTR:0]*/;
  _args[4] = strike /*[VT_R8:0]*/;
  _args[5] = right /*[VT_BSTR:0]*/;
  _args[6] = multiplier /*[VT_BSTR:0]*/;
  _args[7] = exchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = includeExpired /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::placeOrder(long id, BSTR action, long quantity, BSTR symbol, BSTR secType, 
                          BSTR expiry, double strike, BSTR right, BSTR multiplier, BSTR exchange, 
                          BSTR primaryExchange, BSTR curency, BSTR orderType, double price, 
                          double auxPrice, BSTR goodAfterTime, BSTR group, BSTR faMethod, 
                          BSTR faPercentage, BSTR faProfile, BSTR goodTillDate)
{
  _TDispID _dispid(*this, OLETEXT("placeOrder"), DISPID(57));
  TAutoArgs<21> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = action /*[VT_BSTR:0]*/;
  _args[3] = quantity /*[VT_I4:0]*/;
  _args[4] = symbol /*[VT_BSTR:0]*/;
  _args[5] = secType /*[VT_BSTR:0]*/;
  _args[6] = expiry /*[VT_BSTR:0]*/;
  _args[7] = strike /*[VT_R8:0]*/;
  _args[8] = right /*[VT_BSTR:0]*/;
  _args[9] = multiplier /*[VT_BSTR:0]*/;
  _args[10] = exchange /*[VT_BSTR:0]*/;
  _args[11] = primaryExchange /*[VT_BSTR:0]*/;
  _args[12] = curency /*[VT_BSTR:0]*/;
  _args[13] = orderType /*[VT_BSTR:0]*/;
  _args[14] = price /*[VT_R8:0]*/;
  _args[15] = auxPrice /*[VT_R8:0]*/;
  _args[16] = goodAfterTime /*[VT_BSTR:0]*/;
  _args[17] = group /*[VT_BSTR:0]*/;
  _args[18] = faMethod /*[VT_BSTR:0]*/;
  _args[19] = faPercentage /*[VT_BSTR:0]*/;
  _args[20] = faProfile /*[VT_BSTR:0]*/;
  _args[21] = goodTillDate /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqAccountUpdates(long subscribe, BSTR acctCode)
{
  _TDispID _dispid(*this, OLETEXT("reqAccountUpdates"), DISPID(62));
  TAutoArgs<2> _args;
  _args[1] = subscribe /*[VT_I4:0]*/;
  _args[2] = acctCode /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqOpenOrders()
{
  _TDispID _dispid(*this, OLETEXT("reqOpenOrders"), DISPID(61));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::reqExecutions()
{
  _TDispID _dispid(*this, OLETEXT("reqExecutions"), DISPID(63));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::connect(BSTR host, long port, long clientId)
{
  _TDispID _dispid(*this, OLETEXT("connect"), DISPID(59));
  TAutoArgs<3> _args;
  _args[1] = host /*[VT_BSTR:0]*/;
  _args[2] = port /*[VT_I4:0]*/;
  _args[3] = clientId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsDispT<T>::disconnect()
{
  _TDispID _dispid(*this, OLETEXT("disconnect"), DISPID(58));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsDispT<T>::set_scalePriceIncrement(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("scalePriceIncrement"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_scalePriceIncrement()
{
  _TDispID _dispid(*this, OLETEXT("scalePriceIncrement"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_scaleSubsLevelSize(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("scaleSubsLevelSize"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_scaleSubsLevelSize()
{
  _TDispID _dispid(*this, OLETEXT("scaleSubsLevelSize"), DISPID(53));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_scaleInitLevelSize(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("scaleInitLevelSize"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_scaleInitLevelSize()
{
  _TDispID _dispid(*this, OLETEXT("scaleInitLevelSize"), DISPID(52));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_trailStopPrice(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("trailStopPrice"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_trailStopPrice()
{
  _TDispID _dispid(*this, OLETEXT("trailStopPrice"), DISPID(51));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_referencePriceType(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("referencePriceType"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_referencePriceType()
{
  _TDispID _dispid(*this, OLETEXT("referencePriceType"), DISPID(50));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_continuousUpdate(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("continuousUpdate"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_continuousUpdate()
{
  _TDispID _dispid(*this, OLETEXT("continuousUpdate"), DISPID(49));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_deltaNeutralAuxPrice(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralAuxPrice"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_deltaNeutralAuxPrice()
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralAuxPrice"), DISPID(48));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_deltaNeutralOrderType(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralOrderType"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_deltaNeutralOrderType()
{
  _TDispID _dispid(*this, OLETEXT("deltaNeutralOrderType"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_volatilityType(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("volatilityType"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_volatilityType()
{
  _TDispID _dispid(*this, OLETEXT("volatilityType"), DISPID(46));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_volatility(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("volatility"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_volatility()
{
  _TDispID _dispid(*this, OLETEXT("volatility"), DISPID(45));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_overridePercentageConstraints(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("overridePercentageConstraints"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_overridePercentageConstraints()
{
  _TDispID _dispid(*this, OLETEXT("overridePercentageConstraints"), DISPID(44));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_serverVersion(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("serverVersion"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_serverVersion()
{
  _TDispID _dispid(*this, OLETEXT("serverVersion"), DISPID(43));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_TwsConnectionTime(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TwsConnectionTime"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_TwsConnectionTime()
{
  _TDispID _dispid(*this, OLETEXT("TwsConnectionTime"), DISPID(42));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_stockRangeUpper(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeUpper"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_stockRangeUpper()
{
  _TDispID _dispid(*this, OLETEXT("stockRangeUpper"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_stockRangeLower(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("stockRangeLower"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_stockRangeLower()
{
  _TDispID _dispid(*this, OLETEXT("stockRangeLower"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_delta(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_delta()
{
  _TDispID _dispid(*this, OLETEXT("delta"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_stockRefPrice(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("stockRefPrice"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_stockRefPrice()
{
  _TDispID _dispid(*this, OLETEXT("stockRefPrice"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_startingPrice(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("startingPrice"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_startingPrice()
{
  _TDispID _dispid(*this, OLETEXT("startingPrice"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_auctionStrategy(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("auctionStrategy"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_auctionStrategy()
{
  _TDispID _dispid(*this, OLETEXT("auctionStrategy"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_nbboPriceCap(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("nbboPriceCap"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_nbboPriceCap()
{
  _TDispID _dispid(*this, OLETEXT("nbboPriceCap"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_firmQuoteOnly(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("firmQuoteOnly"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_firmQuoteOnly()
{
  _TDispID _dispid(*this, OLETEXT("firmQuoteOnly"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_eTradeOnly(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("eTradeOnly"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_eTradeOnly()
{
  _TDispID _dispid(*this, OLETEXT("eTradeOnly"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_percentOffset(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("percentOffset"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_percentOffset()
{
  _TDispID _dispid(*this, OLETEXT("percentOffset"), DISPID(32));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_minQty(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("minQty"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_minQty()
{
  _TDispID _dispid(*this, OLETEXT("minQty"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_allOrNone(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("allOrNone"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_allOrNone()
{
  _TDispID _dispid(*this, OLETEXT("allOrNone"), DISPID(30));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_settlingFirm(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("settlingFirm"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_settlingFirm()
{
  _TDispID _dispid(*this, OLETEXT("settlingFirm"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_rule80A(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("rule80A"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_rule80A()
{
  _TDispID _dispid(*this, OLETEXT("rule80A"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_ocaType(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ocaType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_ocaType()
{
  _TDispID _dispid(*this, OLETEXT("ocaType"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_designatedLocation(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_designatedLocation()
{
  _TDispID _dispid(*this, OLETEXT("designatedLocation"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_shortSaleSlot(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_shortSaleSlot()
{
  _TDispID _dispid(*this, OLETEXT("shortSaleSlot"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_discretionaryAmt(double /*[VT_R8:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("discretionaryAmt"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> double /*[VT_R8:0]*/ __fastcall
_DTwsDispT<T>::get_discretionaryAmt()
{
  _TDispID _dispid(*this, OLETEXT("discretionaryAmt"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_sideFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("sideFilter"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_sideFilter()
{
  _TDispID _dispid(*this, OLETEXT("sideFilter"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_exchangeFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("exchangeFilter"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_exchangeFilter()
{
  _TDispID _dispid(*this, OLETEXT("exchangeFilter"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_secTypeFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("secTypeFilter"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_secTypeFilter()
{
  _TDispID _dispid(*this, OLETEXT("secTypeFilter"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_symbolFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("symbolFilter"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_symbolFilter()
{
  _TDispID _dispid(*this, OLETEXT("symbolFilter"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_timeFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("timeFilter"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_timeFilter()
{
  _TDispID _dispid(*this, OLETEXT("timeFilter"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_acctCodeFilter(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("acctCodeFilter"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_acctCodeFilter()
{
  _TDispID _dispid(*this, OLETEXT("acctCodeFilter"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_clientIdFilter(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("clientIdFilter"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_clientIdFilter()
{
  _TDispID _dispid(*this, OLETEXT("clientIdFilter"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_hidden(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("hidden"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_hidden()
{
  _TDispID _dispid(*this, OLETEXT("hidden"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_outsideRth(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("outsideRth"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_outsideRth()
{
  _TDispID _dispid(*this, OLETEXT("outsideRth"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_triggerMethod(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("triggerMethod"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_triggerMethod()
{
  _TDispID _dispid(*this, OLETEXT("triggerMethod"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_displaySize(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("displaySize"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_displaySize()
{
  _TDispID _dispid(*this, OLETEXT("displaySize"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_sweepToFill(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("sweepToFill"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_sweepToFill()
{
  _TDispID _dispid(*this, OLETEXT("sweepToFill"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_blockOrder(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("blockOrder"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_blockOrder()
{
  _TDispID _dispid(*this, OLETEXT("blockOrder"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_parentId(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("parentId"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_parentId()
{
  _TDispID _dispid(*this, OLETEXT("parentId"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_openClose(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_openClose()
{
  _TDispID _dispid(*this, OLETEXT("openClose"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_transmit(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("transmit"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_transmit()
{
  _TDispID _dispid(*this, OLETEXT("transmit"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_origin(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("origin"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DTwsDispT<T>::get_origin()
{
  _TDispID _dispid(*this, OLETEXT("origin"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_orderRef(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("orderRef"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_orderRef()
{
  _TDispID _dispid(*this, OLETEXT("orderRef"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_oca(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("oca"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_oca()
{
  _TDispID _dispid(*this, OLETEXT("oca"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_tif(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("tif"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_tif()
{
  _TDispID _dispid(*this, OLETEXT("tif"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DTwsDispT<T>::set_account(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("account"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DTwsDispT<T>::get_account()
{
  _TDispID _dispid(*this, OLETEXT("account"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DTwsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0A77CCF7-052C-11D6-B0EC-00B0D074179C}
// *********************************************************************//
template <class T> void __fastcall
_DTwsEventsDispT<T>::tickPrice(long id, long tickType, double price, int canAutoExecute)
{
  _TDispID _dispid(/* tickPrice */ DISPID(1));
  TAutoArgs<4> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = tickType /*[VT_I4:0]*/;
  _args[3] = price /*[VT_R8:0]*/;
  _args[4] = canAutoExecute /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickSize(long id, long tickType, long size)
{
  _TDispID _dispid(/* tickSize */ DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = tickType /*[VT_I4:0]*/;
  _args[3] = size /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::connectionClosed()
{
  _TDispID _dispid(/* connectionClosed */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrder1(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol)
{
  _TDispID _dispid(/* openOrder1 */ DISPID(4));
  TAutoArgs<9> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = exchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = localSymbol /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrder2(long id, BSTR action, long quantity, BSTR orderType, double lmtPrice
                                , double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId)
{
  _TDispID _dispid(/* openOrder2 */ DISPID(5));
  TAutoArgs<13> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = action /*[VT_BSTR:0]*/;
  _args[3] = quantity /*[VT_I4:0]*/;
  _args[4] = orderType /*[VT_BSTR:0]*/;
  _args[5] = lmtPrice /*[VT_R8:0]*/;
  _args[6] = auxPrice /*[VT_R8:0]*/;
  _args[7] = tif /*[VT_BSTR:0]*/;
  _args[8] = ocaGroup /*[VT_BSTR:0]*/;
  _args[9] = account /*[VT_BSTR:0]*/;
  _args[10] = openClose /*[VT_BSTR:0]*/;
  _args[11] = origin /*[VT_I4:0]*/;
  _args[12] = orderRef /*[VT_BSTR:0]*/;
  _args[13] = clientId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updateAccountTime(BSTR timeStamp)
{
  _TDispID _dispid(/* updateAccountTime */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = timeStamp /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updateAccountValue(BSTR key, BSTR value, BSTR curency, BSTR accountName)
{
  _TDispID _dispid(/* updateAccountValue */ DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = key /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_BSTR:0]*/;
  _args[3] = curency /*[VT_BSTR:0]*/;
  _args[4] = accountName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::nextValidId(long id)
{
  _TDispID _dispid(/* nextValidId */ DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::permId(long id, long permId)
{
  _TDispID _dispid(/* permId */ DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = permId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::errMsg(long id, long errorCode, BSTR errorMsg)
{
  _TDispID _dispid(/* errMsg */ DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = errorCode /*[VT_I4:0]*/;
  _args[3] = errorMsg /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updatePortfolio(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                     BSTR right, BSTR curency, BSTR localSymbol, long position, 
                                     double marketPrice, double marketValue, double averageCost, 
                                     double unrealizedPNL, double realizedPNL, BSTR accountName)
{
  _TDispID _dispid(/* updatePortfolio */ DISPID(12));
  TAutoArgs<14> _args;
  _args[1] = symbol /*[VT_BSTR:0]*/;
  _args[2] = secType /*[VT_BSTR:0]*/;
  _args[3] = expiry /*[VT_BSTR:0]*/;
  _args[4] = strike /*[VT_R8:0]*/;
  _args[5] = right /*[VT_BSTR:0]*/;
  _args[6] = curency /*[VT_BSTR:0]*/;
  _args[7] = localSymbol /*[VT_BSTR:0]*/;
  _args[8] = position /*[VT_I4:0]*/;
  _args[9] = marketPrice /*[VT_R8:0]*/;
  _args[10] = marketValue /*[VT_R8:0]*/;
  _args[11] = averageCost /*[VT_R8:0]*/;
  _args[12] = unrealizedPNL /*[VT_R8:0]*/;
  _args[13] = realizedPNL /*[VT_R8:0]*/;
  _args[14] = accountName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::orderStatus(long id, BSTR status, long filled, long remaining, 
                                 double avgFillPrice, long permId, long parentId, 
                                 double lastFillPrice, long clientId, BSTR whyHeld)
{
  _TDispID _dispid(/* orderStatus */ DISPID(13));
  TAutoArgs<10> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = status /*[VT_BSTR:0]*/;
  _args[3] = filled /*[VT_I4:0]*/;
  _args[4] = remaining /*[VT_I4:0]*/;
  _args[5] = avgFillPrice /*[VT_R8:0]*/;
  _args[6] = permId /*[VT_I4:0]*/;
  _args[7] = parentId /*[VT_I4:0]*/;
  _args[8] = lastFillPrice /*[VT_R8:0]*/;
  _args[9] = clientId /*[VT_I4:0]*/;
  _args[10] = whyHeld /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::contractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                     BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                     BSTR marketName, BSTR tradingClass, long conId, double minTick
                                     , long priceMagnifier, BSTR multiplier, BSTR orderTypes, 
                                     BSTR validExchanges)
{
  _TDispID _dispid(/* contractDetails */ DISPID(14));
  TAutoArgs<16> _args;
  _args[1] = symbol /*[VT_BSTR:0]*/;
  _args[2] = secType /*[VT_BSTR:0]*/;
  _args[3] = expiry /*[VT_BSTR:0]*/;
  _args[4] = strike /*[VT_R8:0]*/;
  _args[5] = right /*[VT_BSTR:0]*/;
  _args[6] = exchange /*[VT_BSTR:0]*/;
  _args[7] = curency /*[VT_BSTR:0]*/;
  _args[8] = localSymbol /*[VT_BSTR:0]*/;
  _args[9] = marketName /*[VT_BSTR:0]*/;
  _args[10] = tradingClass /*[VT_BSTR:0]*/;
  _args[11] = conId /*[VT_I4:0]*/;
  _args[12] = minTick /*[VT_R8:0]*/;
  _args[13] = priceMagnifier /*[VT_I4:0]*/;
  _args[14] = multiplier /*[VT_BSTR:0]*/;
  _args[15] = orderTypes /*[VT_BSTR:0]*/;
  _args[16] = validExchanges /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::execDetails(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                 BSTR right, BSTR cExchange, BSTR curency, BSTR localSymbol, 
                                 BSTR execId, BSTR time, BSTR acctNumber, BSTR eExchange, BSTR side
                                 , long shares, double price, long permId, long clientId, 
                                 int isLiquidation)
{
  _TDispID _dispid(/* execDetails */ DISPID(15));
  TAutoArgs<19> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = cExchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = localSymbol /*[VT_BSTR:0]*/;
  _args[10] = execId /*[VT_BSTR:0]*/;
  _args[11] = time /*[VT_BSTR:0]*/;
  _args[12] = acctNumber /*[VT_BSTR:0]*/;
  _args[13] = eExchange /*[VT_BSTR:0]*/;
  _args[14] = side /*[VT_BSTR:0]*/;
  _args[15] = shares /*[VT_I4:0]*/;
  _args[16] = price /*[VT_R8:0]*/;
  _args[17] = permId /*[VT_I4:0]*/;
  _args[18] = clientId /*[VT_I4:0]*/;
  _args[19] = isLiquidation /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updateMktDepth(long id, long position, long operation, long side, double price
                                    , long size)
{
  _TDispID _dispid(/* updateMktDepth */ DISPID(16));
  TAutoArgs<6> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = position /*[VT_I4:0]*/;
  _args[3] = operation /*[VT_I4:0]*/;
  _args[4] = side /*[VT_I4:0]*/;
  _args[5] = price /*[VT_R8:0]*/;
  _args[6] = size /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updateMktDepthL2(long id, long position, BSTR marketMaker, long operation, 
                                      long side, double price, long size)
{
  _TDispID _dispid(/* updateMktDepthL2 */ DISPID(17));
  TAutoArgs<7> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = position /*[VT_I4:0]*/;
  _args[3] = marketMaker /*[VT_BSTR:0]*/;
  _args[4] = operation /*[VT_I4:0]*/;
  _args[5] = side /*[VT_I4:0]*/;
  _args[6] = price /*[VT_R8:0]*/;
  _args[7] = size /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updateNewsBulletin(short msgId, short msgType, BSTR message, BSTR origExchange)
{
  _TDispID _dispid(/* updateNewsBulletin */ DISPID(18));
  TAutoArgs<4> _args;
  _args[1] = msgId /*[VT_I2:0]*/;
  _args[2] = msgType /*[VT_I2:0]*/;
  _args[3] = message /*[VT_BSTR:0]*/;
  _args[4] = origExchange /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::managedAccounts(BSTR accountsList)
{
  _TDispID _dispid(/* managedAccounts */ DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = accountsList /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrder3(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                BSTR goodTillDate)
{
  _TDispID _dispid(/* openOrder3 */ DISPID(20));
  TAutoArgs<29> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = exchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = localSymbol /*[VT_BSTR:0]*/;
  _args[10] = action /*[VT_BSTR:0]*/;
  _args[11] = quantity /*[VT_I4:0]*/;
  _args[12] = orderType /*[VT_BSTR:0]*/;
  _args[13] = lmtPrice /*[VT_R8:0]*/;
  _args[14] = auxPrice /*[VT_R8:0]*/;
  _args[15] = tif /*[VT_BSTR:0]*/;
  _args[16] = ocaGroup /*[VT_BSTR:0]*/;
  _args[17] = account /*[VT_BSTR:0]*/;
  _args[18] = openClose /*[VT_BSTR:0]*/;
  _args[19] = origin /*[VT_I4:0]*/;
  _args[20] = orderRef /*[VT_BSTR:0]*/;
  _args[21] = clientId /*[VT_I4:0]*/;
  _args[22] = permId /*[VT_I4:0]*/;
  _args[23] = sharesAllocation /*[VT_BSTR:0]*/;
  _args[24] = faGroup /*[VT_BSTR:0]*/;
  _args[25] = faMethod /*[VT_BSTR:0]*/;
  _args[26] = faPercentage /*[VT_BSTR:0]*/;
  _args[27] = faProfile /*[VT_BSTR:0]*/;
  _args[28] = goodAfterTime /*[VT_BSTR:0]*/;
  _args[29] = goodTillDate /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::receiveFA(long faDataType, BSTR cxml)
{
  _TDispID _dispid(/* receiveFA */ DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = faDataType /*[VT_I4:0]*/;
  _args[2] = cxml /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::historicalData(long reqId, BSTR date, double open, double high, double low, 
                                    double close, long volume, long barCount, double WAP, 
                                    long hasGaps)
{
  _TDispID _dispid(/* historicalData */ DISPID(22));
  TAutoArgs<10> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = date /*[VT_BSTR:0]*/;
  _args[3] = open /*[VT_R8:0]*/;
  _args[4] = high /*[VT_R8:0]*/;
  _args[5] = low /*[VT_R8:0]*/;
  _args[6] = close /*[VT_R8:0]*/;
  _args[7] = volume /*[VT_I4:0]*/;
  _args[8] = barCount /*[VT_I4:0]*/;
  _args[9] = WAP /*[VT_R8:0]*/;
  _args[10] = hasGaps /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrder4(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                BSTR goodTillDate, long ocaType, BSTR rule80A, BSTR settlingFirm, 
                                int allOrNone, long minQty, double percentOffset, int eTradeOnly, 
                                int firmQuoteOnly, double nbboPriceCap, long auctionStrategy, 
                                double startingPrice, double stockRefPrice, double delta, 
                                double stockRangeLower, double stockRangeUpper, int blockOrder, 
                                int sweepToFill, int ignoreRth, int hidden, double discretionaryAmt
                                , long displaySize, long parentId, long triggerMethod, 
                                long shortSaleSlot, BSTR designatedLocation, double volatility, 
                                long volatilityType, BSTR deltaNeutralOrderType, 
                                double deltaNeutralAuxPrice, int continuousUpdate, 
                                int referencePriceType, double trailStopPrice, double basisPoints, 
                                long basisPointsType, BSTR legsStr, long scaleInitLevelSize, 
                                long scaleSubsLevelSize, double scalePriceIncrement)
{
  _TDispID _dispid(/* openOrder4 */ DISPID(23));
  TAutoArgs<67> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = symbol /*[VT_BSTR:0]*/;
  _args[3] = secType /*[VT_BSTR:0]*/;
  _args[4] = expiry /*[VT_BSTR:0]*/;
  _args[5] = strike /*[VT_R8:0]*/;
  _args[6] = right /*[VT_BSTR:0]*/;
  _args[7] = exchange /*[VT_BSTR:0]*/;
  _args[8] = curency /*[VT_BSTR:0]*/;
  _args[9] = localSymbol /*[VT_BSTR:0]*/;
  _args[10] = action /*[VT_BSTR:0]*/;
  _args[11] = quantity /*[VT_I4:0]*/;
  _args[12] = orderType /*[VT_BSTR:0]*/;
  _args[13] = lmtPrice /*[VT_R8:0]*/;
  _args[14] = auxPrice /*[VT_R8:0]*/;
  _args[15] = tif /*[VT_BSTR:0]*/;
  _args[16] = ocaGroup /*[VT_BSTR:0]*/;
  _args[17] = account /*[VT_BSTR:0]*/;
  _args[18] = openClose /*[VT_BSTR:0]*/;
  _args[19] = origin /*[VT_I4:0]*/;
  _args[20] = orderRef /*[VT_BSTR:0]*/;
  _args[21] = clientId /*[VT_I4:0]*/;
  _args[22] = permId /*[VT_I4:0]*/;
  _args[23] = sharesAllocation /*[VT_BSTR:0]*/;
  _args[24] = faGroup /*[VT_BSTR:0]*/;
  _args[25] = faMethod /*[VT_BSTR:0]*/;
  _args[26] = faPercentage /*[VT_BSTR:0]*/;
  _args[27] = faProfile /*[VT_BSTR:0]*/;
  _args[28] = goodAfterTime /*[VT_BSTR:0]*/;
  _args[29] = goodTillDate /*[VT_BSTR:0]*/;
  _args[30] = ocaType /*[VT_I4:0]*/;
  _args[31] = rule80A /*[VT_BSTR:0]*/;
  _args[32] = settlingFirm /*[VT_BSTR:0]*/;
  _args[33] = allOrNone /*[VT_INT:0]*/;
  _args[34] = minQty /*[VT_I4:0]*/;
  _args[35] = percentOffset /*[VT_R8:0]*/;
  _args[36] = eTradeOnly /*[VT_INT:0]*/;
  _args[37] = firmQuoteOnly /*[VT_INT:0]*/;
  _args[38] = nbboPriceCap /*[VT_R8:0]*/;
  _args[39] = auctionStrategy /*[VT_I4:0]*/;
  _args[40] = startingPrice /*[VT_R8:0]*/;
  _args[41] = stockRefPrice /*[VT_R8:0]*/;
  _args[42] = delta /*[VT_R8:0]*/;
  _args[43] = stockRangeLower /*[VT_R8:0]*/;
  _args[44] = stockRangeUpper /*[VT_R8:0]*/;
  _args[45] = blockOrder /*[VT_INT:0]*/;
  _args[46] = sweepToFill /*[VT_INT:0]*/;
  _args[47] = ignoreRth /*[VT_INT:0]*/;
  _args[48] = hidden /*[VT_INT:0]*/;
  _args[49] = discretionaryAmt /*[VT_R8:0]*/;
  _args[50] = displaySize /*[VT_I4:0]*/;
  _args[51] = parentId /*[VT_I4:0]*/;
  _args[52] = triggerMethod /*[VT_I4:0]*/;
  _args[53] = shortSaleSlot /*[VT_I4:0]*/;
  _args[54] = designatedLocation /*[VT_BSTR:0]*/;
  _args[55] = volatility /*[VT_R8:0]*/;
  _args[56] = volatilityType /*[VT_I4:0]*/;
  _args[57] = deltaNeutralOrderType /*[VT_BSTR:0]*/;
  _args[58] = deltaNeutralAuxPrice /*[VT_R8:0]*/;
  _args[59] = continuousUpdate /*[VT_INT:0]*/;
  _args[60] = referencePriceType /*[VT_INT:0]*/;
  _args[61] = trailStopPrice /*[VT_R8:0]*/;
  _args[62] = basisPoints /*[VT_R8:0]*/;
  _args[63] = basisPointsType /*[VT_I4:0]*/;
  _args[64] = legsStr /*[VT_BSTR:0]*/;
  _args[65] = scaleInitLevelSize /*[VT_I4:0]*/;
  _args[66] = scaleSubsLevelSize /*[VT_I4:0]*/;
  _args[67] = scalePriceIncrement /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::bondContractDetails(BSTR symbol, BSTR secType, BSTR cusip, double coupon, 
                                         BSTR maturity, BSTR issueDate, BSTR ratings, BSTR bondType
                                         , BSTR couponType, long convertible, long callable, 
                                         long putable, BSTR descAppend, BSTR exchange, BSTR curency
                                         , BSTR marketName, BSTR tradingClass, long conId, 
                                         double minTick, BSTR orderTypes, BSTR validExchanges, 
                                         BSTR nextOptionDate, BSTR nextOptionType, 
                                         long nextOptionPartial, BSTR notes)
{
  _TDispID _dispid(/* bondContractDetails */ DISPID(24));
  TAutoArgs<25> _args;
  _args[1] = symbol /*[VT_BSTR:0]*/;
  _args[2] = secType /*[VT_BSTR:0]*/;
  _args[3] = cusip /*[VT_BSTR:0]*/;
  _args[4] = coupon /*[VT_R8:0]*/;
  _args[5] = maturity /*[VT_BSTR:0]*/;
  _args[6] = issueDate /*[VT_BSTR:0]*/;
  _args[7] = ratings /*[VT_BSTR:0]*/;
  _args[8] = bondType /*[VT_BSTR:0]*/;
  _args[9] = couponType /*[VT_BSTR:0]*/;
  _args[10] = convertible /*[VT_I4:0]*/;
  _args[11] = callable /*[VT_I4:0]*/;
  _args[12] = putable /*[VT_I4:0]*/;
  _args[13] = descAppend /*[VT_BSTR:0]*/;
  _args[14] = exchange /*[VT_BSTR:0]*/;
  _args[15] = curency /*[VT_BSTR:0]*/;
  _args[16] = marketName /*[VT_BSTR:0]*/;
  _args[17] = tradingClass /*[VT_BSTR:0]*/;
  _args[18] = conId /*[VT_I4:0]*/;
  _args[19] = minTick /*[VT_R8:0]*/;
  _args[20] = orderTypes /*[VT_BSTR:0]*/;
  _args[21] = validExchanges /*[VT_BSTR:0]*/;
  _args[22] = nextOptionDate /*[VT_BSTR:0]*/;
  _args[23] = nextOptionType /*[VT_BSTR:0]*/;
  _args[24] = nextOptionPartial /*[VT_I4:0]*/;
  _args[25] = notes /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::scannerParameters(BSTR xml)
{
  _TDispID _dispid(/* scannerParameters */ DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = xml /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::scannerData(long reqId, long rank, BSTR symbol, BSTR secType, BSTR expiry, 
                                 double strike, BSTR right, BSTR exchange, BSTR curency, 
                                 BSTR localSymbol, BSTR marketName, BSTR tradingClass, BSTR distance
                                 , BSTR benchmark, BSTR projection, BSTR legsStr)
{
  _TDispID _dispid(/* scannerData */ DISPID(26));
  TAutoArgs<16> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = rank /*[VT_I4:0]*/;
  _args[3] = symbol /*[VT_BSTR:0]*/;
  _args[4] = secType /*[VT_BSTR:0]*/;
  _args[5] = expiry /*[VT_BSTR:0]*/;
  _args[6] = strike /*[VT_R8:0]*/;
  _args[7] = right /*[VT_BSTR:0]*/;
  _args[8] = exchange /*[VT_BSTR:0]*/;
  _args[9] = curency /*[VT_BSTR:0]*/;
  _args[10] = localSymbol /*[VT_BSTR:0]*/;
  _args[11] = marketName /*[VT_BSTR:0]*/;
  _args[12] = tradingClass /*[VT_BSTR:0]*/;
  _args[13] = distance /*[VT_BSTR:0]*/;
  _args[14] = benchmark /*[VT_BSTR:0]*/;
  _args[15] = projection /*[VT_BSTR:0]*/;
  _args[16] = legsStr /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickOptionComputation(long id, long tickType, double impliedVol, double delta, 
                                           double modelPrice, double pvDividend)
{
  _TDispID _dispid(/* tickOptionComputation */ DISPID(27));
  TAutoArgs<6> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = tickType /*[VT_I4:0]*/;
  _args[3] = impliedVol /*[VT_R8:0]*/;
  _args[4] = delta /*[VT_R8:0]*/;
  _args[5] = modelPrice /*[VT_R8:0]*/;
  _args[6] = pvDividend /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickGeneric(long id, long tickType, double value)
{
  _TDispID _dispid(/* tickGeneric */ DISPID(28));
  TAutoArgs<3> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = tickType /*[VT_I4:0]*/;
  _args[3] = value /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickString(long id, long tickType, BSTR value)
{
  _TDispID _dispid(/* tickString */ DISPID(29));
  TAutoArgs<3> _args;
  _args[1] = id /*[VT_I4:0]*/;
  _args[2] = tickType /*[VT_I4:0]*/;
  _args[3] = value /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickEFP(long tickerId, long field, double basisPoints, 
                             BSTR formattedBasisPoints, double totalDividends, long holdDays, 
                             BSTR futureExpiry, double dividendImpact, double dividendsToExpiry)
{
  _TDispID _dispid(/* tickEFP */ DISPID(30));
  TAutoArgs<9> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = field /*[VT_I4:0]*/;
  _args[3] = basisPoints /*[VT_R8:0]*/;
  _args[4] = formattedBasisPoints /*[VT_BSTR:0]*/;
  _args[5] = totalDividends /*[VT_R8:0]*/;
  _args[6] = holdDays /*[VT_I4:0]*/;
  _args[7] = futureExpiry /*[VT_BSTR:0]*/;
  _args[8] = dividendImpact /*[VT_R8:0]*/;
  _args[9] = dividendsToExpiry /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::realtimeBar(long tickerId, long time, double open, double high, double low, 
                                 double close, long volume, double WAP, long Count)
{
  _TDispID _dispid(/* realtimeBar */ DISPID(31));
  TAutoArgs<9> _args;
  _args[1] = tickerId /*[VT_I4:0]*/;
  _args[2] = time /*[VT_I4:0]*/;
  _args[3] = open /*[VT_R8:0]*/;
  _args[4] = high /*[VT_R8:0]*/;
  _args[5] = low /*[VT_R8:0]*/;
  _args[6] = close /*[VT_R8:0]*/;
  _args[7] = volume /*[VT_I4:0]*/;
  _args[8] = WAP /*[VT_R8:0]*/;
  _args[9] = Count /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::currentTime(long time)
{
  _TDispID _dispid(/* currentTime */ DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = time /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::scannerDataEnd(long reqId)
{
  _TDispID _dispid(/* scannerDataEnd */ DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::fundamentalData(long reqId, BSTR data)
{
  _TDispID _dispid(/* fundamentalData */ DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::contractDetailsEnd(long reqId)
{
  _TDispID _dispid(/* contractDetailsEnd */ DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrderEnd()
{
  _TDispID _dispid(/* openOrderEnd */ DISPID(36));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::accountDownloadEnd(BSTR accountName)
{
  _TDispID _dispid(/* accountDownloadEnd */ DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = accountName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::execDetailsEnd(long reqId)
{
  _TDispID _dispid(/* execDetailsEnd */ DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::deltaNeutralValidation(long reqId, Twslib_tlb::IUnderComp* underComp)
{
  _TDispID _dispid(/* deltaNeutralValidation */ DISPID(39));
  TAutoArgs<2> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IUnderComp*)underComp /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::tickSnapshotEnd(long reqId)
{
  _TDispID _dispid(/* tickSnapshotEnd */ DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::contractDetailsEx(long reqId, Twslib_tlb::IContractDetails* contractDetails)
{
  _TDispID _dispid(/* contractDetailsEx */ DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContractDetails*)contractDetails /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::openOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                                 Twslib_tlb::IOrder* order, Twslib_tlb::IOrderState* orderState)
{
  _TDispID _dispid(/* openOrderEx */ DISPID(101));
  TAutoArgs<4> _args;
  _args[1] = orderId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Twslib_tlb::IOrder*)order /*[VT_USERDEFINED:1]*/;
  _args[4] = (LPDISPATCH)(Twslib_tlb::IOrderState*)orderState /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::execDetailsEx(long reqId, Twslib_tlb::IContract* contract, 
                                   Twslib_tlb::IExecution* execution)
{
  _TDispID _dispid(/* execDetailsEx */ DISPID(102));
  TAutoArgs<3> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[3] = (LPDISPATCH)(Twslib_tlb::IExecution*)execution /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::updatePortfolioEx(Twslib_tlb::IContract* contract, long position, 
                                       double marketPrice, double marketValue, double averageCost, 
                                       double unrealizedPNL, double realizedPNL, BSTR accountName)
{
  _TDispID _dispid(/* updatePortfolioEx */ DISPID(103));
  TAutoArgs<8> _args;
  _args[1] = (LPDISPATCH)(Twslib_tlb::IContract*)contract /*[VT_USERDEFINED:1]*/;
  _args[2] = position /*[VT_I4:0]*/;
  _args[3] = marketPrice /*[VT_R8:0]*/;
  _args[4] = marketValue /*[VT_R8:0]*/;
  _args[5] = averageCost /*[VT_R8:0]*/;
  _args[6] = unrealizedPNL /*[VT_R8:0]*/;
  _args[7] = realizedPNL /*[VT_R8:0]*/;
  _args[8] = accountName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DTwsEventsDispT<T>::scannerDataEx(long reqId, long rank, 
                                   Twslib_tlb::IContractDetails* contractDetails, BSTR distance, 
                                   BSTR benchmark, BSTR projection, BSTR legsStr)
{
  _TDispID _dispid(/* scannerDataEx */ DISPID(104));
  TAutoArgs<7> _args;
  _args[1] = reqId /*[VT_I4:0]*/;
  _args[2] = rank /*[VT_I4:0]*/;
  _args[3] = (LPDISPATCH)(Twslib_tlb::IContractDetails*)contractDetails /*[VT_USERDEFINED:1]*/;
  _args[4] = distance /*[VT_BSTR:0]*/;
  _args[5] = benchmark /*[VT_BSTR:0]*/;
  _args[6] = projection /*[VT_BSTR:0]*/;
  _args[7] = legsStr /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Tws
// Event Interface : _DTwsEvents
// *********************************************************************//
template <class T>
class TEvents_Tws : public IConnectionPointImpl<T,
                                                 &DIID__DTwsEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_tickPrice(long id, long tickType, double price, int canAutoExecute);
  void            Fire_tickSize(long id, long tickType, long size);
  void            Fire_connectionClosed(void);
  void            Fire_openOrder1(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                  BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol);
  void            Fire_openOrder2(long id, BSTR action, long quantity, BSTR orderType, 
                                  double lmtPrice, double auxPrice, BSTR tif, BSTR ocaGroup, 
                                  BSTR account, BSTR openClose, long origin, BSTR orderRef, 
                                  long clientId);
  void            Fire_updateAccountTime(BSTR timeStamp);
  void            Fire_updateAccountValue(BSTR key, BSTR value, BSTR curency, BSTR accountName);
  void            Fire_nextValidId(long id);
  void            Fire_permId(long id, long permId);
  void            Fire_errMsg(long id, long errorCode, BSTR errorMsg);
  void            Fire_updatePortfolio(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                       BSTR right, BSTR curency, BSTR localSymbol, long position, 
                                       double marketPrice, double marketValue, double averageCost, 
                                       double unrealizedPNL, double realizedPNL, BSTR accountName);
  void            Fire_orderStatus(long id, BSTR status, long filled, long remaining, 
                                   double avgFillPrice, long permId, long parentId, 
                                   double lastFillPrice, long clientId, BSTR whyHeld);
  void            Fire_contractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                       BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                       BSTR marketName, BSTR tradingClass, long conId, 
                                       double minTick, long priceMagnifier, BSTR multiplier, 
                                       BSTR orderTypes, BSTR validExchanges);
  void            Fire_execDetails(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                   BSTR right, BSTR cExchange, BSTR curency, BSTR localSymbol, 
                                   BSTR execId, BSTR time, BSTR acctNumber, BSTR eExchange, 
                                   BSTR side, long shares, double price, long permId, long clientId, 
                                   int isLiquidation);
  void            Fire_updateMktDepth(long id, long position, long operation, long side, 
                                      double price, long size);
  void            Fire_updateMktDepthL2(long id, long position, BSTR marketMaker, long operation, 
                                        long side, double price, long size);
  void            Fire_updateNewsBulletin(short msgId, short msgType, BSTR message, 
                                          BSTR origExchange);
  void            Fire_managedAccounts(BSTR accountsList);
  void            Fire_openOrder3(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                  BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                  BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                  double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                  BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                  long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                  BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                  BSTR goodTillDate);
  void            Fire_receiveFA(long faDataType, BSTR cxml);
  void            Fire_historicalData(long reqId, BSTR date, double open, double high, double low, 
                                      double close, long volume, long barCount, double WAP, 
                                      long hasGaps);
  void            Fire_openOrder4(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                  BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                  BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                  double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                  BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                  long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                  BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                  BSTR goodTillDate, long ocaType, BSTR rule80A, BSTR settlingFirm, 
                                  int allOrNone, long minQty, double percentOffset, int eTradeOnly, 
                                  int firmQuoteOnly, double nbboPriceCap, long auctionStrategy, 
                                  double startingPrice, double stockRefPrice, double delta, 
                                  double stockRangeLower, double stockRangeUpper, int blockOrder, 
                                  int sweepToFill, int ignoreRth, int hidden, 
                                  double discretionaryAmt, long displaySize, long parentId, 
                                  long triggerMethod, long shortSaleSlot, BSTR designatedLocation, 
                                  double volatility, long volatilityType, BSTR deltaNeutralOrderType, 
                                  double deltaNeutralAuxPrice, int continuousUpdate, 
                                  int referencePriceType, double trailStopPrice, double basisPoints, 
                                  long basisPointsType, BSTR legsStr, long scaleInitLevelSize, 
                                  long scaleSubsLevelSize, double scalePriceIncrement);
  void            Fire_bondContractDetails(BSTR symbol, BSTR secType, BSTR cusip, double coupon, 
                                           BSTR maturity, BSTR issueDate, BSTR ratings, 
                                           BSTR bondType, BSTR couponType, long convertible, 
                                           long callable, long putable, BSTR descAppend, 
                                           BSTR exchange, BSTR curency, BSTR marketName, 
                                           BSTR tradingClass, long conId, double minTick, 
                                           BSTR orderTypes, BSTR validExchanges, BSTR nextOptionDate, 
                                           BSTR nextOptionType, long nextOptionPartial, BSTR notes);
  void            Fire_scannerParameters(BSTR xml);
  void            Fire_scannerData(long reqId, long rank, BSTR symbol, BSTR secType, BSTR expiry, 
                                   double strike, BSTR right, BSTR exchange, BSTR curency, 
                                   BSTR localSymbol, BSTR marketName, BSTR tradingClass, 
                                   BSTR distance, BSTR benchmark, BSTR projection, BSTR legsStr);
  void            Fire_tickOptionComputation(long id, long tickType, double impliedVol, double delta, 
                                             double modelPrice, double pvDividend);
  void            Fire_tickGeneric(long id, long tickType, double value);
  void            Fire_tickString(long id, long tickType, BSTR value);
  void            Fire_tickEFP(long tickerId, long field, double basisPoints, 
                               BSTR formattedBasisPoints, double totalDividends, long holdDays, 
                               BSTR futureExpiry, double dividendImpact, double dividendsToExpiry);
  void            Fire_realtimeBar(long tickerId, long time, double open, double high, double low, 
                                   double close, long volume, double WAP, long Count);
  void            Fire_currentTime(long time);
  void            Fire_scannerDataEnd(long reqId);
  void            Fire_fundamentalData(long reqId, BSTR data);
  void            Fire_contractDetailsEnd(long reqId);
  void            Fire_openOrderEnd(void);
  void            Fire_accountDownloadEnd(BSTR accountName);
  void            Fire_execDetailsEnd(long reqId);
  void            Fire_deltaNeutralValidation(long reqId, Twslib_tlb::IUnderComp* underComp);
  void            Fire_tickSnapshotEnd(long reqId);
  void            Fire_contractDetailsEx(long reqId, Twslib_tlb::IContractDetails* contractDetails);
  void            Fire_openOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                                   Twslib_tlb::IOrder* order, Twslib_tlb::IOrderState* orderState);
  void            Fire_execDetailsEx(long reqId, Twslib_tlb::IContract* contract, 
                                     Twslib_tlb::IExecution* execution);
  void            Fire_updatePortfolioEx(Twslib_tlb::IContract* contract, long position, 
                                         double marketPrice, double marketValue, double averageCost, 
                                         double unrealizedPNL, double realizedPNL, BSTR accountName);
  void            Fire_scannerDataEx(long reqId, long rank, 
                                     Twslib_tlb::IContractDetails* contractDetails, BSTR distance, 
                                     BSTR benchmark, BSTR projection, BSTR legsStr);
protected:
  _DTwsEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Tws<T>::Fire_tickPrice(long id, long tickType, double price, int canAutoExecute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickPrice(id, tickType, price, canAutoExecute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickSize(long id, long tickType, long size)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickSize(id, tickType, size);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_connectionClosed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.connectionClosed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrder1(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrder1(id, symbol, secType, expiry, strike, right, exchange, curency, 
                                localSymbol);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrder2(long id, BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrder2(id, action, quantity, orderType, lmtPrice, auxPrice, tif, ocaGroup, 
                                account, openClose, origin, orderRef, clientId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updateAccountTime(BSTR timeStamp)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updateAccountTime(timeStamp);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updateAccountValue(BSTR key, BSTR value, BSTR curency, BSTR accountName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updateAccountValue(key, value, curency, accountName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_nextValidId(long id)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.nextValidId(id);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_permId(long id, long permId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.permId(id, permId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_errMsg(long id, long errorCode, BSTR errorMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.errMsg(id, errorCode, errorMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updatePortfolio(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                     BSTR right, BSTR curency, BSTR localSymbol, long position, 
                                     double marketPrice, double marketValue, double averageCost, 
                                     double unrealizedPNL, double realizedPNL, BSTR accountName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updatePortfolio(symbol, secType, expiry, strike, right, curency, localSymbol, 
                                     position, marketPrice, marketValue, averageCost, unrealizedPNL, 
                                     realizedPNL, accountName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_orderStatus(long id, BSTR status, long filled, long remaining, 
                                 double avgFillPrice, long permId, long parentId, 
                                 double lastFillPrice, long clientId, BSTR whyHeld)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.orderStatus(id, status, filled, remaining, avgFillPrice, permId, parentId, 
                                 lastFillPrice, clientId, whyHeld);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_contractDetails(BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                     BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                     BSTR marketName, BSTR tradingClass, long conId, double minTick, 
                                     long priceMagnifier, BSTR multiplier, BSTR orderTypes, 
                                     BSTR validExchanges)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.contractDetails(symbol, secType, expiry, strike, right, exchange, curency, 
                                     localSymbol, marketName, tradingClass, conId, minTick, 
                                     priceMagnifier, multiplier, orderTypes, validExchanges);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_execDetails(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                 BSTR right, BSTR cExchange, BSTR curency, BSTR localSymbol, 
                                 BSTR execId, BSTR time, BSTR acctNumber, BSTR eExchange, BSTR side, 
                                 long shares, double price, long permId, long clientId, 
                                 int isLiquidation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.execDetails(id, symbol, secType, expiry, strike, right, cExchange, curency, 
                                 localSymbol, execId, time, acctNumber, eExchange, side, shares, 
                                 price, permId, clientId, isLiquidation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updateMktDepth(long id, long position, long operation, long side, double price, 
                                    long size)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updateMktDepth(id, position, operation, side, price, size);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updateMktDepthL2(long id, long position, BSTR marketMaker, long operation, 
                                      long side, double price, long size)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updateMktDepthL2(id, position, marketMaker, operation, side, price, size);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updateNewsBulletin(short msgId, short msgType, BSTR message, BSTR origExchange)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updateNewsBulletin(msgId, msgType, message, origExchange);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_managedAccounts(BSTR accountsList)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.managedAccounts(accountsList);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrder3(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                BSTR goodTillDate)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrder3(id, symbol, secType, expiry, strike, right, exchange, curency, 
                                localSymbol, action, quantity, orderType, lmtPrice, auxPrice, tif, 
                                ocaGroup, account, openClose, origin, orderRef, clientId, permId, 
                                sharesAllocation, faGroup, faMethod, faPercentage, faProfile, 
                                goodAfterTime, goodTillDate);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_receiveFA(long faDataType, BSTR cxml)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.receiveFA(faDataType, cxml);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_historicalData(long reqId, BSTR date, double open, double high, double low, 
                                    double close, long volume, long barCount, double WAP, 
                                    long hasGaps)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.historicalData(reqId, date, open, high, low, close, volume, barCount, WAP, 
                                    hasGaps);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrder4(long id, BSTR symbol, BSTR secType, BSTR expiry, double strike, 
                                BSTR right, BSTR exchange, BSTR curency, BSTR localSymbol, 
                                BSTR action, long quantity, BSTR orderType, double lmtPrice, 
                                double auxPrice, BSTR tif, BSTR ocaGroup, BSTR account, 
                                BSTR openClose, long origin, BSTR orderRef, long clientId, 
                                long permId, BSTR sharesAllocation, BSTR faGroup, BSTR faMethod, 
                                BSTR faPercentage, BSTR faProfile, BSTR goodAfterTime, 
                                BSTR goodTillDate, long ocaType, BSTR rule80A, BSTR settlingFirm, 
                                int allOrNone, long minQty, double percentOffset, int eTradeOnly, 
                                int firmQuoteOnly, double nbboPriceCap, long auctionStrategy, 
                                double startingPrice, double stockRefPrice, double delta, 
                                double stockRangeLower, double stockRangeUpper, int blockOrder, 
                                int sweepToFill, int ignoreRth, int hidden, double discretionaryAmt, 
                                long displaySize, long parentId, long triggerMethod, 
                                long shortSaleSlot, BSTR designatedLocation, double volatility, 
                                long volatilityType, BSTR deltaNeutralOrderType, 
                                double deltaNeutralAuxPrice, int continuousUpdate, 
                                int referencePriceType, double trailStopPrice, double basisPoints, 
                                long basisPointsType, BSTR legsStr, long scaleInitLevelSize, 
                                long scaleSubsLevelSize, double scalePriceIncrement)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrder4(id, symbol, secType, expiry, strike, right, exchange, curency, 
                                localSymbol, action, quantity, orderType, lmtPrice, auxPrice, tif, 
                                ocaGroup, account, openClose, origin, orderRef, clientId, permId, 
                                sharesAllocation, faGroup, faMethod, faPercentage, faProfile, 
                                goodAfterTime, goodTillDate, ocaType, rule80A, settlingFirm, 
                                allOrNone, minQty, percentOffset, eTradeOnly, firmQuoteOnly, 
                                nbboPriceCap, auctionStrategy, startingPrice, stockRefPrice, delta, 
                                stockRangeLower, stockRangeUpper, blockOrder, sweepToFill, ignoreRth, 
                                hidden, discretionaryAmt, displaySize, parentId, triggerMethod, 
                                shortSaleSlot, designatedLocation, volatility, volatilityType, 
                                deltaNeutralOrderType, deltaNeutralAuxPrice, continuousUpdate, 
                                referencePriceType, trailStopPrice, basisPoints, basisPointsType, 
                                legsStr, scaleInitLevelSize, scaleSubsLevelSize, scalePriceIncrement);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_bondContractDetails(BSTR symbol, BSTR secType, BSTR cusip, double coupon, 
                                         BSTR maturity, BSTR issueDate, BSTR ratings, BSTR bondType, 
                                         BSTR couponType, long convertible, long callable, 
                                         long putable, BSTR descAppend, BSTR exchange, BSTR curency, 
                                         BSTR marketName, BSTR tradingClass, long conId, 
                                         double minTick, BSTR orderTypes, BSTR validExchanges, 
                                         BSTR nextOptionDate, BSTR nextOptionType, 
                                         long nextOptionPartial, BSTR notes)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.bondContractDetails(symbol, secType, cusip, coupon, maturity, issueDate, 
                                         ratings, bondType, couponType, convertible, callable, 
                                         putable, descAppend, exchange, curency, marketName, 
                                         tradingClass, conId, minTick, orderTypes, validExchanges, 
                                         nextOptionDate, nextOptionType, nextOptionPartial, notes);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_scannerParameters(BSTR xml)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.scannerParameters(xml);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_scannerData(long reqId, long rank, BSTR symbol, BSTR secType, BSTR expiry, 
                                 double strike, BSTR right, BSTR exchange, BSTR curency, 
                                 BSTR localSymbol, BSTR marketName, BSTR tradingClass, BSTR distance, 
                                 BSTR benchmark, BSTR projection, BSTR legsStr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.scannerData(reqId, rank, symbol, secType, expiry, strike, right, exchange, 
                                 curency, localSymbol, marketName, tradingClass, distance, benchmark, 
                                 projection, legsStr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickOptionComputation(long id, long tickType, double impliedVol, double delta, 
                                           double modelPrice, double pvDividend)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickOptionComputation(id, tickType, impliedVol, delta, modelPrice, pvDividend);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickGeneric(long id, long tickType, double value)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickGeneric(id, tickType, value);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickString(long id, long tickType, BSTR value)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickString(id, tickType, value);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickEFP(long tickerId, long field, double basisPoints, 
                             BSTR formattedBasisPoints, double totalDividends, long holdDays, 
                             BSTR futureExpiry, double dividendImpact, double dividendsToExpiry)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickEFP(tickerId, field, basisPoints, formattedBasisPoints, totalDividends, 
                             holdDays, futureExpiry, dividendImpact, dividendsToExpiry);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_realtimeBar(long tickerId, long time, double open, double high, double low, 
                                 double close, long volume, double WAP, long Count)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.realtimeBar(tickerId, time, open, high, low, close, volume, WAP, Count);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_currentTime(long time)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.currentTime(time);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_scannerDataEnd(long reqId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.scannerDataEnd(reqId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_fundamentalData(long reqId, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.fundamentalData(reqId, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_contractDetailsEnd(long reqId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.contractDetailsEnd(reqId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrderEnd(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrderEnd();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_accountDownloadEnd(BSTR accountName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.accountDownloadEnd(accountName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_execDetailsEnd(long reqId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.execDetailsEnd(reqId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_deltaNeutralValidation(long reqId, Twslib_tlb::IUnderComp* underComp)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.deltaNeutralValidation(reqId, underComp);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_tickSnapshotEnd(long reqId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.tickSnapshotEnd(reqId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_contractDetailsEx(long reqId, Twslib_tlb::IContractDetails* contractDetails)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.contractDetailsEx(reqId, contractDetails);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_openOrderEx(long orderId, Twslib_tlb::IContract* contract, 
                                 Twslib_tlb::IOrder* order, Twslib_tlb::IOrderState* orderState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.openOrderEx(orderId, contract, order, orderState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_execDetailsEx(long reqId, Twslib_tlb::IContract* contract, 
                                   Twslib_tlb::IExecution* execution)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.execDetailsEx(reqId, contract, execution);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_updatePortfolioEx(Twslib_tlb::IContract* contract, long position, 
                                       double marketPrice, double marketValue, double averageCost, 
                                       double unrealizedPNL, double realizedPNL, BSTR accountName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.updatePortfolioEx(contract, position, marketPrice, marketValue, averageCost, 
                                       unrealizedPNL, realizedPNL, accountName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Tws<T>::Fire_scannerDataEx(long reqId, long rank, 
                                   Twslib_tlb::IContractDetails* contractDetails, BSTR distance, 
                                   BSTR benchmark, BSTR projection, BSTR legsStr)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.scannerDataEx(reqId, rank, contractDetails, distance, benchmark, projection, 
                                   legsStr);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Twslib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Twslib_tlb;
#endif

#pragma option pop

#endif // TWSLib_TLBH
